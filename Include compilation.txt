*****************************************************************
*   THIS FILE IS GENERATED BY THE FUNCTION LIBRARY.             *
*   NEVER CHANGE IT MANUALLY, PLEASE!                           *
*****************************************************************
INCLUDE /CGDC/LCLRQMU04.
                    "/CGDC/CLRQ_PROCESS
INCLUDE /CGDC/LCLRQMU05.
                    "/CGDC/CLRQ_RTBC_PROCESS
INCLUDE /CGDC/LCLRQMU02.
                    "/CGDC/CLRQ_REPRICE_UPDATE
INCLUDE /CGDC/LCLRQMU03.
                    "/CGDC/CLRQ_PRICE_CHNG_KEY_UPD
INCLUDE /CGDC/LCLRQMU06.
                    "/CGDC/CLRQ_GET_UI_DATA
INCLUDE /CGDC/LCLRQMU07.
                    "/CGDC/CLRQ_COST_SHEET_PREPARE
INCLUDE /CGDC/LCLRQMU08.
                    "/CGDC/CLRQ_SHOW_MESSAGES
INCLUDE /CGDC/LCLRQMU09.
                    "/CGDC/CLRQ_DATA_GET
INCLUDE /CGDC/LCLRQMU10.
                    "/CGDC/CLRQ_GET_MANU_ITM_DATA
INCLUDE /CGDC/LCLRQMU11.
                    "/CGDC/CLRQ_RTB_PRL_PROCESS
INCLUDE /CGDC/LCLRQMU12.
                    "/CGDC/CLRQ_RTB_BLK_SIZE
INCLUDE /CGDC/LCLRQMU13.
                    "/CGDC/CLRQ_RTB_PRL_REPRICE
INCLUDE /CGDC/LCLRQMU14.
                    "/CGDC/CLRQ_UPDATE_COSTLINES
INCLUDE /CGDC/LCLRQMU16.
                    "/CGDC/CLRQ_COND_CHANGE_UPD
INCLUDE /CGDC/LCLRQMU15.
                    "/CGDC/CLRQ_BDR_REJECT
INCLUDE /CGDC/LCLRQMU18.
                    "/CGDC/CLRQ_RTBC_PROCESS_UPDATE
INCLUDE /CGDC/LCLRQMU01.
                    "/CGDC/RTB_PRL_VALIDATE_CLRQ
INCLUDE /CGDC/LCLRQMU20.
                    "/CGDC/RTB_VALIDATE_CLRQ
INCLUDE /CGDC/LCLRQMU21.
                    "/CGDC/CLRQ_BE_EVAL
INCLUDE /CGDC/LCLRQMU22.
                    "/CGDC/BLKLOG_SET_CR_GLOBAL_LOG
INCLUDE /CGDC/LCLRQMU17.
                    "/CGDC/CLRQ_TRGR_REAL_TIME_PRCS

*&---------------------------------------------------------------------*
*& Include          /CGDC/LBSEL_DD
*&---------------------------------------------------------------------*

TABLES: rsdsintern.
 SELECTION-SCREEN BEGIN OF SCREEN 0122.

   SELECT-OPTIONS: so_value FOR rsdsintern-selopt MODIF ID 001 .

 SELECTION-SCREEN END OF SCREEN 0122.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMCLS
**********************************************************


*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMCLS
*&---------------------------------------------------------------------*

CLASS lcl_event_handler DEFINITION.

  PUBLIC SECTION.

    METHODS:

      on_calc_req_wl_toolbar            FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_calc_req_wl_hotspot_click      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,

      on_calc_req_wl_user_command       FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

*** Calculation Request Items Grid
      on_calc_req_itm_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_calc_req_itm_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      on_calc_req_itm_button_clk        FOR EVENT data_changed
        OF cl_gui_alv_grid
        IMPORTING er_data_changed e_onf4 e_onf4_before e_onf4_after,

      on_calc_req_itm_hotspot_click      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,

***  Billing Preview
      on_bill_pre_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_bill_pre_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      on_bill_pre_hotspot_click      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,

      on_bill_pre_data_changed       FOR EVENT data_changed
        OF cl_gui_alv_grid
        IMPORTING er_data_changed e_ucomm,
****Billing History ALV


      on_bill_hist_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_bill_hist_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      on_bill_hist_hotspot_click      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,


***  Subitem alV
      on_req_calc_subitm_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_req_calc_subitm_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      on_req_calc_subitm_hotspot      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,
*** Pricing Update ALV
      on_req_calc_upd_prc_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_req_calc_upd_prc_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      on_req_calc_upd_prc_hotspot      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,
**** Calc Group Grid

      on_calc_grp_toolbar            FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_calc_grp_hotspot_click      FOR EVENT hotspot_click
        OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id es_row_no,

     on_calc_grp_user_command       FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,

 on_bill_prev_user_command       FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,


* ****Postpone Alv
      on_postpone_toolbar           FOR EVENT toolbar
        OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      on_postpone_user_cmd          FOR EVENT user_command
        OF cl_gui_alv_grid
        IMPORTING e_ucomm,
      on_postpone_handle_change FOR EVENT data_changed
      OF cl_gui_alv_grid IMPORTING er_data_changed e_onf4 e_ucomm,

  "Postpone untill reason code f4 "DCLM-4307
      on_postpone_f4 FOR EVENT onf4 OF cl_gui_alv_grid
        IMPORTING sender
                  e_fieldname
                  e_fieldvalue
                  es_row_no
                  er_event_data
                  et_bad_cells
                  e_display,
    "" Manual Item Creation
      on_man_itm_f4 FOR EVENT onf4 OF cl_gui_alv_grid
        IMPORTING sender
                  e_fieldname
                  e_fieldvalue
                  es_row_no
                  er_event_data
                  et_bad_cells
                  e_display,

      on_man_itm_handle_change FOR EVENT data_changed
      OF cl_gui_alv_grid IMPORTING er_data_changed e_onf4 e_ucomm,

      on_enter FOR EVENT on_enter
        OF /cgdc/cl_bsel_services,

       on_messages_user_command  FOR EVENT user_command
                                  OF cl_gui_alv_grid
                                  IMPORTING e_ucomm,

    on_messages_button_click FOR EVENT button_click
                                OF cl_gui_alv_grid
                                IMPORTING es_col_id
                                          es_row_no,

     on_reassign_bi_user_cmd        FOR EVENT user_command
                                    OF cl_gui_alv_grid
                                    IMPORTING e_ucomm,

     on_reassign_bi_hotspot_click   FOR EVENT hotspot_click
                                    OF cl_gui_alv_grid
                                    IMPORTING e_row_id e_column_id es_row_no,

* ****Reject Item Grid (Screen 0197)

    on_rej_itm_data_changed  FOR EVENT data_changed
                             OF cl_gui_alv_grid
                             IMPORTING er_data_changed e_ucomm,

    on_rej_itm_toolbar       FOR EVENT toolbar
                             OF cl_gui_alv_grid
                             IMPORTING e_object e_interactive,

    on_rej_itm_user_cmd      FOR EVENT user_command
                             OF cl_gui_alv_grid
                             IMPORTING e_ucomm,

    on_rej_itm_hotspot_click FOR EVENT hotspot_click
                             OF cl_gui_alv_grid
                             IMPORTING e_row_id e_column_id es_row_no.


ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.

  METHOD on_reassign_bi_hotspot_click .

  ENDMETHOD.
  METHOD on_calc_req_wl_toolbar.

    DATA: lv_lines         TYPE i,
          lv_page_no       TYPE gui_text,
          lv_fcode         TYPE sy-ucomm,
          lv_page_count(4) TYPE n,
          lwa_button       TYPE stb_button,
          lwa_btnmnu       TYPE stb_btnmnu,
          lo_ctxmenu       TYPE REF TO cl_ctmenu,
          lv_function      TYPE ui_func VALUE 'IMP_ALL',
          lv_quick_info    TYPE iconquick VALUE 'Import All'.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-worklist_search_more icon_search_next
                              TEXT-018 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-worklist_search icon_search
                          TEXT-001 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space lv_function
                          icon_import lv_quick_info space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

  ENDMETHOD.

  METHOD on_calc_req_wl_hotspot_click.

    DATA: lwa_clrq_wl TYPE /cgdc/s_clrq_wl.

    READ TABLE gt_wl_calc_req INTO lwa_clrq_wl INDEX e_row_id-index.
    CHECK lwa_clrq_wl IS NOT INITIAL AND lwa_clrq_wl-clrno NE gs_clrqdoc_infocus-clrno.
    gs_variables-selected_vbeln = lwa_clrq_wl-clrno.
    gs_variables-refresh_worklist = abap_true.
    gs_variables-refersh_document = abap_true.
    gs_variables-wl_curr_sel_row = e_row_id-index.
    IF gs_variables-wl_prev_sel_row IS INITIAL.
      gs_variables-wl_prev_sel_row = e_row_id-index.
    ENDIF.

    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-worklist_hotspot.

    PERFORM fcode_min.

  ENDMETHOD.

  METHOD on_calc_req_wl_user_command.

    CASE e_ucomm.
      WHEN gc_fcode-worklist_search.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.
      WHEN gc_fcode-worklist_search_more.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.
      WHEN gc_fcode-imp_all.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.

    ENDCASE.

  ENDMETHOD.
  METHOD  on_reassign_bi_user_cmd.

  ENDMETHOD.

  METHOD on_calc_req_itm_toolbar.

    DATA: lv_lines         TYPE i,
          lv_page_no       TYPE gui_text,
          lv_fcode         TYPE sy-ucomm,
          lv_page_count(4) TYPE n,
          lv_pg_count      TYPE p DECIMALS 3,
          lv_page_number   TYPE i,
          lwa_button       TYPE stb_button,
          lwa_btnmnu       TYPE stb_btnmnu,
          lo_ctxmenu       TYPE REF TO cl_ctmenu,
          lo_sub_ctxmenu   TYPE REF TO cl_ctmenu,
          lo_red_ctxmenu   TYPE REF TO cl_ctmenu.
    DATA lv_disabled.

    IF gs_variables-overview_mode <> gc_mode_display. "Hide below toolbar buttons in display mode
      CREATE OBJECT lo_ctxmenu.
      add_menu_function lo_ctxmenu gc_fcode-cal_material TEXT-102. "'Cost Obj Groups, Material Determinant'.
      add_menu_function lo_ctxmenu gc_fcode-cal_billing_item TEXT-103. "'Billing Item Type'.
      add_menu_function lo_ctxmenu gc_fcode-cal_item_category TEXT-104. "'Item Category'.

      set_static_context e_object->mt_btnmnu lwa_btnmnu
                           lo_ctxmenu gc_fcode-redetermine_item.

      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                                    gc_fcode-redetermine_item icon_system_settings
                                    TEXT-089 space space .
    ENDIF.

********************Begin of: Quick Filter toggle CLRQ items************
    CREATE OBJECT lo_ctxmenu.
    add_menu_function lo_ctxmenu gc_fcode-cos_items TEXT-068.
    add_menu_function lo_ctxmenu gc_fcode-clrq_grp  TEXT-069.
    add_menu_function lo_ctxmenu gc_fcode-bip_items TEXT-070.
    add_menu_function lo_ctxmenu gc_fcode-man_items TEXT-071.
    add_menu_function lo_ctxmenu gc_fcode-pp_items  TEXT-072.
    add_menu_function lo_ctxmenu gc_fcode-rel_items TEXT-073.

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                              lo_ctxmenu gc_fcode-fltr_itm_cat.

    IF gs_variables-itm_fltr_act EQ abap_true.
      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                                 gc_fcode-fltr_itm_cat icon_toggle_display
                                   TEXT-067 space space.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                                 gc_fcode-fltr_itm_cat icon_start_viewer
                                   TEXT-067 space space.
    ENDIF.

********************End of: Quick Filter toggle CLRQ items**************

    IF gs_variables-show_imp_all_btn IS NOT INITIAL." AND ts_hdr_details-activetab = gc_fcode-tab_hdr_aggregate.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            TEXT-105  icon_import  "'ITM_ALL'
                             TEXT-106  space space. "'Show All'
      insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.
    ENDIF.

    IF gs_variables-key_only IS INITIAL.
      DESCRIBE TABLE gs_clrqdoc_infocus-x-critm LINES lv_lines.
    ELSE.
      DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES lv_lines.
    ENDIF.

    CREATE OBJECT lo_ctxmenu.

    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0 .
      lv_pg_count = lv_lines / gs_calc_req_type-psize.
      CALL FUNCTION 'ROUND'
        EXPORTING
          input  = lv_pg_count
          sign   = '+'
        IMPORTING
          output = lv_pg_count.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      lv_page_count = lv_pg_count.

    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    DO lv_page_count TIMES.
      WRITE sy-index TO lv_page_no.
      CONDENSE lv_page_no.
      CONCATENATE TEXT-107 lv_page_no INTO lv_fcode. "'PAGE'
      add_menu_function lo_ctxmenu lv_fcode lv_page_no.
    ENDDO.

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-page_select.

    insert_toolbar_button e_object->mt_toolbar lwa_button 2
                          gc_fcode-page_select icon_next_object
                          TEXT-008 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

    CREATE OBJECT lo_ctxmenu.
    add_menu_function lo_ctxmenu gc_fcode-tab_itm_subitem TEXT-027.
    add_menu_function lo_ctxmenu gc_fcode-tab_itm_partners TEXT-005.
    add_menu_function lo_ctxmenu gc_fcode-tab_itm_conditions TEXT-006.
    add_menu_function lo_ctxmenu gc_fcode-tab_itm_cost_sht TEXT-125.
    add_menu_function lo_ctxmenu gc_fcode-tab_itm_ref_doc TEXT-019.

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-itm_details.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

    MOVE gs_variables-page_number TO lv_page_number.
    IF lv_page_number = lv_page_count OR gs_variables-page_count = 1 OR gs_calc_req_type-psize > lv_lines.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page icon_column_right
                            TEXT-016 space abap_true.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page icon_column_right
                            TEXT-016 space space.
    ENDIF.

    IF lv_page_number = 1 OR gs_calc_req_type-psize > lv_lines.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-previous_page icon_column_left
                            TEXT-015 space abap_true.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-previous_page icon_column_left
                          TEXT-015 space space.
    ENDIF.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.
**************************************

**********Reverse Rejection BUTTON
    IF gs_variables-overview_mode <> gc_mode_display. "Hide below toolbar buttons in display mode

      insert_toolbar_button e_object->mt_toolbar lwa_button space
                                            gc_fcode-rej_itm_lst icon_reject
                                            TEXT-121 space space.
    ENDIF.
    CREATE OBJECT lo_ctxmenu.

    CREATE OBJECT lo_sub_ctxmenu.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_post_quan TEXT-038.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_post_amt TEXT-037.

    lo_ctxmenu->add_submenu(
      EXPORTING
        menu = lo_sub_ctxmenu                 " Submenu
        text = TEXT-028
    ).
    CREATE OBJECT lo_sub_ctxmenu.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_post_qty_un TEXT-044.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_post_amt_un TEXT-043.

    lo_ctxmenu->add_submenu(
      EXPORTING
        menu = lo_sub_ctxmenu                 " Submenu
        text = TEXT-046
    ).

    CREATE OBJECT lo_sub_ctxmenu.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_rej_quan TEXT-038.
    add_menu_function lo_sub_ctxmenu gc_fcode-itm_rej_amt TEXT-037.

    lo_ctxmenu->add_submenu(
      EXPORTING
        menu = lo_sub_ctxmenu                 " Submenu
        text = TEXT-029 ).

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-funcations.
    IF gs_variables-document_mode EQ gc_mode_change.
      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                        gc_fcode-funcations icon_tools
                        TEXT-030 space space.
    ENDIF.
***************************


    insert_toolbar_button e_object->mt_toolbar lwa_button 2
                      gc_fcode-itm_details icon_detail
                      TEXT-007 space space.
    IF gs_variables-document_mode EQ gc_mode_change.
***************** MAnual Item Creation
      CREATE OBJECT lo_ctxmenu.
      add_menu_function lo_ctxmenu gc_fcode-man_itm_crt TEXT-108."'Manual Item'.
      add_menu_function lo_ctxmenu gc_fcode-prep_itm_crt TEXT-109."'Prepayment Item'.


      set_static_context e_object->mt_btnmnu lwa_btnmnu
                         lo_ctxmenu gc_fcode-itm_add_row.
      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                               gc_fcode-itm_add_row icon_add_row
                                 TEXT-045 space space.
*****************

    ENDIF.
    CLEAR lwa_button.
    CREATE OBJECT lo_ctxmenu.
    insert_toolbar_button e_object->mt_toolbar lwa_button space
                        gc_fcode-setfilter icon_filter
                        TEXT-086 space space.
    add_menu_function lo_ctxmenu gc_fcode-setfilter TEXT-086.

******************************Button to add manual Billing item number to calc req item***********
***************************BOC: Button to add manual Billing item number to calc req item***********
    IF gs_variables-overview_mode <> gc_mode_display. "Hide below toolbar buttons in display mode

      insert_toolbar_button e_object->mt_toolbar lwa_button space
                                            gc_fcode-create_bill_itm icon_new_task
                                            TEXT-087 space space.
    ENDIF.
***************************EOC: Button to add manual Billing item number to calc req item***********

  ENDMETHOD.

  METHOD on_calc_req_itm_user_cmd.

    DATA: lv_lines                TYPE i,
          lv_page_count(4)        TYPE n,
          lt_selected_rows        TYPE lvc_t_row,
          lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat,
          lwa_selected_row        TYPE lvc_s_row,
*          lwa_clrqbs_doc          TYPE /cgdc/s_clrqbs_doc,
          lt_bilitty              TYPE STANDARD TABLE OF /cgdc/t_bilitty,
          lt_clrq_error           TYPE t_clrq_err,
          lt_rtbfm                TYPE /cgdc/tt_rtbfm.

    DATA: lwa_rtbic TYPE /cgdc/t_rtbic.
    FIELD-SYMBOLS: <lwa_itm_val> TYPE s_item_val,
                   <fv_value>    TYPE any.
    DATA : lv_invalid TYPE flag.
    DATA : lwa_billty TYPE /cgdc/t_bilitty.
    DATA : lv_fnkey TYPE /cgdc/rtb_authfnkey.

    CONSTANTS: lc_fname_check TYPE slis_fieldcat_alv-fieldname VALUE 'CHECK',
               lc_fname_scrtx TYPE slis_fieldcat_alv-fieldname VALUE 'SCRTEXT_M',
               lc_tabname     TYPE slis_fieldcat_alv-tabname   VALUE 'GT_TABLE1',
               lc_ps_psr_pnr  TYPE fieldname VALUE 'PS_PSP_PNR',
               lc_client      TYPE scrtext_m VALUE 'Client',
               lc_page        TYPE sy-ucomm VALUE 'PAGE',
               lc_fltr        TYPE sy-ucomm VALUE 'FLTR_'.

    CASE e_ucomm.
      WHEN gc_fcode-tab_itm_partners OR gc_fcode-tab_itm_conditions
         OR gc_fcode-tab_itm_ref_doc OR gc_fcode-tab_itm_subitem
         OR gc_fcode-tab_itm_cost_sht.
        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.

        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSEIF lv_lines GT 1.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i002(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '002'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          READ TABLE lt_selected_rows INTO lwa_selected_row INDEX 1.
          CHECK sy-subrc EQ 0.
          READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_items_fcat INDEX lwa_selected_row-index.
          CHECK sy-subrc EQ 0.
          gs_variables-item_infocus = lwa_calc_req_items_fcat-clrit.
          gs_variables-subitem_infocus = lwa_calc_req_items_fcat-clrsit.
          gs_variables-delta_infocus = lwa_calc_req_items_fcat-clrdit.

        ENDIF.

        CASE e_ucomm.
          WHEN gc_fcode-tab_itm_partners.
            ts_itm_details-activetab = gc_fcode-tab_itm_partners.
          WHEN gc_fcode-tab_itm_conditions.
            ts_itm_details-activetab = gc_fcode-tab_itm_conditions.
          WHEN gc_fcode-tab_itm_ref_doc.
            ts_itm_details-activetab = gc_fcode-tab_itm_ref_doc.
          WHEN gc_fcode-tab_itm_cost_sht.
            IF gs_rtbp-achin IS INITIAL.
              ts_itm_details-activetab = gc_fcode-tab_itm_cost_sht.
            ENDIF.

          WHEN gc_fcode-tab_itm_subitem.
            CLEAR: gt_subitm_condn,
                   gt_subitm_part,
                   gt_item_subitem,
                   gs_variables-subitem_scrn_expnd,
                   gs_variables-show_rsncd_items.
            ts_itm_details-activetab = gc_fcode-tab_itm_subitem.
        ENDCASE.

        CASE e_ucomm.
          WHEN gc_fcode-tab_itm_partners OR gc_fcode-tab_itm_conditions
                   OR gc_fcode-tab_itm_ref_doc OR gc_fcode-tab_itm_subitem
                   OR gc_fcode-tab_itm_cost_sht.
            CALL SCREEN gc_screen-item_subsequent_details STARTING AT 5 1.


        ENDCASE.

      WHEN gc_fcode-itm_post_amt OR gc_fcode-itm_rej_amt OR gc_fcode-itm_rej_quan
         OR gc_fcode-itm_post_quan OR gc_fcode-itm_post_amt_un OR gc_fcode-itm_post_qty_un.

        IF e_ucomm = gc_fcode-itm_rej_amt OR e_ucomm = gc_fcode-itm_rej_quan.

          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                                      gs_clrqdoc_infocus-x-crhdr-vkorg
                                      gs_clrqdoc_infocus-x-crhdr-vtweg
                                      gs_clrqdoc_infocus-x-crhdr-spart
                                      gc_auth_actv-rej_req_itm
                                      ''
                                CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i097(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '097'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.
        ELSE.
          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                                     gs_clrqdoc_infocus-x-crhdr-vkorg
                                     gs_clrqdoc_infocus-x-crhdr-vtweg
                                     gs_clrqdoc_infocus-x-crhdr-spart
                                     gc_auth_actv-post_req_itm
                                     ''
                               CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i096(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '096'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.
        ENDIF.


        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.
        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ENDIF.
        READ TABLE lt_selected_rows INTO lwa_selected_row INDEX 1.
        CHECK sy-subrc EQ 0.
        READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_items_fcat INDEX lwa_selected_row-index.
        CHECK sy-subrc EQ 0.
        gs_variables-item_infocus = lwa_calc_req_items_fcat-clrit.
        PERFORM select_rtbic USING lwa_calc_req_items_fcat-pstyv
                               CHANGING lwa_rtbic.

        CASE e_ucomm.
          WHEN gc_fcode-itm_rej_amt.
            IF lwa_rtbic-rjtnp IS INITIAL.
              gs_variables-itm_rej_amt = abap_true.
              CALL SCREEN gc_screen-post_rej_price_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i034(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '034'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.

          WHEN gc_fcode-itm_post_amt.
            IF lwa_rtbic-pstpnp IS INITIAL.
              gs_variables-itm_post_amt = abap_true.
              CALL SCREEN gc_screen-post_rej_price_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i033(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '033'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.

          WHEN gc_fcode-itm_rej_quan.
            IF lwa_rtbic-rjtnp IS INITIAL.
              gs_variables-itm_rej_quan = abap_true.
              CALL SCREEN gc_screen-post_rej_quan_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i034(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '034'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.
          WHEN gc_fcode-itm_post_quan.
            IF lwa_rtbic-pstpnp IS INITIAL.
              IF lwa_calc_req_items_fcat-itmty = gc_clrq_itmty-bill_plan_line.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i032(/cgdc/clrq).
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '032'.
                  gs_messages-msgty = gc_message_type-information.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
                RETURN.
              ENDIF.
              READ TABLE gt_item_values ASSIGNING <lwa_itm_val> WITH KEY clrit = lwa_calc_req_items_fcat-clrit.

              IF sy-subrc = 0.
                IF <lwa_itm_val>-open_quan <= 1 AND lwa_rtbic-qty_1 IS NOT INITIAL.
                  IF gs_variables-call_from_ui EQ abap_false.
                    MESSAGE i031(/cgdc/clrq).
                  ELSE.
                    CLEAR gs_messages.
                    gs_messages-msgid = gc_clrq_msg_cls.
                    gs_messages-msgnr = '031'.
                    gs_messages-msgty = gc_message_type-information.
                    APPEND gs_messages TO gt_messages.
                  ENDIF.
                  RETURN.
                ENDIF.
              ENDIF.
              gs_variables-itm_post_quan = abap_true.
              CALL SCREEN gc_screen-post_rej_quan_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i033(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '033'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.
          WHEN  gc_fcode-itm_post_qty_un.
            IF lwa_rtbic-pstpnp IS INITIAL.
              IF lwa_calc_req_items_fcat-itmty = gc_clrq_itmty-bill_plan_line.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i032(/cgdc/clrq).
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '032'.
                  gs_messages-msgty = gc_message_type-information.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
                RETURN.
              ENDIF.
              READ TABLE gt_item_values ASSIGNING <lwa_itm_val> WITH KEY clrit = lwa_calc_req_items_fcat-clrit.

              IF sy-subrc = 0.
                IF <lwa_itm_val>-open_quan <= 1 AND lwa_rtbic-qty_1 IS NOT INITIAL.
                  IF gs_variables-call_from_ui EQ abap_false.
                    MESSAGE i031(/cgdc/clrq).
                  ELSE.
                    CLEAR gs_messages.
                    gs_messages-msgid = gc_clrq_msg_cls.
                    gs_messages-msgnr = '031'.
                    gs_messages-msgty = gc_message_type-information.
                    APPEND gs_messages TO gt_messages.
                  ENDIF.
                  RETURN.
                ENDIF.
              ENDIF.
              gs_variables-itm_post_quan_un = abap_true.
              CALL SCREEN gc_screen-post_rej_quan_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i033(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '033'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.
          WHEN  gc_fcode-itm_post_amt_un.
            IF lwa_rtbic-pstpnp IS INITIAL.
              gs_variables-itm_post_amt_un = abap_true.
              CALL SCREEN gc_screen-post_rej_price_scrn STARTING AT 30 10.
            ELSE.
              IF gs_variables-call_from_ui EQ abap_false.
                MESSAGE i033(/cgdc/clrq) WITH lwa_calc_req_items_fcat-pstyv.
              ELSE.
                CLEAR gs_messages.
                gs_messages-msgid = gc_clrq_msg_cls.
                gs_messages-msgnr = '033'.
                gs_messages-msgty = gc_message_type-information.
                gs_messages-msgv1 = lwa_calc_req_items_fcat-pstyv.
                APPEND gs_messages TO gt_messages.
              ENDIF.
              RETURN.
            ENDIF.
        ENDCASE.

      WHEN gc_fcode-previous_page OR gc_fcode-next_page.

        IF gs_variables-key_only IS INITIAL.
          DESCRIBE TABLE gs_clrqdoc_infocus-x-critm LINES lv_lines.
        ELSE.
          DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES lv_lines.
        ENDIF.

        IF lv_lines GT gs_calc_req_type-psize.
          lv_page_count = lv_lines / gs_calc_req_type-psize.
        ELSE.
          MOVE 1 TO lv_page_count.
        ENDIF.

        IF e_ucomm EQ gc_fcode-previous_page.
          gs_variables-page_number = gs_variables-page_number - 1.
          CHECK gs_variables-page_number NE 0.
        ELSE.
          gs_variables-page_number = gs_variables-page_number + 1.
          CHECK gs_variables-page_number LE lv_page_count.
        ENDIF.

        CONDENSE gs_variables-page_number.
        gs_variables-item_to_tabix = gs_variables-page_number * gs_calc_req_type-psize.
        gs_variables-item_from_tabix = gs_variables-item_to_tabix - ( gs_calc_req_type-psize - 1 ).
        gs_variables-refresh_calc_req_items_grid = abap_true.

        IF lv_lines LT gs_variables-item_to_tabix.
          gs_variables-item_to_tabix = lv_lines.
        ENDIF.
      WHEN gc_fcode-man_itm_crt.
        "CHECK Authority Check for Billing
        PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                                             gs_clrqdoc_infocus-x-crhdr-vkorg
                                             gs_clrqdoc_infocus-x-crhdr-vtweg
                                             gs_clrqdoc_infocus-x-crhdr-spart
                                             'Q4'
                                             ''
                                       CHANGING lv_invalid.
        IF lv_invalid IS NOT INITIAL.
          IF gs_variables-call_from_ui IS INITIAL.
            MESSAGE i101(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                  gs_clrqdoc_infocus-x-crhdr-vkorg
                                                  gs_clrqdoc_infocus-x-crhdr-vtweg
                                                  gs_clrqdoc_infocus-x-crhdr-spart.
          ELSE.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '101'.
            gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
            gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
            gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
            gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
            CLEAR gs_messages.
          ENDIF.
          RETURN.
        ENDIF.
        CALL SCREEN gc_screen-man_itm STARTING AT 30 10.
        gs_variables-refresh_calc_req_items_grid = abap_true.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.
      WHEN gc_fcode-prep_itm_crt.
        CALL SCREEN gc_screen-prep_itm STARTING AT 30 10.
        gs_variables-refresh_calc_req_items_grid = abap_true.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-setfilter.
        DATA : lt_scrtext                   TYPE dfies-scrtext_m,
               lt_return                    TYPE TABLE OF ddshretval,
               lv_scrtext                   TYPE dfies-scrtext_m,
               gs_private                   TYPE slis_data_caller_exit,
               fieldcat                     TYPE lvc_t_fcat,
               lt_dfies                     TYPE TABLE OF dfies,
               ref_dyn_selections_container TYPE REF TO cl_gui_custom_container,
               ref_dyn_sel_container_popup  TYPE REF TO cl_gui_custom_container.

        DATA: gt_dyntab   TYPE REF TO data,
              lt_fcat     TYPE slis_t_fieldcat_alv,
              lwa_fcat    TYPE slis_fieldcat_alv,
              lw_selfield TYPE slis_selfield.

        lwa_fcat-col_pos = 1.
        lwa_fcat-fieldname = lc_fname_check.
        lwa_fcat-seltext_m = 'Select'(159).
        lwa_fcat-tabname = 'GT_TABLE'.
        APPEND lwa_fcat TO lt_fcat.
        CLEAR lwa_fcat.

        lwa_fcat-col_pos = 2.
        lwa_fcat-fieldname = lc_fname_scrtx.
        lwa_fcat-seltext_m = 'Fields'(160).
        lwa_fcat-tabname = 'GT_TABLE'.
        lwa_fcat-outputlen = 30.
        APPEND lwa_fcat TO lt_fcat.
        CLEAR lwa_fcat.

        CALL FUNCTION 'DDIF_FIELDINFO_GET'
          EXPORTING
            tabname        = '/CGDC/_CLRQIT'
            langu          = sy-langu
          TABLES
            dfies_tab      = lt_dfies
          EXCEPTIONS
            not_found      = 1
            internal_error = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        DELETE lt_dfies WHERE scrtext_m IS INITIAL.

        IF gt_table IS INITIAL.
          SELECT DISTINCT a~scrtext_m AS scrtext_m FROM @lt_dfies AS a
            WHERE scrtext_m NE @lc_client
            INTO CORRESPONDING FIELDS OF TABLE @gt_table .
        ENDIF.
        CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
          EXPORTING
            i_title              = 'Select Fields'
            i_checkbox_fieldname = 'CHECK'
            i_tabname            = 'GT_TABLE'
            it_fieldcat          = lt_fcat
            i_callback_program   = sy-repid
          TABLES
            t_outtab             = gt_table
          EXCEPTIONS
            program_error        = 1
            OTHERS               = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
        gt_dfies = VALUE #( FOR lwa_table IN gt_table WHERE ( check = abap_true )
                           LET lw_dfies = VALUE #( lt_dfies[ scrtext_m = lwa_table-scrtext_m ] )
                           IN ( CORRESPONDING #( lw_dfies ) ) ).
        IF gt_dfies IS NOT INITIAL.
          gs_variables-filter_html = abap_true.
          gs_variables-dyn_selscr_ucomm = gc_fcode-setfilter.

          CALL SCREEN gc_screen-dynamic_selscr STARTING AT 10 10 ENDING AT 120 25. " Editted by Srishti Shetty
        ENDIF.
        IF gv_where IS NOT INITIAL.

          IF gt_clrq_key IS INITIAL.
            gt_clrq_key = gs_clrqdoc_infocus-x-critm_key.
          ENDIF.

          CLEAR: gs_clrqdoc_infocus-x-critm_key.

          SELECT DISTINCT clrno, clrit
           FROM /cgdc/_clrqit
           INTO TABLE @gs_clrqdoc_infocus-x-critm_key
           WHERE (gv_where).
        ENDIF.
        gs_variables-rtbfilter = abap_true.
        gs_variables-refresh_calc_req_items_grid = abap_true.
        gs_variables-show_imp_all_btn = abap_true.
        gs_variables-page_number = gs_variables-item_from_tabix = 1.
        gs_variables-item_to_tabix = gs_calc_req_type-psize.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-rej_itm_lst.



        CALL SCREEN gc_screen-rej_itm_lst STARTING AT 10 10 ENDING AT 120 24.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.

      WHEN gc_fcode-create_bill_itm.
        CLEAR: lt_selected_rows,
               lv_lines.

        REFRESH lt_bilitty.

        SELECT * FROM /cgdc/t_bilitty INTO TABLE lt_bilitty.
        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.
        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
*          DATA : ls_clrqbs_doc TYPE /cgdc/s_clrqbs_doc.

          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                        gs_clrqdoc_infocus-x-crhdr-vkorg
                        gs_clrqdoc_infocus-x-crhdr-vtweg
                        gs_clrqdoc_infocus-x-crhdr-spart
                        gc_auth_actv-reassign_request_item
                        ''
                         CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i099(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '099'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.

          CLEAR lt_clrq_error.
          SELECT * FROM /cgdc/t_clrq_err
           INTO TABLE lt_clrq_error.

          CLEAR lwa_selected_row.
          LOOP AT lt_selected_rows INTO lwa_selected_row.
            CLEAR lwa_calc_req_items_fcat.
            READ TABLE gt_calc_req_items_fcat
                 INTO lwa_calc_req_items_fcat
                 INDEX lwa_selected_row-index.
            IF sy-subrc EQ 0.

              gs_variables-calc_changed = abap_true.
              IF NOT lwa_calc_req_items_fcat-rtbbinr IS INITIAL.
                PERFORM check_and_reassign CHANGING lwa_calc_req_items_fcat.
              ELSE.
                PERFORM create_manual_bill_item_num CHANGING lwa_calc_req_items_fcat.
              ENDIF.
            ENDIF.
            CLEAR lwa_selected_row.
          ENDLOOP.

*AD: Added grid refresh
          gs_variables-refresh_calc_req_items_grid  = abap_true.

          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.

        ENDIF.


*- Redetermination logic
      WHEN gc_fcode-cal_material .
        DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
        DATA: lwa_clrqit_new  TYPE /cgdc/s_clrqit_fcat,
              ls_contract_itm TYPE vbap,
              ls_clrq_itm_new TYPE /cgdc/s_clrqit,
              lt_komv         TYPE komv_t.
        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.
        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          CLEAR lwa_selected_row.
          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                       gs_clrqdoc_infocus-x-crhdr-vkorg
                       gs_clrqdoc_infocus-x-crhdr-vtweg
                       gs_clrqdoc_infocus-x-crhdr-spart
                       gc_auth_actv-red_mat
                       ''
          CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i103(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '103'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.

          LOOP AT lt_selected_rows INTO lwa_selected_row .
            CLEAR lwa_calc_req_items_fcat.
            READ TABLE gt_calc_req_items_fcat
                 ASSIGNING FIELD-SYMBOL(<lfs_clrqit>)
                 INDEX lwa_selected_row-index.
            IF sy-subrc EQ 0.
              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_clrqit>) WHERE clrno = <lfs_clrqit>-clrno AND
                                                                                            clrit = <lfs_clrqit>-clrit.
                READ TABLE gs_clrqdoc_infocus-y-critm INTO DATA(ls_fcaty) WITH KEY clrno = <lwa_clrqit>-clrno
                                                                             clrit = <lwa_clrqit>-clrit
                                                                             clrsit = <lwa_clrqit>-clrsit
                                                                             clrdit = <lwa_clrqit>-clrdit.
                IF sy-subrc NE 0.
                  APPEND <lwa_clrqit> TO gs_clrqdoc_infocus-y-critm.
                ENDIF.
                READ TABLE gt_contract_itm INTO ls_contract_itm
                                                                WITH KEY posnr = <lwa_clrqit>-vgpos.
                PERFORM update_material_determination USING ls_contract_itm <lfs_clrqit>
                                                       CHANGING <lwa_clrqit>.
                <lwa_clrqit>-updkz = gc_updkz_update.
                gs_variables-calc_changed = abap_true.


                CALL METHOD /cgdc/cl_rtb_src_db=>read_mapping
                  EXPORTING
                    iv_rtbpn      = gs_contract_hdr-/cgdc/rtbpn
                    iv_rtbsrc     = <lwa_clrqit>-rtb_source
                  IMPORTING
                    et_srcfld_map = lt_rtbfm.


                IF ( <lwa_clrqit>-istat = gc_ibill_stat-open OR <lwa_clrqit>-istat = gc_ibill_stat-postponed OR <lwa_clrqit>-istat = gc_ibill_stat-rejected ) AND <lwa_clrqit>-clrsit NE '000000'.
                  LOOP AT gs_clrqdoc_infocus-x-crcon  INTO DATA(ls_crcon) WHERE clrno = <lwa_clrqit>-clrno AND
                                                                             clrit = <lwa_clrqit>-clrit AND
                                                                             clrsit = <lwa_clrqit>-clrsit AND
                                                                             clrdit = <lwa_clrqit>-clrdit.

                    IF ls_crcon-kschl = gs_rtbp-ccond.
                      <lfs_clrqit>-kbetr1 = ls_crcon-kwert.
                    ENDIF.
                    .
                    UNASSIGN <fv_value>.
                    READ TABLE lt_rtbfm INTO DATA(ls_rtbfm) WITH KEY tgtkschl = ls_crcon-kschl.
                    IF sy-subrc = 0.
                      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE <lfs_clrqit> TO <fv_value>.
                      IF <fv_value> IS ASSIGNED.
                        <fv_value> = ls_crcon-kwert.
                      ENDIF.
                    ENDIF.

                    ls_crcon-updkz = gc_updkz_delete.
                    APPEND ls_crcon TO gs_clrqdoc_infocus-y-crcon.
                    DELETE TABLE gs_clrqdoc_infocus-x-crcon FROM ls_crcon.
                  ENDLOOP.

                  LOOP AT gs_clrqdoc_infocus-x-cscon  INTO DATA(ls_cscon) WHERE clrno = <lwa_clrqit>-clrno AND
                                                                             clrit = <lwa_clrqit>-clrit AND
                                                                             clrsit = <lwa_clrqit>-clrsit AND
                                                                             clrdit = <lwa_clrqit>-clrdit.
                    IF ls_cscon-kschl = gs_rtbp-ccond.
                      <lfs_clrqit>-kbetr1 = ls_cscon-kwert.
                    ENDIF.

                    UNASSIGN <fv_value>.
                    READ TABLE lt_rtbfm INTO ls_rtbfm WITH KEY tgtkschl = ls_cscon-kschl.
                    IF sy-subrc = 0.
                      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE <lfs_clrqit> TO <fv_value>.
                      IF <fv_value> IS ASSIGNED.
                        <fv_value> = ls_cscon-kwert.
                      ENDIF.
                    ENDIF.

                    ls_cscon-updkz = gc_updkz_delete.
                    APPEND ls_cscon TO gs_clrqdoc_infocus-y-cscon.
                    DELETE TABLE gs_clrqdoc_infocus-x-cscon FROM ls_cscon.
                  ENDLOOP.

                  CLEAR lt_komv[].
                  PERFORM prepare_temp_hdr_itm_no CHANGING <lwa_clrqit>.
                  PERFORM pricing  USING ' '
                                  CHANGING <lfs_clrqit>
                                           <lwa_clrqit>
                                           lt_komv .
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
          gs_variables-refresh_calc_req_items_grid  = abap_true.
          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.

        ENDIF.
*- Redetermination Item Category logic
      WHEN gc_fcode-cal_item_category .
        CLEAR: lwa_clrit_old,
              lwa_clrqit_new  ,
              ls_contract_itm ,
              lt_komv    .
        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.
        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          CLEAR lwa_selected_row.
          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
              gs_clrqdoc_infocus-x-crhdr-vkorg
              gs_clrqdoc_infocus-x-crhdr-vtweg
              gs_clrqdoc_infocus-x-crhdr-spart
              gc_auth_actv-red_itm_cat
              ''
        CHANGING lv_invalid.

          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i105(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '105'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.
          LOOP AT lt_selected_rows INTO lwa_selected_row .
            CLEAR lwa_calc_req_items_fcat.
            READ TABLE gt_calc_req_items_fcat
                 ASSIGNING  <lfs_clrqit>
                 INDEX lwa_selected_row-index.
            IF sy-subrc EQ 0.
              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WHERE clrno = <lfs_clrqit>-clrno AND
                                                                                            clrit = <lfs_clrqit>-clrit.
                READ TABLE gs_clrqdoc_infocus-y-critm INTO ls_fcaty WITH KEY clrno = <lwa_clrqit>-clrno
                                                                             clrit = <lwa_clrqit>-clrit
                                                                             clrsit = <lwa_clrqit>-clrsit
                                                                             clrdit = <lwa_clrqit>-clrdit.
                IF sy-subrc NE 0.
                  APPEND <lwa_clrqit> TO gs_clrqdoc_infocus-y-critm.
                ENDIF.
                READ TABLE gt_contract_itm INTO ls_contract_itm
                                                                WITH KEY posnr = <lwa_clrqit>-vgpos.

                PERFORM determine_pstyv USING ls_contract_itm
                                        CHANGING <lwa_clrqit>.

                <lwa_clrqit>-updkz = gc_updkz_update.
                gs_variables-calc_changed = abap_true.


                CALL METHOD /cgdc/cl_rtb_src_db=>read_mapping
                  EXPORTING
                    iv_rtbpn      = gs_contract_hdr-/cgdc/rtbpn
                    iv_rtbsrc     = <lwa_clrqit>-rtb_source
                  IMPORTING
                    et_srcfld_map = lt_rtbfm.


                IF ( <lwa_clrqit>-istat = gc_ibill_stat-open OR <lwa_clrqit>-istat = gc_ibill_stat-postponed OR <lwa_clrqit>-istat = gc_ibill_stat-rejected ) AND <lwa_clrqit>-clrsit NE '000000'.
                  LOOP AT gs_clrqdoc_infocus-x-crcon  INTO ls_crcon WHERE clrno = <lwa_clrqit>-clrno AND
                                                                             clrit = <lwa_clrqit>-clrit AND
                                                                             clrsit = <lwa_clrqit>-clrsit AND
                                                                             clrdit = <lwa_clrqit>-clrdit.

                    IF ls_crcon-kschl = gs_rtbp-ccond.
                      <lfs_clrqit>-kbetr1 = ls_crcon-kwert.
                    ENDIF.

                    UNASSIGN <fv_value>.
                    READ TABLE lt_rtbfm INTO ls_rtbfm WITH KEY tgtkschl = ls_crcon-kschl.
                    IF sy-subrc = 0.
                      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE <lfs_clrqit> TO <fv_value>.
                      IF <fv_value> IS ASSIGNED.
                        <fv_value> = ls_crcon-kwert.
                      ENDIF.
                    ENDIF.

                    ls_crcon-updkz = gc_updkz_delete.
                    APPEND ls_crcon TO gs_clrqdoc_infocus-y-crcon.
                    DELETE TABLE gs_clrqdoc_infocus-x-crcon FROM ls_crcon.
                  ENDLOOP.

                  LOOP AT gs_clrqdoc_infocus-x-cscon  INTO ls_cscon WHERE clrno = <lwa_clrqit>-clrno AND
                                                                             clrit = <lwa_clrqit>-clrit AND
                                                                             clrsit = <lwa_clrqit>-clrsit AND
                                                                             clrdit = <lwa_clrqit>-clrdit.
                    IF ls_cscon-kschl = gs_rtbp-ccond.
                      <lfs_clrqit>-kbetr1 = ls_cscon-kwert.
                    ENDIF.

                    UNASSIGN <fv_value>.
                    READ TABLE lt_rtbfm INTO ls_rtbfm WITH KEY tgtkschl = ls_crcon-kschl.
                    IF sy-subrc = 0.
                      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE <lfs_clrqit> TO <fv_value>.
                      IF <fv_value> IS ASSIGNED.
                        <fv_value> = ls_crcon-kwert.
                      ENDIF.
                    ENDIF.

                    ls_cscon-updkz = gc_updkz_delete.
                    APPEND ls_cscon TO gs_clrqdoc_infocus-y-cscon.
                    DELETE TABLE gs_clrqdoc_infocus-x-cscon FROM ls_cscon.
                  ENDLOOP.

                  CLEAR lt_komv[].
                  PERFORM prepare_temp_hdr_itm_no CHANGING <lwa_clrqit>.
                  PERFORM pricing  USING ' '
                                  CHANGING <lfs_clrqit>
                                           <lwa_clrqit>
                                           lt_komv .
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
          gs_variables-refresh_calc_req_items_grid  = abap_true.
          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.
        ENDIF.
      WHEN gc_fcode-cal_billing_item.

        SELECT * FROM /cgdc/t_bilitty INTO TABLE lt_bilitty.

        CLEAR lt_clrq_error.
        SELECT * FROM /cgdc/t_clrq_err INTO TABLE lt_clrq_error.

        CALL METHOD go_grid_calc_req_items->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.

        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          CLEAR lwa_selected_row.
          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                 gs_clrqdoc_infocus-x-crhdr-vkorg
                 gs_clrqdoc_infocus-x-crhdr-vtweg
                 gs_clrqdoc_infocus-x-crhdr-spart
                 gc_auth_actv-red_billing_item
                 ''
                 CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i104(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '104'.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.

          LOOP AT lt_selected_rows INTO lwa_selected_row .
            CLEAR lwa_calc_req_items_fcat.
            READ TABLE gt_calc_req_items_fcat
                 ASSIGNING FIELD-SYMBOL(<lfs_clrqit_bil>)
                 INDEX lwa_selected_row-index.
            IF sy-subrc EQ 0.

              PERFORM billing_item_redetermine USING lt_bilitty
                                                     lt_clrq_error
                                               CHANGING <lfs_clrqit_bil>.
              gs_variables-calc_changed = abap_true.
            ENDIF.
          ENDLOOP.

          gs_variables-refresh_calc_req_items_grid = abap_true.
          go_grid_calc_req_items->refresh_table_display( ).
          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.
        ENDIF.

      WHEN OTHERS.

        IF e_ucomm CS lc_page.

          IF gs_variables-key_only IS INITIAL.
            DESCRIBE TABLE gs_clrqdoc_infocus-x-critm LINES lv_lines.
          ELSE.
            DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES lv_lines.
          ENDIF.

          gs_variables-page_number = e_ucomm+4(4).
          CONDENSE gs_variables-page_number.
          gs_variables-item_to_tabix = gs_variables-page_number * gs_calc_req_type-psize.
          gs_variables-item_from_tabix = gs_variables-item_to_tabix - ( gs_calc_req_type-psize - 1 ).
          gs_variables-refresh_calc_req_items_grid = abap_true.

          IF lv_lines LT gs_variables-item_to_tabix.
            gs_variables-item_to_tabix = lv_lines.
          ENDIF.

        ENDIF.

        IF e_ucomm CS lc_fltr.
          "Logic to filter based on item categories
          PERFORM filter_on_item_cat USING e_ucomm.

          gs_variables-refresh_calc_req_items_grid = abap_true.
          gs_variables-refersh_bill_bp_grid = abap_true.
          gs_variables-show_imp_all_btn = abap_true.
          gs_variables-page_number = gs_variables-item_from_tabix = 1.
          gs_variables-item_to_tabix = gs_calc_req_type-psize.
          gs_variables-itm_fltr_act = abap_true.

        ENDIF.

    ENDCASE.

    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = e_ucomm.

  ENDMETHOD.

  METHOD on_calc_req_itm_button_clk.

  ENDMETHOD.


  METHOD on_rej_itm_toolbar.
    DATA: lwa_button       TYPE stb_button.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-dsel_all_rej_itm icon_deselect_all
                          TEXT-124 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-sel_all_rej_itm icon_select_all
                          TEXT-123 space space.


  ENDMETHOD.

  METHOD on_rej_itm_user_cmd.
    FIELD-SYMBOLS: <ls_rejitm> TYPE /cgdc/s_rejitm_fcat.
    CASE e_ucomm.
      WHEN gc_fcode-sel_all_rej_itm.
        LOOP AT gt_rejitms ASSIGNING <ls_rejitm> WHERE check <> abap_true.
          <ls_rejitm>-check = abap_true.
        ENDLOOP.
        go_rej_itm_grid->refresh_table_display( ).

      WHEN gc_fcode-dsel_all_rej_itm.
        LOOP AT gt_rejitms ASSIGNING <ls_rejitm> WHERE check = abap_true.
          <ls_rejitm>-check = abap_false.
        ENDLOOP.
        go_rej_itm_grid->refresh_table_display( ).
      WHEN OTHERS.
    ENDCASE.
    gs_variables-manual_changes_rej_itm = abap_true.

  ENDMETHOD.



  METHOD on_rej_itm_data_changed.
    IF er_data_changed->mt_mod_cells[] IS NOT INITIAL.

      APPEND LINES OF er_data_changed->mt_mod_cells TO gt_rej_itm_mod_rows.
      SORT gt_rej_itm_mod_rows BY row_id.
      gs_variables-manual_changes_rej_itm = abap_true.
      DELETE ADJACENT DUPLICATES FROM gt_rej_itm_mod_rows COMPARING row_id.

    ENDIF.
  ENDMETHOD.

  METHOD on_rej_itm_hotspot_click.
    FIELD-SYMBOLS: <lwa_rejitm> TYPE /cgdc/s_rejitm_fcat.

    READ TABLE gt_rejitms ASSIGNING <lwa_rejitm> INDEX e_row_id-index.
    IF <lwa_rejitm> IS ASSIGNED.
      IF <lwa_rejitm>-check <> abap_true.
        <lwa_rejitm>-check = abap_true.
      ELSE.
        <lwa_rejitm>-check = abap_false.
      ENDIF.
      .
    ENDIF.

    gs_variables-manual_changes_rej_itm = abap_true.
    go_rej_itm_grid->refresh_table_display( ).

  ENDMETHOD.


  METHOD on_bill_pre_hotspot_click.

    PERFORM on_bill_pre_hotspot_click USING e_row_id e_column_id.

    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.

  ENDMETHOD.
  METHOD on_bill_pre_user_cmd.
    DATA: lt_selected_rows TYPE lvc_t_row,
          lv_page_count    TYPE n,
          lv_lines         TYPE i.

    CONSTANTS: lc_fname_check TYPE slis_fieldcat_alv-fieldname VALUE 'CHECK',
               lc_fname_scrtx TYPE slis_fieldcat_alv-fieldname VALUE 'SCRTEXT_M',
               lc_tabname     TYPE slis_fieldcat_alv-tabname   VALUE 'GT_TABLE1',
               lc_ps_psr_pnr  TYPE fieldname VALUE 'PS_PSP_PNR',
               lc_client      TYPE scrtext_m VALUE 'Client',
               lc_page        TYPE sy-ucomm VALUE 'PAGE',
               lc_fltr        TYPE sy-ucomm VALUE 'FLTR_',
               lc_fast_chg    TYPE sy-ucomm VALUE 'FAST_CHG_',
               lc_inttype_p   TYPE inttype VALUE 'P'.

    CASE e_ucomm.
      WHEN gc_fcode-itm_post  OR gc_fcode-itm_rej OR gc_fcode-cacl_grp_cond OR
        gc_fcode-bill_partner.

        CALL METHOD go_grid_calc_req_bill_pre->get_selected_rows
          IMPORTING
            et_index_rows = lt_selected_rows[].

        DESCRIBE TABLE lt_selected_rows LINES lv_lines.

        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSEIF lv_lines GT 1.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i002(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '002'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ENDIF.

        gs_variables-gv_rejpost_billing_pre = abap_true.
        CASE e_ucomm.
          WHEN gc_fcode-cacl_grp_cond.
            READ TABLE lt_selected_rows INTO DATA(lwa_sel_row) INDEX 1.
            READ TABLE gt_bill_pre_data_page INTO DATA(lwa_bill_pre) INDEX lwa_sel_row-index.
            IF sy-subrc = 0.
              gs_variables-sel_rtbbinr = lwa_bill_pre-bill_item.
            ENDIF.
            CALL SCREEN gc_screen-calc_bill_cond_popup STARTING AT 30 10.
            CLEAR gs_variables-sel_rtbbinr.
          WHEN gc_fcode-bill_partner.
            READ TABLE lt_selected_rows INTO lwa_sel_row INDEX 1.
            READ TABLE gt_bill_pre_data_page INTO lwa_bill_pre INDEX lwa_sel_row-index.
            IF sy-subrc = 0.
              gs_variables-sel_vgpos = lwa_bill_pre-vgpos.
            ENDIF.
            CALL SCREEN gc_screen-bill_partner_popup STARTING AT 30 10.
            CLEAR gs_variables-sel_vgpos.
        ENDCASE.

      WHEN gc_fcode-set_bill_itm_filter.
        DATA : lt_scrtext                   TYPE dfies-scrtext_m,
               lt_return                    TYPE TABLE OF ddshretval,
               lv_scrtext                   TYPE dfies-scrtext_m,
               gs_private                   TYPE slis_data_caller_exit,
               fieldcat                     TYPE lvc_t_fcat,
               lt_dfies                     TYPE TABLE OF dfies,
               lt_fcat1                     TYPE lvc_t_fcat,
               ref_dyn_selections_container TYPE REF TO cl_gui_custom_container,
               ref_dyn_sel_container_popup  TYPE REF TO cl_gui_custom_container.

        DATA: gt_dyntab   TYPE REF TO data,
              lt_fcat     TYPE slis_t_fieldcat_alv,
              lwa_fcat    TYPE slis_fieldcat_alv,
              lw_selfield TYPE slis_selfield.
        DATA : lv_invalid  TYPE flag,
               lv_str_name TYPE ddobjname VALUE '/CGDC/S_CLRQBI_FCAT'.

        FIELD-SYMBOLS: <lwa_data> TYPE any.

        lwa_fcat-col_pos = 1.
        lwa_fcat-fieldname = lc_fname_check.
        lwa_fcat-seltext_m = 'Select'(159).
        lwa_fcat-tabname = lc_tabname.
        APPEND lwa_fcat TO lt_fcat.
        CLEAR lwa_fcat.

        lwa_fcat-col_pos = 2.
        lwa_fcat-fieldname = lc_fname_scrtx.
        lwa_fcat-seltext_m = 'Fields'(160).
        lwa_fcat-tabname = lc_tabname.
        lwa_fcat-outputlen = 30.
        APPEND lwa_fcat TO lt_fcat.
        CLEAR lwa_fcat.

        CALL FUNCTION 'DDIF_FIELDINFO_GET'
          EXPORTING
            tabname        = gc_bilitm_tabname
            langu          = sy-langu
          TABLES
            dfies_tab      = lt_dfies
          EXCEPTIONS
            not_found      = 1
            internal_error = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
          EXPORTING
            i_structure_name       = lv_str_name
          CHANGING
            ct_fieldcat            = lt_fcat1
          EXCEPTIONS
            inconsistent_interface = 1
            program_error          = 2
            OTHERS                 = 3.
        IF sy-subrc <> 0.
          CLEAR gt_itm_src_fcat.
        ENDIF.

        DELETE lt_dfies WHERE scrtext_m IS INITIAL OR inttype = lc_inttype_p.

        LOOP AT lt_dfies INTO DATA(lwa_dfies).
          READ TABLE lt_fcat1 TRANSPORTING NO FIELDS WITH KEY fieldname = lwa_dfies-fieldname.
          IF sy-subrc <> 0.
            DELETE lt_dfies WHERE fieldname = lwa_dfies-fieldname.
          ENDIF.

        ENDLOOP.


        IF gt_table1 IS INITIAL.
          SELECT DISTINCT a~scrtext_m AS scrtext_m FROM @lt_dfies AS a
            WHERE scrtext_m NE @lc_client
            INTO CORRESPONDING FIELDS OF TABLE @gt_table1 .
        ENDIF.
        CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
          EXPORTING
            i_title              = 'Select Fields'(165)
            i_checkbox_fieldname = lc_fname_check
            i_tabname            = lc_tabname
            it_fieldcat          = lt_fcat
            i_callback_program   = sy-repid
          TABLES
            t_outtab             = gt_table1
          EXCEPTIONS
            program_error        = 1
            OTHERS               = 2.
        IF sy-subrc <> 0.
        ENDIF.
        IF gt_dfies IS NOT INITIAL.
          CLEAR gt_dfies.
        ENDIF.
        gt_dfies = VALUE #( FOR lwa_table IN gt_table1 WHERE ( check = abap_true )
                           LET lw_dfies = VALUE #( lt_dfies[ scrtext_m = lwa_table-scrtext_m ] )
                           IN ( CORRESPONDING #( lw_dfies ) ) ).
        IF gt_dfies IS NOT INITIAL.
          gs_variables-filter_html = abap_true.
          gs_variables-dyn_selscr_ucomm = gc_fcode-set_bill_itm_filter.

          CALL SCREEN gc_screen-dynamic_selscr STARTING AT 10 10
                             ENDING AT   120 25.
        ENDIF.
*        IF gv_where IS NOT INITIAL.
*
*          CLEAR gt_bill_pre_data.
*          IF <lwa_data> IS ASSIGNED.
*            UNASSIGN <lwa_data>.
*          ENDIF.
*          LOOP AT  gt_bill_pre_data_all ASSIGNING <lwa_data> WHERE (gv_where).
*            APPEND <lwa_data> TO gt_bill_pre_data.
*          ENDLOOP.
*
*        ENDIF.

        gs_variables-refersh_bill_bp_grid = abap_true.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-previous_page_bitm OR gc_fcode-next_page_bitm.

        DESCRIBE TABLE gt_bill_pre_data_all LINES lv_lines.

        IF lv_lines GT gs_calc_req_type-psize.
          lv_page_count = lv_lines / gs_calc_req_type-psize.
        ELSE.
          MOVE 1 TO lv_page_count.
        ENDIF.
        IF e_ucomm EQ gc_fcode-previous_page_bitm.
          gs_variables-page_number_bitm = gs_variables-page_number_bitm - 1.
          CHECK gs_variables-page_number_bitm NE 0.
        ELSE.
          gs_variables-page_number_bitm = gs_variables-page_number_bitm + 1.
          CHECK gs_variables-page_number_bitm LE lv_page_count.
        ENDIF.
        gs_variables-refersh_bill_bp_grid = abap_true.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-crt_man_bil_itm.
        PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                                     gs_clrqdoc_infocus-x-crhdr-vkorg
                                     gs_clrqdoc_infocus-x-crhdr-vtweg
                                     gs_clrqdoc_infocus-x-crhdr-spart
                                     gc_auth_actv-crt_man_bl_itm
                                     ''
                               CHANGING lv_invalid. "commented by drashti
        IF lv_invalid IS NOT INITIAL.
          IF gs_variables-call_from_ui IS INITIAL.
            MESSAGE i094(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                  gs_clrqdoc_infocus-x-crhdr-vkorg
                                                  gs_clrqdoc_infocus-x-crhdr-vtweg
                                                  gs_clrqdoc_infocus-x-crhdr-spart.
          ELSE.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '094'.
            gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
            gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
            gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
            gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
            CLEAR gs_messages.
          ENDIF.
          gs_variables-overview_mode = gs_variables-document_mode = gc_mode_display.
          RETURN.
        ENDIF.
        CALL SCREEN gc_screen-crt_bil_itm STARTING AT 30 10.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-redetermine_bi.

        CALL METHOD go_grid_calc_req_bill_pre->get_selected_rows
          IMPORTING
            et_index_rows = gt_bill_pre_selected_rows[].

        DESCRIBE TABLE gt_bill_pre_selected_rows LINES lv_lines.

        IF lv_lines IS INITIAL.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i111(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '111'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          PERFORM redetermine_bilitm_gprf.
        ENDIF.

        IF gs_variables-refersh_bill_bp_grid = abap_true.
          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.
        ENDIF.

      WHEN OTHERS.

        IF e_ucomm CS lc_page.

          gs_variables-page_number_bitm = e_ucomm+4(4).
          gs_variables-refersh_bill_bp_grid = abap_true.
          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.
        ENDIF.

        IF e_ucomm CS lc_fltr.
*          PERFORM filter_billing_items USING e_ucomm.
          gs_variables-bstat_filter = e_ucomm.

          gs_variables-refersh_bill_bp_grid = abap_true.

          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = gc_fcode-entr.
        ENDIF.

        IF e_ucomm CS lc_fast_chg.

          CALL METHOD go_grid_calc_req_bill_pre->get_selected_rows
            IMPORTING
              et_index_rows = gt_bill_pre_selected_rows[].

          DESCRIBE TABLE gt_bill_pre_selected_rows LINES lv_lines.

          IF lv_lines IS INITIAL.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i111(/cgdc/clrq).
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '111'.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            EXIT.
          ELSE.
            PERFORM fast_change USING e_ucomm.
          ENDIF.

        ENDIF.

    ENDCASE.
  ENDMETHOD.
  METHOD on_bill_pre_toolbar.
    DATA: lwa_button          TYPE stb_button,
          lwa_btnmnu          TYPE stb_btnmnu,
          lo_ctxmenu          TYPE REF TO cl_ctmenu,
          lv_lines            TYPE i,
          lv_page_no          TYPE gui_text,
          lv_fcode            TYPE sy-ucomm,
          lv_page_number_bitm TYPE i,
          lv_page_count       TYPE n.

    CREATE OBJECT lo_ctxmenu.
    add_menu_function lo_ctxmenu gc_fcode-open_item TEXT-097.
    add_menu_function lo_ctxmenu gc_fcode-in_prog   TEXT-100.
    add_menu_function lo_ctxmenu gc_fcode-past_due  TEXT-098.
    add_menu_function lo_ctxmenu gc_fcode-bill_item TEXT-096.
    add_menu_function lo_ctxmenu gc_fcode-all_items TEXT-101.


    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-fltr_itm_cat.

    insert_toolbar_button e_object->mt_toolbar lwa_button 2
                        gc_fcode-fltr_itm_cat icon_start_viewer
                        TEXT-099 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-cacl_grp_cond icon_price
                              TEXT-006 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-bill_partner icon_partner
                               TEXT-210 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-set_bill_itm_filter icon_filter
                               TEXT-086 space space.
    " Fast change button
    IF gs_variables-document_mode EQ gc_mode_change.
*      CREATE OBJECT lo_ctxmenu.
*      add_menu_function lo_ctxmenu gc_fcode-bill_dt    TEXT-118.
*      add_menu_function lo_ctxmenu gc_fcode-bill_blk   TEXT-119.
*
*      set_static_context e_object->mt_btnmnu lwa_btnmnu
*                       lo_ctxmenu gc_fcode-redetermine_bi.

      insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-redetermine_bi icon_system_settings
                          TEXT-214 space space.

      CREATE OBJECT lo_ctxmenu.
      add_menu_function lo_ctxmenu gc_fcode-bill_dt    TEXT-118.
      add_menu_function lo_ctxmenu gc_fcode-bill_blk   TEXT-119.

      set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-fast_chg.

      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                          gc_fcode-fast_chg icon_fast_entry
                          TEXT-115 space space.

      insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-crt_man_bil_itm icon_add_row
                               TEXT-120 space space.

    ENDIF.




*    Pagination button on toolbar.

    DESCRIBE TABLE gt_bill_pre_data_all LINES lv_lines.

    CREATE OBJECT lo_ctxmenu.

    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0 .
      lv_page_count = lv_lines / gs_calc_req_type-psize.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    DO lv_page_count TIMES.
      WRITE sy-index TO lv_page_no.
      CONDENSE lv_page_no.
      CONCATENATE TEXT-107 lv_page_no INTO lv_fcode.
      add_menu_function lo_ctxmenu lv_fcode lv_page_no.
    ENDDO.

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-page_select_bitm.

    insert_toolbar_button e_object->mt_toolbar lwa_button 2
                          gc_fcode-page_select_bitm icon_next_object
                          TEXT-008 space space.
*    ******
    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

    MOVE gs_variables-page_number_bitm TO lv_page_number_bitm.

    IF lv_page_number_bitm = lv_page_count OR gs_variables-page_count = 1 .
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page_bitm icon_column_right
                            TEXT-016 space 'X'.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page_bitm icon_column_right
                            TEXT-016 space space.
    ENDIF.

    IF lv_page_number_bitm = 1 .
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-previous_page_bitm icon_column_left
                            TEXT-015 space 'X'.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-previous_page_bitm icon_column_left
                          TEXT-015 space space.
    ENDIF.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.

  ENDMETHOD.
  METHOD on_bill_pre_data_changed.
    IF er_data_changed->mt_mod_cells[] IS NOT INITIAL.

      APPEND LINES OF er_data_changed->mt_mod_cells TO gt_bill_pre_mod_rows.
      SORT gt_bill_pre_mod_rows BY row_id.
      gs_variables-manual_changes_bill_pre = abap_true.
      DELETE ADJACENT DUPLICATES FROM gt_bill_pre_mod_rows COMPARING row_id.
    ENDIF.

    ""SOC BLOCK AUTHORIZATION
    LOOP AT gt_bill_pre_mod_rows ASSIGNING FIELD-SYMBOL(<lfs_bill_pre_mod_rows>).
      IF <lfs_bill_pre_mod_rows>-fieldname EQ 'FAKSP'.
        gt_blk_bill_pre_mod_rows = gt_bill_pre_mod_rows.
        cl_gui_cfw=>set_new_ok_code(
                    EXPORTING
                       new_code = gc_fcode-blk_auth_chk
                    ).
        EXIT.
      ENDIF.
    ENDLOOP.
    ""EOC BLOCK AUTHORIZATION
  ENDMETHOD.
  METHOD on_req_calc_subitm_toolbar.
    DATA: lwa_button TYPE stb_button.

    CLEAR lwa_button.
    IF gs_variables-overview_mode <> gc_mode_display.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                                            gc_fcode-create_bill_sub_itm icon_new_task
                                            TEXT-095 space space.
    ENDIF.
  ENDMETHOD.
  METHOD on_req_calc_subitm_user_cmd.
    DATA: lt_select_rows  TYPE lvc_t_row,
          lwa_select_rows TYPE lvc_s_row,
          lv_lines        TYPE i.

    FIELD-SYMBOLS: <lwa_sub_item> TYPE /cgdc/s_clrqit_fcat.
    CASE e_ucomm.
      WHEN gc_fcode-create_bill_sub_itm.
        CALL METHOD go_grid_calc_subitems->get_selected_rows
          IMPORTING
            et_index_rows = lt_select_rows[].

        CLEAR lv_lines.
        lv_lines = lines( lt_select_rows ).
        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSEIF lv_lines GT 1.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i002(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '002'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSE.
          CLEAR lwa_select_rows.
          READ TABLE lt_select_rows INTO lwa_select_rows INDEX 1.
          IF sy-subrc IS INITIAL.
            IF <lwa_sub_item> IS ASSIGNED.
              UNASSIGN <lwa_sub_item>.
            ENDIF.
            READ TABLE gt_item_subitem
            ASSIGNING <lwa_sub_item>
            INDEX lwa_select_rows-index.
            IF sy-subrc EQ 0.
              IF <lwa_sub_item>-rtbbinr IS INITIAL.
                PERFORM assign_bit_to_subitem CHANGING <lwa_sub_item>.
              ELSE.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i035(/cgdc/clrq).
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '035'.
                  gs_messages-msgty = gc_message_type-information.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

    go_grid_calc_subitems->refresh_table_display( ).

  ENDMETHOD.
  METHOD on_req_calc_subitm_hotspot.
    DATA: lt_msg TYPE /cgdc/t_message,
          ls_msg TYPE /cgdc/s_message.
    FIELD-SYMBOLS : <lwa_item> TYPE /cgdc/s_clrqit_fcat.
    CASE e_column_id-fieldname.
      WHEN '/CGDC/CLINE' OR '/CGDC/ACRNS' OR '/CGDC/FMSCK' OR 'CSLIN'.
        CLEAR: gv_clrno, gv_clrit.
        READ TABLE gt_item_subitem ASSIGNING <lwa_item> INDEX e_row_id-index.
*        gv_clrno = <lwa_item>-clrno.
*        gv_clrit = <lwa_item>-clrit.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_item>-clrsit
          IMPORTING
            output = <lwa_item>-clrsit.
        IF sy-subrc <> 0.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_item>-clrdit
          IMPORTING
            output = <lwa_item>-clrdit.
        IF sy-subrc <> 0.
        ENDIF.

        REFRESH: gt_cafs.
        SELECT * FROM /cgdc/_clrqcaf
          INTO CORRESPONDING FIELDS OF TABLE gt_cafs
          WHERE clrno  EQ <lwa_item>-clrno
          AND   clrit  EQ <lwa_item>-clrit
          AND   clrsit EQ <lwa_item>-clrsit
          AND   clrdit EQ <lwa_item>-clrdit.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <lwa_item>-clrsit
          IMPORTING
            output = <lwa_item>-clrsit.
        IF sy-subrc <> 0.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <lwa_item>-clrdit
          IMPORTING
            output = <lwa_item>-clrdit.
        IF sy-subrc <> 0.
        ENDIF.


        IF NOT gt_cafs IS INITIAL.
          CALL SCREEN gc_screen-disp_cafs_details STARTING AT 5 1.
        ENDIF.

        "++AMISHARMA - message display for subitems
      WHEN gc_layout_excp_fname.
*- Fetch messages from msg config
        SELECT *
               FROM /cgdc/t_clrq_err
               INTO TABLE @DATA(lt_msg_conf).

        READ TABLE gt_item_subitem INTO DATA(lwa_subitem) INDEX e_row_id-index.
        IF sy-subrc EQ 0.
          DATA(lv_len) = strlen( lwa_subitem-msg_code ).
          IF lv_len GT 0.
            DATA(lv_n) = 0.
            DO lv_len TIMES.
              READ TABLE lt_msg_conf INTO DATA(ls_err) WITH KEY msg_code = lwa_subitem-msg_code+lv_n(1).
              IF sy-subrc EQ 0.
                ls_msg-msgid = ls_err-msgclass.
                ls_msg-msgnr = ls_err-msgid.
                ls_msg-msgty = ls_err-msgty.
                APPEND ls_msg TO lt_msg.
                CLEAR ls_msg.
              ENDIF.
              lv_n = lv_n + 1.
            ENDDO.
          ENDIF.
        ENDIF.
        CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
          EXPORTING
            it_messages = lt_msg.
        IF sy-subrc <> 0.
        ENDIF.

      WHEN OTHERS.
        READ TABLE gt_item_subitem ASSIGNING <lwa_item> INDEX e_row_id-index.
        IF sy-subrc = 0.
          gs_variables-subitem_scrn_expnd = abap_true.
          ts_subitem_dtl-activetab = gc_fcode-tab_subitm_conditions.
          gs_variables-subitem_infocus = <lwa_item>-clrsit.
          gs_variables-delta_infocus = <lwa_item>-clrdit.
          <lwa_item>-rwclr = gc_rowcolor-yellow.
          CLEAR :gt_subitm_condn,
                 gt_subitm_part.

          IF e_row_id-index <> gs_variables-subitem_sel_prev.
            READ TABLE gt_item_subitem ASSIGNING <lwa_item> INDEX gs_variables-subitem_sel_prev.
            IF sy-subrc = 0.
              CLEAR <lwa_item>-rwclr.
            ENDIF.
            gs_variables-subitem_sel_prev = e_row_id-index.
          ENDIF.

          CALL METHOD cl_gui_cfw=>set_new_ok_code
            EXPORTING
              new_code = 'ENTR'.
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD on_bill_hist_toolbar.
  ENDMETHOD.
  METHOD on_bill_hist_user_cmd.
  ENDMETHOD.

  METHOD on_bill_hist_hotspot_click.
    DATA: lv_vbeln TYPE vbrk-vbeln.
    FIELD-SYMBOLS : <lwa_bill_hist> TYPE /cgdc/s_clrq_bill_hist_fcat,
                    <lwa_value>     TYPE any.

    CONSTANTS: lc_tcode_vfr3 TYPE sy-tcode VALUE 'VFR3',
               lc_tcode_vfp3 TYPE sy-tcode VALUE 'VFP3',
               lc_tcode_vf03 TYPE sy-tcode VALUE 'VF03',
               lc_col_icon   TYPE lvc_s_col VALUE 'ICON'.

    READ TABLE gt_bill_hist_fcat ASSIGNING <lwa_bill_hist> INDEX e_row_id-index.
    IF <lwa_bill_hist> IS ASSIGNED  .
      IF e_column_id = lc_col_icon.
        lv_vbeln = <lwa_bill_hist>-sbqdc.
        CASE <lwa_bill_hist>-sbdct.
          WHEN gc_sub_doc_cat-billing_doc_req.
            "VFR3
            SET PARAMETER ID 'VFR' FIELD lv_vbeln.
            CALL TRANSACTION lc_tcode_vfr3 WITHOUT AUTHORITY-CHECK AND SKIP FIRST SCREEN.
          WHEN gc_sub_doc_cat-preliminary_billing_doc.
            ""VFP3
            SET PARAMETER ID 'VFPBD' FIELD lv_vbeln.
            CALL TRANSACTION lc_tcode_vfp3 AND SKIP FIRST SCREEN.
          WHEN gc_sub_doc_cat-billing_doc.
            "VF03
            SET PARAMETER ID 'VF' FIELD lv_vbeln.
            CALL TRANSACTION lc_tcode_vf03 AND SKIP FIRST SCREEN.
        ENDCASE.
      ELSE.
        <lwa_bill_hist>-rwclr = gc_rowcolor-yellow.
        IF gt_clrq_key IS INITIAL.
          gt_clrq_key = gs_clrqdoc_infocus-x-critm_key.
        ENDIF.

        CLEAR: gs_clrqdoc_infocus-x-critm_key.
        SELECT a~clrno b~clrit
          FROM /cgdc/_clrqdf AS a
          INNER JOIN /cgdc/_clrqit AS b
          ON  a~clrno = b~clrno
          AND a~rtbbinr = b~rtbbinr
          INTO TABLE gs_clrqdoc_infocus-x-critm_key
          WHERE a~clrno = <lwa_bill_hist>-clrno
            AND a~sbdct = <lwa_bill_hist>-sbdct
            AND a~sbqdc = <lwa_bill_hist>-sbqdc.
        SORT gs_clrqdoc_infocus-x-critm_key BY clrno clrit.
        DELETE ADJACENT DUPLICATES FROM gs_clrqdoc_infocus-x-critm_key COMPARING clrno clrit.

        IF gs_variables-bh_prev_sel_row IS INITIAL.
          gs_variables-bh_prev_sel_row = e_row_id-index.
        ELSEIF gs_variables-bh_prev_sel_row <> e_row_id-index.
          READ TABLE gt_bill_hist_fcat ASSIGNING <lwa_bill_hist> INDEX gs_variables-bh_prev_sel_row.
          IF sy-subrc = 0.
            ASSIGN COMPONENT gs_bill_hist_fcat_field-rwclr OF STRUCTURE <lwa_bill_hist> TO <lwa_value>.
            IF <lwa_value> IS ASSIGNED.
              CLEAR <lwa_value>.
              UNASSIGN <lwa_value>.
            ENDIF.
          ENDIF.
          gs_variables-bh_prev_sel_row = e_row_id-index.
        ENDIF.

        gs_variables-refresh_calc_req_items_grid = abap_true.
        gs_variables-refersh_bill_hist_grid = abap_true.
        gs_variables-show_imp_all_btn = abap_true.
        "Set Page No.1 and Data From 1.
        gs_variables-page_number = gs_variables-item_from_tabix = 1.
        gs_variables-item_to_tabix = gs_calc_req_type-psize.

      ENDIF.
      IF sy-subrc = 0.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD on_calc_req_itm_hotspot_click.
    DATA: lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat,
          lt_msg                  TYPE /cgdc/t_message,
          ls_msg                  TYPE /cgdc/s_message.
    CASE e_column_id-fieldname.
      WHEN gc_clrqit_field-subitem_icon
          OR gc_rtbrpart_field-rsncd.
        READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_items_fcat INDEX e_row_id-index.
        CHECK sy-subrc EQ 0.
        gs_variables-item_infocus = lwa_calc_req_items_fcat-clrit.
        gs_variables-subitem_infocus = lwa_calc_req_items_fcat-clrsit.
        CLEAR: gt_subitm_condn,
                   gt_subitm_part,
                   gt_item_subitem,
                   gs_variables-subitem_scrn_expnd.
        ts_itm_details-activetab = gc_fcode-tab_itm_subitem.

*//Mark the glbal varible to show only reason codes items in sub item screen
        IF e_column_id-fieldname = gc_rtbrpart_field-rsncd AND lwa_calc_req_items_fcat-rsncd = gc_clin_mult.
          gs_variables-show_rsncd_items = abap_true.
        ELSE.
          CLEAR gs_variables-show_rsncd_items.
        ENDIF.

        CALL SCREEN gc_screen-item_subsequent_details STARTING AT 5 1.
      WHEN gc_layout_excp_fname.
*- Fetch messages from msg config
        SELECT *
               FROM /cgdc/t_clrq_err
               INTO TABLE @DATA(lt_msg_conf).

        READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_items_fcat INDEX e_row_id-index.
        IF sy-subrc EQ 0.
          DATA(lv_len) = strlen( lwa_calc_req_items_fcat-msg_code ).
          IF lv_len GT 0.
            DATA(lv_n) = 0.
            DO lv_len TIMES.
              READ TABLE lt_msg_conf INTO DATA(ls_err) WITH KEY msg_code = lwa_calc_req_items_fcat-msg_code+lv_n(1).
              IF sy-subrc EQ 0.
                ls_msg-msgid = ls_err-msgclass.
                ls_msg-msgnr = ls_err-msgid.
                ls_msg-msgty = ls_err-msgty.
                APPEND ls_msg TO lt_msg.
                CLEAR ls_msg.
              ENDIF.
              lv_n = lv_n + 1.
            ENDDO.
          ENDIF.
        ENDIF.
        CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
          EXPORTING
            it_messages = lt_msg.
        IF sy-subrc <> 0.
        ENDIF.

      WHEN gc_clrqbi_field-/cgdc/cline OR gc_clrqbi_field-/cgdc/acrns OR gc_clrqbi_field-/cgdc/fmsck OR gc_clrqbi_field-cslin.
        CLEAR: lwa_calc_req_items_fcat, gv_clrno,
               gv_clrit.
        READ TABLE gt_calc_req_items_fcat
        INTO lwa_calc_req_items_fcat INDEX e_row_id-index.

        gv_clrno = lwa_calc_req_items_fcat-clrno.
        gv_clrit = lwa_calc_req_items_fcat-clrit.

        REFRESH: gt_cafs.
        SELECT * FROM /cgdc/_clrqcaf
          INTO CORRESPONDING FIELDS OF TABLE gt_cafs
          WHERE clrno EQ gv_clrno
          AND   clrit EQ gv_clrit.

        IF NOT gt_cafs IS INITIAL.
          CALL SCREEN gc_screen-disp_cafs_details STARTING AT 5 1.
        ENDIF.
    ENDCASE.
  ENDMETHOD.
  METHOD on_req_calc_upd_prc_hotspot.

  ENDMETHOD.
  METHOD on_req_calc_upd_prc_user_cmd.
    PERFORM fcode_reprice.
  ENDMETHOD.
  METHOD on_messages_user_command.

    CASE e_ucomm.
      WHEN  'e_ucomm'.
    ENDCASE.

  ENDMETHOD.
  METHOD on_messages_button_click.
    DATA lwa_message TYPE fkk_msg.
    READ TABLE gt_messages_fcat INTO DATA(lwa_msg)
      INDEX es_row_no-row_id.
    IF sy-subrc EQ 0.
      lwa_message-msgid  = lwa_msg-msgid.
      lwa_message-msgno  = lwa_msg-msgnr.
      CALL FUNCTION 'FKK_MESSAGES_LONGTEXT'
        EXPORTING
          i_message = lwa_message.
      IF sy-subrc <> 0.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD on_req_calc_upd_prc_toolbar.
    DATA: lwa_button TYPE stb_button,
          lwa_btnmnu TYPE stb_btnmnu,
          lo_ctxmenu TYPE REF TO cl_ctmenu.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                      gc_fcode-funcations icon_convert
                      TEXT-036 TEXT-036 space.

  ENDMETHOD.
  METHOD on_postpone_user_cmd.
    FIELD-SYMBOLS: <lwa_postpone_data> TYPE /cgdc/s_clrq_postpone.
    DATA: lwa_style TYPE lvc_s_styl.
    DATA : lt_sel_row  TYPE lvc_t_row,
           lwa_sel_row TYPE lvc_s_row.
    DATA : lv_selected_rows TYPE i.
    DATA : lv_success TYPE flag.
    CASE e_ucomm.
      WHEN gc_fcode-post_del_row.
        CALL METHOD go_postpone_grid->get_selected_rows
          IMPORTING
            et_index_rows = lt_sel_row.
        DESCRIBE TABLE lt_sel_row LINES lv_selected_rows.
        IF lv_selected_rows = 0.
          MESSAGE 'Select atleast one row to delete'(162) TYPE gc_message_type-information.
          RETURN.
        ENDIF.
        LOOP AT lt_sel_row INTO lwa_sel_row.
          READ TABLE gt_item_postponed_fcat ASSIGNING <lwa_postpone_data> INDEX lwa_sel_row-index.
          IF sy-subrc = 0.
            <lwa_postpone_data>-postp_qty = 0.
            <lwa_postpone_data>-postp_amt = 0.
            <lwa_postpone_data>-del = abap_true.
          ENDIF.
        ENDLOOP.
        PERFORM postpone_reject_data CHANGING lv_success.
        DELETE gt_item_postponed_fcat WHERE del IS NOT INITIAL.
    ENDCASE.
    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.
  ENDMETHOD.
  METHOD on_postpone_toolbar.
    DATA: lwa_button TYPE stb_button.
    insert_toolbar_button e_object->mt_toolbar lwa_button space gc_fcode-post_del_row
                          icon_delete_row TEXT-085 space space.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.
  ENDMETHOD.
  METHOD on_postpone_handle_change.
    DATA: lv_empty_line     TYPE i.
    DATA: lv_changed TYPE flag.
    DATA: lwa_style TYPE lvc_s_styl.
    DATA: lwa_matnr_desc TYPE lty_matnr_desc.
    DATA : lv_error TYPE flag.
    FIELD-SYMBOLS: <lwa_postpone_data> TYPE /cgdc/s_clrq_postpone.
    IF gs_variables-itm_post_amt_un IS NOT INITIAL.
      LOOP AT gt_item_postponed_fcat ASSIGNING <lwa_postpone_data> WHERE postp_amt IS INITIAL AND psdat IS INITIAL.
        lv_empty_line =  lv_empty_line + 1.
      ENDLOOP.
    ELSEIF gs_variables-itm_post_quan_un IS NOT INITIAL.
      LOOP AT gt_item_postponed_fcat ASSIGNING <lwa_postpone_data> WHERE postp_qty IS INITIAL AND psdat IS INITIAL.
        lv_empty_line =  lv_empty_line + 1.
      ENDLOOP.
    ENDIF.
    DO 6 - lv_empty_line TIMES.
      APPEND INITIAL LINE TO gt_item_postponed_fcat ASSIGNING <lwa_postpone_data> .
      <lwa_postpone_data>-clrit = gs_variables-item_infocus.
      lwa_style-style = cl_gui_alv_grid=>mc_style_enabled.
      lwa_style-fieldname = 'POSTP_AMT'.
      APPEND lwa_style TO  <lwa_postpone_data>-style.
      lwa_style-fieldname = 'POSTP_QTY'.
      APPEND lwa_style TO  <lwa_postpone_data>-style.
      lwa_style-fieldname = 'PSDAT'.
      APPEND lwa_style TO  <lwa_postpone_data>-style.
    ENDDO.

    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.
  ENDMETHOD.
  METHOD on_postpone_f4.
    TYPES: BEGIN OF lty_valuetab,
             value TYPE c LENGTH 40,
           END OF lty_valuetab.
    DATA: lt_valuetab     TYPE TABLE OF lty_valuetab,
          lwa_value       TYPE lty_valuetab,
          lt_help_fields  TYPE TABLE OF dfies,
          lwa_help_fields TYPE  dfies,
          lt_return       TYPE TABLE OF ddshretval,
          lwa_stable      TYPE lvc_s_stbl VALUE 'XX',
          lv_fname_rsncd  TYPE dfies-fieldname VALUE 'RSNCD',
          lv_tabname_part TYPE /cgdc/t_rtbrpart VALUE '/CGDC/T_RTBRPART'.

    READ TABLE gt_item_postponed_fcat ASSIGNING FIELD-SYMBOL(<lwa_post_fcat>) INDEX es_row_no-row_id.
    IF sy-subrc EQ 0.
*//Provide the F4 for reason code in postpone untill
      CASE e_fieldname.
        WHEN gc_rtbrpart_field-rsncd.
          SELECT SINGLE *
            FROM /cgdc/t_clrtype
            INTO @DATA(lwa_clrtype)
            WHERE clrqt = @gs_clrqdoc_infocus-x-crhdr-clrqt.
          IF sy-subrc EQ 0.
            IF gs_variables-itm_post_amt_un IS NOT INITIAL OR
              gs_variables-itm_post_quan_un IS NOT INITIAL.
              SELECT *
                FROM /cgdc/t_rtbrpar
                INTO TABLE @DATA(lt_rtbrpar)
                WHERE rsn_func EQ @gc_rsn_func-postpone
                AND rsnpf = @lwa_clrtype-rsnprf_p.
              IF sy-subrc = 0.
                SELECT rsncd, descr
                  FROM /cgdc/t_rtbrpart
                  INTO TABLE @DATA(lt_rtbrpart)
                  FOR ALL ENTRIES IN @lt_rtbrpar
                  WHERE rsn_func EQ @gc_rsn_func-postpone
                  AND rsnpf = @lwa_clrtype-rsnprf_p
                  AND rsncd = @lt_rtbrpar-rsncd
                  AND spras = @sy-langu.
                IF sy-subrc EQ 0.
                  IF lt_rtbrpart[] IS NOT INITIAL.
                    LOOP AT lt_rtbrpart INTO DATA(lwa_rtbrpart).
                      lwa_value-value = lwa_rtbrpart-rsncd.
                      APPEND lwa_value TO lt_valuetab.
                      lwa_value-value = lwa_rtbrpart-descr.
                      APPEND lwa_value TO lt_valuetab.
                    ENDLOOP.
                    lwa_help_fields-tabname = lv_tabname_part.
                    lwa_help_fields-fieldname = gc_rtbrpart_field-rsncd.
                    APPEND lwa_help_fields TO lt_help_fields.
                    lwa_help_fields-fieldname = gc_rtbrpart_field-descr.
                    APPEND lwa_help_fields TO lt_help_fields.
                    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
                      EXPORTING
                        retfield        = lv_fname_rsncd
                        dynpprog        = sy-cprog
                        dynpnr          = sy-dynnr
                        value_org       = gc_val_org-cell
                      TABLES
                        value_tab       = lt_valuetab[]
                        field_tab       = lt_help_fields[]
                        return_tab      = lt_return
                      EXCEPTIONS
                        parameter_error = 1
                        no_values_found = 2
                        OTHERS          = 3.
                    IF sy-subrc = 0.
                      READ TABLE lt_return INTO DATA(lwa_return) INDEX 1.
                      IF sy-subrc = 0.
                        <lwa_post_fcat>-rsncd = lwa_return-fieldval.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.
      er_event_data->m_event_handled = abap_true.
    ENDIF.
  ENDMETHOD.
  METHOD on_man_itm_f4.
  ENDMETHOD.
  METHOD on_man_itm_handle_change.
  ENDMETHOD.

  METHOD on_calc_grp_toolbar.

    DATA: lv_lines                TYPE i,
          lv_page_no              TYPE gui_text,
          lv_fcode                TYPE sy-ucomm,
          lv_page_count(5)        TYPE n,
          lwa_button              TYPE stb_button,
          lwa_btnmnu              TYPE stb_btnmnu,
          lv_page_number_calc_grp TYPE i,
          lo_ctxmenu              TYPE REF TO cl_ctmenu.

    insert_toolbar_button e_object->mt_toolbar lwa_button space
                              gc_fcode-cacl_grp_cond icon_price
                              TEXT-006 space space.

    IF gs_variables-overview_mode <> gc_mode_display.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                                gc_fcode-calc_grp_rel icon_release
                                TEXT-128 space space.

      CREATE OBJECT lo_ctxmenu.
      add_menu_function lo_ctxmenu gc_fcode-set_constr_dt   TEXT-218.
      add_menu_function lo_ctxmenu gc_fcode-reset_constr_dt TEXT-222.

      set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-calc_grp_constr_dt.

      insert_toolbar_button e_object->mt_toolbar lwa_button 2
                                gc_fcode-calc_grp_constr_dt icon_date
                                TEXT-218 space space.

    ENDIF.


***New CREATE BILLABLE ITEMS related changes
    insert_toolbar_button e_object->mt_toolbar lwa_button 3
                          space space space space space.


    DESCRIBE TABLE <gt_calc_grp_data> LINES lv_lines.

    CREATE OBJECT lo_ctxmenu.

    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0 .
      lv_page_count = lv_lines / gs_calc_req_type-psize.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    DO lv_page_count TIMES.
      WRITE sy-index TO lv_page_no.
      CONDENSE lv_page_no.
      CONCATENATE TEXT-107 lv_page_no INTO lv_fcode.
      add_menu_function lo_ctxmenu lv_fcode lv_page_no.
    ENDDO.

    set_static_context e_object->mt_btnmnu lwa_btnmnu
                       lo_ctxmenu gc_fcode-page_select_calc_grp.

    insert_toolbar_button e_object->mt_toolbar lwa_button 2
                          gc_fcode-page_select_calc_grp icon_next_object
                          TEXT-008 space space.
*******
    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.
    MOVE gs_variables-page_number_calc_grp TO lv_page_number_calc_grp.
    IF lv_page_number_calc_grp = lv_page_count OR gs_variables-page_count = 1.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page_calc_grp icon_column_right
                            TEXT-016 space abap_true.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-next_page_calc_grp icon_column_right
                            TEXT-016 space space.
    ENDIF.

    IF lv_page_number_calc_grp = 1 .
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                            gc_fcode-previous_page_calc_grp icon_column_left
                            TEXT-015 space abap_true.
    ELSE.
      insert_toolbar_button e_object->mt_toolbar lwa_button space
                          gc_fcode-previous_page_calc_grp icon_column_left
                          TEXT-015 space space.
    ENDIF.

    insert_toolbar_button e_object->mt_toolbar lwa_button 3 space
                          space space space space.


  ENDMETHOD.

  METHOD on_calc_grp_hotspot_click.

    DATA: lt_crgrrf TYPE /cgdc/tt_clrqgrrf,
          ls_crgrrf TYPE /cgdc/s_clrqgrrf,
          lv_where  TYPE string.

    FIELD-SYMBOLS: <ls_clrq_data>      TYPE any,
                   <ls_clrq_data_temp> TYPE any,
                   <ls_clrq_data_page> TYPE any,
                   <lv_srno>           TYPE any,
                   <lv_clrno>          TYPE /cgdc/clrqno,
                   <lv_value>          TYPE data,
                   <lv_datab>          TYPE kodatab,
                   <lv_datbi>          TYPE kodatbi,
                   <lv_clgrn>          TYPE /cgdc/rtb_clgrn,
                   <lv_knumh>          TYPE /cgdc/rtb_clgrp_knumh,
                   <lv_wbsel>          TYPE ps_posid.

    CLEAR lv_where.
    READ TABLE <gt_calc_grp_data_page> ASSIGNING <ls_clrq_data_page>
                                  INDEX e_row_id-index.
    ASSIGN COMPONENT gc_fieldname-srno OF STRUCTURE <ls_clrq_data_page> TO <lv_srno>.
    READ TABLE <gt_calc_grp_data> ASSIGNING <ls_clrq_data> WITH KEY (gc_fieldname-srno) = <lv_srno> .
    IF sy-subrc EQ 0.

      IF gs_variables-cg_prev_sel_row IS INITIAL.
        gs_variables-cg_prev_sel_row = <lv_srno>.
      ELSEIF gs_variables-cg_prev_sel_row <> <lv_srno>.
        READ TABLE <gt_calc_grp_data> ASSIGNING <ls_clrq_data_temp> INDEX gs_variables-cg_prev_sel_row.
        IF sy-subrc = 0.
          ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <ls_clrq_data_temp> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            CLEAR <lv_value>.
            UNASSIGN: <lv_value>,
                      <ls_clrq_data_temp>.
          ENDIF.
        ENDIF.
        gs_variables-cg_prev_sel_row = <lv_srno>.
      ENDIF.

      ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <ls_clrq_data> TO <lv_value>.
      IF <lv_value> IS ASSIGNED.
        <lv_value> = gc_rowcolor-yellow.
      ENDIF.

      REFRESH: lt_crgrrf.
      lt_crgrrf[] = gs_clrqdoc_infocus-x-crgrrf.

      ASSIGN COMPONENT gc_clrqbi_field-clrno OF STRUCTURE <ls_clrq_data>
                               TO <lv_clrno>.
      ASSIGN COMPONENT gc_calc_grp_rows_field-datbi OF STRUCTURE <ls_clrq_data>
                               TO <lv_datbi>.
      ASSIGN COMPONENT gc_calc_grp_rows_field-datab OF STRUCTURE <ls_clrq_data>
                               TO <lv_datab>.

      IF ( <lv_clrno> IS ASSIGNED AND <lv_clrno> IS NOT INITIAL AND
           <lv_datab> IS ASSIGNED AND <lv_datab> IS NOT INITIAL AND
           <lv_datbi> IS ASSIGNED AND <lv_datbi> IS NOT INITIAL ).
        "Build where clause for with non IT details
        lv_where = |CLRNO EQ| & | | & |{ <lv_clrno> }| & | | &
                   |AND CLRSIT EQ '000000'| & | | &
                   |AND PRSDT GE| & | | & |@<lv_datab>| & | | &
                   |AND PRSDT LE| & | | & |@<lv_datbi>|.

        "Build where clause further to add IT details if applicable.
        ASSIGN COMPONENT gc_calc_grp_rows_field-clgrn OF STRUCTURE <ls_clrq_data>
                                       TO <lv_clgrn>.
        ASSIGN COMPONENT gc_calc_grp_rows_field-clgrp_knumh OF STRUCTURE <ls_clrq_data>
                                       TO <lv_knumh>.
        ASSIGN COMPONENT gc_calc_grp_rows_field-wbsel OF STRUCTURE <ls_clrq_data>
                                       TO <lv_wbsel>.
        IF ( <lv_clgrn> IS ASSIGNED AND <lv_clgrn> IS NOT INITIAL AND
             <lv_knumh> IS ASSIGNED AND <lv_wbsel> IS ASSIGNED ).
          CLEAR ls_crgrrf.
          LOOP AT lt_crgrrf INTO ls_crgrrf
                            WHERE clgrn       EQ <lv_clgrn>
                            AND   clgrp_knumh EQ <lv_knumh>
                            AND   wbsel EQ <lv_wbsel>.
            IF ls_crgrrf-fname EQ gc_fname AND ls_crgrrf-fvalue IS NOT INITIAL.
              lv_where = |{ lv_where }| & | | & |AND CNTIT EQ| & | | & |{ ls_crgrrf-fvalue }|.
              CLEAR ls_crgrrf.
              CONTINUE.
            ENDIF.

            IF ls_crgrrf-fcatg EQ gc_fcatg.
              lv_where = |{ lv_where }| & | | & |{ gc_operator-and }| & | | & |{ ls_crgrrf-fname }| &
                         | | & |{ gc_operator-equal }| & | | & |{ ls_crgrrf-fvalue }|.
            ENDIF.
            CLEAR ls_crgrrf.
          ENDLOOP.

        ENDIF.
      ENDIF.

      IF NOT lv_where IS INITIAL.
        IF gt_clrq_key IS INITIAL.
          gt_clrq_key = gs_clrqdoc_infocus-x-critm_key.
        ENDIF.

        CLEAR gs_clrqdoc_infocus-x-critm_key.
        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Correction
        SELECT clrno, clrit
        FROM /cgdc/_clrqit
        INTO TABLE @gs_clrqdoc_infocus-x-critm_key
        WHERE (lv_where).
      ENDIF.
    ENDIF.

    UNASSIGN: <lv_clgrn>, <lv_knumh>,
              <lv_clrno>, <lv_datab>,
              <lv_datbi>.

    gs_variables-refresh_calc_req_items_grid = abap_true.
    gs_variables-refersh_bill_bp_grid = abap_true.
    gs_variables-refresh_calc_grp_grid =  abap_true.
    gs_variables-show_imp_all_btn = abap_true.
    gs_variables-page_number = gs_variables-item_from_tabix = 1.
    gs_variables-item_to_tabix = gs_calc_req_type-psize.

    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.

  ENDMETHOD.

  METHOD on_calc_grp_user_command.

    DATA: lv_lines                TYPE i,
          lv_page_count(4)        TYPE n,
          lt_selected_rows        TYPE lvc_t_row,
          lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat,
          lwa_crgrr               TYPE /cgdc/s_clrqgrr,
          lwa_selected_row        TYPE lvc_s_row,
          lv_ans                  TYPE c.

    CONSTANTS lc_page TYPE sy-ucomm VALUE 'PAGE'.

    FIELD-SYMBOLS: <lwa_calc_grp>      TYPE data,
                   <lv_srno>           TYPE any,
                   <lwa_calc_grp_page> TYPE any.

    CALL METHOD go_calc_grp_grid->get_selected_rows
      IMPORTING
        et_index_rows = lt_selected_rows[].

    DESCRIBE TABLE lt_selected_rows LINES lv_lines.

    READ TABLE lt_selected_rows INTO lwa_selected_row INDEX 1.
    IF sy-subrc EQ 0.
      READ TABLE <gt_calc_grp_data_page> ASSIGNING <lwa_calc_grp_page> INDEX lwa_selected_row-index.
      ASSIGN COMPONENT gc_clrqbi_field-srno OF STRUCTURE <lwa_calc_grp_page> TO <lv_srno>.
      READ TABLE <gt_calc_grp_data> ASSIGNING <lwa_calc_grp> WITH KEY (gc_clrqbi_field-srno) = <lv_srno> .
      CHECK sy-subrc EQ 0.

      MOVE-CORRESPONDING <lwa_calc_grp> TO lwa_crgrr.

      gs_variables-calc_grp_knumh = lwa_crgrr-clgrp_knumh.
      gs_variables-clcgrp_indx_infocus = <lv_srno>.
    ENDIF.


    CASE e_ucomm.
***New CREATE BILLABLE ITEMS related changes
      WHEN gc_fcode-cacl_grp_cond OR gc_fcode-create_billable_itms.
***

        IF lv_lines EQ 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i001(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '001'.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ELSEIF lv_lines GT 1.
          IF e_ucomm NE gc_fcode-calc_grp_rel.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i002(/cgdc/clrq).
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '002'.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            EXIT.
          ENDIF.
        ENDIF.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.


      WHEN gc_fcode-previous_page_calc_grp OR gc_fcode-next_page_calc_grp.

        DESCRIBE TABLE <gt_calc_grp_data> LINES lv_lines.

        IF lv_lines GT gs_calc_req_type-psize.
          lv_page_count = lv_lines / gs_calc_req_type-psize.
        ELSE.
          MOVE 1 TO lv_page_count.
        ENDIF.

        IF e_ucomm EQ gc_fcode-previous_page_calc_grp.
          gs_variables-page_number_calc_grp = gs_variables-page_number_calc_grp - 1.
          CHECK gs_variables-page_number_calc_grp NE 0.
        ELSE.
          gs_variables-page_number_calc_grp = gs_variables-page_number_calc_grp + 1.
          CHECK gs_variables-page_number_calc_grp LE lv_page_count.
        ENDIF.

        gs_variables-refresh_calc_grp_grid = abap_true.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.
      WHEN gc_fcode-calc_grp_rel.
        IF gs_clrqdoc_infocus-updkz IS INITIAL.  " if any updates are pending release cr will not execute
          CLEAR: lwa_selected_row, gs_variables-cont_constr_dt.
          IF <gt_calc_grp_data_page> IS NOT INITIAL.
            CALL SCREEN gc_screen-constr_dt_popup STARTING AT 10 10 ENDING AT 50 12.
          ENDIF.
          IF gs_variables-cont_constr_dt IS NOT INITIAL OR
            <gt_calc_grp_data_page> IS INITIAL.
            CALL FUNCTION 'POPUP_TO_CONFIRM'
              EXPORTING
                text_question = TEXT-206
                text_button_1 = 'Yes'
                text_button_2 = 'No'
              IMPORTING
                answer        = lv_ans.

            IF lv_ans = '1'.
              PERFORM release_calc_group USING abap_true "--AMISHARMA abap_false
                                               lwa_selected_row.

            ENDIF.

*          ENDIF.

          ELSE.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i155(/cgdc/clrq).
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '155'.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            EXIT.
          ENDIF.
        ENDIF.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-set_constr_dt.
        CLEAR:  gs_variables-cont_constr_dt.
        CALL SCREEN gc_screen-constr_dt_popup STARTING AT 10 10 ENDING AT 50 12.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

      WHEN gc_fcode-reset_constr_dt.
        CLEAR gs_variables-rel_constr_dt.
        gs_variables-rel_constr_dt = sy-datum.
        gs_variables-refresh_calc_grp_grid = abap_true.

        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.


      WHEN OTHERS.

        IF e_ucomm CS lc_page.
          gs_variables-page_number_calc_grp = e_ucomm+4(4).
          gs_variables-refresh_calc_grp_grid = abap_true.
        ENDIF.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = gc_fcode-entr.

    ENDCASE.

  ENDMETHOD.
  METHOD on_bill_prev_user_command.
    CASE e_ucomm.

      WHEN gc_fcode-cacl_grp_cond.
        CALL METHOD cl_gui_cfw=>set_new_ok_code
          EXPORTING
            new_code = e_ucomm.

    ENDCASE.

  ENDMETHOD.
  METHOD on_enter.

    fcode = 'ENT1'.

  ENDMETHOD.
ENDCLASS.
CLASS lcl_rtohc_helper DEFINITION FINAL.

  PUBLIC SECTION.

    CLASS-METHODS collect_coiob
      IMPORTING
        iv_ovrhd_date TYPE co_valdt
        iv_val_period TYPE co_perio
        is_cobk       TYPE cobk
        it_coep       TYPE tt_coep
      EXPORTING
        et_coiob      TYPE tt_coiob
      EXCEPTIONS
        object_not_found.

    CLASS-METHODS dummy_call_4_surcharge_proc
      IMPORTING
        is_cobk TYPE cobk
      EXCEPTIONS
        error_occurred.

    CLASS-METHODS check_account_assigment
      IMPORTING
        is_cobk TYPE cobk
        it_coep TYPE tt_coep
      EXCEPTIONS
        error_occurred.

  PRIVATE SECTION.
    TYPES:
      BEGIN OF ty_already_processed_docs,
        vrgng TYPE co_vorgang,
        orgvg TYPE co_vorgang,
        perab TYPE co_perab,
        kokrs TYPE kokrs,
        belnr TYPE co_belnr,
      END OF ty_already_processed_docs.

    CLASS-DATA already_processed_docs TYPE TABLE OF ty_already_processed_docs.

ENDCLASS.
CLASS lcl_rtohc_helper IMPLEMENTATION.

  METHOD collect_coiob.

    CLEAR et_coiob.

    DATA lt_period TYPE t_periods.
    IF NOT iv_ovrhd_date IS INITIAL.
      APPEND VALUE #( buper = iv_val_period
                      datab = iv_ovrhd_date
                      datbi = iv_ovrhd_date ) TO lt_period.
    ENDIF.
    IF iv_ovrhd_date <> is_cobk-budat.
      APPEND VALUE #( buper = iv_val_period
                      datab = is_cobk-budat
                      datbi = is_cobk-budat ) TO lt_period.
    ENDIF.
    LOOP AT it_coep REFERENCE INTO DATA(lr_coep).
      READ TABLE et_coiob WITH KEY objnr = lr_coep->objnr
                          BINARY SEARCH
                          TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        INSERT VALUE #( objnr = lr_coep->objnr ) INTO et_coiob INDEX sy-tabix.
      ENDIF.
      READ TABLE et_coiob WITH KEY objnr = lr_coep->parob1
                          BINARY SEARCH
                          TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        INSERT VALUE #( objnr = lr_coep->parob1 ) INTO et_coiob INDEX sy-tabix.
      ENDIF.
    ENDLOOP.
    SORT et_coiob.
    CALL FUNCTION 'K_OBJECTS_MASTER_READ'
      TABLES
        coiob_tab = et_coiob
        i_periods = lt_period
      EXCEPTIONS
        OTHERS    = 1.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT sy-subrc IS INITIAL
    AND sy-msgty NA 'WIS'.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE ID sy-msgid TYPE sy-msgty
                            NUMBER sy-msgno
                            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                            RAISING object_not_found.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = sy-msgid.
        gs_messages-msgnr = sy-msgno.
        gs_messages-msgty = sy-msgty.
        gs_messages-msgv1 = sy-msgv1.
        gs_messages-msgv2 = sy-msgv2.
        gs_messages-msgv3 = sy-msgv3.
        gs_messages-msgv4 = sy-msgv4.
        APPEND gs_messages TO gt_messages.
        RAISE object_not_found.
      ENDIF.


    ENDIF.

  ENDMETHOD.

  METHOD dummy_call_4_surcharge_proc.

    DATA:
      lv_dummy_objnr  TYPE j_objnr,
      lv_dummy_komk   TYPE komk,
      lv_dummy_komp   TYPE komp,
      lt_excl_vorgang TYPE STANDARD TABLE OF co_vorgang.

* Since the next function call to K_SURCHARGE_CALCULATE needs to import
* the already calculated overhead line items from the calling session,
* and that call would requires to initialize some global variables
* beforehand, here we need to first call K_SURCHARGE_CALCULATE to do
* the initialization with some dummy parameters
    CALL FUNCTION 'K_SURCHARGE_CALCULATE'
      EXPORTING
        buchen              = space                                  " Do not post
        bu_datum            = is_cobk-budat
        export_steuerung    = 0                                      " Do not export
        gjahr_bis           = is_cobk-gjahr
        gjahr_von           = is_cobk-gjahr
        import_steuerung    = '1'                                   " import
        init                = 'X'                                   " Do not re-initialize
        kokrs               = is_cobk-kokrs
        kurst               = space
        objnr               = lv_dummy_objnr                        " Mandatory parameter
        objwaer             = is_cobk-kwaer
        periode_bis         = is_cobk-perbi
        periode_von         = is_cobk-perab
        tkomk               = lv_dummy_komk                         " Mandatory parameter
        tkomp               = lv_dummy_komp                         " Mandatory parameter
        version             = '000'
        vorgang             = 'KZPI'                                "con_vrgng-periodic_overhead '          " KZPI
        wert_dat            = is_cobk-wsdat                         " Value date used in prior call
        wrttpw              = '04'                                  " 04
        i_realtime_overhead = abap_true
        is_reference_cobk   = is_cobk                               " Source for REFBN, AWTYP etc
      TABLES
        excl_vorgang        = lt_excl_vorgang                       " Empty table for mandatory parameter
      EXCEPTIONS
        fehler_protokoll    = 1
        ungueltiger_zustand = 2
        OTHERS              = 3.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT sy-subrc IS INITIAL
    AND sy-msgty NA 'WIS'.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE ID sy-msgid TYPE sy-msgty
                            NUMBER sy-msgno
                            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                            RAISING error_occurred.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = sy-msgid.
        gs_messages-msgnr = sy-msgno.
        gs_messages-msgty = sy-msgty.
        gs_messages-msgv1 = sy-msgv1.
        gs_messages-msgv2 = sy-msgv2.
        gs_messages-msgv3 = sy-msgv3.
        gs_messages-msgv4 = sy-msgv4.
        APPEND gs_messages TO gt_messages.
        RAISE error_occurred.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD check_account_assigment.

    DATA(ls_cobk) = is_cobk.
    CLEAR ls_cobk-orgvg. "AFRU would be treated as activitiy allocation
    LOOP AT it_coep REFERENCE INTO DATA(lr_coep).
      CALL METHOD cl_fins_co_to_acdoc_util=>map_coep_to_cobl(
        EXPORTING
          is_coep            = lr_coep->*
          is_cobk            = ls_cobk
        IMPORTING
          es_cobl            = DATA(ls_cobl)
          eb_is_alloc_sender = DATA(lb_is_alloc_sender)
        EXCEPTIONS
          OTHERS             = 1 ).

      IF NOT sy-subrc IS INITIAL
      AND sy-msgty NA 'WIS'.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE ID sy-msgid TYPE sy-msgty
                              NUMBER sy-msgno
                              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                              RAISING error_occurred.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = sy-msgid.
          gs_messages-msgnr = sy-msgno.
          gs_messages-msgty = sy-msgty.
          gs_messages-msgv1 = sy-msgv1.
          gs_messages-msgv2 = sy-msgv2.
          gs_messages-msgv3 = sy-msgv3.
          gs_messages-msgv4 = sy-msgv4.
          APPEND gs_messages TO gt_messages.
          RAISE error_occurred.
        ENDIF.
      ENDIF.

      CALL FUNCTION 'K_COBL_CHECK'
        EXPORTING
          i_cobl          = ls_cobl
          i_cobk          = is_cobk
          i_xsend         = lb_is_alloc_sender
          i_real_reversal = is_cobk-stflg
        IMPORTING
          e_cobl          = ls_cobl
        EXCEPTIONS
          error_message   = 1
          OTHERS          = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF NOT sy-subrc IS INITIAL
      AND sy-msgty NA 'WIS'.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE ID sy-msgid TYPE sy-msgty
                              NUMBER sy-msgno
                              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                              RAISING error_occurred.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = sy-msgid.
          gs_messages-msgnr = sy-msgno.
          gs_messages-msgty = sy-msgty.
          gs_messages-msgv1 = sy-msgv1.
          gs_messages-msgv2 = sy-msgv2.
          gs_messages-msgv3 = sy-msgv3.
          gs_messages-msgv4 = sy-msgv4.
          APPEND gs_messages TO gt_messages.
          RAISE error_occurred.
        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.



ENDCLASS.
*&---------------------------------------------------------------------*
*& Class LCL_BSEL_F4
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
CLASS lcl_bsel_event_handler DEFINITION .

  PUBLIC SECTION.
    INTERFACES : /cgdc/if_bsel_events.

ENDCLASS.
CLASS lcl_bsel_event_handler IMPLEMENTATION.

  METHOD /cgdc/if_bsel_events~on_input_value_check.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_selections_check.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_input_display.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_user_command.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_variant_save.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~value_descr_get.
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_more_values.
    gs_variables-bsel_tabname = i_tabname.
    gs_variables-bsel_fieldnm = i_fieldname.
*    gref_selections = iref_selections. "commented by nmotwani to activate the code
  ENDMETHOD.
  METHOD /cgdc/if_bsel_events~on_f4.

    DATA: lv_subrc       TYPE sy-subrc,
          lt_return_tab  TYPE TABLE OF ddshretval,
          lwa_return_tab TYPE ddshretval,
          lt_field       TYPE dfies_tab,
          selfield       TYPE char100,
          domainnm       TYPE char100,
          lref_f4_data   TYPE REF TO data.
    FIELD-SYMBOLS : <lft_value> TYPE table.

    FIELD-SYMBOLS: <lv_value> TYPE any.
    FIELD-SYMBOLS: <lwa_pre_data> TYPE any.

    CONSTANTS: lc_where_cnd1 TYPE char30 VALUE ' IS NOT INITIAL AND CLRNO EQ '.

    selfield = i_fieldname.
    SELECT SINGLE rollname
      FROM dd03l
      INTO domainnm
      WHERE tabname = i_tabname AND fieldname = i_fieldname.
    IF sy-subrc = 0.
      CREATE DATA lref_f4_data TYPE TABLE OF (domainnm).
      ASSIGN lref_f4_data->* TO <lft_value>.
      CONCATENATE selfield lc_where_cnd1
       gs_clrqdoc_infocus-clrno
      INTO DATA(lv_where) SEPARATED BY space.
      IF i_tabname = gc_structure-clrq_items.
        SELECT DISTINCT (selfield)
          FROM /cgdc/_clrqit
          WHERE (lv_where)
          INTO TABLE @<lft_value>.
      ELSEIF i_tabname = gc_bilitm_tabname. "gc_view-bill_item.
        LOOP AT gt_bill_pre_data_all ASSIGNING <lwa_pre_data>.
          ASSIGN COMPONENT  i_fieldname   OF STRUCTURE <lwa_pre_data> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            APPEND <lv_value> TO <lft_value>.
            UNASSIGN <lv_value>.
          ENDIF.
        ENDLOOP.
      ENDIF.

      SORT <lft_value>.

      IF sy-subrc = 0.

        APPEND VALUE #( tabname = i_tabname
                        fieldname = i_fieldname )  TO lt_field .
        CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
          EXPORTING
            retfield        = i_fieldname
            display         = space
          TABLES
            value_tab       = <lft_value>
            field_tab       = lt_field[]
            return_tab      = lt_return_tab[]
          EXCEPTIONS
            parameter_error = 1
            no_values_found = 2
            OTHERS          = 3.
        IF sy-subrc <> 0.
        ENDIF.
      ENDIF.

      READ TABLE lt_return_tab INTO lwa_return_tab INDEX 1.

      IF sy-subrc EQ 0.

        ASSIGN cref_event_data->m_data->* TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_return_tab-fieldval.
        ENDIF.

      ENDIF.
    ENDIF.
    cref_event_data->m_event_handled = abap_true.

  ENDMETHOD.
ENDCLASS.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMCON
**********************************************************
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMCON
*&---------------------------------------------------------------------*

CONSTANTS: gc_program              TYPE sy-repid VALUE '/CGDC/SAPLCLRQM',
           gc_sd_partner_program   TYPE sy-repid VALUE 'SAPLV09C',
           gc_sd_conds_program     TYPE sy-repid VALUE 'SAPLV69A',
           gc_clrq_process_program TYPE sy-repid VALUE  '/CGDC/CLRQ_PROCESS',
           gc_job_name             TYPE tbtcjob-jobname VALUE 'UPD_CALC_REQ_BACK',
           gc_job_name_repr        TYPE tbtcjob-jobname VALUE 'REPR_CALC_REQ_BACK',
           gc_faksk_cafrdst        TYPE faksk VALUE 'Z9',
           gc_sub_main             TYPE /cgdc/clrq_sitmno VALUE '000000',
           gc_clin_mult            TYPE /cgdc/cline VALUE 'MULT'.

CONSTANTS: gc_number_range_object TYPE inri-object VALUE '/CGDC/CLRQ'.
CONSTANTS: gc_xref_number_range_object TYPE inri-object VALUE '/CGDC/CRXR'.

CONSTANTS: gc_posnr_low  TYPE posnr VALUE '000000',
           gc_kposn_low  TYPE kposn VALUE '000000',
           gc_clrsit_low TYPE /cgdc/clrq_sitmno VALUE '000000',
           gc_clrsit_one TYPE /cgdc/clrq_sitmno VALUE '000001',
           gc_clrdit_low TYPE /cgdc/clrq_delta_item VALUE '000000',
           gc_psdat_low  TYPE  /cgdc/clrqi_psdat VALUE '00000000',
           gc_posnr      TYPE /cgdc/clrq_itmno VALUE '0000000000',
           gc_fcatg      TYPE /cgdc/fcatg VALUE 'IT',
           gc_fname      TYPE /cgdc/fieldname VALUE 'POSNR'.

CONSTANTS: BEGIN OF gc_actions,
             navigation_to_calc_req(2) VALUE '01',
             set_calc_req_no_in_dmr(2) VALUE '02',
           END OF gc_actions.

CONSTANTS: BEGIN OF gc_rowcolor,
             yellow(4) VALUE 'C300',
             red(4)    VALUE 'C600',
             green(4)  VALUE 'C500',
           END OF gc_rowcolor.
CONSTANTS : gc_bill_pre_data_tabname TYPE tabname VALUE '/CGDC/S_CLRQBI'.

CONSTANTS: gc_mode_create(1)  TYPE c VALUE 'H',
           gc_mode_change(1)  TYPE c VALUE 'V',
           gc_mode_display(1) TYPE c VALUE 'A'.

CONSTANTS: gc_updkz_new(1)    TYPE c VALUE 'I',
           gc_updkz_update(1) TYPE c VALUE 'U',
           gc_updkz_delete(1) TYPE c VALUE 'D'.

CONSTANTS: BEGIN OF gc_variant_handle,
             calc_request_worklist(4)     VALUE 'CRWL',
             calc_req_items_grid(4)       VALUE 'CRIT',
             calc_req_billing_pre_grid(4) VALUE 'CRBI',
             calc_req_bill_hist_grid(4)   VALUE 'CRHIST',

           END OF gc_variant_handle.

CONSTANTS: BEGIN OF gc_fcode,
             back                   TYPE sy-ucomm VALUE 'BACK',
             exit                   TYPE sy-ucomm VALUE 'EXIT',
             cancel                 TYPE sy-ucomm VALUE 'CANC',
             entr                   TYPE sy-ucomm VALUE 'ENTR',
             enter                  TYPE sy-ucomm VALUE '/CGDC/ENTR',
             save                   TYPE sy-ucomm VALUE 'SAVE',
             dich                   TYPE sy-ucomm VALUE 'DICH',
             dhn                    TYPE sy-ucomm VALUE 'DHN',
             min                    TYPE sy-ucomm VALUE 'MIN',
             max                    TYPE sy-ucomm VALUE 'MAX',
             cacl_grp_cond          TYPE sy-ucomm VALUE 'CALC_GRP_COND',
             calc_grp_rel           TYPE sy-ucomm VALUE 'CALC_GRP_REL',
             calc_grp_constr_dt     TYPE sy-ucomm VALUE 'CALC_GRP_CONSTR_DT',
             set_constr_dt          TYPE sy-ucomm VALUE 'SET_CONSTR_DT',
             reset_constr_dt        TYPE sy-ucomm VALUE 'RESET_CONSTR_DT',
             worklist_hotspot       TYPE sy-ucomm VALUE 'WHCLK',
             tab_general            TYPE sy-ucomm VALUE 'TAB_GEN',
             tab_hdr_partners       TYPE sy-ucomm VALUE 'TAB_HPTR',
             tab_hdr_conditions     TYPE sy-ucomm VALUE 'TAB_HCOND',
             tab_hdr_aggregate      TYPE sy-ucomm VALUE 'TAB_HAGG',
*             tab_items          TYPE sy-ucomm VALUE 'TAB_ITEMS',
             tab_itm_partners       TYPE sy-ucomm VALUE 'TAB_IPTR',
             tab_itm_conditions     TYPE sy-ucomm VALUE 'TAB_ICOND',
             tab_itm_ref_doc        TYPE sy-ucomm VALUE 'TAB_IREFD',
             tab_itm_subitem        TYPE sy-ucomm VALUE 'TAB_ITMD',
             tab_itm_cost_sht       TYPE sy-ucomm VALUE 'TAB_ICOST',
             itm_details            TYPE sy-ucomm VALUE 'ITM_DETAILS',
             funcations             TYPE sy-ucomm VALUE 'FUNCATIONS',
             continue               TYPE sy-ucomm VALUE 'CONT',
             page_select            TYPE sy-ucomm VALUE 'PSEL',
             page_select_bitm       TYPE sy-ucomm VALUE 'PSEL_BITM',
             page_select_calc_grp   TYPE sy-ucomm VALUE 'PSEL_CALC_GRP',
             worklist_search        TYPE sy-ucomm VALUE 'WL_SEARCH',
             worklist_search_more   TYPE sy-ucomm VALUE 'WL_SEARCH_MORE',
             refresh                TYPE sy-ucomm VALUE 'RFRSH',
             imp_all                TYPE sy-ucomm VALUE 'IMP_ALL',
             previous_page          TYPE sy-ucomm VALUE 'PPAGE',
             next_page              TYPE sy-ucomm VALUE 'NPAGE',
             previous_page_bitm     TYPE sy-ucomm VALUE 'PPAGE_BITM',
             next_page_bitm         TYPE sy-ucomm VALUE 'NPAGE_BITM',
             previous_page_calc_grp TYPE sy-ucomm VALUE 'PPAGE_CALC_GRP',
             next_page_calc_grp     TYPE sy-ucomm VALUE 'NPAGE_CALC_GRP',
             create_billing_doc_req TYPE sy-ucomm VALUE 'CBDR',
             tab_subitm_partners    TYPE sy-ucomm VALUE 'TAB_SPART',
             tab_subitm_conditions  TYPE sy-ucomm VALUE 'TAB_SCOND',
             tab_subitm_cost_sht    TYPE sy-ucomm VALUE 'TAB_SCOST',
             tab_billing_history    TYPE sy-ucomm VALUE 'TAB_BLHS',
             reprice                TYPE sy-ucomm VALUE 'REPRICE',
             itm_rej                TYPE sy-ucomm VALUE 'ITM_REJ',
             itm_post               TYPE sy-ucomm VALUE 'ITM_POST',
             itm_rej_quan           TYPE sy-ucomm VALUE 'ITM_REJ_QUAN',
             itm_post_quan          TYPE sy-ucomm VALUE 'ITM_POST_QUAN',
             itm_rej_amt            TYPE sy-ucomm VALUE 'ITM_REJ_AMT',
             itm_post_amt           TYPE sy-ucomm VALUE 'ITM_POST_AMT',
             itm_post_qty_un        TYPE sy-ucomm VALUE 'ITM_POST_QTY_UN',
             itm_post_amt_un        TYPE sy-ucomm VALUE 'ITM_POST_AMT_UN',
             post_add_row           TYPE sy-ucomm VALUE 'POST_ADD_ROW',
             post_del_row           TYPE sy-ucomm VALUE 'POST_DEL_ROW',
             itm_add_row            TYPE sy-ucomm VALUE 'ITM_ADD_ROW',
             man_itm_crt            TYPE sy-ucomm VALUE 'MAN_ITM_CRT',
             prep_itm_crt           TYPE sy-ucomm VALUE 'PREP_ITM_CRT',
             upco                   TYPE sy-ucomm VALUE 'UPCO',
             repr                   TYPE sy-ucomm VALUE 'REPR',
             man_items              TYPE sy-ucomm VALUE 'FLTR_MAN',
             cos_items              TYPE sy-ucomm VALUE 'FLTR_COS',
             bip_items              TYPE sy-ucomm VALUE 'FLTR_BIP',
             clrq_grp               TYPE sy-ucomm VALUE 'FLTR_CLRQ',
             pp_items               TYPE sy-ucomm VALUE 'FLTR_PP',
             rel_items              TYPE sy-ucomm VALUE 'FLTR_REL',
             fltr_itm_cat           TYPE sy-ucomm VALUE 'FLTR',
             fast_chg               TYPE sy-ucomm VALUE 'FAST_CHG',
             tab_calc_grps          TYPE sy-ucomm VALUE 'TAB_CALC_GRPS',
             create_billable_itms   TYPE sy-ucomm VALUE 'CBILLITM',
             setfilter              TYPE sy-ucomm VALUE 'SETFLTR',
             set_bill_itm_filter    TYPE sy-ucomm VALUE 'SET_BILL_ITM_FLTR',
             create_bill_itm        TYPE sy-ucomm VALUE 'CRT_BILL_ITM',
             create_bill_sub_itm    TYPE sy-ucomm VALUE 'CRT_BILL_SUB_ITM',
             redetermine_item       TYPE sy-ucomm VALUE 'REDTR_ITM',
             redetermine_bi         TYPE sy-ucomm VALUE 'REDTR_BI',
             calcgrp_previtem       TYPE sy-ucomm VALUE 'PITM152',
             calcgrp_nextitem       TYPE sy-ucomm VALUE 'NITM152',
             cal_material           TYPE sy-ucomm VALUE 'RED_MAT',
             cal_billing_item       TYPE sy-ucomm VALUE 'RED_BILL',
             cal_item_category      TYPE sy-ucomm VALUE 'RED_ICATG',
             bill_item              TYPE sy-ucomm VALUE 'FLTR_BILL_ITEM',
             open_item              TYPE sy-ucomm VALUE 'FLTR_OPEN_ITEM',
             past_due               TYPE sy-ucomm VALUE 'FLTR_PAST_DUE',
             in_prog                TYPE sy-ucomm VALUE 'FLTR_IN_PROG',
             all_items              TYPE sy-ucomm VALUE 'FLTR_ALL_ITEMS',
             svc_st_dt              TYPE sy-ucomm VALUE 'FAST_CHG_ST_DT',
             svc_end_dt             TYPE sy-ucomm VALUE 'FAST_CHG_END_DT',
             bill_dt                TYPE sy-ucomm VALUE 'FAST_CHG_BILL_DT',
             bill_blk               TYPE sy-ucomm VALUE 'FAST_CHG_BILL_BLK',
             crt_man_bil_itm        TYPE sy-ucomm VALUE 'CRT_MAN_BIL_ITEM',
             rej_itm_lst            TYPE sy-ucomm VALUE 'REJ_ITM_LST',
             sel_all_rej_itm        TYPE sy-ucomm VALUE 'SEL_ALL_REJ_ITM',
             dsel_all_rej_itm       TYPE sy-ucomm VALUE 'DSEL_ALL_REJ_ITM',
             blk_auth_chk           TYPE sy-ucomm VALUE 'BLK_AUTH_CHK',
             bill_partner           TYPE sy-ucomm VALUE 'BILL_PART',
             cdoc                   TYPE sy-ucomm VALUE 'CDOC',
             adoc                   TYPE sy-ucomm VALUE 'ADOC',
             cntno                  TYPE sy-ucomm VALUE 'CNTNO',
             chlog                  TYPE syucomm  VALUE 'CHLOG',
             chlog_set              TYPE syucomm  VALUE 'CHLOGSET',
           END OF gc_fcode.

CONSTANTS: BEGIN OF gc_screen,
             sel_scr_0010            TYPE sy-dynnr VALUE '0010',
             overview                TYPE sy-dynnr VALUE '0100',
             dummy                   TYPE sy-dynnr VALUE '0999',
             quick_info              TYPE sy-dynnr VALUE '0110',
             header_details          TYPE sy-dynnr VALUE '0120',
             billing_history         TYPE sy-dynnr VALUE '0121',
             item_details            TYPE sy-dynnr VALUE '0130',
             general                 TYPE sy-dynnr VALUE '0140',
             hdr_partners            TYPE sy-dynnr VALUE '0150',
             hdr_conditions          TYPE sy-dynnr VALUE '0160',
             hdr_aggregate           TYPE sy-dynnr VALUE '0191',
             items                   TYPE sy-dynnr VALUE '0170',
             dynamic_selscr          TYPE sy-dynnr VALUE '0171',
             fast_chg_popup          TYPE sy-dynnr VALUE '0172',
             constr_dt_popup         TYPE sy-dynnr VALUE '0173',
             set_constr_dt_popup     TYPE sy-dynnr VALUE '0174',
             item_subsequent_details TYPE sy-dynnr VALUE '0500',
             itm_partners            TYPE sy-dynnr VALUE '0180',
             itm_conditions          TYPE sy-dynnr VALUE '0190',
             itm_ref_doc             TYPE sy-dynnr VALUE '0200',
             itm_cost_sht            TYPE sy-dynnr VALUE '0210',
             sd_partner              TYPE sy-dynnr VALUE '1000',
             sd_conditions           TYPE sy-dynnr VALUE '6201',
             subitm_alv              TYPE sy-dynnr VALUE '0193',
             subitm_scrn             TYPE sy-dynnr VALUE '0192',
             subitm_condition        TYPE sy-dynnr VALUE '0194',
             subitm_partner          TYPE sy-dynnr VALUE '0195',
             man_itm                 TYPE sy-dynnr VALUE '0201',
             man_itm_alv             TYPE sy-dynnr VALUE '0202',
             prep_itm                TYPE sy-dynnr VALUE '0204',
             release_itm             TYPE sy-dynnr VALUE '0205',
             post_rej_price_scrn     TYPE sy-dynnr VALUE '0302',
             post_rej_quan_scrn      TYPE sy-dynnr VALUE '0301',
             reprice_scrn            TYPE sy-dynnr VALUE '0900',
             messages_alv            TYPE sy-dynnr VALUE '0901',
             postpone_alv            TYPE sy-dynnr VALUE '0303',
             calc_grp_cond_popup     TYPE sy-dynnr VALUE '0152',
             calc_grp_cond           TYPE sy-dynnr VALUE '0153',
             save_scrn               TYPE sy-dynnr VALUE '0998',
             calc_grp_alv            TYPE sy-dynnr VALUE '0151',
             calc_bill_cond_popup    TYPE sy-dynnr VALUE '0401',
             calc_bill_cond          TYPE sy-dynnr VALUE '0402',
             bill_partner_popup      TYPE sy-dynnr VALUE '0411',
             disp_cafs_details       TYPE sy-dynnr VALUE '0505',
             crt_bil_itm             TYPE sy-dynnr VALUE '0206',
             reassign_popup          TYPE sy-dynnr VALUE '0506',
             rej_itm_lst             TYPE sy-dynnr VALUE '0197',
             cscon_msg_scrn          TYPE sy-dynnr VALUE '0997',
             clrq_process_scrn       TYPE sy-dynnr VALUE '1000',

           END OF gc_screen.

CONSTANTS: BEGIN OF gc_structure,
             calc_request_worklist TYPE dd02l-tabname VALUE '/CGDC/S_CLRQ_WL',
             calc_req_items        TYPE dd02l-tabname VALUE '/CGDC/S_CLRQIT_FCAT',
             clrq_items            TYPE dd02l-tabname VALUE '/CGDC/S_CLRQIT',
             calc_req_header       TYPE dd02l-tabname VALUE '/CGDC/S_CLRQHD',
             bill_hist             TYPE dd02l-tabname VALUE '/CGDC/S_CLRQ_BILL_HIST_FCAT',
             calc_postpone         TYPE dd02l-tabname VALUE '/CGDC/S_CLRQ_POSTPONE',
             release_itm           TYPE dd02l-tabname VALUE '/CGDC/S_RTB_RLEASE_MIT_FCAT',
             disp_cafs             TYPE dd02l-tabname VALUE '/CGDC/S_CLRQCAF',
             rej_itm_lst           TYPE dd02l-tabname VALUE '/CGDC/S_REJITM_FCAT',
             billing_items         TYPE dd02l-tabname VALUE '/CGDC/S_CLRQBI_FCAT',
             itm_ref_fcat          TYPE dd02l-tabname VALUE '/CGDC/S_CLRQIT_REF_DATA_FCAT',
             calc_req_cond         TYPE dd02l-tabname VALUE '/CGDC/S_CLRQCN',
             calc_req_part         TYPE dd02l-tabname VALUE '/CGDC/S_CLRQPT',
             komv                  TYPE dd02l-tabname VALUE 'KOMV',
             makt                  TYPE dd02l-tabname VALUE 'MAKT',
             prps                  TYPE dd02l-tabname VALUE 'PRPS',
             coep                  TYPE dd02l-tabname VALUE 'COEP',
             coss                  TYPE dd02l-tabname VALUE 'COSS',
             komk                  TYPE dd02l-tabname VALUE 'KOMK',
             calc_grp_rows         TYPE dd02l-tabname VALUE '/CGDC/S_CLRQGRR',
             calc_req_scr_fld      TYPE dd02l-tabname VALUE '/CGDC/S_CLRQ_SCREENFIELDS',
           END OF gc_structure.

CONSTANTS: BEGIN OF gc_cosxa_fld,
             wtg TYPE fieldname VALUE '<COSXA>-WTG',
             wog TYPE fieldname VALUE '<COSXA>-WOG',
             wkg TYPE fieldname VALUE '<COSXA>-WKG',
             wkf TYPE fieldname VALUE '<COSXA>-WKF',
             pag TYPE fieldname VALUE '<COSXA>-PAG',
             paf TYPE fieldname VALUE '<COSXA>-PAF',
             meg TYPE fieldname VALUE '<COSXA>-MEG',
             mef TYPE fieldname VALUE '<COSXA>-MEF',
             wag TYPE fieldname VALUE '<COSXA>-WAG',
             wvg TYPE fieldname VALUE '<COSXA>-WVG',
             wbg TYPE fieldname VALUE '<COSXA>-WBG',
             wcg TYPE fieldname VALUE '<COSXA>-WCG',
             wdg TYPE fieldname VALUE '<COSXA>-WDG',
             weg TYPE fieldname VALUE '<COSXA>-WEG',
             wfg TYPE fieldname VALUE '<COSXA>-WFG',
             wgg TYPE fieldname VALUE '<COSXA>-WGG',
             whg TYPE fieldname VALUE '<COSXA>-WHG',
           END OF gc_cosxa_fld.

CONSTANTS: BEGIN OF gc_view,
             bill_item  TYPE dd02l-tabname VALUE '/CGDC/D_CLRQ_AG',
             clrqb_pcon TYPE dd02l-tabname VALUE '/CGDC/V_CLRQBILL',
           END OF gc_view.

CONSTANTS: BEGIN OF gc_custom_area,
             calc_req_items_grid(25)      VALUE 'SAPLCLRQM_0170_CC',
             calc_req_billing_preview(25) VALUE 'SAPLCLRQM_0191_CC',
             calc_req_sub_item_grid(25)   VALUE 'SAPLCLRQM_0193_CC',
             reassign_bi_grid(25)         VALUE 'SAPLCLRQM_0506_CC',
             calc_req_sub_item_cond(25)   VALUE 'SAPLCLRQM_0194_CC',
             calc_req_sub_item_part(25)   VALUE 'SAPLCLRQM_0195_CC',
             bill_hist(25)                VALUE 'SAPLCLRQM_0121_CC',
             calc_req_calc_upd_prc(25)    VALUE 'SAPLCLRQM_0900_CC',
             messages_cont(25)            VALUE 'SAPLCLRQM_0901_CC',
             postpone_cont(25)            VALUE 'SAPLCLRQM_0303_CC',
             calc_man_itm(25)             VALUE 'SAPLCLRQM_0202_CC',
             release_itm(25)              VALUE 'SAPLCLRQM_0203_CC',
             calc_grp(25)                 VALUE 'SAPLCLRQM_0151_CC',
             disp_cafs(25)                VALUE 'SAPLCLRQM_0198_CC',
             rej_itm_lst(25)              VALUE 'SAPLCLRQM_0197_CC',
             itm_ref_doc(25)              VALUE 'SAPLCLRQM_0200_CC',

           END OF gc_custom_area.

CONSTANTS: BEGIN OF gc_authority_activity,
             create    TYPE activ_auth VALUE '01',
             change    TYPE activ_auth VALUE '02',
             display   TYPE activ_auth VALUE '03',
             transport TYPE activ_auth VALUE '21',
             delete    TYPE activ_auth VALUE '06',
           END OF gc_authority_activity.

CONSTANTS : BEGIN OF gc_ibill_stat,
              open                       TYPE /cgdc/clrqi_billstat VALUE 'A',
              invoice_created            TYPE /cgdc/clrqi_billstat VALUE 'B',
              invoice_posted             TYPE /cgdc/clrqi_billstat VALUE 'C',
              invoice_created_with_error TYPE /cgdc/clrqi_billstat VALUE 'E',
              postponed                  TYPE /cgdc/clrqi_billstat VALUE 'P',
              billing_requested          TYPE /cgdc/clrqi_billstat VALUE 'Q',
              rejected                   TYPE /cgdc/clrqi_billstat VALUE 'R',
              copied_to_subitems         TYPE /cgdc/clrqi_billstat VALUE 'X',
              pbd_in_progress            TYPE /cgdc/clrqi_billstat VALUE '1',
              pbd_in_approval            TYPE /cgdc/clrqi_billstat VALUE '2',
              copied                     TYPE /cgdc/clrqi_istat    VALUE 'C',
              delta                      TYPE /cgdc/clrqi_istat    VALUE 'D',
              not_relevant               TYPE /cgdc/clrqi_istat    VALUE '#',
            END OF gc_ibill_stat.

CONSTANTS: BEGIN OF gc_sub_doc_cat,
             billing_doc_req         TYPE /cgdc/clrq_sbq_doc_cat VALUE 'BDR',
             preliminary_billing_doc TYPE /cgdc/clrq_sbq_doc_cat VALUE 'PBD',
             billing_doc             TYPE /cgdc/clrq_sbq_doc_cat VALUE 'BD',
           END OF gc_sub_doc_cat.

CONSTANTS: BEGIN OF gc_billing_function,
             billable     TYPE /cgdc/rtb_billfunc VALUE 'X',
             not_billable TYPE /cgdc/rtb_billfunc VALUE ' ',
           END OF gc_billing_function.
***
CONSTANTS : BEGIN OF gc_message_type,
              error       TYPE msgty VALUE 'E',
              succes      TYPE msgty VALUE 'S',
              warning     TYPE msgty VALUE 'W',
              abort       TYPE msgty VALUE 'A',
              information TYPE msgty VALUE 'I',
            END OF gc_message_type.

CONSTANTS : gc_clrq_msg_cls TYPE arbgb VALUE '/CGDC/CLRQ',
            gc_cafd_msg_cls TYPE arbgb VALUE '/CGDC/CAFD',
            gc_cls_msg_cls  TYPE arbgb VALUE '/CGDC/CLS',
            gc_rtbp_msg_cls TYPE arbgb VALUE '/CGDC/RTBP',
            gc_rtbs_msg_cls TYPE arbgb VALUE '/CGDC/RTBS',
            gc_rrbs_msg_cls TYPE arbgb VALUE '/CGDC/RRBS'.

CONSTANTS : BEGIN OF gc_process_type,
              background              TYPE /cgdc/clrq_process VALUE 'A',
              realtime                TYPE /cgdc/clrq_process VALUE 'B',
              calc_req_hdr_crt        TYPE /cgdc/clrq_process VALUE 'C',
              update_bilpln_data      TYPE /cgdc/clrq_process VALUE 'D',
              update                  TYPE /cgdc/clrq_process VALUE 'U',
              update_bill_calc_groups TYPE /cgdc/clrq_process VALUE 'E',
              full_update             TYPE /cgdc/clrq_process VALUE 'F',
              scheduler               TYPE /cgdc/clrq_process VALUE 'S',
              validate_clrqno         TYPE /cgdc/clrq_process VALUE 'V',
              doc_view                TYPE /cgdc/clrq_process VALUE 'Z',
              reval_bill_blocks       TYPE /cgdc/clrq_process VALUE 'R',
              upd_cont_data           TYPE /cgdc/clrq_process VALUE 'Y',
            END OF gc_process_type.

CONSTANTS : gc_header_tabname        TYPE tabname VALUE '/CGDC/_CLRQHD',
            gc_item_tabname          TYPE tabname VALUE '/CGDC/_CLRQIT',
            gc_bilitm_tabname        TYPE tabname VALUE '/CGDC/_CLRQBI',
            gc_rtb_sch_grp_tabname   TYPE tabname VALUE '/CGDC/T_RTBSC',
            gc_rsn_code_text_tabname TYPE tabname VALUE '/CGDC/T_RTBRPART'.


CONSTANTS: con_on               TYPE c         VALUE 'X',
           con_wrttp_actual     TYPE co_wrttp  VALUE '04',     "Value type ACTUAL
           con_awtyp_cobk       TYPE awtyp     VALUE 'COBK',
           con_exclude_reversed TYPE boole_d   VALUE 'X',
           BEGIN OF con_msg_severity,
             success TYPE sy-subrc     VALUE 2,
             info    TYPE sy-subrc     VALUE 4,
             warning TYPE sy-subrc     VALUE 8,
             error   TYPE sy-subrc     VALUE 12,
             abort   TYPE sy-subrc     VALUE 16,
           END OF con_msg_severity,
           BEGIN OF con_kasc_control,
             import_cossa_cospa TYPE c VALUE '1',
             import_for_post    TYPE c VALUE '3',
             export_no_delta    TYPE c VALUE '3',
           END OF con_kasc_control,
           BEGIN OF con_vrgng,
             realtime_overhead TYPE co_vorgang VALUE 'KZPR',   "Realtime overhead
             periodic_overhead TYPE co_vorgang VALUE 'KZPI',   "Periodic overhead
             cobk              TYPE co_vorgang VALUE 'COBK',   "CO posting
           END OF con_vrgng.


CONSTANTS: BEGIN OF gc_costingsheet_status,
             missing_at_rtbp           TYPE /cgdc/clrq_csist VALUE ' ',
             active                    TYPE /cgdc/clrq_csist VALUE 'A',
             missing_at_wbs            TYPE /cgdc/clrq_csist VALUE 'B',
             active_but_incomp_mapping TYPE /cgdc/clrq_csist VALUE 'D',
           END OF gc_costingsheet_status.


CONSTANTS:
BEGIN OF con_obart.
INCLUDE rbonrart.
CONSTANTS:
  real_estate_types(50) TYPE c      VALUE 'IA/IB/IC/IG/IM/IS/IV/IW',
  END OF con_obart.

CONSTANTS: BEGIN OF gc_enq_mode,
             write  TYPE enqmode VALUE 'E',
             shared TYPE enqmode VALUE 'S',
             check  TYPE enqmode VALUE 'V',
           END OF gc_enq_mode.

****Background job statuses
CONSTANTS: BEGIN OF c_background_job_status,
             finished      VALUE 'F',
             aborted       VALUE 'A',
             unknown_state VALUE 'X',
           END OF c_background_job_status.
****

***CLRQ ITEM TYPE
CONSTANTS : BEGIN OF gc_clrq_itmty,
              costline        TYPE /cgdc/clrq_item_type VALUE ' ',
              bill_plan_line  TYPE /cgdc/clrq_item_type VALUE '1',
              manual_line     TYPE /cgdc/clrq_item_type VALUE '2',
              prepayment_item TYPE /cgdc/clrq_item_type VALUE '3',
              release_item    TYPE /cgdc/clrq_item_type VALUE '4',
              calc_grp_itm    TYPE /cgdc/clrq_item_type VALUE '5',
            END OF gc_clrq_itmty.


CONSTANTS : BEGIN OF gc_auth_actv,
              change                TYPE /cgdc/rtb_actvt VALUE '02',
              display               TYPE /cgdc/rtb_actvt VALUE '03',
              request_billing       TYPE /cgdc/rtb_actvt VALUE 'R1',
              refresh_request_items TYPE /cgdc/rtb_actvt VALUE 'R2',
              reprice_all           TYPE /cgdc/rtb_actvt VALUE 'R3',
              release_billing_item  TYPE /cgdc/rtb_actvt VALUE 'B1',
              crt_man_bl_itm        TYPE /cgdc/rtb_actvt VALUE 'B2',
              post_req_itm          TYPE /cgdc/rtb_actvt VALUE 'Q1',
              rej_req_itm           TYPE /cgdc/rtb_actvt VALUE 'Q2',
              rev_rej_item          TYPE /cgdc/rtb_actvt VALUE 'Q3',
              crt_man_req_itm       TYPE /cgdc/rtb_actvt VALUE 'Q4',
              reassign_request_item TYPE /cgdc/rtb_actvt VALUE 'Q5',
              red_mat               TYPE /cgdc/rtb_actvt VALUE 'Q6',
              red_billing_item      TYPE /cgdc/rtb_actvt VALUE 'Q7',
              red_itm_cat           TYPE /cgdc/rtb_actvt VALUE 'Q8',
            END OF gc_auth_actv.

CONSTANTS: BEGIN OF gc_screenflds,
             clrqbi_faksp         TYPE char140 VALUE '/CGDC/S_CLRQBI_SCRNFLD-FAKSP',
             clrqbi_bldat         TYPE char140 VALUE '/CGDC/S_CLRQBI_SCRNFLD-BLDAT',
             clrqbi_pop_stdt      TYPE char140 VALUE '/CGDC/S_CLRQBI_SCRNFLD-POP_STDT',
             clrqbi_pop_enddt     TYPE char140 VALUE '/CGDC/S_CLRQBI_SCRNFLD-POP_ENDDT',
             clrqit_clrit         TYPE char140 VALUE '/CGDC/S_CLRQIT-CLRIT',
             clrqit_zmeng         TYPE char140 VALUE '/CGDC/S_CLRQIT-ZMENG',
             clrqit_vrkme         TYPE char140 VALUE '/CGDC/S_CLRQIT-VRKME',
             clrqit_netwr         TYPE char140 VALUE '/CGDC/S_CLRQIT-NETWR',
             clrqit_waerk         TYPE char140 VALUE '/CGDC/S_CLRQIT-WAERK',
             clrqit_pstyv         TYPE char140 VALUE '/CGDC/S_CLRQIT-PSTYV',
             clrqit_matnr         TYPE char140 VALUE '/CGDC/S_CLRQIT-MATNR',
             clrqit_total_netwr   TYPE char140 VALUE '/CGDC/S_CLRQIT-TOTAL_NETWR',
             pb_expand_hdr_info   TYPE char140 VALUE 'PB_EXPAND_HDR_INFO',
             tf_hdr_details       TYPE char140 VALUE 'TF_HDR_DETAILS',
             pb_expand_quick_info TYPE char140 VALUE 'PB_EXPAND_QUICK_INFO',
             tf_quick_info        TYPE char140 VALUE 'TF_QUICK_INFO',
             pb_expand_itm_info   TYPE char140 VALUE 'PB_EXPAND_ITM_INFO',
             tf_itm_details       TYPE char140 VALUE 'TF_ITM_DETAILS',
             clrqhd_faksk         TYPE char140 VALUE '/CGDC/_CLRQHD-FAKSK',
             tab_cost             TYPE char140 VALUE 'TAB_COST',
             tab_ref_docs         TYPE char140 VALUE 'TAB_REF_DOCS',
             tab_costsht          TYPE char140 VALUE 'TAB_COSTSHT',
             rtbmit_mityp         TYPE char140 VALUE '/CGDC/T_RTBMIT-MITYP',
             man_itm_matnr        TYPE char140 VALUE 'GS_MAN_ITM-MATNR',
             man_itm_matwa        TYPE char140 VALUE 'GS_MAN_ITM-MATWA',
             scrn_flds_post_quan  TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-POST_QUAN',
             scrn_flds_post_date  TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-POST_DATE',
             scrn_flds_rej_quan   TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-REJ_QUAN',
             scrn_flds_rsncd      TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-RSNCD',
             scrn_flds_post_netwr TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-POST_NETWR',
             scrn_flds_rej_netwr  TYPE char140 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-REJ_NETWR',
             lbl_post_comm        TYPE char140 VALUE 'LBL_POST_COMM',
             lbl_star_p           TYPE char140 VALUE 'LBL_STAR_P',
             lbl_rej_cumm         TYPE char140 VALUE 'LBL_REJ_CUMM',
             lbl_star_r           TYPE char140 VALUE 'LBL_STAR_R',
           END OF gc_screenflds.

CONSTANTS : BEGIN OF gc_tcodes,
              vk11 TYPE sytcode VALUE 'VK11',
              vk12 TYPE sytcode VALUE 'VK12',
              va42 TYPE sytcode VALUE 'VA42',
              va43 TYPE sytcode VALUE 'VA43',
              fb03 TYPE sytcode VALUE 'FB03',
              ksb5 TYPE sytcode VALUE 'KSB5',
            END OF gc_tcodes.

CONSTANTS: BEGIN OF gc_cursor,
             scrnfield_co_belnr TYPE char50 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-CO_BELNR',
             scrnfield_belnr    TYPE char50 VALUE '/CGDC/S_CLRQ_SCREENFIELDS-BELNR',
             clrqhd_vgbel       TYPE char50 VALUE '/CGDC/_CLRQHD-VGBEL',
           END OF gc_cursor.

CONSTANTS: BEGIN OF gc_param_id,
             co_bln TYPE memoryid VALUE 'CO_BLN',
             cac    TYPE memoryid VALUE 'CAC',
             bln    TYPE memoryid VALUE 'BLN',
             buk    TYPE memoryid VALUE 'BUK',
             gjr    TYPE memoryid VALUE 'GJR',
             ktn    TYPE memoryid VALUE 'KTN',
           END OF gc_param_id.

CONSTANTS: BEGIN OF gc_lock_mode,
             write       TYPE enqmode VALUE 'E',
             share       TYPE enqmode VALUE 'S',
             exclusive   TYPE enqmode VALUE 'X',
             optimistic  TYPE enqmode VALUE 'O',
             promote_opt TYPE enqmode VALUE 'R',
             conflict_x  TYPE enqmode VALUE 'U',
             conflict_e  TYPE enqmode VALUE 'V',
             conflict_s  TYPE enqmode VALUE 'W',
             check_r     TYPE enqmode VALUE 'C',
             reserved    TYPE enqmode VALUE 'T',
             reserved1   TYPE enqmode VALUE '+',
           END OF gc_lock_mode.

CONSTANTS : BEGIN OF gc_rprc_actv,
              amount       TYPE c VALUE 'A',
              valid_from   TYPE c VALUE 'F',
              valid_to     TYPE c VALUE 'T',
              rel_sts      TYPE c VALUE 'S',
              del_flag     TYPE c VALUE 'D',
              new          TYPE c VALUE 'N',
              unit_value   TYPE c VALUE 'C',
              unit_of_meas TYPE c VALUE 'U',
              per          TYPE c VALUE 'P',
            END OF gc_rprc_actv.

CONSTANTS : BEGIN OF gc_upd_prcess,
              all       TYPE /cgdc/clrq_pc_uclrit VALUE '',
              open      TYPE /cgdc/clrq_pc_uclrit VALUE 'A',
              no_update TYPE /cgdc/clrq_pc_uclrit VALUE 'B',
            END OF gc_upd_prcess.

CONSTANTS : BEGIN OF gc_be_eval,
              run_evaluation TYPE c VALUE '1',
              update_logs    TYPE c VALUE '2',
            END OF gc_be_eval.

CONSTANTS: BEGIN OF gc_clrqwl_field,
             mandt TYPE dd03l-fieldname VALUE 'MANDT',
             clrno TYPE dd03l-fieldname VALUE 'CLRNO',
             clrqt TYPE dd03l-fieldname VALUE 'CLRQT',
             cttxt TYPE dd03l-fieldname VALUE 'CTTXT',
             vgbel TYPE dd03l-fieldname VALUE 'VGBEL',
             rwclr TYPE dd03l-fieldname VALUE 'RWCLR',
             rtbpn TYPE dd03l-fieldname VALUE 'RTBPN',
           END OF gc_clrqwl_field.

CONSTANTS: BEGIN OF gc_release_itm_field,
             source    TYPE dd03l-fieldname VALUE 'SOURCE',
             rel_amt   TYPE dd03l-fieldname VALUE 'REL_AMT',
             total_amt TYPE dd03l-fieldname VALUE 'TOTAL_AMT',
             rem_amt   TYPE dd03l-fieldname VALUE 'REM_AMT',
             new_rel   TYPE dd03l-fieldname VALUE 'NEW_REL',
             waerk     TYPE dd03l-fieldname VALUE 'WAERK',
           END OF gc_release_itm_field.

CONSTANTS: BEGIN OF gc_clrq_postpone_field,
             clrit     TYPE dd03l-fieldname VALUE 'CLRIT',
             rej_qty   TYPE dd03l-fieldname VALUE 'REJ_QTY',
             rej_amt   TYPE dd03l-fieldname VALUE 'REJ_AMT',
             postp_qty TYPE dd03l-fieldname VALUE 'POSTP_QTY',
             postp_amt TYPE dd03l-fieldname VALUE 'POSTP_AMT',
             psdat     TYPE dd03l-fieldname VALUE 'PSDAT',
             rsncd     TYPE dd03l-fieldname VALUE 'RSNCD',
           END OF gc_clrq_postpone_field.

CONSTANTS: BEGIN OF gc_clrqbi_field,
             mandt       TYPE dd03l-fieldname VALUE 'MANDT',
             clrno       TYPE dd03l-fieldname VALUE 'CLRNO',
             bill_item   TYPE dd03l-fieldname VALUE 'BILL_ITEM',
             bilmatnr    TYPE dd03l-fieldname VALUE 'BILMATNR',
             bitype      TYPE dd03l-fieldname VALUE 'BITYPE',
             /cgdc/cline TYPE dd03l-fieldname VALUE '/CGDC/CLINE',
             ps_psp_pnr  TYPE dd03l-fieldname VALUE 'PS_PSP_PNR',
             pop_stdt    TYPE dd03l-fieldname VALUE 'POP_STDT',
             pop_enddt   TYPE dd03l-fieldname VALUE 'POP_ENDDT',
             bldat       TYPE dd03l-fieldname VALUE 'BLDAT',
             exdat       TYPE dd03l-fieldname VALUE 'EXDAT',
             faksp       TYPE dd03l-fieldname VALUE 'FAKSP',
             fkrel       TYPE dd03l-fieldname VALUE 'FKREL',
             bstat       TYPE dd03l-fieldname VALUE 'BSTAT',
             waerk       TYPE dd03l-fieldname VALUE 'WAERK',
             netwr       TYPE dd03l-fieldname VALUE 'NETWR ',
             zmeng       TYPE dd03l-fieldname VALUE 'ZMENG',

             zieme       TYPE dd03l-fieldname VALUE 'ZIEME',
             srno        TYPE dd03l-fieldname VALUE 'SRNO',
             billed_amt  TYPE dd03l-fieldname VALUE 'BILLED_AMT',
             /cgdc/acrns TYPE dd03l-fieldname VALUE '/CGDC/ACRNS',
             /cgdc/fmsck TYPE dd03l-fieldname VALUE '/CGDC/FMSCK',
             cslin       TYPE dd03l-fieldname VALUE 'CSLIN',
             xrfdn       TYPE dd03l-fieldname VALUE 'XRFDN',
             xrfin       TYPE dd03l-fieldname VALUE 'XRFIN',
             bp_prtyp    TYPE dd03l-fieldname VALUE 'BP_PRTYP',

           END OF gc_clrqbi_field.

CONSTANTS: BEGIN OF gc_prps_field,
             pspnr TYPE dd03l-fieldname VALUE 'PSPNR',
             post1 TYPE dd03l-fieldname VALUE 'POST1',
           END OF gc_prps_field.

CONSTANTS: BEGIN OF gc_trfc_lght,
             y TYPE flag VALUE 'Y',
             o TYPE flag VALUE 'O',
           END OF gc_trfc_lght.

CONSTANTS: BEGIN OF gc_komk_field,
             key_uc TYPE dd03l-fieldname VALUE 'KEY_UC',
             supos  TYPE dd03l-fieldname VALUE 'SUPOS',
           END OF gc_komk_field.

CONSTANTS: BEGIN OF gc_clrit_link_field,
             clrno   TYPE dd03l-fieldname VALUE 'CLRNO',
             clrit   TYPE dd03l-fieldname VALUE 'CLRIT',
             source  TYPE dd03l-fieldname VALUE 'SOURCE',
             prim_tb TYPE dd03l-fieldname VALUE 'PRIM_TB',
             link_tb TYPE dd03l-fieldname VALUE 'LINK_TB',
             data    TYPE dd03l-fieldname VALUE 'DATA',
           END OF gc_clrit_link_field.

CONSTANTS: BEGIN OF gc_clrqit_field,
             rtbbinr      TYPE dd03l-fieldname VALUE 'RTBBINR',
             subitem_icon TYPE dd03l-fieldname VALUE 'SUBITEM_ICON',
             clrno        TYPE dd03l-fieldname VALUE 'CLRNO',
             faksp        TYPE dd03l-fieldname VALUE 'FAKSP',
             netwr        TYPE dd03l-fieldname VALUE 'NETWR',
             fkrel        TYPE dd03l-fieldname VALUE 'FKREL',
             bill_usage   TYPE dd03l-fieldname VALUE 'BILL_USAGE',
             bilmatnr     TYPE dd03l-fieldname VALUE 'BILMATNR',
             zmeng        TYPE dd03l-fieldname VALUE 'ZMENG',
             waerk        TYPE dd03l-fieldname VALUE 'WAERK',
             bldat        TYPE dd03l-fieldname VALUE 'BLDAT',
             zieme        TYPE dd03l-fieldname VALUE 'ZIEME',
             reason_code  TYPE dd03l-fieldname VALUE 'REASON_CODE',
             matnr        TYPE dd03l-fieldname VALUE 'MATNR',
             matwa        TYPE dd03l-fieldname VALUE 'MATWA',
             netwr_ap     TYPE dd03l-fieldname VALUE 'NETWR_AP',
             fkdat        TYPE dd03l-fieldname VALUE 'FKDAT',
             ps_psp_pnr   TYPE dd03l-fieldname VALUE 'PS_PSP_PNR',
             clrit        TYPE dd03l-fieldname VALUE 'CLRIT',
             lclrsit      TYPE dd03l-fieldname VALUE 'ZIEME',
             itmty        TYPE dd03l-fieldname VALUE 'ITMTY',
             cgdc_cline   TYPE dd03l-fieldname VALUE '/CGDC/CLINE',
             cgdc_acrns   TYPE dd03l-fieldname VALUE '/CGDC/ACRNS',
             cgdc_fmsck   TYPE dd03l-fieldname VALUE '/CGDC/FMSCK',
             cslin        TYPE dd03l-fieldname VALUE 'CSLIN',
             clrsit       TYPE dd03l-fieldname VALUE 'CLRSIT',
             clrdit       TYPE dd03l-fieldname VALUE 'CLRDIT',
             itmty_desc   TYPE dd03l-fieldname VALUE 'ITMTY_DESC',
             csheet       TYPE dd03l-fieldname VALUE 'CSHEET',
             zschl        TYPE dd03l-fieldname VALUE 'ZSCHL',
             prsdt        TYPE dd03l-fieldname VALUE 'PRSDT',
             budat        TYPE dd03l-fieldname VALUE 'BUDAT',
             cntit        TYPE dd03l-fieldname VALUE 'CNTIT',
             prsok        TYPE dd03l-fieldname VALUE 'PRSOK',
             rsncd        TYPE dd03l-fieldname VALUE 'RSNCD',
             istat        TYPE dd03l-fieldname VALUE 'ISTAT',
             mandt        TYPE dd03l-fieldname VALUE 'MANDT',
           END OF gc_clrqit_field.

CONSTANTS: BEGIN OF gc_message_field,
             message TYPE dd03l-fieldname VALUE 'MESSAGE',
             icon    TYPE dd03l-fieldname VALUE 'ICON',
             icon1   TYPE dd03l-fieldname VALUE 'ICON1',
             msgid   TYPE dd03l-fieldname VALUE 'MSGID',
             msgnr   TYPE dd03l-fieldname VALUE 'MSGNR',

           END OF gc_message_field.

CONSTANTS: BEGIN OF gc_rtbrpart_field,
             mandt    TYPE dd03l-fieldname VALUE 'MANDT',
             spras    TYPE dd03l-fieldname VALUE 'SPRAS',
             rsn_func TYPE dd03l-fieldname VALUE 'RSN_FUNC',
             rsnpf    TYPE dd03l-fieldname VALUE 'RSNPF',
             rsncd    TYPE dd03l-fieldname VALUE 'RSNCD',
             descr    TYPE dd03l-fieldname VALUE 'DESCR',
           END OF gc_rtbrpart_field.

CONSTANTS: BEGIN OF gs_bill_hist_fcat_field,
             erzet TYPE dd03l-fieldname VALUE 'ERZET',
             erdat TYPE dd03l-fieldname VALUE 'ERDAT',
             rwclr TYPE dd03l-fieldname VALUE 'RWCLR',
             style TYPE dd03l-fieldname VALUE 'STYLE',
             mandt TYPE dd03l-fieldname VALUE 'MANDT',
             clrno TYPE dd03l-fieldname VALUE 'CLRNO',
             sbdct TYPE dd03l-fieldname VALUE 'SBDCT',
             sbqdc TYPE dd03l-fieldname VALUE 'SBQDC',
             icon  TYPE dd03l-fieldname VALUE 'ICON',
           END OF gs_bill_hist_fcat_field.

CONSTANTS: BEGIN OF gc_komv_field,
             kwert TYPE dd03l-fieldname VALUE 'KWERT',
           END OF gc_komv_field.

CONSTANTS: BEGIN OF gc_calc_grp_rows_field,
             updkz             TYPE dd03l-fieldname VALUE 'UPDKZ',
             datab             TYPE dd03l-fieldname VALUE 'DATAB',
             datbi             TYPE dd03l-fieldname VALUE 'DATBI',
             rowid             TYPE dd03l-fieldname VALUE 'ROWID',
             clgrn             TYPE dd03l-fieldname VALUE 'CLGRN',
             descr             TYPE dd03l-fieldname VALUE 'DESCR',
             clgrp_knumh       TYPE dd03l-fieldname VALUE 'CLGRP_KNUMH',
             clgrp_kolnr       TYPE dd03l-fieldname VALUE 'CLGRP_KOLNR',
             clgrp_kotabnr     TYPE dd03l-fieldname VALUE 'CLGRP_KOTABNR',
             clgrp_kschl       TYPE dd03l-fieldname VALUE 'CLGRP_KSCHL',
             burd_ovr          TYPE dd03l-fieldname VALUE 'BURD_OVR',
             cost_base_fee     TYPE dd03l-fieldname VALUE 'COST_BASE_FEE',
             cost_excess       TYPE dd03l-fieldname VALUE 'COST_EXCESS',
             cost_funding      TYPE dd03l-fieldname VALUE 'COST_FUNDING',
             cost_plus_burdens TYPE dd03l-fieldname VALUE 'COST_PLUS_BURDENS',
             fee               TYPE dd03l-fieldname VALUE 'FEE',
             fee_excs          TYPE dd03l-fieldname VALUE 'FEE_EXCS',
             fee_funding       TYPE dd03l-fieldname VALUE 'FEE_FUNDING',
             prev_billed_fee   TYPE dd03l-fieldname VALUE 'PREV_BILLED_FEE',
             burd_cel          TYPE dd03l-fieldname VALUE 'BURD_CEL',
             burd_poc          TYPE dd03l-fieldname VALUE 'BURD_POC',
             burd_tlt          TYPE dd03l-fieldname VALUE 'BURD_TLT',
             prsok             TYPE dd03l-fieldname VALUE 'PRSOK',
             wbsel             TYPE dd03l-fieldname VALUE 'WBSEL',
             dist_flag         TYPE dd03l-fieldname VALUE 'DIST_FLAG',
             dist_method       TYPE dd03l-fieldname VALUE 'DIST_METHOD',
             dist_base         TYPE dd03l-fieldname VALUE 'DIST_BASE',
             clrit             TYPE dd03l-fieldname VALUE 'CLRIT',
             rtbbinr           TYPE dd03l-fieldname VALUE 'RTBBINR',
           END OF gc_calc_grp_rows_field.

CONSTANTS: BEGIN OF gc_rejitm_field,
             check        TYPE dd03l-fieldname VALUE 'CHECK',
             subitem_icon TYPE dd03l-fieldname VALUE 'SUBITEM_ICON',
             clrno        TYPE dd03l-fieldname VALUE 'CLRNO',
             faksp        TYPE dd03l-fieldname VALUE 'FAKSP',
             netwr        TYPE dd03l-fieldname VALUE 'NETWR',
             fkrel        TYPE dd03l-fieldname VALUE 'FKREL',
             zmeng        TYPE dd03l-fieldname VALUE 'ZMENG',
             bldat        TYPE dd03l-fieldname VALUE 'BLDAT',
             zieme        TYPE dd03l-fieldname VALUE 'ZIEME',
             matnr        TYPE dd03l-fieldname VALUE 'MATNR',
             matwa        TYPE dd03l-fieldname VALUE 'MATWA',
             netwr_ap     TYPE dd03l-fieldname VALUE 'NETWR_AP',
             fkdat        TYPE dd03l-fieldname VALUE 'FKDAT',
             ps_psp_pnr   TYPE dd03l-fieldname VALUE 'PS_PSP_PNR',
             clrit        TYPE dd03l-fieldname VALUE 'CLRIT',
             lclrsit      TYPE dd03l-fieldname VALUE 'ZIEME',
             itmty        TYPE dd03l-fieldname VALUE 'ITMTY',
             cgdc_cline   TYPE dd03l-fieldname VALUE '/CGDC/CLINE',
             cgdc_acrns   TYPE dd03l-fieldname VALUE '/CGDC/ACRNS',
             cgdc_fmsck   TYPE dd03l-fieldname VALUE '/CGDC/FMSCK',
             cslin        TYPE dd03l-fieldname VALUE 'CSLIN',
             clrsit       TYPE dd03l-fieldname VALUE 'CLRSIT',
             clrdit       TYPE dd03l-fieldname VALUE 'CLRDIT',
             itmty_desc   TYPE dd03l-fieldname VALUE 'ITMTY_DESC',
             csheet       TYPE dd03l-fieldname VALUE 'CSHEET',
             zschl        TYPE dd03l-fieldname VALUE 'ZSCHL',
             prsdt        TYPE dd03l-fieldname VALUE 'PRSDT',
             budat        TYPE dd03l-fieldname VALUE 'BUDAT',
             cntit        TYPE dd03l-fieldname VALUE 'CNTIT',
             prsok        TYPE dd03l-fieldname VALUE 'PRSOK',
             rsncd        TYPE dd03l-fieldname VALUE 'RSNCD',
             istat        TYPE dd03l-fieldname VALUE 'ISTAT',
             mandt        TYPE dd03l-fieldname VALUE 'MANDT',
           END OF gc_rejitm_field.

CONSTANTS: BEGIN OF gc_makt_field,
             mandt TYPE dd03l-fieldname VALUE 'MANDT',
             matnr TYPE dd03l-fieldname VALUE 'MATNR',
             spras TYPE dd03l-fieldname VALUE 'SPRAS',
             maktx TYPE dd03l-fieldname VALUE 'MAKTX',
             maktg TYPE dd03l-fieldname VALUE 'MAKTG',
           END OF gc_makt_field.

CONSTANTS: BEGIN OF gc_fieldname,
             srno       TYPE dd03l-fieldname VALUE 'SRNO',
             dmrno      TYPE dd03l-fieldname VALUE 'DMRNO',
             rwclr      TYPE dd03l-fieldname VALUE 'RWCLR',
             rowcolor   TYPE dd03l-fieldname VALUE 'ROWCOLOR',
             bsamt      TYPE dd03l-fieldname VALUE 'BSAMT',
             srcam      TYPE dd03l-fieldname VALUE 'SRCAM',
             /cgdc/orgi TYPE dd03l-fieldname VALUE '/CGDC/ORGI',
             posnr      TYPE dd03l-fieldname VALUE 'POSNR',
             cntit      TYPE dd03l-fieldname VALUE 'CNTIT',
             vkorg      TYPE dd03l-fieldname VALUE 'VKORG',
             vkbur      TYPE dd03l-fieldname VALUE 'VKKBUR',
             ktonr      TYPE dd03l-fieldname VALUE 'KTONR',
             fmsck      TYPE dd03l-fieldname VALUE 'FMSCK',
             mcont      TYPE dd03l-fieldname VALUE 'MCONT',
             cptgrp     TYPE dd03l-fieldname VALUE 'CPTGRP',
             dtgrp      TYPE dd03l-fieldname VALUE 'DTGRP',
             matnr      TYPE dd03l-fieldname VALUE 'MATNR',
             vbeln      TYPE dd03l-fieldname VALUE 'VBELN',
             bilmatnr   TYPE dd03l-fieldname VALUE 'BILMATNR',
             waerk      TYPE dd03l-fieldname VALUE 'WAERK',
             kschl      TYPE dd03l-fieldname VALUE 'KSCHL',
             waers      TYPE dd03l-fieldname VALUE 'WAERS',
             kstat      TYPE dd03l-fieldname VALUE 'KSTAT',
             kwert      TYPE dd03l-fieldname VALUE 'KWERT',
             mandt      TYPE dd03l-fieldname VALUE 'MANDT',
             pernr      TYPE dd03l-fieldname VALUE 'PERNR',
             cntno      TYPE dd03l-fieldname VALUE 'CNTNO',
             auart      TYPE dd03l-fieldname VALUE 'AUART',
             clrno      TYPE dd03l-fieldname VALUE 'CLRNO',
             clrqt      TYPE dd03l-fieldname VALUE 'CLRQT',
             rtbpn      TYPE dd03l-fieldname VALUE 'RTBPN',
             erdat      TYPE dd03l-fieldname VALUE 'ERDAT',
             erzet      TYPE dd03l-fieldname VALUE 'ERZET',
             ernam      TYPE dd03l-fieldname VALUE 'ERNAM',
             kbetr      TYPE dd03l-fieldname VALUE 'KBETR',
             kawrt      TYPE dd03l-fieldname VALUE 'KAWRT',
             kwert24    TYPE dd03l-fieldname VALUE 'KWERT24',
             updkz      TYPE dd03l-fieldname VALUE 'UPDKZ',
           END OF gc_fieldname.

CONSTANTS: BEGIN OF gc_matnr_val,
             labor_a TYPE matnr VALUE 'LABOR_A',
           END OF gc_matnr_val.

CONSTANTS: BEGIN OF gc_rtbusage_val,
             cost TYPE /cgdc/rtb_usage VALUE 'COST',
           END OF gc_rtbusage_val.

CONSTANTS: BEGIN OF gc_pop_src_date,
             docu TYPE /cgdc/popsrc VALUE 'DOCU',
             post TYPE /cgdc/popsrc VALUE 'POST',
           END OF gc_pop_src_date.

CONSTANTS: BEGIN OF gc_bilcrttyp,
             manu TYPE /cgdc/bilcrttyp VALUE 'MANU',
             scit TYPE /cgdc/bilcrttyp VALUE 'SCIT',
*             bpma TYPE /cgdc/bilcrttyp VALUE 'BPMA',
             auma TYPE /cgdc/bilcrttyp VALUE 'AUMA',
             auto TYPE /cgdc/bilcrttyp VALUE 'AUTO',
           END OF gc_bilcrttyp.

CONSTANTS: BEGIN OF gc_call,
             1 TYPE c VALUE '1',
             2 TYPE c VALUE '2',
             3 TYPE c VALUE '3',
             4 TYPE c VALUE '4',
           END OF gc_call.

CONSTANTS: BEGIN OF gc_operation,
             q TYPE c VALUE 'Q',
             a TYPE c VALUE 'A',
           END OF gc_operation.

CONSTANTS: BEGIN OF gc_msg_cls_msgnr,
             003 TYPE msgnr VALUE '003',
             004 TYPE msgnr VALUE '004',
             007 TYPE msgnr VALUE '007',
             009 TYPE msgnr VALUE '009',
             010 TYPE msgnr VALUE '010',
             013 TYPE msgnr VALUE '013',
             014 TYPE msgnr VALUE '014',
             017 TYPE msgnr VALUE '017',
             018 TYPE msgnr VALUE '018',
             019 TYPE msgnr VALUE '019',
             020 TYPE msgnr VALUE '020',
             026 TYPE msgnr VALUE '026',
             030 TYPE msgnr VALUE '030',
             036 TYPE msgnr VALUE '036',
             037 TYPE msgnr VALUE '037',
             039 TYPE msgnr VALUE '039',
             041 TYPE msgnr VALUE '041',
             042 TYPE msgnr VALUE '042',
             048 TYPE msgnr VALUE '048',
             049 TYPE msgnr VALUE '049',
             050 TYPE msgnr VALUE '050',
             055 TYPE msgnr VALUE '055',
             056 TYPE msgnr VALUE '056',
             057 TYPE msgnr VALUE '057',
             058 TYPE msgnr VALUE '058',
             060 TYPE msgnr VALUE '060',
             061 TYPE msgnr VALUE '061',
             062 TYPE msgnr VALUE '062',
             068 TYPE msgnr VALUE '068',
             070 TYPE msgnr VALUE '070',
             080 TYPE msgnr VALUE '080',
             081 TYPE msgnr VALUE '081',
             082 TYPE msgnr VALUE '082',
             083 TYPE msgnr VALUE '083',
             089 TYPE msgnr VALUE '089',
             090 TYPE msgnr VALUE '090',
             091 TYPE msgnr VALUE '091',
             092 TYPE msgnr VALUE '092',
             094 TYPE msgnr VALUE '094',
             095 TYPE msgnr VALUE '095',
             098 TYPE msgnr VALUE '098',
             100 TYPE msgnr VALUE '100',
             102 TYPE msgnr VALUE '102',
             114 TYPE msgnr VALUE '114',
             151 TYPE msgnr VALUE '151',
             152 TYPE msgnr VALUE '152',
             164 TYPE msgnr VALUE '164',
             174 TYPE msgnr VALUE '174',
             186 TYPE msgnr VALUE '186',
             165 TYPE msgnr VALUE '165',
           END OF gc_msg_cls_msgnr.

CONSTANTS: BEGIN OF gc_msg_code,
             g TYPE /cgdc/err_msg VALUE 'G',
             v TYPE /cgdc/msg_id VALUE 'V',
             i TYPE /cgdc/msg_id VALUE 'I',
             p TYPE /cgdc/msg_id VALUE 'P',
             f TYPE /cgdc/msg_id VALUE 'F',
           END OF gc_msg_code.

CONSTANTS: BEGIN OF gc_layout_selmode,
             a TYPE lvc_libox VALUE 'A',
             x TYPE lvc_libox VALUE 'X',
           END OF gc_layout_selmode.

CONSTANTS: BEGIN OF gc_layout_no_rowmark,
             a TYPE lvc_rowmk VALUE 'A',
             x TYPE lvc_rowmk VALUE 'X',
           END OF gc_layout_no_rowmark.

CONSTANTS: BEGIN OF gc_save,
             u TYPE char01 VALUE 'U',
             x TYPE char01 VALUE 'X',
             a TYPE char01 VALUE 'A',
           END OF gc_save.

CONSTANTS: gc_zero                    TYPE c VALUE '0',
           gc_one                     TYPE c VALUE '1',
           gc_handle_one              TYPE c VALUE '1',
           gc_clrno_spl_char          TYPE /cgdc/clrqno VALUE '$1',
           gc_layout_style            TYPE lvc_fname VALUE 'STYLE',
           gc_layout_styles           TYPE lvc_fname VALUE 'STYLES',
           gc_layout_info_fname       TYPE lvc_cifnm VALUE 'RWCLR',
           gc_layout_excp_fname       TYPE lvc_exfnm VALUE 'MSG_ICON',
           gc_pagesize_zero           TYPE /cgdc/page_size VALUE '00000',
           gc_pbd                     TYPE char3 VALUE 'PBD',
           gc_job_name1               TYPE char20 VALUE '/CGDC/CLRQ_PROC_',
           gc_display_control         TYPE char20 VALUE 'DISPLAY_CONTROLS_',
           gc_modify_screen           TYPE char20 VALUE 'MODIFY_SCREEN_',
           gc_cc_dyn_sel(30)          TYPE c VALUE 'DYN_SLCTNS_CC_REPORT',
           gc_rtb_manl_itm            TYPE vrm_id VALUE '/CGDC/T_RTBMIT-MITYP',
           gc_billitm_type            TYPE vrm_id VALUE '/CGDC/S_CLRQBI_SCRNFLD-BITYPE',
           gc_ps_psp_pnr              TYPE vrm_id VALUE '/CGDC/S_CLRQBI_SCRNFLD-PS_PSP_PNR',
           gc_ref_doc_num_field       TYPE fieldname VALUE '/CGDC/_CLRQHD-VGBEL',
           gc_scrn_filed_cumm         TYPE text20 VALUE '* Cummulative',
           gc_a                       TYPE c VALUE 'A',
           gc_upd_without_error_async TYPE c VALUE 'B',
           gc_process_typ_p           TYPE c VALUE 'P',
           gc_process_typ_n           TYPE c VALUE 'N',
           gc_process_typ_1           TYPE c VALUE '1',
           gc_process_typ_2           TYPE c VALUE '2',
           gc_cont_max_ext            TYPE i VALUE 2000,
           gc_cont_min_ext            TYPE i VALUE 250.


CONSTANTS: BEGIN OF gc_bibstat,
             open              TYPE /cgdc/clrqi_billstat VALUE  ' ',
             bill_req          TYPE /cgdc/clrqi_billstat VALUE  '1',
             pbd_created       TYPE /cgdc/clrqi_billstat VALUE  '2',
             pbd_in_approval   TYPE /cgdc/clrqi_billstat VALUE  '3',
             pbd_rework        TYPE /cgdc/clrqi_billstat VALUE  '4',
             pbd_approved      TYPE /cgdc/clrqi_billstat VALUE  '5',
             invoice_created   TYPE /cgdc/clrqi_billstat VALUE  '6',
             erroneous_invoice TYPE /cgdc/clrqi_billstat VALUE  '7',
             invoice_posted    TYPE /cgdc/clrqi_billstat VALUE  '8',
             invoice_cleared   TYPE /cgdc/clrqi_billstat VALUE  '9',

           END OF gc_bibstat.

CONSTANTS: BEGIN OF gc_kschl1,
             ydif TYPE kscha VALUE 'YDIF',
           END OF gc_kschl1.

CONSTANTS: BEGIN OF gc_rsn_func,
             postpone     TYPE /cgdc/rsn_func VALUE 'P',
             reject       TYPE /cgdc/rsn_func VALUE 'R',
             price_chg    TYPE /cgdc/rsn_func VALUE 'A',
             manual_itm   TYPE /cgdc/rsn_func VALUE 'M',
             bill_itm     TYPE /cgdc/rsn_func VALUE 'B',
             bill_sch_itm TYPE /cgdc/rsn_func VALUE 'S',
             req_itm      TYPE /cgdc/rsn_func VALUE 'Q',
             calc_grp     TYPE /cgdc/rsn_func VALUE 'G',
             cust_rsv1    TYPE /cgdc/rsn_func VALUE '1',
             cust_rsv2    TYPE /cgdc/rsn_func VALUE '2',
             cust_rsv3    TYPE /cgdc/rsn_func VALUE '3',

           END OF gc_rsn_func.

CONSTANTS: BEGIN OF gc_var_type,
             cb123 TYPE /cgdc/var_type VALUE 'CB123',
             cb124 TYPE /cgdc/var_type VALUE 'CB124',
             p     TYPE rsscr_kind VALUE 'P',
           END OF gc_var_type.

CONSTANTS gc_cal_request TYPE char3 VALUE 'CLR' ##NO_TEXT.

CONSTANTS: BEGIN OF gc_beknz,
             stlmt_cr   TYPE beknz VALUE 'A',
             cr_posting TYPE beknz VALUE 'H',
             dlvy_cr    TYPE beknz VALUE 'L',
             dr_posting TYPE beknz VALUE 'S',
           END OF gc_beknz.

CONSTANTS: BEGIN OF gc_kappl,
             orders TYPE kappl VALUE 'KA',
             sales  TYPE kappl VALUE 'V',
           END OF gc_kappl.


CONSTANTS: BEGIN OF gc_kvewe,
             pricing TYPE kvewe VALUE 'A',
           END OF gc_kvewe.

CONSTANTS: BEGIN OF gc_lednr,
             std_lednr TYPE lednr VALUE '00',
           END OF gc_lednr.

CONSTANTS: BEGIN OF gc_versn,
             act_ver  TYPE versn VALUE '000',
             chg1_ver TYPE versn VALUE '001',
             chg2_ver TYPE versn VALUE '002',
             tgt_cost TYPE versn VALUE '003',
             prg_ver  TYPE versn VALUE '100',
             fcst_ver TYPE versn VALUE '110',
           END OF gc_versn.

CONSTANTS: BEGIN OF gc_mem_id,
             /cgdc/rrb  TYPE char20 VALUE '/CGDC/RRB',
             /cgdc/clrq TYPE char20 VALUE '/CGDC/CLRQ',
           END OF gc_mem_id.

CONSTANTS: BEGIN OF gc_refobjtyp,
             bus2096 TYPE swo_objtyp VALUE 'BUS2096',
           END OF gc_refobjtyp.

CONSTANTS: BEGIN OF gc_objty,
             i VALUE 'I',
             p VALUE 'P',
             c VALUE 'C',
             b VALUE 'B',
             g VALUE 'G',
             r VALUE 'R',
           END OF gc_objty.

CONSTANTS: BEGIN OF gc_datety,
             pop_stdt   TYPE /cgdc/clrq_cust_dt_rule_type VALUE 'S',
             pop_enddt  TYPE /cgdc/clrq_cust_dt_rule_type VALUE 'E',
             billing_dt TYPE /cgdc/clrq_cust_dt_rule_type VALUE 'B',
           END OF gc_datety.

CONSTANTS: BEGIN OF gc_answer,
             yes  TYPE c VALUE '1',
             no   TYPE c VALUE '2',
             canc TYPE c VALUE 'A',
           END OF gc_answer.
CONSTANTS : gc_bg_key TYPE char2 VALUE '_K'.

CONSTANTS: BEGIN OF gc_fnkey,
             bc TYPE char02 VALUE 'BC',
             bs TYPE char02 VALUE 'BS',
             mi TYPE char02 VALUE 'MI',
           END OF gc_fnkey.

CONSTANTS: BEGIN OF gc_auth_obj,
             /cgdc/crty TYPE xuobject VALUE '/CGDC/CRTY',
           END OF gc_auth_obj.

CONSTANTS: BEGIN OF gc_csist,
             acv_cost_sht       TYPE /cgdc/clrq_csist VALUE 'A',
             no_cost_sht_at_wbs TYPE /cgdc/clrq_csist VALUE 'B',
             acv_incomp_map     TYPE /cgdc/clrq_csist VALUE 'D',
             error              TYPE /cgdc/clrq_csist VALUE 'E',
           END OF gc_csist.

CONSTANTS: BEGIN OF gc_setclass,
             cost_elem_grp TYPE setclass VALUE '0102',
           END OF gc_setclass.

CONSTANTS: BEGIN OF gc_range_tbl_sign,
             include TYPE c VALUE 'I',
             exclude TYPE c VALUE 'E',
           END OF gc_range_tbl_sign.

CONSTANTS: BEGIN OF gc_operator,
             asterisk   TYPE char01 VALUE '*',
             quotes     TYPE char01 VALUE `'`,
             fwd_slash  TYPE char01 VALUE '/',
             eq_sign    TYPE char01 VALUE '=',
             plus_sign  TYPE char01 VALUE '+',
             minus_sign TYPE char01 VALUE '-',
             le_sign    TYPE char01 VALUE '<',
             and_sign   TYPE char01 VALUE '&',
             equal      TYPE char02 VALUE 'EQ',
             between    TYPE char02 VALUE 'BT',
             and        TYPE char03 VALUE 'AND',
           END OF gc_operator.

CONSTANTS: BEGIN OF gc_auth_action,
             remove  TYPE c VALUE '1',
             apply   TYPE c VALUE '2',
             display TYPE c VALUE '3',
           END OF gc_auth_action.

CONSTANTS: BEGIN OF gc_max_on_dmd_excd,
             r TYPE c VALUE 'R',
             y TYPE c VALUE 'Y',
             g TYPE c VALUE 'G',
           END OF gc_max_on_dmd_excd.

CONSTANTS: BEGIN OF gc_calc_type,
             adjust               TYPE ksteu VALUE 'A',
             free                 TYPE ksteu VALUE 'B',
             manual_chg           TYPE ksteu VALUE 'C',
             fixed                TYPE ksteu VALUE 'D',
             cond_val_basis_fixed TYPE ksteu VALUE 'E',
             cond_val_fixed_bill  TYPE ksteu VALUE 'F',
             cond_basis_fixed     TYPE ksteu VALUE 'G',
             cond_val_fixed_cost  TYPE ksteu VALUE 'H',
             scale_base_val       TYPE ksteu VALUE 'I',
           END OF gc_calc_type.

CONSTANTS: BEGIN OF gc_knumv,
             1 TYPE knumv VALUE '1',
           END OF gc_knumv.

CONSTANTS: BEGIN OF gc_partner_func,
             sold_to_party TYPE parvw VALUE 'AG',
             vendor        TYPE parvw VALUE 'LF',
             bill_to_party TYPE parvw VALUE 'RE',
             payer         TYPE parvw VALUE 'RG',
             sales_emp     TYPE parvw VALUE 'VE',
             ship_to_party TYPE parvw VALUE 'WE',
           END OF gc_partner_func.

CONSTANTS: BEGIN OF gc_commit_mode,
             async_commit TYPE vf_commit_mode VALUE '1',
             sync_commit  TYPE vf_commit_mode VALUE '2',
             no_commit    TYPE vf_commit_mode VALUE '3',
           END OF gc_commit_mode.

CONSTANTS: BEGIN OF gc_val_org,
             cell      TYPE c VALUE 'C',
             structure TYPE c VALUE 'S',
           END OF gc_val_org.

*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMEVT
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.

  CASE sscrfields.
    WHEN 'CRET'.    " Using constant giving a warning n is part of ATC

      IF sy-dynnr EQ '0010' AND sy-tcode <> '/CGDC/CRCU'. " Using constant giving a warning n is part of ATC

        IF so_crtyp[] IS INITIAL
          AND so_conno[] IS INITIAL
          AND so_vbeln[] IS INITIAL
          AND so_auart[] IS INITIAL.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE e006(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '006'.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
        ENDIF.

        PERFORM select_calc_request_data.

      ELSEIF sy-dynnr EQ '0010' AND sy-tcode = '/CGDC/CRCU'.
        CALL SCREEN 0900.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF01.
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Form update_calc_req_background_ui
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_VBELN
*&---------------------------------------------------------------------*

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0A.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form active_less_than_max_wait
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_PARALLEL_PROCESS_MAX_PROCES
*&      <-- GS_PARALLEL_PORCESS_ACTIVE_SES
*&---------------------------------------------------------------------*
FORM active_less_than_max_wait  USING    ls_parallel_process TYPE /cgdc/s_parallel_process
                                         pv_times TYPE i
                                CHANGING lv_parallel_porcess_active_ses.

  FIELD-SYMBOLS: <lwa_bgwp_list> LIKE LINE OF gt_bgwp_list.
  DATA lt_item_key TYPE TABLE OF /cgdc/s_clrqit_key..
  DO.
    IF lv_parallel_porcess_active_ses LT pv_times OR lv_parallel_porcess_active_ses = 0. "ls_parallel_process-max_process.
      EXIT.
    ENDIF.

    LOOP AT gt_bgwp_list ASSIGNING <lwa_bgwp_list>.

      IF <lwa_bgwp_list>-status NE c_background_job_status-finished
        AND <lwa_bgwp_list>-status NE c_background_job_status-aborted
        AND <lwa_bgwp_list>-status NE c_background_job_status-unknown_state.

        CALL FUNCTION 'BP_JOB_STATUS_GET'
          EXPORTING
            jobcount                   = <lwa_bgwp_list>-task_number
            jobname                    = <lwa_bgwp_list>-task_name
          IMPORTING
            status                     = <lwa_bgwp_list>-status
          EXCEPTIONS ##FM_SUBRC_OK
            job_doesnt_exist           = 1
            unknown_error              = 2
            parent_child_inconsistency = 3
            OTHERS                     = 4.
        IF sy-subrc NE 0.
        ENDIF.
        IF <lwa_bgwp_list>-status EQ c_background_job_status-finished
          OR <lwa_bgwp_list>-status EQ c_background_job_status-aborted.

          SUBTRACT 1 FROM lv_parallel_porcess_active_ses.
          IMPORT gt_bg_crt_keys TO lt_item_key FROM DATABASE /cgdc/_clrq_indx(cr) ID <lwa_bgwp_list>-mem_id.
          APPEND LINES OF lt_item_key TO gt_bg_crt_keys.
          "delete Index Keys
          DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  <lwa_bgwp_list>-mem_id.

        ENDIF.

      ENDIF.

    ENDLOOP.

    IF lv_parallel_porcess_active_ses GE pv_times AND lv_parallel_porcess_active_ses GE 1. "ls_parallel_process-max_process.
      WAIT UP TO ls_parallel_process-max_wait SECONDS.
    ENDIF.

  ENDDO.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form assign_exist_bill_item
*&---------------------------------------------------------------------*
*& This subroutine will assign an existing open bill item number to
*& the calculation request item.
*&---------------------------------------------------------------------*
*&      --> LS_BILL_NUM_OPEN
*&      --> LS_BILL_TYP
*&      <-- LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM assign_exist_bill_item  USING    ls_bill_num_open TYPE /cgdc/_clrqbi
                                      ls_bill_typ      TYPE /cgdc/t_bilitty
                                      lv_call          TYPE c
                             CHANGING ls_clrq_itm_new       TYPE /cgdc/s_clrqit
                                      ls_clrq_itm_new_fcat  TYPE /cgdc/s_clrqit_fcat.
  DATA : lv_bilmatnr TYPE /cgdc/bilmatnr.
  "Found an open billing item number on the calc req
  "Assign it to calc request item.
  IF lv_call EQ gc_call-1.
    ls_clrq_itm_new-rtbbinr   = ls_bill_num_open-bill_item.
    ls_clrq_itm_new-bityp     = ls_bill_typ-bilitmtyp.
    ls_clrq_itm_new-bldat_bi  = ls_bill_num_open-bldat.
    ls_clrq_itm_new-fkrel     = ls_bill_num_open-fkrel.
    ls_clrq_itm_new-srvc_date = ls_clrq_itm_new_fcat-srvc_date.
    IF NOT ls_bill_num_open-exdat IS INITIAL.
      ls_clrq_itm_new-exdat = ls_bill_num_open-exdat.
    ENDIF.
    IF ls_clrq_itm_new-msg_code CA gc_msg_code-g.
      ls_clrq_itm_new-msg_icon  = icon_green_light.
      CLEAR ls_clrq_itm_new-msg_code.

    ENDIF.

  ELSE.
    ls_clrq_itm_new_fcat-rtbbinr   = ls_bill_num_open-bill_item.
    ls_clrq_itm_new_fcat-bityp     = ls_bill_typ-bilitmtyp.
    ls_clrq_itm_new_fcat-pop_stdt  = ls_bill_num_open-pop_stdt.
    ls_clrq_itm_new_fcat-pop_enddt = ls_bill_num_open-pop_enddt.
    ls_clrq_itm_new_fcat-bldat_bi  = ls_bill_num_open-bldat.
    ls_clrq_itm_new_fcat-fkrel     = ls_bill_num_open-fkrel.

    ls_clrq_itm_new_fcat-bilmatnr  = ls_bill_typ-bilmatnr .
    IF NOT ls_bill_num_open-exdat IS INITIAL.
      ls_clrq_itm_new_fcat-exdat = ls_bill_num_open-exdat.
    ENDIF.
    IF ls_clrq_itm_new_fcat-msg_code CA gc_msg_code-g.
      ls_clrq_itm_new_fcat-msg_icon  = icon_green_light.
      CLEAR ls_clrq_itm_new_fcat-msg_code.
    ENDIF.


  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*& Form assign_bit_to_subitem
*&---------------------------------------------------------------------*
*& This subroutine will assign a billing item type to
*& the sub item if it is missing
*&---------------------------------------------------------------------*
*&      <-- <LWA_SUB_ITEM>
*&---------------------------------------------------------------------*
FORM assign_bit_to_subitem  CHANGING lwa_sub_item TYPE /cgdc/s_clrqit_fcat.
  DATA: ls_clrqhd_brf   TYPE /cgdc/s_clrqhd_brf,
        p_clrqit_brf    TYPE /cgdc/s_clrqit_brf,
        ls_clrqcost_brf TYPE /cgdc/s_clrqcost_brf,
        p_clrqit        TYPE /cgdc/s_clrqit,
        lv_bitype       TYPE /cgdc/bitype,
        ls_bill_typ     TYPE /cgdc/t_bilitty,
        ls_clrqbi       TYPE /cgdc/_clrqbi,
        ls_bill_item    TYPE /cgdc/s_clrqbi,
        ls_clrq_cost    TYPE /cgdc/s_clrqcost,
        ls_bill_num     TYPE /cgdc/s_clrqbi,
*        ls_clrqbs_doc   TYPE /cgdc/s_clrqbs_doc,
        lv_clrsit       TYPE /cgdc/clrq_sitmno,
        lv_clrdit       TYPE /cgdc/clrq_delta_item,
        lv_pop_st       TYPE datum,
        lv_bilmatnr     TYPE /cgdc/bilmatnr,
        lt_bilitty      TYPE TABLE OF /cgdc/t_bilitty,
        ls_bilitty      TYPE  /cgdc/t_bilitty,
        ls_clrtic       TYPE /cgdc/t_rtbic,
        lv_pop_end      TYPE datum.

  FIELD-SYMBOLS: <lwa_clrqit> TYPE /cgdc/s_clrqit.

  CLEAR: ls_clrqhd_brf,  p_clrqit_brf,
         ls_clrqcost_brf .

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.

  CLEAR lv_clrsit.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lwa_sub_item-clrsit
    IMPORTING
      output = lv_clrsit.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR lv_clrdit.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lwa_sub_item-clrdit
    IMPORTING
      output = lv_clrdit.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR p_clrqit.
  READ TABLE gs_clrqdoc_infocus-x-critm INTO p_clrqit
                                        WITH KEY
                                        clrno  = lwa_sub_item-clrno
                                        clrit  = lwa_sub_item-clrit
                                        clrsit = lv_clrsit
                                        clrdit = lv_clrdit.
  IF sy-subrc EQ 0.
    MOVE-CORRESPONDING p_clrqit TO p_clrqit_brf.
    MOVE-CORRESPONDING p_clrqit TO ls_clrqcost_brf.
  ENDIF.

  MOVE-CORRESPONDING p_clrqit TO ls_clrqcost_brf.

  CLEAR lv_bitype.
  CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
    EXPORTING
      is_clrqhd   = ls_clrqhd_brf
      is_clrqit   = p_clrqit_brf
      is_clrqcost = ls_clrqcost_brf
    IMPORTING
      ev_bi_type  = lv_bitype.
  IF sy-subrc <> 0.
  ENDIF.

  IF NOT lv_bitype IS INITIAL.
    CLEAR ls_bill_typ.
    SELECT SINGLE * FROM /cgdc/t_bilitty
                    INTO ls_bill_typ
                    WHERE bilitmtyp = lv_bitype.


    IF  lwa_sub_item-bill_usage IS INITIAL.
      lwa_sub_item-bill_usage = ls_bill_typ-bill_usage.
    ENDIF.
    CASE ls_bill_typ-pop_src_date.
      WHEN gc_pop_src_date-docu.
        lwa_sub_item-srvc_date = lwa_sub_item-bldat.
      WHEN gc_pop_src_date-post.
        lwa_sub_item-srvc_date = lwa_sub_item-budat.
      WHEN OTHERS.
        lwa_sub_item-srvc_date = lwa_sub_item-bldat.
    ENDCASE.

    CLEAR ls_bill_item.
    ls_bill_item-bitype = lv_bitype.
    ls_bill_item-vgbel  = lwa_sub_item-vgbel.
    ls_bill_item-vgpos  = lwa_sub_item-vgpos.
    ls_bill_item-ps_psp_pnr = lwa_sub_item-ps_psp_pnr.



    PERFORM get_performance_dates USING ls_bill_item
                                        p_clrqit
                                  CHANGING lv_pop_st
                                           lv_pop_end.
    CLEAR ls_bill_item.

    IF NOT ls_bill_typ-bilmatnr IS INITIAL.
      lv_bilmatnr = ls_bill_typ-bilmatnr.
    ELSE.
      lv_bilmatnr = p_clrqit-matnr.
    ENDIF.

*    CASE ls_bill_typ-bilcreate_type.
*
*      WHEN gc_bilcrttyp-manu OR gc_bilcrttyp-bpma OR gc_bilcrttyp-auma.
    CLEAR ls_clrqbi.
    SELECT SINGLE *
           FROM /cgdc/_clrqbi
           WHERE clrno       EQ @lwa_sub_item-clrno
           AND   bitype      EQ @lv_bitype
           AND   bilmatnr    EQ @lv_bilmatnr
           AND   ( ps_psp_pnr  EQ @lwa_sub_item-ps_psp_pnr
           OR      ps_psp_pnr  IS INITIAL )
           AND   bstat       IS INITIAL
           AND   pop_stdt    LE @lwa_sub_item-srvc_date
           AND   pop_enddt   GE @lwa_sub_item-srvc_date
           AND   /cgdc/cline EQ @lwa_sub_item-/cgdc/cline
           INTO @ls_clrqbi.
    IF sy-subrc EQ 0.
      PERFORM assign_exist_bill_item USING ls_clrqbi
                                          ls_bill_typ
                                          space
                                    CHANGING p_clrqit
                                             lwa_sub_item.

      IF <lwa_clrqit> IS ASSIGNED.
        UNASSIGN <lwa_clrqit> .
      ENDIF.
      READ TABLE gs_clrqdoc_infocus-x-critm
      ASSIGNING <lwa_clrqit>
      WITH KEY clrno  = lwa_sub_item-clrno
               clrit  = lwa_sub_item-clrit
               clrsit = lv_clrsit
               clrdit = lv_clrdit.
      IF sy-subrc IS INITIAL.
        <lwa_clrqit>-updkz     = gc_updkz_update.
        PERFORM assign_exist_bill_item USING ls_clrqbi
                                             ls_bill_typ
                                             gc_call-1
                                     CHANGING <lwa_clrqit>
                                              lwa_sub_item.

        CLEAR ls_bill_num.
        ls_bill_num = CORRESPONDING #( ls_clrqbi ).

        PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15
        READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <lwa_clrqit>-pstyv. "RTB24-15
        SELECT *
            FROM /cgdc/t_bilitty
            INTO  TABLE @lt_bilitty.

        READ TABLE lt_bilitty INTO ls_bilitty
        WITH KEY bilitmtyp = ls_bill_num-bitype.

        IF sy-subrc = 0.
          IF ls_bilitty-qty_1 = abap_true.
            ls_bill_num-zmeng = 1.
          ELSEIF ls_clrtic-blkcumul_qty = abap_false. "RTB24-15
            ls_bill_num-zmeng = ls_bill_num-zmeng + <lwa_clrqit>-zmeng.
          ENDIF.
        ENDIF.
        ls_bill_num-netwr = ls_bill_num-netwr + <lwa_clrqit>-netwr.
        ls_bill_num-wavwr = ls_bill_num-wavwr + <lwa_clrqit>-wavwr.
        ls_bill_num-kzwi1 = ls_bill_num-kzwi1 + <lwa_clrqit>-kzwi1.
        ls_bill_num-kzwi2 = ls_bill_num-kzwi2 + <lwa_clrqit>-kzwi2.
        ls_bill_num-kzwi3 = ls_bill_num-kzwi3 + <lwa_clrqit>-kzwi3.
        ls_bill_num-kzwi4 = ls_bill_num-kzwi4 + <lwa_clrqit>-kzwi4.
        ls_bill_num-kzwi5 = ls_bill_num-kzwi5 + <lwa_clrqit>-kzwi5.
        ls_bill_num-kzwi6 = ls_bill_num-kzwi6 + <lwa_clrqit>-kzwi6.
        "++SOC- Decimal Precision fields
        ls_bill_num-netwr24 = ls_bill_num-netwr24 + <lwa_clrqit>-netwr24.
        ls_bill_num-kzwi1_24 = ls_bill_num-kzwi1_24 + <lwa_clrqit>-kzwi1_24.
        ls_bill_num-kzwi2_24 = ls_bill_num-kzwi2_24 + <lwa_clrqit>-kzwi2_24.
        ls_bill_num-kzwi3_24 = ls_bill_num-kzwi3_24 + <lwa_clrqit>-kzwi3_24.
        ls_bill_num-kzwi4_24 = ls_bill_num-kzwi4_24 + <lwa_clrqit>-kzwi4_24.
        ls_bill_num-kzwi5_24 = ls_bill_num-kzwi5_24 + <lwa_clrqit>-kzwi5_24.
        ls_bill_num-kzwi6_24 = ls_bill_num-kzwi6_24 + <lwa_clrqit>-kzwi6_24.
        "++EOC- Decimal Precision fields
        ls_bill_num-updkz = gc_updkz_update.
        APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.
      ENDIF.

      IF <lwa_clrqit> IS ASSIGNED.
        UNASSIGN <lwa_clrqit> .
      ENDIF.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                         WHERE clrno  = lwa_sub_item-clrno
                                         AND   clrit  = lwa_sub_item-clrit.
        CLEAR <lwa_clrqit>-msg_code.
        <lwa_clrqit>-msg_icon = icon_green_light.
        <lwa_clrqit>-updkz = gc_updkz_update.
      ENDLOOP.
    ELSE.
      "Create & assign the new Bill item number
      TRY.
          cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
          RECEIVING
            uuid = lwa_sub_item-rtbbinr ).
        CATCH cx_uuid_error.
      ENDTRY.

      lwa_sub_item-bityp    = lv_bitype.

      IF NOT ls_bill_typ-bilmatnr IS INITIAL.
        lv_bilmatnr = ls_bill_typ-bilmatnr.
      ELSE.
        lv_bilmatnr = p_clrqit-matnr.
      ENDIF.
*          lwa_sub_item-bilmatnr = ls_bill_typ-bilmatnr.

      IF <lwa_clrqit> IS ASSIGNED.
        UNASSIGN <lwa_clrqit> .
      ENDIF.
      READ TABLE gs_clrqdoc_infocus-x-critm
      ASSIGNING <lwa_clrqit>
      WITH KEY clrno  = lwa_sub_item-clrno
               clrit  = lwa_sub_item-clrit
               clrsit = lv_clrsit
               clrdit = lv_clrdit.
      IF sy-subrc EQ 0.
        <lwa_clrqit>-rtbbinr    = lwa_sub_item-rtbbinr.
        <lwa_clrqit>-updkz      = gc_updkz_update.
        <lwa_clrqit>-bityp      = lv_bitype.

        "Get more details to update the newly created Billing item
        "number in the table /CGDC/_CLRQBI


        CLEAR ls_bill_item.
        PERFORM get_additional_details_binr USING <lwa_clrqit>
                                                  ls_bill_typ
                                            CHANGING ls_bill_item.

        lwa_sub_item-pop_stdt    = ls_bill_item-pop_stdt.
        lwa_sub_item-pop_enddt   = ls_bill_item-pop_enddt.
        lwa_sub_item-bldat_bi    = ls_bill_item-bldat.
        <lwa_clrqit>-bldat_bi    = ls_bill_item-bldat.
        <lwa_clrqit>-srvc_date   = lwa_sub_item-srvc_date.
        "Add it to the CR document structure for saving it on
        "/CGDC/_CLRQBI table
        APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.
      ENDIF.
      IF <lwa_clrqit> IS ASSIGNED.
        UNASSIGN <lwa_clrqit> .
      ENDIF.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                         WHERE clrno  = lwa_sub_item-clrno
                                         AND   clrit  = lwa_sub_item-clrit.
        CLEAR <lwa_clrqit>-msg_code.
        <lwa_clrqit>-msg_icon = icon_green_light.
        <lwa_clrqit>-updkz = gc_updkz_update.
      ENDLOOP.
    ENDIF.
    gs_variables-calc_changed = abap_true.

    IF <lwa_clrqit> IS ASSIGNED.
      UNASSIGN <lwa_clrqit>.
    ENDIF.
*        WHEN OTHERS.
*          IF gs_variables-call_from_ui EQ abap_false.
*            MESSAGE i036(/cgdc/clrq) WITH lv_bitype.
*          ELSE.
*            CLEAR gs_messages.
*            gs_messages-msgid = gc_clrq_msg_cls.
*            gs_messages-msgnr = gc_msg_cls_msgnr-036.
*            gs_messages-msgty = gc_message_type-information.
*            gs_messages-msgv1 = lv_bitype.
*            APPEND gs_messages TO gt_messages.
*          ENDIF.
*
*
*      ENDCASE.

  ELSE.
    "Billing item type could not be derived.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i037(/cgdc/clrq) WITH lwa_sub_item-clrno lwa_sub_item-clrit.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-037.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = lwa_sub_item-clrno.
      gs_messages-msgv2 = lwa_sub_item-clrit.
      APPEND gs_messages TO gt_messages.
    ENDIF.


  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form add_unassigned_bill_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CLRQBI
*&      <-- <LWA_CLRQ>
*&---------------------------------------------------------------------*
FORM add_unassigned_bill_item  USING    lwa_clrqbi TYPE /cgdc/s_clrqbi
                               CHANGING lwa_clrq.


  FIELD-SYMBOLS: <lv_data> TYPE any.
  CLEAR lwa_clrq.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-mandt OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = sy-mandt.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-clrno OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-clrno.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-bill_item.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-bilmatnr OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-bilmatnr.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-/cgdc/cline OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-/cgdc/cline.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-ps_psp_pnr OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-ps_psp_pnr.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-pop_stdt OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-pop_stdt.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-pop_enddt OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-pop_enddt.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-bldat OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-bldat.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-exdat OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-exdat.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-faksp OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-faksp.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-fkrel OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-fkrel.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-bstat OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-bstat.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-waerk OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-waerk.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-netwr OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-netwr.

  IF <lv_data> IS ASSIGNED.
    UNASSIGN <lv_data>.
  ENDIF.
  ASSIGN COMPONENT gc_clrqbi_field-zmeng OF STRUCTURE lwa_clrq TO <lv_data>.
  <lv_data> = lwa_clrqbi-zmeng.

ENDFORM.

FORM assign_reprice_code USING lv_rp_rsn_cd TYPE /cgdc/rtb_rprc_actn_code
              CHANGING lwa_clrqit_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA : lwa_clrqpit TYPE /cgdc/_clrqpit.
  IF lv_rp_rsn_cd IS INITIAL.
    READ TABLE gt_clrqpit INTO lwa_clrqpit WITH KEY clrno = lwa_clrqit_fcat-clrno
                                                    clrit = lwa_clrqit_fcat-clrit
                                                    clrsit = lwa_clrqit_fcat-clrsit.
    IF sy-subrc = 0.
      lv_rp_rsn_cd = lwa_clrqpit-action_cd.
    ENDIF.
  ENDIF.
  CALL FUNCTION '/CGDC/CLRQ_GET_RPRC_RC'
    EXPORTING
      iv_rprc_cd              = lv_rp_rsn_cd
      iv_rtbpn                = gs_clrqdoc_infocus-x-crhdr-rtbpn
    IMPORTING
      ev_reason_cd            = lwa_clrqit_fcat-rsncd
    EXCEPTIONS
      cx_fdt                  = 1
      cx_fdt_no_result        = 2
      cx_fdt_arithmetic_error = 3
      cx_fdt_processing       = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  IF lwa_clrqit_fcat-rsncd IS INITIAL.
    "Populate the default reason code when BRF does not return it
    SELECT SINGLE *
             FROM /cgdc/t_clrtype
             INTO @DATA(lwa_clrtype)
             WHERE clrqt = @gs_clrqdoc_infocus-x-crhdr-clrqt.
    IF sy-subrc EQ 0.
      SELECT SINGLE rsncd
          FROM /cgdc/t_rtbrpar
          INTO @DATA(lv_default_rsncd)
          WHERE rsn_func EQ @gc_rsn_func-price_chg "'A'"
          AND rsnpf = @lwa_clrtype-rsnprf_a
          AND def_reason = @abap_true.
      IF sy-subrc EQ 0.
        lwa_clrqit_fcat-rsncd = lv_default_rsncd.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
FORM assign_billin_block CHANGING ls_clrqit_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA: lwa_crbinr TYPE /cgdc/s_clrqbi.

  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lfs_critm>) WHERE clrit = ls_clrqit_fcat-clrit.
    READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_crbinr WITH KEY bill_item = <lfs_critm>-rtbbinr
                                                  BINARY SEARCH.
    IF sy-subrc = 0 AND lwa_crbinr-bstat IS INITIAL.
      ls_clrqit_fcat-faksp = lwa_crbinr-faksp.
    ENDIF.
  ENDLOOP.

ENDFORM.
FORM add_rprc_err CHANGING lt_critm TYPE /cgdc/tt_clrqit.
  LOOP AT gt_clrqpit INTO DATA(lwa_clrqpit).
    AT NEW clrit.
      READ TABLE lt_critm ASSIGNING FIELD-SYMBOL(<lwa_critm>) WITH KEY clrit = lwa_clrqpit-clrit clrsit = '000000'.
      IF sy-subrc = 0.
        CONCATENATE <lwa_critm>-msg_code 'H' INTO <lwa_critm>-msg_code.
      ENDIF.
    ENDAT.
  ENDLOOP.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: /CGDC/LCLRQMF0B
**********************************************************

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0B.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form build_calc_request_worklist
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_calc_request_worklist.

  DATA: lv_input           TYPE i,
        lv_title           TYPE lvc_title,
        lv_lines(10)       TYPE n,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  CONSTANTS : lc_space TYPE c VALUE ' '.

  FIELD-SYMBOLS: <lwa_clrq_wl> TYPE /cgdc/s_clrq_wl.

  DATA(ls_stbl) = VALUE lvc_s_stbl( row = abap_true ).

  IF go_calc_request_worklist IS NOT BOUND.

    CREATE OBJECT go_calc_request_worklist
      EXPORTING
        i_parent          = go_docking_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM register_control_events.
    PERFORM exclude_toolbar_buttons USING space CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_request_worklist CHANGING lt_fcat.
    IF gs_variables-wl_imp_all = abap_true.
      PERFORM select_calc_request_data.
    ENDIF.
    SORT gt_wl_calc_req BY clrno.
    DESCRIBE TABLE gt_wl_calc_req LINES sy-tfill.
    WRITE sy-tfill TO lv_lines.
    CONDENSE lv_lines.
    CONCATENATE '(' lv_lines ')' INTO lv_title.
    CONCATENATE TEXT-001 lv_title INTO lv_title SEPARATED BY space.

    IF gs_variables-wl_curr_sel_row <> gs_variables-wl_prev_sel_row.
      READ TABLE gt_wl_calc_req
       INDEX gs_variables-wl_prev_sel_row
       ASSIGNING <lwa_clrq_wl>.
      IF sy-subrc EQ 0 AND <lwa_clrq_wl> IS ASSIGNED.
        CLEAR <lwa_clrq_wl>-rwclr.
      ENDIF.
      gs_variables-wl_prev_sel_row = gs_variables-wl_curr_sel_row.
    ENDIF.
    READ TABLE gt_wl_calc_req
   INDEX gs_variables-wl_curr_sel_row
   ASSIGNING <lwa_clrq_wl>.
    IF sy-subrc EQ 0 AND <lwa_clrq_wl> IS ASSIGNED.
      <lwa_clrq_wl>-rwclr = gc_rowcolor-yellow.
    ENDIF.

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.
    CLEAR ls_variant.
    ls_variant-report = gc_program.
    ls_variant-handle = gc_variant_handle-calc_request_worklist.

    go_calc_request_worklist->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_wl_calc_req
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

    CALL METHOD go_docking_container->set_visible
      EXPORTING
        visible           = gs_variables-worklist_is_visible
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        OTHERS            = 3.

  ELSEIF gs_variables-refresh_worklist EQ abap_true OR gs_variables-wl_imp_all = 'X'.
    IF gs_variables-wl_imp_all = abap_true.
      PERFORM initialize_document_data.
      PERFORM select_calc_request_data.
    ENDIF.
    SORT gt_wl_calc_req BY clrno.
    DESCRIBE TABLE gt_wl_calc_req LINES sy-tfill.
    WRITE sy-tfill TO lv_lines.
    CONDENSE lv_lines.
    CONCATENATE '(' lv_lines ')' INTO lv_title.
    CONCATENATE TEXT-001 lv_title INTO lv_title SEPARATED BY space.


    IF gs_variables-wl_curr_sel_row <> gs_variables-wl_prev_sel_row.
      READ TABLE gt_wl_calc_req
       INDEX gs_variables-wl_prev_sel_row
       ASSIGNING <lwa_clrq_wl>.
      IF sy-subrc EQ 0 AND <lwa_clrq_wl> IS ASSIGNED.
        CLEAR <lwa_clrq_wl>-rwclr.
      ENDIF.
      gs_variables-wl_prev_sel_row = gs_variables-wl_curr_sel_row.
    ENDIF.
    READ TABLE gt_wl_calc_req INDEX gs_variables-wl_curr_sel_row ASSIGNING <lwa_clrq_wl>.
    IF sy-subrc EQ 0 AND <lwa_clrq_wl> IS ASSIGNED.
      <lwa_clrq_wl>-rwclr = gc_rowcolor-yellow.
    ENDIF.


    CALL METHOD go_calc_request_worklist->set_gridtitle
      EXPORTING
        i_gridtitle = lv_title.

    CALL METHOD go_calc_request_worklist->refresh_table_display
      EXPORTING
        is_stable = VALUE lvc_s_stbl( row = abap_true )
      EXCEPTIONS
        finished  = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
*     Implement suitable error handling here
    ENDIF.

    .
    CLEAR gs_variables-refresh_worklist.

    CALL METHOD go_docking_container->set_visible
      EXPORTING
        visible           = gs_variables-worklist_is_visible
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        OTHERS            = 3.

  ENDIF.

  CALL METHOD go_calc_request_worklist->set_toolbar_interactive.

  go_calc_request_worklist->set_ready_for_input(
    i_ready_for_input = 0
  ).

ENDFORM.

FORM build_calc_req_items_grid.

  DATA: lv_input           TYPE i,
        lv_lines(20)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_pg_count        TYPE p DECIMALS 3,
        lv_data            TYPE char20,
        lv_lines_dec       TYPE curr13_2,
        lv_lines_str       TYPE c LENGTH 20,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.
  DATA: lwa_exc TYPE alv_s_qinf.
  DATA: lt_exc TYPE TABLE OF alv_s_qinf.
  DATA : lv_title1 TYPE string.
  DATA : lv_title2 TYPE string.
  DATA : lv_title3 TYPE string.
  lwa_exc-fieldname = gc_clrqit_field-subitem_icon .
  lwa_exc-text = TEXT-133.
  lwa_exc-value = icon_display_more.
  lwa_exc-type = cl_salv_tooltip=>c_type_icon.
  APPEND lwa_exc TO lt_exc.
  lwa_exc-text = TEXT-134.
  lwa_exc-value = icon_enter_more.
  lwa_exc-type = cl_salv_tooltip=>c_type_icon.
  APPEND lwa_exc TO lt_exc.

  IF go_grid_calc_req_items IS NOT BOUND.

    IF gs_variables-page_number IS INITIAL.
      gs_variables-page_number = gs_variables-item_from_tabix = 1.
      gs_variables-item_to_tabix = gs_calc_req_type-psize.
    ENDIF.


    CREATE OBJECT go_grid_calc_req_items
      EXPORTING
        i_parent          = go_items_grid_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM register_control_events.
    PERFORM exclude_toolbar_buttons USING gc_call-1
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_req_items
                               CHANGING lt_fcat.
    PERFORM prep_calc_req_itms_grid_data.
    PERFORM prepare_itmty_dd USING go_grid_calc_req_items.

    IF NOT gs_variables-key_only IS INITIAL.
      DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES lv_lines.
    ELSE.
      DESCRIBE TABLE gt_calc_req_items_fcat LINES lv_lines.
    ENDIF.

    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0.
      lv_pg_count = lv_lines / gs_calc_req_type-psize.
      CALL FUNCTION 'ROUND'
        EXPORTING
          input  = lv_pg_count
          sign   = '+'
        IMPORTING
          output = lv_pg_count.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      lv_page_count = lv_pg_count.
    ELSE.
      MOVE 1 TO lv_page_count.
      gs_variables-item_to_tabix = lv_lines.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero.
    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-page_number LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-item_from_tabix LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-item_to_tabix LEFT DELETING LEADING gc_zero.

    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-004 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.
    IF lv_lines = 0.
      gs_variables-item_to_tabix = 1.
      gs_variables-item_from_tabix = 1.
    ENDIF.
    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-item_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.  "` (` lv_data  '-' INTO lv_title1.

    CLEAR: lv_lines_dec,
         lv_lines_str.
    lv_lines_dec = 1 * gs_variables-item_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    lv_title = lv_title1.
    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.
    CLEAR ls_variant.
    ls_variant-report = gc_program.
    ls_variant-handle = gc_variant_handle-calc_req_items_grid.

    go_grid_calc_req_items->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
        it_except_qinfo               = lt_exc
      CHANGING
        it_outtab                     = gt_calc_req_items_fcat
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).


  ELSEIF gs_variables-refresh_calc_req_items_grid EQ abap_true .

    IF gs_variables-page_number IS INITIAL.
      gs_variables-page_number = gs_variables-item_from_tabix = 1.
      gs_variables-item_to_tabix = gs_calc_req_type-psize.
    ENDIF.

    IF NOT gs_variables-key_only IS INITIAL.
      DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES lv_lines.
    ELSE.
      DESCRIBE TABLE gt_calc_req_items_fcat LINES lv_lines.
    ENDIF.

    IF lv_lines GT gs_calc_req_type-psize.
      lv_pg_count = lv_lines / gs_calc_req_type-psize.
      CALL FUNCTION 'ROUND'
        EXPORTING
          input  = lv_pg_count
          sign   = '+'
        IMPORTING
          output = lv_pg_count.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      lv_page_count = lv_pg_count.

    ELSE.
      MOVE 1 TO lv_page_count.
      gs_variables-item_to_tabix = lv_lines.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero .
    SHIFT lv_lines LEFT DELETING LEADING gc_zero .
    SHIFT gs_variables-page_number LEFT DELETING LEADING gc_zero .
    SHIFT gs_variables-item_from_tabix LEFT DELETING LEADING gc_zero .
    SHIFT gs_variables-item_to_tabix LEFT DELETING LEADING gc_zero .
    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-004 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.
    IF lv_lines = 0.
      gs_variables-item_to_tabix = 1.
      gs_variables-item_from_tabix = 1.
    ENDIF.
    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-item_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.  "` (` lv_data  '-' INTO lv_title1.

    CLEAR: lv_lines_dec,
         lv_lines_str.
    lv_lines_dec = 1 * gs_variables-item_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    lv_title = lv_title1.
    CALL METHOD go_grid_calc_req_items->set_gridtitle
      EXPORTING
        i_gridtitle = lv_title.
    PERFORM prep_calc_req_itms_grid_data.
    go_grid_calc_req_items->refresh_table_display( ).
    CLEAR gs_variables-refresh_calc_req_items_grid.

  ENDIF.

  CALL METHOD go_grid_calc_req_items->set_toolbar_interactive.
  lv_input = 0.

ENDFORM.
FORM build_calc_req_bill_pre.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat,
        lt_dropdown        TYPE lvc_t_dral,
        lv_lines_dec       TYPE curr13_2, " p LENGTH 10 DECIMALS 0,
        lv_lines_str       TYPE c LENGTH 20,
        lv_title1          TYPE string,
        lv_pg_count        TYPE p DECIMALS 3,
        ls_dropdown        TYPE lvc_s_dral.

  IF go_grid_calc_req_bill_pre IS NOT BOUND.

    CREATE OBJECT go_grid_calc_req_bill_pre
      EXPORTING
        i_parent          = go_bill_pre_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.

    PERFORM dropdown_val CHANGING lt_dropdown.

    PERFORM prepare_field_catalog USING gc_structure-billing_items
                               CHANGING lt_fcat.

    PERFORM read_bill_pre_data.

    PERFORM prep_pagination_bill_data.

    PERFORM register_control_events.
    "line COunt Pending

    DESCRIBE TABLE gt_bill_pre_data LINES  lv_lines.
    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > gc_pagesize_zero.
*      lv_page_count = lv_lines / gs_calc_req_type-psize.
      lv_pg_count = lv_lines / gs_calc_req_type-psize.
      CALL FUNCTION 'ROUND'
        EXPORTING
          input  = lv_pg_count
          sign   = '+'
        IMPORTING
          output = lv_pg_count.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      lv_page_count = lv_pg_count.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero.
    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-page_number_bitm LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-pre_bill_from_tabix LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-pre_bill_to_tabix LEFT DELETING LEADING gc_zero.

    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-130 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number_bitm.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-pre_bill_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.  "` (` lv_data  '-' INTO lv_title1.


    CLEAR: lv_lines_dec,
         lv_lines_str.

    lv_lines_dec = 1 * gs_variables-pre_bill_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    lv_title = lv_title1.
*code for dynamic title
    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_styles.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.
    ls_variant-report = gc_program.
    ls_variant-handle = gc_variant_handle-calc_req_billing_pre_grid.

    go_grid_calc_req_bill_pre->set_drop_down_table(
      EXPORTING
        it_drop_down_alias = lt_dropdown ).

    go_grid_calc_req_bill_pre->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_bill_pre_data_page
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

    IF gs_variables-overview_mode = gc_mode_change.
      go_grid_calc_req_bill_pre->set_ready_for_input(
        EXPORTING
          i_ready_for_input = 1 ).
    ELSE.
      go_grid_calc_req_bill_pre->set_ready_for_input(
        EXPORTING
          i_ready_for_input = 0 ).
    ENDIF.

  ELSEIF  gs_variables-refersh_bill_bp_grid = abap_true.

    PERFORM read_bill_pre_data.
    PERFORM prep_styles_bill_pre.
    PERFORM prep_pagination_bill_data.

*    code for dynamic title
    DESCRIBE TABLE gt_bill_pre_data LINES  lv_lines.
    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > gc_pagesize_zero.
*      lv_page_count = lv_lines / gs_calc_req_type-psize.
      lv_pg_count = lv_lines / gs_calc_req_type-psize.
      CALL FUNCTION 'ROUND'
        EXPORTING
          input  = lv_pg_count
          sign   = '+'
        IMPORTING
          output = lv_pg_count.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      lv_page_count = lv_pg_count.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero.
    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-page_number_bitm LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-pre_bill_from_tabix LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-pre_bill_to_tabix LEFT DELETING LEADING gc_zero.

    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-130 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number_bitm.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-pre_bill_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
         lv_lines_str.
    lv_lines_dec = 1 * gs_variables-pre_bill_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    lv_title = lv_title1.


    CALL METHOD go_grid_calc_req_bill_pre->set_gridtitle
      EXPORTING
        i_gridtitle = lv_title.

    PERFORM prep_calc_req_itms_grid_data.

    go_grid_calc_req_bill_pre->refresh_table_display( ).
    CLEAR gs_variables-refersh_bill_bp_grid.
    go_grid_calc_req_bill_pre->refresh_table_display( ).

  ENDIF.


  IF gs_variables-overview_mode = gc_mode_change.
    go_grid_calc_req_bill_pre->set_ready_for_input(
      EXPORTING
        i_ready_for_input = 1 ).
  ELSE.
    go_grid_calc_req_bill_pre->set_ready_for_input(
      EXPORTING
        i_ready_for_input = 0 ).
  ENDIF.

ENDFORM.
FORM build_calc_req_subitems_grid.

  DATA: lv_input           TYPE i,
        lv_lines(20)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_data            TYPE char20,
        lv_lines_dec       TYPE curr13_2, " p LENGTH 10 DECIMALS 0,
        lv_lines_str       TYPE c LENGTH 20,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  DATA : lv_title1 TYPE string.
  DATA : lv_title2 TYPE string.
  DATA : lv_title3 TYPE string.

  IF go_grid_calc_subitems IS NOT BOUND.

    IF gs_variables-page_number IS INITIAL.
      gs_variables-page_number = gs_variables-item_from_tabix = 1.
      gs_variables-item_to_tabix = gs_calc_req_type-psize.
    ENDIF.


    CREATE OBJECT go_grid_calc_subitems
      EXPORTING
        i_parent          = go_subitm_alv_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM register_control_events.
    PERFORM exclude_toolbar_buttons USING gc_call-1
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_req_items CHANGING lt_fcat.
    PERFORM prep_calc_req_subitm_dtl_dta.

    DESCRIBE TABLE gt_item_subitem LINES lv_lines.

    SHIFT lv_lines LEFT DELETING LEADING  gc_zero.
    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-004 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.



    lv_title = lv_title1.
    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.
    CLEAR ls_variant.
    ls_variant-report = gc_program.

    go_grid_calc_subitems->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_item_subitem
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    PERFORM prep_calc_req_subitm_dtl_dta.
    DESCRIBE TABLE gt_item_subitem LINES lv_lines.

    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-004 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.
    CALL METHOD go_grid_calc_subitems->set_gridtitle
      EXPORTING
        i_gridtitle = lv_title.


    go_grid_calc_subitems->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_grid_calc_subitems->set_toolbar_interactive.
  lv_input = 0.

  go_grid_calc_subitems->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_bill_hist
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_bill_hist .
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_grid_bill_hist IS NOT BOUND.
    CREATE OBJECT go_grid_bill_hist
      EXPORTING
        i_parent          = go_bill_hist_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.

    PERFORM prepare_field_catalog USING gc_structure-bill_hist
                               CHANGING lt_fcat.

    PERFORM prep_bill_hist_data.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   =  gc_layout_selmode-a.
    ls_layout-stylefname = gs_bill_hist_fcat_field-style.
    ls_layout-info_fname = gs_bill_hist_fcat_field-rwclr.
    ls_layout-col_opt = abap_true.
    ls_layout-cwidth_opt = abap_true.
    ls_variant-report = gc_program.
    ls_variant-handle = gc_variant_handle-calc_req_bill_hist_grid.

    CLEAR ls_sort.
    ls_sort-spos = 01.
    ls_sort-fieldname = gs_bill_hist_fcat_field-erdat.
    ls_sort-down = abap_true.
    APPEND ls_sort TO lt_sort.

    CLEAR ls_sort.
    ls_sort-spos = 02.
    ls_sort-fieldname = gs_bill_hist_fcat_field-erzet.
    ls_sort-down = abap_true.
    APPEND ls_sort TO lt_sort.

    go_grid_bill_hist->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_bill_hist_fcat "<gt_bill_pre_data>
        it_fieldcatalog               = lt_fcat
        it_sort                       = lt_sort
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSEIF gs_variables-refersh_bill_hist_grid = abap_true OR gs_variables-refersh_document = abap_true.
    PERFORM prep_bill_hist_data.
    go_grid_bill_hist->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_grid_bill_hist->set_toolbar_interactive.
  lv_input = 0.

  go_grid_bill_hist->set_ready_for_input(
    i_ready_for_input = lv_input
  ).


ENDFORM.
FORM build_calc_req_subitem_cond.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_grid_subitm_cond IS NOT BOUND.
    CREATE OBJECT go_grid_subitm_cond
      EXPORTING
        i_parent          = go_subitm_cond_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_req_cond CHANGING lt_fcat.
    PERFORM prep_calc_req_subitm_dta.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    CLEAR ls_variant.
    ls_variant-report = gc_program.

    go_grid_subitm_cond->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_subitm_condn
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    PERFORM prep_calc_req_subitm_dta.
    go_grid_subitm_cond->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_grid_subitm_cond->set_toolbar_interactive.
  lv_input = 0.

  go_grid_subitm_cond->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.
FORM build_calc_req_subitem_part.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lv_bilmatnr        TYPE /cgdc/bilmatnr,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_grid_subitm_part IS NOT BOUND.
    CREATE OBJECT go_grid_subitm_part
      EXPORTING
        i_parent          = go_subitm_part_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_req_part CHANGING lt_fcat.
    PERFORM prep_calc_req_subitm_dta.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    CLEAR ls_variant.
    ls_variant-report = gc_program.

    go_grid_subitm_part->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_subitm_part
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    PERFORM prep_calc_req_subitm_dta.
    go_grid_subitm_cond->refresh_table_display( ).

    CALL METHOD go_grid_subitm_part->set_toolbar_interactive.
    lv_input = 0.

    go_grid_subitm_part->set_ready_for_input(
      i_ready_for_input = lv_input
    ).
  ENDIF.
ENDFORM.
FORM build_calc_req_upd_prc.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_calc_req_upd_prc_grd IS NOT BOUND.
    CREATE OBJECT go_calc_req_upd_prc_grd
      EXPORTING
        i_parent          = go_calc_req_upd_prc_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_fcat_reprice CHANGING lt_fcat.
    PERFORM prepare_clrqhd_prc_data.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    CLEAR ls_variant.
    ls_variant-report = gc_program.

    go_calc_req_upd_prc_grd->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_calc_hd_reprice
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    PERFORM prepare_clrqhd_prc_data.
    go_calc_req_upd_prc_grd->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_calc_req_upd_prc_grd->set_toolbar_interactive.
  lv_input = 0.

  go_calc_req_upd_prc_grd->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.
FORM build_message_alv.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat,
        lwa_fcat           TYPE lvc_s_fcat.

  IF go_message_grid IS NOT BOUND.
    CREATE OBJECT go_message_grid
      EXPORTING
        i_parent          = go_message_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.


    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.

    PERFORM register_control_events.
    "line COunt Pending
    lwa_fcat-col_pos   = 1.
    lwa_fcat-fieldname = gc_message_field-icon.
    lwa_fcat-icon = abap_true.
    lwa_fcat-coltext = TEXT-135.
    lwa_fcat-outputlen = 3.
    lwa_fcat-col_opt = abap_true.
    APPEND lwa_fcat TO lt_fcat.
    CLEAR lwa_fcat.


    lwa_fcat-col_pos   = 2.
    lwa_fcat-fieldname = gc_message_field-message.
    lwa_fcat-coltext = TEXT-136.
    lwa_fcat-outputlen = 80.
    APPEND lwa_fcat TO lt_fcat.
    CLEAR ls_layout.

    lwa_fcat-col_pos   = 3.
    lwa_fcat-fieldname = gc_message_field-icon1.
    lwa_fcat-icon = abap_true.
    lwa_fcat-coltext = TEXT-137.
    lwa_fcat-outputlen = 12.
    lwa_fcat-style    =  cl_gui_alv_grid=>mc_style_button.
    lwa_fcat-col_opt = abap_true.
    APPEND lwa_fcat TO lt_fcat.
    CLEAR lwa_fcat.

    CLEAR lwa_fcat.


    lwa_fcat-col_pos   = 4.
    lwa_fcat-fieldname = gc_message_field-msgid.
    lwa_fcat-coltext = TEXT-138.
    lwa_fcat-outputlen = 80.
    lwa_fcat-no_out   = abap_true.
    lwa_fcat-tech     = abap_true.
    APPEND lwa_fcat TO lt_fcat.
    CLEAR ls_layout.

    lwa_fcat-col_pos   = 5.
    lwa_fcat-fieldname = gc_message_field-msgnr.
    lwa_fcat-icon      = abap_true.
    lwa_fcat-coltext   = TEXT-139.
    lwa_fcat-outputlen = 5.
    lwa_fcat-no_out   = abap_true.
    lwa_fcat-col_opt = abap_true.
    lwa_fcat-tech     = abap_true.
    APPEND lwa_fcat TO lt_fcat.
    CLEAR lwa_fcat.

    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.

    go_message_grid->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_messages_fcat
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    go_message_grid->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_message_grid->set_toolbar_interactive.
  lv_input = 0.

  go_message_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.
FORM build_postpone_alv.
  DATA: lv_input           TYPE i VALUE 1,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_postpone_grid IS NOT BOUND.
    CREATE OBJECT go_postpone_grid
      EXPORTING
        i_parent          = go_postpone_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_postpone CHANGING lt_fcat.

    PERFORM prep_postpone_data.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-x.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-edit = abap_true.

    go_postpone_grid->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_item_postponed_fcat
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    go_postpone_grid->refresh_table_display(  ).
  ENDIF.

  go_postpone_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).
  CALL METHOD go_postpone_grid->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.
ENDFORM.
FORM build_calc_man_itm_alv.
  DATA: lv_input           TYPE i VALUE 1,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_man_item_grid IS NOT BOUND.
    CREATE OBJECT go_man_item_grid
      EXPORTING
        i_parent          = go_man_itm_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-calc_req_items CHANGING lt_fcat.

    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-edit = abap_true.
    ls_layout-excp_fname = gc_layout_excp_fname.

  ELSE.

    go_man_item_grid->refresh_table_display(  ).
  ENDIF.


  go_man_item_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).
  CALL METHOD go_man_item_grid->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.
ENDFORM.
FORM build_release_itm_alv.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_release_itm_grid IS NOT BOUND.
    CREATE OBJECT go_release_itm_grid
      EXPORTING
        i_parent          = go_release_itm_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-release_itm CHANGING lt_fcat.
    PERFORM register_control_events.
    "line COunt Pending

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.

    go_release_itm_grid->set_table_for_first_display(
      EXPORTING
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_release_item_fcat
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).

  ELSE.
    PERFORM prepare_clrqhd_prc_data.
    go_release_itm_grid->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_release_itm_grid->set_toolbar_interactive.
  IF gs_variables-document_mode EQ gc_mode_display.
    lv_input = 0.
  ELSE.
    lv_input = 1.
  ENDIF.

  go_release_itm_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.
FORM build_calc_grps_alv.
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lv_lines_dec       TYPE curr13_2,
        lv_lines_str       TYPE c LENGTH 20,
        lv_title1          TYPE string,
        lv_title2          TYPE string,
        lt_fcat            TYPE lvc_t_fcat.


  IF go_calc_grp_grid IS BOUND AND gs_variables-refresh_calc_grp_grid EQ abap_true.
    "AND ( sy-uname = 'SRISHETTY' OR sy-uname = 'AMISHARMA' ) .
    go_calc_grp_grid->free( ).
    FREE go_calc_grp_grid.
  ENDIF.

  IF gs_variables-rel_constr_dt IS INITIAL.
    gs_variables-rel_constr_dt = sy-datum.
  ENDIF.

  IF go_calc_grp_grid IS NOT BOUND.
    CREATE OBJECT go_calc_grp_grid
      EXPORTING
        i_parent          = go_calc_grp_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.


****New Changes
    PERFORM prep_calc_grp_row_data USING abap_false
                                CHANGING lt_fcat   .


***
    CHECK lt_fcat   IS NOT INITIAL.
    PERFORM prep_calc_grp_data.
    PERFORM prep_pagination_cal_grp_data.
    PERFORM register_control_events.
    "line COunt Pending

    "line COunt Pending
*code for dynamic title
    CLEAR: gt_calc_grp_data.
    gt_calc_grp_data = CORRESPONDING #( <gt_calc_grp_data_page> ).
    DESCRIBE TABLE <gt_calc_grp_data> LINES lv_lines.
    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0.
      lv_page_count = lv_lines / gs_calc_req_type-psize.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero.
    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-page_number_calc_grp LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-calc_grp_from_tabix LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-calc_grp_to_tabix LEFT DELETING LEADING gc_zero.

    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-212 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number_calc_grp.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-calc_grp_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.  "` (` lv_data  '-' INTO lv_title1.

    CLEAR: lv_lines_dec,
         lv_lines_str.
    lv_lines_dec = 1 * gs_variables-calc_grp_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    IF <gt_calc_grp_data_page> IS NOT INITIAL.
      conv_dt_to_ext gs_variables-rel_constr_dt  lv_title2.
      CONCATENATE TEXT-221 lv_title2 INTO lv_title2 SEPARATED BY space.
      CONCATENATE lv_title1 lv_title2 INTO lv_title SEPARATED BY space.
    ELSE.
      lv_title = lv_title1.
    ENDIF.


    CLEAR ls_layout.
    ls_layout-sel_mode   =  gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.
    ls_variant-report = gc_program.


    go_calc_grp_grid->set_table_for_first_display(
    EXPORTING
      is_variant                    = ls_variant
      i_bypassing_buffer            = abap_true
      i_save                        = gc_save-a
      is_layout                     = ls_layout
      it_toolbar_excluding          = lt_toolbar_exclude
    CHANGING
      it_outtab                     = <gt_calc_grp_data_page>
      it_fieldcatalog               = lt_fcat
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4
  ).


  ELSEIF gs_variables-refresh_calc_grp_grid EQ abap_true.

    "++DCLM 6655 - Consider CGrp release for condition records
    CLEAR: gv_index, go_calc_grp_data, go_calc_grp_data_page,
           gs_clrqdoc_infocus-x-crgrr, gs_clrqdoc_infocus-x-crgrrf,
           gs_clrqdoc_infocus-x-cgrcon, gt_calc_grp_data.

    PERFORM prep_calc_grp_row_data USING abap_false
                                CHANGING lt_fcat   .

    CHECK lt_fcat   IS NOT INITIAL.
    PERFORM prep_calc_grp_data.
    PERFORM prep_pagination_cal_grp_data.
    "++DCLM 6655 - Consider CGrp release for condition records


*code for dynamic title
    DESCRIBE TABLE <gt_calc_grp_data> LINES  lv_lines.
    IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0.
      lv_page_count = lv_lines / gs_calc_req_type-psize.
    ELSE.
      MOVE 1 TO lv_page_count.
    ENDIF.

    SHIFT lv_page_count LEFT DELETING LEADING gc_zero.
    SHIFT lv_lines LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-page_number_calc_grp LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-calc_grp_from_tabix LEFT DELETING LEADING gc_zero.
    SHIFT gs_variables-calc_grp_to_tabix LEFT DELETING LEADING gc_zero.

    lv_lines_dec = 1 * lv_lines.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE TEXT-004 ` (` lv_lines_str `), ` TEXT-014 INTO lv_title1.

    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * lv_page_count.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` ` lv_lines_str ` [` TEXT-009  INTO lv_title1.


    CLEAR: lv_lines_dec,
           lv_lines_str.
    lv_lines_dec = 1 * gs_variables-page_number_calc_grp.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
          lv_lines_str.
    lv_lines_dec = 1 * gs_variables-calc_grp_from_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 ` (` lv_lines_str INTO lv_title1.

    CLEAR: lv_lines_dec,
         lv_lines_str.
    lv_lines_dec = 1 * gs_variables-calc_grp_to_tabix.
    WRITE lv_lines_dec TO lv_lines_str DECIMALS 0.
    CONDENSE lv_lines_str NO-GAPS.
    CONCATENATE lv_title1 `-` lv_lines_str `)]` INTO lv_title1.

    lv_title = lv_title1.

    CALL METHOD go_calc_grp_grid->set_gridtitle
      EXPORTING
        i_gridtitle = lv_title.

    go_calc_grp_grid->refresh_table_display( ).

    CLEAR gs_variables-refresh_calc_grp_grid.

    PERFORM prep_pagination_cal_grp_data.
    go_calc_grp_grid->refresh_table_display( ).
  ENDIF.

  CALL METHOD go_calc_grp_grid->set_toolbar_interactive.
  lv_input = 0.

  go_calc_grp_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).

ENDFORM.



FORM bdc_fields  USING   lv_fname
                         lv_fval
                 CHANGING lt_bdcdata TYPE t_bdcdata.
  DATA: ls_bdcdata TYPE bdcdata.

  CLEAR: ls_bdcdata.

  ls_bdcdata-fnam = lv_fname.
  ls_bdcdata-fval = lv_fval.

  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.


FORM bdc_dynpro  CHANGING lt_bdcdata TYPE t_bdcdata.
  DATA: ls_bdcdata TYPE bdcdata.

  CLEAR: ls_bdcdata.

  ls_bdcdata-program = gc_clrq_process_program.
  ls_bdcdata-dynpro  = gc_screen-clrq_process_scrn.
  ls_bdcdata-dynbegin = abap_true.

  APPEND ls_bdcdata TO lt_bdcdata.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form billing_item_redetermine
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- <LFS_CLRQIT>
*&---------------------------------------------------------------------*
FORM billing_item_redetermine USING lt_bilitty    TYPE tt_bilitty
                                    lt_clrq_err   TYPE t_clrq_err
                              CHANGING cs_clrqit  TYPE /cgdc/s_clrqit_fcat .

  DATA: ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
        ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
        ls_clrhdt_brf  TYPE /cgdc/s_clrqhd_brf,
        ls_bilitty     TYPE /cgdc/t_bilitty,
        ls_clrqit      TYPE /cgdc/s_clrqit,
        ls_clrqbi      TYPE /cgdc/_clrqbi,
        ls_clrqbi_tmp  TYPE /cgdc/s_clrqbi,
*        ls_clrqbi        TYPE /cgdc/s_clrqbi,
        lv_bitype      TYPE /cgdc/bitype,
        ls_bill_item   TYPE /cgdc/s_clrqbi,
        ls_clrq_err    TYPE /cgdc/t_clrq_err,
        lv_pop_st      TYPE datum,
        lv_pop_end     TYPE datum,
        ls_item        TYPE /cgdc/s_clrqit,
        lt_sum_char    TYPE STANDARD TABLE OF /cgdc/t_clrqbic,
        lv_line        TYPE string,
        lv_where       TYPE string,
        lwa_sum_char   TYPE /cgdc/t_clrqbic,
        lv_bilmatnr    TYPE /cgdc/bilmatnr,
        lt_bilityp     TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp    TYPE  /cgdc/t_bilitty,
        ls_bill_typ    TYPE /cgdc/t_bilitty,
        ls_clrtic      TYPE /cgdc/t_rtbic,
        ls_clrq_cost   TYPE /cgdc/s_clrqcost.

  FIELD-SYMBOLS: <ls_clrqit> TYPE /cgdc/s_clrqit,
                 <ls_clrqbi> TYPE /cgdc/s_clrqbi.


  CLEAR: ls_clrqit_brf, ls_clrcost_brf,
         ls_clrhdt_brf, ls_item.


  MOVE-CORRESPONDING cs_clrqit TO ls_item.
  MOVE-CORRESPONDING cs_clrqit TO ls_clrqit_brf.
  MOVE-CORRESPONDING cs_clrqit TO ls_clrcost_brf.
  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrhdt_brf.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  CLEAR lv_bitype.
  CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
    EXPORTING
      is_clrqhd   = ls_clrhdt_brf
      is_clrqit   = ls_clrqit_brf
      is_clrqcost = ls_clrcost_brf
    IMPORTING
      ev_bi_type  = lv_bitype.
  IF sy-subrc <> 0.
  ENDIF.
  IF NOT lv_bitype IS INITIAL.
    CLEAR ls_bill_typ.
    SELECT SINGLE * FROM /cgdc/t_bilitty
                    INTO ls_bill_typ
                    WHERE bilitmtyp = lv_bitype.

    IF  cs_clrqit-bill_usage IS INITIAL.
      cs_clrqit-bill_usage = ls_bill_typ-bill_usage.
    ENDIF.
  ENDIF.
  IF NOT lv_bitype IS INITIAL.
    CLEAR ls_bilitty.
    READ TABLE lt_bilitty INTO ls_bilitty WITH KEY bilitmtyp = lv_bitype.
    IF sy-subrc EQ 0.

      CASE ls_bilitty-pop_src_date.
        WHEN gc_pop_src_date-docu.
          cs_clrqit-srvc_date = cs_clrqit-bldat.
        WHEN gc_pop_src_date-post.
          cs_clrqit-srvc_date = cs_clrqit-budat.
        WHEN OTHERS.
          cs_clrqit-srvc_date = cs_clrqit-bldat.
      ENDCASE.

      CLEAR ls_bill_item.
      ls_bill_item-bitype = lv_bitype.
      ls_bill_item-vgbel  = cs_clrqit-vgbel.
      ls_bill_item-vgpos  = cs_clrqit-vgpos.
      ls_bill_item-ps_psp_pnr = cs_clrqit-ps_psp_pnr.

      CLEAR ls_clrq_cost.


      PERFORM get_performance_dates USING ls_bill_item
                                          ls_item
                                    CHANGING lv_pop_st
                                             lv_pop_end.

      CLEAR: ls_clrqbi_tmp, ls_clrqbi.

      IF NOT ls_bilitty-bilmatnr IS INITIAL.
        lv_bilmatnr = ls_bilitty-bilmatnr.
      ELSE.
        lv_bilmatnr = ls_item-matnr.
      ENDIF.
      PERFORM prep_bi_where_cls  USING cs_clrqit
                                       lv_bitype
                                       lv_bilmatnr
                              CHANGING lv_where .


      LOOP AT gs_clrqdoc_infocus-x-crbinr
      INTO ls_clrqbi_tmp WHERE (lv_where).
        EXIT.

      ENDLOOP.

      MOVE-CORRESPONDING ls_clrqbi_tmp TO ls_clrqbi.

      IF sy-subrc EQ 0.
        "Assign bill item number at field cat level
        PERFORM assign_exist_bill_item USING ls_clrqbi
                                             ls_bilitty
                                                 space
                                       CHANGING ls_clrqit
                                                cs_clrqit.

        IF <ls_clrqit> IS ASSIGNED.
          UNASSIGN <ls_clrqit>.
        ENDIF.

        SELECT *
           FROM /cgdc/t_bilitty
           INTO  TABLE @lt_bilityp.

        LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <ls_clrqit>
                                           WHERE clrno  = cs_clrqit-clrno
                                           AND   clrit  = cs_clrqit-clrit
                                           AND   rtbbinr IS INITIAL.
          "Assign bill item type at calc req item level
          IF <ls_clrqit>-updkz IS INITIAL.
            <ls_clrqit>-updkz     = gc_updkz_update.
          ENDIF.

          PERFORM assign_exist_bill_item USING ls_clrqbi
                                           ls_bilitty
                                           '1'
                                         CHANGING <ls_clrqit>
                                                   cs_clrqit.

          IF <ls_clrqit>-clrsit NE '000000'.
            IF <ls_clrqbi> IS ASSIGNED.
              UNASSIGN <ls_clrqbi>.
            ENDIF.

            READ TABLE gs_clrqdoc_infocus-x-crbinr
            ASSIGNING <ls_clrqbi>
            WITH KEY clrno     = <ls_clrqit>-clrno
                     bill_item = <ls_clrqit>-rtbbinr
                     bitype    = <ls_clrqit>-bityp.
            IF sy-subrc IS INITIAL.
              READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <ls_clrqit>-pstyv."RTB24-15

              READ TABLE lt_bilityp INTO lwa_bilityp
              WITH KEY bilitmtyp = <ls_clrqbi>-bitype.

              IF sy-subrc = 0.
                IF lwa_bilityp-qty_1 = abap_true.
                  <ls_clrqbi>-zmeng = 1.
                ELSEIF ls_clrtic-blkcumul_qty = abap_false. "RTB24-15
                  <ls_clrqbi>-zmeng = <ls_clrqbi>-zmeng + <ls_clrqit>-zmeng.
                ENDIF.
              ENDIF.

              <ls_clrqbi>-netwr = <ls_clrqbi>-netwr + <ls_clrqit>-netwr.
              <ls_clrqbi>-wavwr = <ls_clrqbi>-wavwr + <ls_clrqit>-wavwr.
              <ls_clrqbi>-kzwi1 = <ls_clrqbi>-kzwi1 + <ls_clrqit>-kzwi1.
              <ls_clrqbi>-kzwi2 = <ls_clrqbi>-kzwi2 + <ls_clrqit>-kzwi2.
              <ls_clrqbi>-kzwi3 = <ls_clrqbi>-kzwi3 + <ls_clrqit>-kzwi3.
              <ls_clrqbi>-kzwi4 = <ls_clrqbi>-kzwi4 + <ls_clrqit>-kzwi4.
              <ls_clrqbi>-kzwi5 = <ls_clrqbi>-kzwi5 + <ls_clrqit>-kzwi5.
              <ls_clrqbi>-kzwi6 = <ls_clrqbi>-kzwi6 + <ls_clrqit>-kzwi6.
              "++SOC - Decimal Precision fields
              <ls_clrqbi>-netwr24 = <ls_clrqbi>-netwr24 + <ls_clrqit>-netwr24.
              <ls_clrqbi>-kzwi1_24 = <ls_clrqbi>-kzwi1_24 + <ls_clrqit>-kzwi1_24.
              <ls_clrqbi>-kzwi2_24 = <ls_clrqbi>-kzwi2_24 + <ls_clrqit>-kzwi2_24.
              <ls_clrqbi>-kzwi3_24 = <ls_clrqbi>-kzwi3_24 + <ls_clrqit>-kzwi3_24.
              <ls_clrqbi>-kzwi4_24 = <ls_clrqbi>-kzwi4_24 + <ls_clrqit>-kzwi4_24.
              <ls_clrqbi>-kzwi5_24 = <ls_clrqbi>-kzwi5_24 + <ls_clrqit>-kzwi5_24.
              <ls_clrqbi>-kzwi6_24 = <ls_clrqbi>-kzwi6_24 + <ls_clrqit>-kzwi6_24.
              "++EOC - Decimal Precision fields
              <ls_clrqbi>-updkz = gc_updkz_update.
*              APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.
            ENDIF.
          ENDIF.
        ENDLOOP.
        IF <ls_clrqit> IS ASSIGNED.
          UNASSIGN <ls_clrqit>.
        ENDIF.
      ELSE.
        CASE ls_bilitty-bilcreate_type.
          WHEN gc_bilcrttyp-auto OR gc_bilcrttyp-auma OR gc_bilcrttyp-scit.

            "Create & assign the new Bill item number to field cat.
            TRY.
              cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
              RECEIVING
                uuid = cs_clrqit-rtbbinr ).
            CATCH CX_UUID_ERROR.

            ENDTRY.


            cs_clrqit-bityp    = lv_bitype.
            cs_clrqit-bilmatnr = ls_bilitty-bilmatnr.
            cs_clrqit-msg_icon = icon_green_light.
            CLEAR cs_clrqit-msg_code.

            IF <ls_clrqit> IS ASSIGNED.
              UNASSIGN <ls_clrqit>.
            ENDIF.
            LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <ls_clrqit>
                                     WHERE clrno  = cs_clrqit-clrno
                                     AND   clrit  = cs_clrqit-clrit
                                     AND   istat  = gc_ibill_stat-open
                                     AND   rtbbinr IS INITIAL.
              <ls_clrqit>-rtbbinr    = cs_clrqit-rtbbinr.
              IF <ls_clrqit>-updkz IS INITIAL.
                <ls_clrqit>-updkz     = gc_updkz_update.
              ENDIF.
              <ls_clrqit>-bityp      = lv_bitype.
              <ls_clrqit>-srvc_date  = cs_clrqit-srvc_date.
              <ls_clrqit>-pop_stdt   = lv_pop_st. " DCLM-6558
              <ls_clrqit>-pop_enddt  = lv_pop_end. " DCLM-6558
              <ls_clrqit>-fkrel      = ls_bilitty-fkrel. " DCLM-6558
              <ls_clrqit>-msg_icon   = icon_green_light.
              CLEAR <ls_clrqit>-msg_code.


              PERFORM get_additional_details_binr USING <ls_clrqit>
                                                        ls_bilitty
                                                  CHANGING ls_bill_item.
              <ls_clrqit>-bldat_bi = ls_bill_item-bldat.
            ENDLOOP.

            IF <ls_clrqit> IS ASSIGNED.


              CLEAR ls_bill_item.
              PERFORM get_additional_details_binr USING <ls_clrqit>
                                                        ls_bilitty
                                                  CHANGING ls_bill_item.

              cs_clrqit-pop_stdt   = ls_bill_item-pop_stdt.
              cs_clrqit-pop_enddt  = ls_bill_item-pop_enddt.
              cs_clrqit-bldat_bi   = ls_bill_item-bldat.
              "Add it to the CR document structure for saving it on
              "/CGDC/_CLRQBI table
              APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.
            ENDIF.
          WHEN OTHERS.
            "Do not create a new billing item number for manual blling item type
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-056.
            gs_messages-msgty = gc_message_type-warning.
            gs_messages-msgv1 = lv_bitype.
            gs_messages-fieldname = gc_clrqit_field-rtbbinr.
            APPEND gs_messages TO gt_messages.

            CLEAR ls_clrq_err.
            READ TABLE lt_clrq_err INTO ls_clrq_err
            WITH KEY msgclass = gc_clrq_msg_cls
                     msgid = gc_msg_cls_msgnr-056.
            IF sy-subrc EQ 0.
              cs_clrqit-msg_code = cs_clrqit-msg_code && ls_clrq_err-msg_code.
              CONDENSE cs_clrqit-msg_code NO-GAPS.
              IF cs_clrqit-msg_code IS NOT INITIAL.
                cs_clrqit-msg_icon = icon_yellow_light.
              ELSE.
                cs_clrqit-msg_icon = icon_green_light.
              ENDIF.
            ELSE.
              cs_clrqit-msg_icon = icon_yellow_light.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i037(/cgdc/clrq) WITH cs_clrqit-clrno
                                    cs_clrqit-clrit.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-037.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = cs_clrqit-clrno.
      gs_messages-msgv2 = cs_clrqit-clrit.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_rej_itm_grid
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_rej_itm_grid .
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.


  IF go_rej_itm_grid  IS NOT BOUND.
    CREATE OBJECT go_rej_itm_grid
      EXPORTING
        i_parent          = go_rej_itm_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.


    PERFORM exclude_toolbar_buttons USING gc_call-3
                                    CHANGING lt_toolbar_exclude.

    PERFORM prepare_field_catalog USING gc_structure-rej_itm_lst
                               CHANGING lt_fcat.

    PERFORM prep_rej_itm_lst.

    PERFORM register_control_events.

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.

    go_rej_itm_grid->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_rejitms
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
          ).

  ELSE.
    PERFORM prep_rej_itm_lst.
    go_rej_itm_grid->refresh_table_display( ).


  ENDIF.

  go_rej_itm_grid->set_ready_for_input(
       EXPORTING
         i_ready_for_input = 1 ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_reassign_bi_grid
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_reassign_bi_grid .
  DATA: lv_input           TYPE i,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat,
        lt_dropdown        TYPE lvc_t_dral,
        lv_lines_dec       TYPE curr13_2,
        lv_lines_str       TYPE c LENGTH 20,
        lv_title1          TYPE string,
        ls_dropdown        TYPE lvc_s_dral.
  FIELD-SYMBOLS <lwa_fcat>  TYPE lvc_s_fcat.

  IF go_grid_reassign_bi IS NOT BOUND.

    CREATE OBJECT go_grid_reassign_bi
      EXPORTING
        i_parent          = go_reassign_bi_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.

    PERFORM prepare_field_catalog USING gc_structure-billing_items
                               CHANGING lt_fcat.

    PERFORM register_control_events.
    LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
      CASE <lwa_fcat>-fieldname.
        WHEN  gc_clrqbi_field-srno.
          <lwa_fcat>-no_out = abap_true.
          <lwa_fcat>-col_pos = 67.
        WHEN  gc_clrqbi_field-fkrel.
          <lwa_fcat>-no_out = abap_true.
        WHEN  gc_clrqbi_field-zmeng.
          <lwa_fcat>-no_out = abap_true.
        WHEN  gc_clrqbi_field-netwr.
          <lwa_fcat>-no_out = abap_true.
        WHEN gc_clrqbi_field-billed_amt.
          <lwa_fcat>-no_out = abap_true.
      ENDCASE.
    ENDLOOP.

    lv_title = TEXT-129.
    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.

    go_grid_reassign_bi->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_reassign_bi_data
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
    ).


  ELSE.
    go_grid_reassign_bi->refresh_table_display( ).

  ENDIF.
  go_grid_reassign_bi->set_ready_for_input(
     EXPORTING
       i_ready_for_input = 0 ).

ENDFORM.

FORM build_ref_itm_doc_alv.
  DATA: lv_input           TYPE i VALUE 1,
        lv_lines(10)       TYPE n,
        lv_page_count(10)  TYPE n,
        lv_title           TYPE lvc_title,
        ls_sort            TYPE lvc_s_sort,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_sort            TYPE lvc_t_sort,
        lt_toolbar_exclude TYPE ui_functions,
        lt_fcat            TYPE lvc_t_fcat.

  IF go_calc_reqitm_ref_grid IS NOT BOUND.
    CREATE OBJECT go_calc_reqitm_ref_grid
      EXPORTING
        i_parent          = go_calc_reqitm_ref_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    PERFORM exclude_toolbar_buttons USING gc_call-2
                                    CHANGING lt_toolbar_exclude.
    PERFORM prepare_field_catalog USING gc_structure-itm_ref_fcat CHANGING lt_fcat.

    CLEAR ls_layout.
    ls_layout-cwidth_opt = abap_true.
    ls_layout-no_headers = abap_true.
    ls_layout-no_toolbar = abap_true.
    ls_layout-no_rowmark = gc_layout_no_rowmark-a.
    go_calc_reqitm_ref_grid->set_table_for_first_display(
      EXPORTING
        is_variant                    = ls_variant
        i_bypassing_buffer            = abap_true
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_clrit_ref_fcat
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4
           ).

  ELSE.
    go_calc_reqitm_ref_grid->refresh_table_display(  ).
  ENDIF.


  go_calc_reqitm_ref_grid->set_ready_for_input(
    i_ready_for_input = lv_input
  ).
  CALL METHOD go_calc_reqitm_ref_grid->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form bill_blocks_eval
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS
*&      --> FIRST_INDEX
*&      --> LAST_INDEX
*&---------------------------------------------------------------------*
FORM bill_blocks_eval  USING lv_first_index TYPE numc10
                             lv_last_index TYPE numc10
                    CHANGING gt_clrqdoc_infocus TYPE /cgdc/tt_clrq_doc.

  DATA: lc_action TYPE char1 VALUE '2'.

  /cgdc/cl_be_helper=>mv_blk_reval_cr = abap_true.

  CALL FUNCTION '/CGDC/CLRQ_BE_EVAL'
    EXPORTING
      iv_action   = '1'
    CHANGING
      ct_clrq_doc = gt_clrqdoc_infocus.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMF0C
**********************************************************

*&---------------------------------------------------------------------*
*& Form control_events_register
*&---------------------------------------------------------------------*
FORM control_events_register .

  CLEAR ref_event_handler.
  IF ref_event_handler IS INITIAL.
    CREATE OBJECT ref_event_handler.
  ENDIF.

  SET HANDLER: ref_event_handler->on_enter FOR ref_selections.

ENDFORM.
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0C.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form confirm_changes
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LV_ANSWER
*&---------------------------------------------------------------------*
FORM confirm_changes CHANGING lv_answer.

  CHECK gs_variables-document_mode EQ gc_mode_change
  OR gs_variables-document_mode EQ gc_mode_create.

  IF gs_variables-calc_changed EQ abap_true "data_changed
    OR sy-datar EQ abap_true.

    PERFORM popup_to_confirm USING TEXT-002
                                   TEXT-003
                                   abap_true
                          CHANGING lv_answer.

  ENDIF.

  CASE lv_answer.
    WHEN gc_answer-yes.
      lv_answer = gc_answer-canc.
      ok_code = gc_fcode-save.
    WHEN gc_answer-no.
      CLEAR: gs_variables-calc_changed. "data_changed.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form calc_req_header_fill
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_calc_req_header CHANGING ls_crrq_hdr TYPE /cgdc/s_clrqhd.

  DATA: lwa_vbkd        TYPE vbkd,
        ls_tvak         TYPE tvak,
        lv_subrc        TYPE sy-subrc,
        ls_crrq_hdr_old TYPE /cgdc/s_clrqhd,
        ls_clrq_itm     TYPE /cgdc/s_clrqit,
        ls_crrq_hdr_new TYPE /cgdc/s_clrqhd.

  MOVE-CORRESPONDING gs_contract_hdr TO ls_crrq_hdr_new.
  ls_crrq_hdr_new-rtbpn = gs_contract_hdr-/cgdc/rtbpn.
  READ TABLE gt_contract_business_data INTO lwa_vbkd
  WITH KEY vbeln = gs_vbak-vbeln
           posnr = gc_posnr_low.

  IF lwa_vbkd IS NOT INITIAL.
    MOVE-CORRESPONDING lwa_vbkd TO ls_crrq_hdr_new.
  ENDIF.

  PERFORM select_realtime_billprf_data USING ls_crrq_hdr_new-rtbpn.

  PERFORM select_tvak USING gs_rtbp-auart CHANGING ls_tvak.
  MOVE-CORRESPONDING ls_tvak TO ls_crrq_hdr_new.
  MOVE-CORRESPONDING gs_calc_req_type TO ls_crrq_hdr_new.
  CLEAR ls_crrq_hdr_new-kalsm.
  PERFORM determine_kalsm CHANGING ls_crrq_hdr_new.
  ls_crrq_hdr_new-updkz = gc_updkz_new.
  CLEAR ls_crrq_hdr_new-clrno.
  ls_crrq_hdr_new-clrno = gc_clrno_spl_char.
  PERFORM fill_calc_req_header_ptr.
  PERFORM fill_kuagv USING ls_crrq_hdr_new.
  PERFORM fill_kurgv USING ls_crrq_hdr_new.
  PERFORM fill_kuwev USING ls_crrq_hdr_new.
  MOVE-CORRESPONDING gs_kuagv TO ls_crrq_hdr_new.
  MOVE-CORRESPONDING gs_kurgv TO ls_crrq_hdr_new.
  MOVE-CORRESPONDING gs_kuwev TO ls_crrq_hdr_new.
  ls_crrq_hdr_new-bukrs = ls_crrq_hdr_new-bukrs_vf.
  ls_crrq_hdr_new-vgbel = gs_vbak-vbeln.
  ls_crrq_hdr_new-waerk = gs_vbak-waerk. "always use contract currency

  CLEAR: ls_crrq_hdr_new-erdat, ls_crrq_hdr_new-erzet, ls_crrq_hdr_new-ernam,ls_crrq_hdr_new-netwr.

  MOVE-CORRESPONDING ls_crrq_hdr_new TO gs_clrqdoc_infocus-x-crhdr.


ENDFORM.

*&---------------------------------------------------------------------*
*& Form calc_req_header_ptr_fill
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_calc_req_header_ptr.
****  logic to check partner address and subsequent code for the same.
****  KUAGV,KUWE2,KURGV select and update
****  Shall we run partner determination of contract partners partners
****  If we rerun partner determination then update header partner fields with redetrminded partners like sold to, payer etc.
  DATA: lwa_vbpa  TYPE vbpa,
        lwa_crptr TYPE /cgdc/s_clrqpt,
        ls_tpaer  TYPE tpaer.
  LOOP AT gt_vbpa INTO lwa_vbpa WHERE posnr = gc_posnr_low.
    CLEAR lwa_vbpa-vbeln.
    lwa_vbpa-vbeln = gs_clrqdoc_infocus-x-crhdr-clrno.
    MOVE-CORRESPONDING lwa_vbpa TO lwa_crptr.
    lwa_crptr-clrit = gc_posnr.
    lwa_crptr-updkz = gc_updkz_new.
    APPEND lwa_crptr TO gs_clrqdoc_infocus-x-crptr.
  ENDLOOP.

  IF NOT ls_tpaer-papfl IS INITIAL.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form complete_calc_request_tables
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LT_CLRQ_DOC
*&---------------------------------------------------------------------*
FORM complete_calc_request_tables CHANGING ls_clrq_doc TYPE /cgdc/s_clrq_doc.

  FIELD-SYMBOLS: <lwa_critm>  TYPE /cgdc/s_clrqit,
                 <lwa_crptr>  TYPE /cgdc/s_clrqpt,
                 <lwa_crcon>  TYPE /cgdc/s_clrqcn,
                 <lwa_crcost> TYPE /cgdc/s_clrqcost,
                 <lwa_crblpl> TYPE /cgdc/s_clrqblpl,
                 <lwa_crgrr>  TYPE /cgdc/s_clrqgrr,
                 <lwa_crgrrf> TYPE /cgdc/s_clrqgrrf,
                 <lwa_crbinr> TYPE /cgdc/s_clrqbi,
                 <lwa_crlink> TYPE /cgdc/s_crlink.

  DATA: lv_subrc TYPE sy-subrc.

  IF ls_clrq_doc-updkz NE space.

    IF ls_clrq_doc-x-crhdr-updkz EQ gc_updkz_new
      AND ls_clrq_doc-x-crhdr-clrno CS TEXT-148.

      PERFORM get_new_number USING gs_calc_req_type-numki
                                   gc_number_range_object
                                   ls_clrq_doc-x-crhdr-clrqt
                          CHANGING ls_clrq_doc-x-crhdr-clrno
                                   lv_subrc.

      IF lv_subrc <> 0.
        "number could not be generated. can't save.
        CLEAR: ls_clrq_doc.
      ENDIF.

      ls_clrq_doc-clrno = ls_clrq_doc-x-crhdr-clrno.

      LOOP AT ls_clrq_doc-x-critm ASSIGNING <lwa_critm>.
        <lwa_critm>-clrno = ls_clrq_doc-x-crhdr-clrno.
        <lwa_critm>-clrdit = gc_clrdit_low.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crptr ASSIGNING <lwa_crptr>.
        <lwa_crptr>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crcon ASSIGNING <lwa_crcon>.
        <lwa_crcon>-clrno = ls_clrq_doc-x-crhdr-clrno.
        <lwa_crcon>-clrdit = gc_clrdit_low.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crcost ASSIGNING <lwa_crcost>.
        <lwa_crcost>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crblpl ASSIGNING <lwa_crblpl>.
        <lwa_crblpl>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.
      LOOP AT ls_clrq_doc-x-crgrr ASSIGNING <lwa_crgrr>.
        <lwa_crgrr>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.
      LOOP AT ls_clrq_doc-x-crgrrf ASSIGNING <lwa_crgrrf>.
        <lwa_crgrrf>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crbinr ASSIGNING <lwa_crbinr>.
        <lwa_crbinr>-clrno = ls_clrq_doc-x-crhdr-clrno.
      ENDLOOP.

      LOOP AT ls_clrq_doc-x-crlink ASSIGNING <lwa_crlink>.
        ASSIGN <lwa_crlink>-crlink_tab->* TO FIELD-SYMBOL(<lwa_tb>).
        IF <lwa_tb> IS ASSIGNED.
          LOOP AT <lwa_tb> ASSIGNING FIELD-SYMBOL(<lwa_wa>).
            ASSIGN COMPONENT gc_clrit_link_field-clrno OF STRUCTURE <lwa_wa> TO FIELD-SYMBOL(<lv_clrno>) .
            IF <lv_clrno> IS ASSIGNED.
              <lv_clrno> = ls_clrq_doc-x-crhdr-clrno.
              UNASSIGN <lv_clrno>.
            ENDIF.
          ENDLOOP.

        ENDIF.
      ENDLOOP.

    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form call_bapi
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> I_SIMULATION_MODE
*&---------------------------------------------------------------------*
FORM call_bapi_for_dmr  USING lv_simulation_mode.
  DATA:lv_vbeln  TYPE vbeln,
       ls_header TYPE bapisdhd1,
       lt_return TYPE TABLE OF  bapiret2.
  IF lv_simulation_mode IS NOT INITIAL.

* Export indicator to skip refrence screen
* through enhancement /CGDC/EI_RRB_SKIP_REF_SCREEN
* for transaction code /CGDC/RRB_PROCESS only
    EXPORT lv_call_from_cgdc_rrb = abap_true TO MEMORY ID gc_mem_id-/cgdc/rrb.

    PERFORM call_bapi_for_dmr_simulation.

  ELSE.
    MOVE-CORRESPONDING gs_sales_order_header TO ls_header.
    CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
      EXPORTING
        sales_header_in     = ls_header
      IMPORTING
        salesdocument_ex    = gs_variables-dmr_vbeln
      TABLES
        return              = lt_return
        sales_items_in      = gt_sales_order_items
        sales_partners      = gt_sales_order_ptrs
        sales_conditions_in = gt_sales_order_cnds.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form complete_pricing
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS
*&---------------------------------------------------------------------*
FORM complete_pricing.

  DATA: lv_offset    TYPE i,
        lv_tmpit     TYPE /cgdc/clrq_itmno,
        lv_old_netwr TYPE netwr_ap,
        ls_kompax    LIKE kompax,
        ls_komv      TYPE komv,
        ls_komk      TYPE komk,
        ls_komp      TYPE komp,
        ls_komk_temp TYPE komk,
        ls_critm_tmp TYPE /cgdc/s_clrqit,
        lt_komv      TYPE TABLE OF komv,
        lwa_komv     TYPE komv,
        lwa_komk     TYPE komk,
        lwa_komp     TYPE komp,
        lwa_critm    TYPE /cgdc/s_clrqit,
        lwa_crcon    TYPE /cgdc/s_clrqcn.

  FIELD-SYMBOLS: <ls_komk_key> TYPE any.

  CLEAR: gt_komk[], gt_komp[].

  READ TABLE gs_clrqdoc_infocus-x-crcon
  WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
           clrit = gc_posnr
  TRANSPORTING NO FIELDS
  BINARY SEARCH.

  IF sy-subrc EQ 0.

    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM sy-tabix.

      IF lwa_crcon-clrno NE gs_clrqdoc_infocus-x-crhdr-clrno
        OR lwa_crcon-clrit NE gc_posnr.
        EXIT.
      ENDIF.

      CLEAR ls_komv.
      MOVE-CORRESPONDING lwa_crcon TO ls_komv.
      ls_komv-knumv = 1.
      APPEND ls_komv TO lt_komv.

    ENDLOOP.

  ENDIF.

  LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm.

    CLEAR: ls_komk, ls_komp.

    PERFORM prepare_komk USING lwa_critm
                      CHANGING ls_komk.

    PERFORM prepare_pricing_data USING lwa_critm
                              CHANGING ls_komk
                                       ls_komp.

    ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
    ls_komk-knumv = lwa_critm-tmphd.

    ASSIGN COMPONENT gc_komk_field-key_uc OF STRUCTURE ls_komk TO <ls_komk_key>.

    IF sy-subrc EQ 0.

      READ TABLE gt_komk INTO ls_komk_temp WITH KEY (gc_komk_field-key_uc) = <ls_komk_key>.

    ELSE.

      PERFORM get_komk_key_offset CHANGING lv_offset.
      ASSIGN ls_komk+0(lv_offset) TO <ls_komk_key>.

      IF <ls_komk_key> IS ASSIGNED.
        READ TABLE gt_komk INTO ls_komk_temp  WITH KEY <ls_komk_key>.
      ENDIF.

    ENDIF.

    IF sy-subrc NE 0.

      CLEAR: ls_komk-ix_komt1_v, ls_komk-ix_komt1_b.
      APPEND ls_komk TO gt_komk.
      ls_komk-ix_komk = sy-tabix.
      MODIFY gt_komk FROM ls_komk INDEX sy-tabix TRANSPORTING ix_komk.

    ELSE.

      ls_komk = ls_komk_temp.

    ENDIF.

    ls_komp-ix_komk = ls_komk-ix_komk.
    APPEND ls_komp TO gt_komp.

    READ TABLE gs_clrqdoc_infocus-x-crcon
    WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
             clrit = lwa_critm-clrit
    TRANSPORTING NO FIELDS
    BINARY SEARCH.

    IF sy-subrc EQ 0.

      LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM sy-tabix.

        IF lwa_crcon-clrno NE gs_clrqdoc_infocus-x-crhdr-clrno
          OR lwa_crcon-clrit NE lwa_critm-clrit.
          EXIT.
        ENDIF.

        CLEAR ls_komv.
        MOVE-CORRESPONDING lwa_crcon TO ls_komv.
        ls_komv-knumv = lwa_critm-tmphd.
        ls_komv-kposn = lwa_critm-tmpit.
        APPEND ls_komv TO lt_komv.

      ENDLOOP.

    ENDIF.

  ENDLOOP.

  SORT lt_komv BY knumv kposn stunr zaehk.
  SORT gt_komp BY kposn.

  CALL FUNCTION 'PRICING_COMPLETE'
    EXPORTING
      calculation_type = gc_calc_type-adjust "'A'
      preliminary      = space
    TABLES
      tkomk            = gt_komk
      tkomp            = gt_komp
      tkomv            = lt_komv
    EXCEPTIONS
      error_message    = 1.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR gs_clrqdoc_infocus-x-crcon[].

  READ TABLE lt_komv
  WITH KEY knumv = gc_knumv-1
           kposn = gc_posnr
  TRANSPORTING NO FIELDS
  BINARY SEARCH.

  IF sy-subrc EQ 0.

    LOOP AT lt_komv INTO lwa_komv FROM sy-tabix.

      IF lwa_komv-knumv NE gc_knumv-1
        OR lwa_komv-kposn NE gc_posnr.
        EXIT.
      ENDIF.

      CLEAR lwa_crcon.
      MOVE-CORRESPONDING lwa_komv TO lwa_crcon.
      lwa_crcon-updkz = gc_updkz_new.
      lwa_crcon-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
      APPEND lwa_crcon TO gs_clrqdoc_infocus-x-crcon.

    ENDLOOP.

  ENDIF.

  LOOP AT gt_komp INTO lwa_komp.

    READ TABLE gt_komk INTO lwa_komk INDEX lwa_komp-ix_komk.
    CHECK sy-subrc EQ 0.
    READ TABLE gs_clrqdoc_infocus-x-critm
    INTO lwa_critm
    WITH KEY tmphd = lwa_komk-knumv
             tmpit = lwa_komp-kposn
    BINARY SEARCH.
    CHECK sy-subrc EQ 0.
    lv_old_netwr = lwa_critm-netwr.
    MOVE-CORRESPONDING ls_komp TO ls_kompax.
    ls_kompax-cmpre_flt = ls_komp-cmpre.
    MOVE-CORRESPONDING ls_kompax TO lwa_critm.
    SUBTRACT lv_old_netwr FROM gs_clrqdoc_infocus-x-crhdr-netwr.
    gs_clrqdoc_infocus-x-crhdr-netwr = gs_clrqdoc_infocus-x-crhdr-netwr + lwa_critm-netwr.

    READ TABLE lt_komv
    WITH KEY knumv = lwa_critm-tmphd
             kposn = lwa_critm-tmpit
    TRANSPORTING NO FIELDS
    BINARY SEARCH.

    IF sy-subrc EQ 0.

      LOOP AT lt_komv INTO lwa_komv FROM sy-tabix.

        IF lwa_komv-knumv NE lwa_critm-tmphd
          OR lwa_komv-kposn NE lwa_critm-tmpit.
          EXIT.
        ENDIF.

        CLEAR lwa_crcon.
        MOVE-CORRESPONDING lwa_komv TO lwa_crcon.
        lwa_crcon-clrno = lwa_critm-clrno.
        lwa_crcon-clrit = lwa_critm-clrit.
        APPEND lwa_crcon TO gs_clrqdoc_infocus-x-crcon.

      ENDLOOP.

    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form call_bapi_for_DMR_simulation
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM call_bapi_for_dmr_simulation .
  DATA: ls_hdr       TYPE bapisdhead1,
        ls_hdrx      TYPE bapisdhead1x,
        lt_return    TYPE TABLE OF bapiret2,
        lt_itm       TYPE TABLE OF bapisditem,
        lt_itmx      TYPE TABLE OF bapisditemx,
        lt_ptr       TYPE TABLE OF bapipartnr,
        lt_con       TYPE TABLE OF bapicondition,
        lwa_itm      TYPE bapisditem,
        lwa_itmx     TYPE bapisditemx,
        lwa_ptr      TYPE bapipartnr,
        lwa_con      TYPE bapicondition,

        lwa_itm_temp TYPE bapisditm,
        lwa_ptr_temp TYPE bapiparnr,
        lwa_con_temp TYPE bapicond
        .


  MOVE-CORRESPONDING gs_sales_order_header TO ls_hdr.
  MOVE gs_sales_order_header-comp_cde_b  TO ls_hdr-comp_code_b.
  MOVE gs_sales_order_header-alttax_cls  TO ls_hdr-alt_tax_class.
  MOVE gs_sales_order_header-pldlvstyp  TO ls_hdr-plan_dlv_schtype.
  MOVE gs_sales_order_header-refdoc_cat  TO ls_hdr-ref_doc_cat.
  MOVE gs_sales_order_header-ordcomb_in  TO ls_hdr-ord_comb_in.
  MOVE gs_sales_order_header-exrate_fi  TO ls_hdr-exch_rate_fi.
  MOVE gs_sales_order_header-pmtgar_pro  TO ls_hdr-pymt_gar_proc.
  MOVE gs_sales_order_header-departm_no  TO ls_hdr-department_no.
  MOVE gs_sales_order_header-curr_iso  TO ls_hdr-currency_iso.
  MOVE gs_sales_order_header-taxdep_cty  TO ls_hdr-tax_depart_cty.
  MOVE gs_sales_order_header-taxdst_cty  TO ls_hdr-tax_dest_cty.
  MOVE gs_sales_order_header-eutri_deal  TO ls_hdr-eu_triang_deal.
  MOVE gs_sales_order_header-mast_contr  TO ls_hdr-master_contr.
  MOVE gs_sales_order_header-chkprtauth  TO ls_hdr-check_partn_auth.
  MOVE gs_sales_order_header-cmlqty_dat  TO ls_hdr-cml_qty_date.
  ls_hdr-refobjecttype = gc_refobjtyp-bus2096.
  ls_hdr-refobjectkey = gs_sales_order_header-ref_doc.
  ls_hdr-refdoctype = gs_sales_order_header-refdoc_cat.
  ls_hdrx-updateflag = gc_updkz_new.
  ls_hdrx-ref_doc = abap_true.
  ls_hdrx-ref_doc_cat = abap_true.
  IF ls_hdr-accnt_asgn IS NOT INITIAL.
    ls_hdrx-accnt_asgn =  abap_true.
  ENDIF.
  IF ls_hdr-add_val_dy IS NOT INITIAL.
    ls_hdrx-add_val_dy =  abap_true.
  ENDIF.
  IF ls_hdr-alt_tax_class IS NOT INITIAL.
    ls_hdrx-alt_tax_class =  abap_true.
  ENDIF.
  IF ls_hdr-ass_number IS NOT INITIAL.
    ls_hdrx-ass_number =  abap_true.
  ENDIF.
  IF ls_hdr-bill_block IS NOT INITIAL.
    ls_hdrx-bill_block =  abap_true.
  ENDIF.
  IF ls_hdr-bill_date IS NOT INITIAL.
    ls_hdrx-bill_date =  abap_true.
  ENDIF.
  IF ls_hdr-bill_sched IS NOT INITIAL.
    ls_hdrx-bill_sched =  abap_true.
  ENDIF.
  IF ls_hdr-check_partn_auth IS NOT INITIAL.
    ls_hdrx-check_partn_auth =  abap_true.
  ENDIF.
  IF ls_hdr-cml_qty_date IS NOT INITIAL.
    ls_hdrx-cml_qty_date =  abap_true.
  ENDIF.
  IF ls_hdr-collect_no IS NOT INITIAL.
    ls_hdrx-collect_no =  abap_true.
  ENDIF.
  IF ls_hdr-compl_dlv IS NOT INITIAL.
    ls_hdrx-compl_dlv =  abap_true.
  ENDIF.
  IF ls_hdr-comp_code_b IS NOT INITIAL.
    ls_hdrx-comp_code_b =  abap_true.
  ENDIF.
  IF ls_hdr-ct_valid_f IS NOT INITIAL.
    ls_hdrx-ct_valid_f =  abap_true.
  ENDIF.
  IF ls_hdr-ct_valid_t IS NOT INITIAL.
    ls_hdrx-ct_valid_t =  abap_true.
  ENDIF.
  IF ls_hdr-currency IS NOT INITIAL.
    ls_hdrx-currency =  abap_true.
  ENDIF.
  IF ls_hdr-cust_cond_grp1 IS NOT INITIAL.
    ls_hdrx-cust_cond_grp1 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_cond_grp2 IS NOT INITIAL.
    ls_hdrx-cust_cond_grp2 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_cond_grp3 IS NOT INITIAL.
    ls_hdrx-cust_cond_grp3 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_cond_grp4 IS NOT INITIAL.
    ls_hdrx-cust_cond_grp4 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_cond_grp5 IS NOT INITIAL.
    ls_hdrx-cust_cond_grp5 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_group IS NOT INITIAL.
    ls_hdrx-cust_group =  abap_true.
  ENDIF.
  IF ls_hdr-cust_grp1 IS NOT INITIAL.
    ls_hdrx-cust_grp1 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_grp2 IS NOT INITIAL.
    ls_hdrx-cust_grp2 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_grp3 IS NOT INITIAL.
    ls_hdrx-cust_grp3 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_grp4 IS NOT INITIAL.
    ls_hdrx-cust_grp4 =  abap_true.
  ENDIF.
  IF ls_hdr-cust_grp5 IS NOT INITIAL.
    ls_hdrx-cust_grp5 =  abap_true.
  ENDIF.
  IF ls_hdr-date_type IS NOT INITIAL.
    ls_hdrx-date_type =  abap_true.
  ENDIF.
  IF ls_hdr-department_no IS NOT INITIAL.
    ls_hdrx-department_no =  abap_true.
  ENDIF.
  IF ls_hdr-distr_chan IS NOT INITIAL.
    ls_hdrx-distr_chan =  abap_true.
  ENDIF.
  IF ls_hdr-division IS NOT INITIAL.
    ls_hdrx-division =  abap_true.
  ENDIF.
  IF ls_hdr-dlvscheduse IS NOT INITIAL.
    ls_hdrx-dlvscheduse =  abap_true.
  ENDIF.
  IF ls_hdr-dlv_block IS NOT INITIAL.
    ls_hdrx-dlv_block =  abap_true.
  ENDIF.
  IF ls_hdr-dlv_time IS NOT INITIAL.
    ls_hdrx-dlv_time =  abap_true.
  ENDIF.
  IF ls_hdr-doc_date IS NOT INITIAL.
    ls_hdrx-doc_date =  abap_true.
  ENDIF.
  IF ls_hdr-doc_num_fi IS NOT INITIAL.
    ls_hdrx-doc_num_fi =  abap_true.
  ENDIF.
  IF ls_hdr-doc_type IS NOT INITIAL.
    ls_hdrx-doc_type =  abap_true.
  ENDIF.
  IF ls_hdr-dunn_block IS NOT INITIAL.
    ls_hdrx-dunn_block =  abap_true.
  ENDIF.
  IF ls_hdr-dunn_key IS NOT INITIAL.
    ls_hdrx-dunn_key =  abap_true.
  ENDIF.
  IF ls_hdr-dun_count IS NOT INITIAL.
    ls_hdrx-dun_count =  abap_true.
  ENDIF.
  IF ls_hdr-dun_date IS NOT INITIAL.
    ls_hdrx-dun_date =  abap_true.
  ENDIF.
  IF ls_hdr-eu_triang_deal IS NOT INITIAL.
    ls_hdrx-eu_triang_deal =  abap_true.
  ENDIF.
  IF ls_hdr-exchg_rate IS NOT INITIAL.
    ls_hdrx-exchg_rate =  abap_true.
  ENDIF.
  IF ls_hdr-exch_rate_fi IS NOT INITIAL.
    ls_hdrx-exch_rate_fi =  abap_true.
  ENDIF.
  IF ls_hdr-fix_val_dy IS NOT INITIAL.
    ls_hdrx-fix_val_dy =  abap_true.
  ENDIF.
  IF ls_hdr-fkk_conacct IS NOT INITIAL.
    ls_hdrx-fkk_conacct =  abap_true.
  ENDIF.
  IF ls_hdr-incoterms1 IS NOT INITIAL.
    ls_hdrx-incoterms1 =  abap_true.
  ENDIF.
  IF ls_hdr-incoterms2 IS NOT INITIAL.
    ls_hdrx-incoterms2 =  abap_true.
  ENDIF.
  IF ls_hdr-incoterms2l IS NOT INITIAL.
    ls_hdrx-incoterms2l =  abap_true.
  ENDIF.
  IF ls_hdr-incoterms3l IS NOT INITIAL.
    ls_hdrx-incoterms3l =  abap_true.
  ENDIF.
  IF ls_hdr-incotermsv IS NOT INITIAL.
    ls_hdrx-incotermsv =  abap_true.
  ENDIF.
  IF ls_hdr-invo_sched IS NOT INITIAL.
    ls_hdrx-invo_sched =  abap_true.
  ENDIF.
  IF ls_hdr-master_contr IS NOT INITIAL.
    ls_hdrx-master_contr =  abap_true.
  ENDIF.
  IF ls_hdr-mn_invoice IS NOT INITIAL.
    ls_hdrx-mn_invoice =  abap_true.
  ENDIF.
  IF ls_hdr-name IS NOT INITIAL.
    ls_hdrx-name =  abap_true.
  ENDIF.
  IF ls_hdr-notif_no IS NOT INITIAL.
    ls_hdrx-notif_no =  abap_true.
  ENDIF.
  IF ls_hdr-ord_comb_in IS NOT INITIAL.
    ls_hdrx-ord_comb_in =  abap_true.
  ENDIF.
  IF ls_hdr-ord_reason IS NOT INITIAL.
    ls_hdrx-ord_reason =  abap_true.
  ENDIF.
  IF ls_hdr-pmnttrms IS NOT INITIAL.
    ls_hdrx-pmnttrms =  abap_true.
  ENDIF.
  IF ls_hdr-po_dat_s IS NOT INITIAL.
    ls_hdrx-po_dat_s =  abap_true.
  ENDIF.
  IF ls_hdr-po_method IS NOT INITIAL.
    ls_hdrx-po_method =  abap_true.
  ENDIF.
  IF ls_hdr-po_meth_s IS NOT INITIAL.
    ls_hdrx-po_meth_s =  abap_true.
  ENDIF.
  IF ls_hdr-po_supplem IS NOT INITIAL.
    ls_hdrx-po_supplem =  abap_true.
  ENDIF.
  IF ls_hdr-pp_search IS NOT INITIAL.
    ls_hdrx-pp_search =  abap_true.
  ENDIF.
  IF ls_hdr-price_date IS NOT INITIAL.
    ls_hdrx-price_date =  abap_true.
  ENDIF.
  IF ls_hdr-price_grp IS NOT INITIAL.
    ls_hdrx-price_grp =  abap_true.
  ENDIF.
  IF ls_hdr-price_list IS NOT INITIAL.
    ls_hdrx-price_list =  abap_true.
  ENDIF.
  IF ls_hdr-purch_date IS NOT INITIAL.
    ls_hdrx-purch_date =  abap_true.
  ENDIF.
  IF ls_hdr-purch_no_c IS NOT INITIAL.
    ls_hdrx-purch_no_c =  abap_true.
  ENDIF.
  IF ls_hdr-purch_no_s IS NOT INITIAL.
    ls_hdrx-purch_no_s =  abap_true.
  ENDIF.
  IF ls_hdr-pymt_gar_proc IS NOT INITIAL.
    ls_hdrx-pymt_gar_proc =  abap_true.
  ENDIF.
  IF ls_hdr-pymt_meth IS NOT INITIAL.
    ls_hdrx-pymt_meth =  abap_true.
  ENDIF.
  IF ls_hdr-qt_valid_f IS NOT INITIAL.
    ls_hdrx-qt_valid_f =  abap_true.
  ENDIF.
  IF ls_hdr-qt_valid_t IS NOT INITIAL.
    ls_hdrx-qt_valid_t =  abap_true.
  ENDIF.
  IF ls_hdr-rec_point IS NOT INITIAL.
    ls_hdrx-rec_point =  abap_true.
  ENDIF.
  IF ls_hdr-ref_1 IS NOT INITIAL.
    ls_hdrx-ref_1 =  abap_true.
  ENDIF.
  IF ls_hdr-ref_1_s IS NOT INITIAL.
    ls_hdrx-ref_1_s =  abap_true.
  ENDIF.
  IF ls_hdr-ref_doc IS NOT INITIAL.
    ls_hdrx-ref_doc =  abap_true.
  ENDIF.
  IF ls_hdr-ref_doc_cat IS NOT INITIAL.
    ls_hdrx-ref_doc_cat =  abap_true.
  ENDIF.
  IF ls_hdr-ref_doc_cat_long IS NOT INITIAL.
    ls_hdrx-ref_doc_cat_long =  abap_true.
  ENDIF.
  IF ls_hdr-ref_doc_l IS NOT INITIAL.
    ls_hdrx-ref_doc_l =  abap_true.
  ENDIF.
  IF ls_hdr-ref_proc IS NOT INITIAL.
    ls_hdrx-ref_proc =  abap_true.
  ENDIF.
  IF ls_hdr-req_date_h IS NOT INITIAL.
    ls_hdrx-req_date_h =  abap_true.
  ENDIF.
  IF ls_hdr-sales_dist IS NOT INITIAL.
    ls_hdrx-sales_dist =  abap_true.
  ENDIF.
  IF ls_hdr-sales_grp IS NOT INITIAL.
    ls_hdrx-sales_grp =  abap_true.
  ENDIF.
  IF ls_hdr-sales_off IS NOT INITIAL.
    ls_hdrx-sales_off =  abap_true.
  ENDIF.
  IF ls_hdr-sales_org IS NOT INITIAL.
    ls_hdrx-sales_org =  abap_true.
  ENDIF.
  IF ls_hdr-sd_doc_cat IS NOT INITIAL.
    ls_hdrx-sd_doc_cat =  abap_true.
  ENDIF.
  IF ls_hdr-sd_doc_cat_long IS NOT INITIAL.
    ls_hdrx-sd_doc_cat_long =  abap_true.
  ENDIF.
  IF ls_hdr-sepa_mandate_id IS NOT INITIAL.
    ls_hdrx-sepa_mandate_id =  abap_true.
  ENDIF.
  IF ls_hdr-serv_date IS NOT INITIAL.
    ls_hdrx-serv_date =  abap_true.
  ENDIF.
  IF ls_hdr-ship_cond IS NOT INITIAL.
    ls_hdrx-ship_cond =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class2 IS NOT INITIAL.
    ls_hdrx-tax_class2 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class3 IS NOT INITIAL.
    ls_hdrx-tax_class3 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class4 IS NOT INITIAL.
    ls_hdrx-tax_class4 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class5 IS NOT INITIAL.
    ls_hdrx-tax_class5 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class6 IS NOT INITIAL.
    ls_hdrx-tax_class6 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class7 IS NOT INITIAL.
    ls_hdrx-tax_class7 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class8 IS NOT INITIAL.
    ls_hdrx-tax_class8 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_class9 IS NOT INITIAL.
    ls_hdrx-tax_class9 =  abap_true.
  ENDIF.
  IF ls_hdr-tax_depart_cty IS NOT INITIAL.
    ls_hdrx-tax_depart_cty =  abap_true.
  ENDIF.
  IF ls_hdr-tax_dest_cty IS NOT INITIAL.
    ls_hdrx-tax_dest_cty =  abap_true.
  ENDIF.
  IF ls_hdr-telephone IS NOT INITIAL.
    ls_hdrx-telephone =  abap_true.
  ENDIF.
  IF ls_hdr-version IS NOT INITIAL.
    ls_hdrx-version =  abap_true.
  ENDIF.
  IF ls_hdr-war_date IS NOT INITIAL.
    ls_hdrx-war_date =  abap_true.
  ENDIF.
  LOOP AT gt_sales_order_items INTO lwa_itm_temp.
    MOVE-CORRESPONDING lwa_itm_temp TO lwa_itm.
    MOVE lwa_itm_temp-alt_to_itm  TO lwa_itm-altern_to_itm.
    MOVE lwa_itm_temp-cust_mat22  TO lwa_itm-cust_mat35.
    MOVE lwa_itm_temp-poitm_no_s  TO lwa_itm-po_itm_no_s.
    MOVE lwa_itm_temp-ordcomp_in  TO lwa_itm-ord_comp_in.
    MOVE lwa_itm_temp-ex_rate_fi  TO lwa_itm-exch_rate_fi.
    MOVE lwa_itm_temp-pmtgar_pro  TO lwa_itm-pymt_gar_proc.
    MOVE lwa_itm_temp-departm_no  TO lwa_itm-department_no.
    MOVE lwa_itm_temp-cstcndgrp1  TO lwa_itm-cust_cond_grp1.
    MOVE lwa_itm_temp-cstcndgrp2  TO lwa_itm-cust_cond_grp2.
    MOVE lwa_itm_temp-cstcndgrp3  TO lwa_itm-cust_cond_grp3.
    MOVE lwa_itm_temp-cstcndgrp4  TO lwa_itm-cust_cond_grp4.
    MOVE lwa_itm_temp-cstcndgrp5  TO lwa_itm-cust_cond_grp5.
    MOVE lwa_itm_temp-s_unit_iso  TO lwa_itm-sales_unit_iso.
    MOVE lwa_itm_temp-trg_qty_no  TO lwa_itm-targ_qty_num.
    MOVE lwa_itm_temp-trgqty_den  TO lwa_itm-targ_qty_denom.
    MOVE lwa_itm_temp-rnddlv_qty  TO lwa_itm-round_dlv_qty.
    MOVE lwa_itm_temp-maxdevamnt  TO lwa_itm-max_deviat_amnt.
    MOVE lwa_itm_temp-maxdevper  TO lwa_itm-max_dev_perc.
    MOVE lwa_itm_temp-maxdev_day  TO lwa_itm-max_dev_days.
    MOVE lwa_itm_temp-usage_ind  TO lwa_itm-usage_ind.
    MOVE lwa_itm_temp-fixed_quan  TO lwa_itm-fixed_quan.
    MOVE lwa_itm_temp-unlmt_dlv  TO lwa_itm-unlimited_dlv.
    MOVE lwa_itm_temp-overdlvtol  TO lwa_itm-over_dlv_tol.
    MOVE lwa_itm_temp-unddlv_tol  TO lwa_itm-under_dlv_tol.
    MOVE lwa_itm_temp-division  TO lwa_itm-division.
    MOVE lwa_itm_temp-salqtynum  TO lwa_itm-sales_qty_num.
    MOVE lwa_itm_temp-salqtyden  TO lwa_itm-sales_qty_denom.
    MOVE lwa_itm_temp-gross_wght  TO lwa_itm-gross_weight.
    MOVE lwa_itm_temp-net_weight  TO lwa_itm-net_weight.
    MOVE lwa_itm_temp-untof_wght  TO lwa_itm-unit_of_weight.
    MOVE lwa_itm_temp-unof_wtiso  TO lwa_itm-unit_of_wt_iso.
    MOVE lwa_itm_temp-volume  TO lwa_itm-volume.
    MOVE lwa_itm_temp-volunit  TO lwa_itm-volumeunit.
    MOVE lwa_itm_temp-volunitiso  TO lwa_itm-volumeunit_iso.
    MOVE lwa_itm_temp-fixdat_qty  TO lwa_itm-fix_date_qty.
    MOVE lwa_itm_temp-bomexpl_no  TO lwa_itm-bomexpl_no.
    MOVE lwa_itm_temp-resanalkey  TO lwa_itm-res_anal_key.
    MOVE lwa_itm_temp-reqmts_typ  TO lwa_itm-reqmts_type.
    MOVE lwa_itm_temp-no_gr_post  TO lwa_itm-no_gr_posted.
    MOVE lwa_itm_temp-bus_transt  TO lwa_itm-bus_transt.
    MOVE lwa_itm_temp-overhd_key  TO lwa_itm-overhead_key.
    MOVE lwa_itm_temp-cstg_sheet  TO lwa_itm-cstg_sheet.
    MOVE lwa_itm_temp-matfrgtgrp  TO lwa_itm-matfrgtgrp.
    MOVE lwa_itm_temp-pldlvshdin  TO lwa_itm-plandlvschedins.
    MOVE lwa_itm_temp-seq_no  TO lwa_itm-sequence_no.
    MOVE lwa_itm_temp-bil_form  TO lwa_itm-billing_form.
    MOVE lwa_itm_temp-dli_profil  TO lwa_itm-dli_profile.
    MOVE lwa_itm_temp-rev_type  TO lwa_itm-revenue_type.
    MOVE lwa_itm_temp-begdem_per  TO lwa_itm-begin_demarc_period.
    MOVE lwa_itm_temp-mat_entrd_external  TO lwa_itm-material_external.
    MOVE lwa_itm_temp-mat_entrd_guid  TO lwa_itm-material_guid.
    MOVE lwa_itm_temp-mat_entrd_version  TO lwa_itm-material_version.
    APPEND lwa_itm TO lt_itm.
    lwa_itmx-updateflag = gc_updkz_new.
    lwa_itmx-itm_number = lwa_itm-itm_number.
    lwa_itmx-ref_doc = abap_true.
    lwa_itmx-ref_doc_ca = abap_true.
    lwa_itmx-ref_doc_it = abap_true.
    IF lwa_itm-accnt_asgn IS NOT INITIAL.
      lwa_itmx-accnt_asgn =  abap_true.
    ENDIF.
    IF lwa_itm-add_val_dy IS NOT INITIAL.
      lwa_itmx-add_val_dy =  abap_true.
    ENDIF.
    IF lwa_itm-altern_to_itm IS NOT INITIAL.
      lwa_itmx-altern_to_itm =  abap_true.
    ENDIF.
    IF lwa_itm-assort_mod IS NOT INITIAL.
      lwa_itmx-assort_mod =  abap_true.
    ENDIF.
    IF lwa_itm-batch IS NOT INITIAL.
      lwa_itmx-batch =  abap_true.
    ENDIF.
    IF lwa_itm-begin_demarc_period IS NOT INITIAL.
      lwa_itmx-begin_demarc_period =  abap_true.
    ENDIF.
    IF lwa_itm-billing_form IS NOT INITIAL.
      lwa_itmx-billing_form =  abap_true.
    ENDIF.
    IF lwa_itm-bill_block IS NOT INITIAL.
      lwa_itmx-bill_block =  abap_true.
    ENDIF.
    IF lwa_itm-bill_date IS NOT INITIAL.
      lwa_itmx-bill_date =  abap_true.
    ENDIF.
    IF lwa_itm-bill_sched IS NOT INITIAL.
      lwa_itmx-bill_sched =  abap_true.
    ENDIF.
    IF lwa_itm-bomexpl_no IS NOT INITIAL.
      lwa_itmx-bomexpl_no =  abap_true.
    ENDIF.
    IF lwa_itm-bus_transt IS NOT INITIAL.
      lwa_itmx-bus_transt =  abap_true.
    ENDIF.
    IF lwa_itm-cfop_code IS NOT INITIAL.
      lwa_itmx-cfop_code =  abap_true.
    ENDIF.
    IF lwa_itm-comp_quant IS NOT INITIAL.
      lwa_itmx-comp_quant =  abap_true.
    ENDIF.
    IF lwa_itm-cstg_sheet IS NOT INITIAL.
      lwa_itmx-cstg_sheet =  abap_true.
    ENDIF.
    IF lwa_itm-cust_cond_grp1 IS NOT INITIAL.
      lwa_itmx-cust_cond_grp1 =  abap_true.
    ENDIF.
    IF lwa_itm-cust_cond_grp2 IS NOT INITIAL.
      lwa_itmx-cust_cond_grp2 =  abap_true.
    ENDIF.
    IF lwa_itm-cust_cond_grp3 IS NOT INITIAL.
      lwa_itmx-cust_cond_grp3 =  abap_true.
    ENDIF.
    IF lwa_itm-cust_cond_grp4 IS NOT INITIAL.
      lwa_itmx-cust_cond_grp4 =  abap_true.
    ENDIF.
    IF lwa_itm-cust_cond_grp5 IS NOT INITIAL.
      lwa_itmx-cust_cond_grp5 =  abap_true.
    ENDIF.
    IF lwa_itm-cust_group IS NOT INITIAL.
      lwa_itmx-cust_group =  abap_true.
    ENDIF.
    IF lwa_itm-cust_mat35 IS NOT INITIAL.
      lwa_itmx-cust_mat35 =  abap_true.
    ENDIF.
    IF lwa_itm-department_no IS NOT INITIAL.
      lwa_itmx-department_no =  abap_true.
    ENDIF.
    IF lwa_itm-deprec_per IS NOT INITIAL.
      lwa_itmx-deprec_per =  abap_true.
    ENDIF.
    IF lwa_itm-division IS NOT INITIAL.
      lwa_itmx-division =  abap_true.
    ENDIF.
    IF lwa_itm-dli_profile IS NOT INITIAL.
      lwa_itmx-dli_profile =  abap_true.
    ENDIF.
    IF lwa_itm-dlv_group IS NOT INITIAL.
      lwa_itmx-dlv_group =  abap_true.
    ENDIF.
    IF lwa_itm-dlv_prio IS NOT INITIAL.
      lwa_itmx-dlv_prio =  abap_true.
    ENDIF.
    IF lwa_itm-dlv_time IS NOT INITIAL.
      lwa_itmx-dlv_time =  abap_true.
    ENDIF.
    IF lwa_itm-doc_num_fi IS NOT INITIAL.
      lwa_itmx-doc_num_fi =  abap_true.
    ENDIF.
    IF lwa_itm-dunn_block IS NOT INITIAL.
      lwa_itmx-dunn_block =  abap_true.
    ENDIF.
    IF lwa_itm-dunn_key IS NOT INITIAL.
      lwa_itmx-dunn_key =  abap_true.
    ENDIF.
    IF lwa_itm-exchg_rate IS NOT INITIAL.
      lwa_itmx-exchg_rate =  abap_true.
    ENDIF.
    IF lwa_itm-exch_rate_fi IS NOT INITIAL.
      lwa_itmx-exch_rate_fi =  abap_true.
    ENDIF.
    IF lwa_itm-fixed_quan IS NOT INITIAL.
      lwa_itmx-fixed_quan =  abap_true.
    ENDIF.
    IF lwa_itm-fix_date_qty IS NOT INITIAL.
      lwa_itmx-fix_date_qty =  abap_true.
    ENDIF.
    IF lwa_itm-fix_val_dy IS NOT INITIAL.
      lwa_itmx-fix_val_dy =  abap_true.
    ENDIF.
    IF lwa_itm-fkk_conacct IS NOT INITIAL.
      lwa_itmx-fkk_conacct =  abap_true.
    ENDIF.
    IF lwa_itm-gross_weight IS NOT INITIAL.
      lwa_itmx-gross_weight =  abap_true.
    ENDIF.
    IF lwa_itm-hg_lv_item IS NOT INITIAL.
      lwa_itmx-hg_lv_item =  abap_true.
    ENDIF.
    IF lwa_itm-incoterms1 IS NOT INITIAL.
      lwa_itmx-incoterms1 =  abap_true.
    ENDIF.
    IF lwa_itm-incoterms2 IS NOT INITIAL.
      lwa_itmx-incoterms2 =  abap_true.
    ENDIF.
    IF lwa_itm-incoterms2l IS NOT INITIAL.
      lwa_itmx-incoterms2l =  abap_true.
    ENDIF.
    IF lwa_itm-incoterms3l IS NOT INITIAL.
      lwa_itmx-incoterms3l =  abap_true.
    ENDIF.
    IF lwa_itm-incotermsv IS NOT INITIAL.
      lwa_itmx-incotermsv =  abap_true.
    ENDIF.
    IF lwa_itm-invo_sched IS NOT INITIAL.
      lwa_itmx-invo_sched =  abap_true.
    ENDIF.
    IF lwa_itm-item_categ IS NOT INITIAL.
      lwa_itmx-item_categ =  abap_true.
    ENDIF.
    IF lwa_itm-itm_number IS NOT INITIAL.
      lwa_itmx-itm_number =  abap_true.
    ENDIF.
    IF lwa_itm-material IS NOT INITIAL.
      lwa_itmx-material =  abap_true.
    ENDIF.
    IF lwa_itm-material_external IS NOT INITIAL.
      lwa_itmx-material_external =  abap_true.
    ENDIF.
    IF lwa_itm-material_guid IS NOT INITIAL.
      lwa_itmx-material_guid =  abap_true.
    ENDIF.
    IF lwa_itm-material_long IS NOT INITIAL.
      lwa_itmx-material_long =  abap_true.
    ENDIF.
    IF lwa_itm-material_version IS NOT INITIAL.
      lwa_itmx-material_version =  abap_true.
    ENDIF.
    IF lwa_itm-matfrgtgrp IS NOT INITIAL.
      lwa_itmx-matfrgtgrp =  abap_true.
    ENDIF.
    IF lwa_itm-matl_group IS NOT INITIAL.
      lwa_itmx-matl_group =  abap_true.
    ENDIF.
    IF lwa_itm-mat_pr_grp IS NOT INITIAL.
      lwa_itmx-mat_pr_grp =  abap_true.
    ENDIF.
    IF lwa_itm-max_deviat_amnt IS NOT INITIAL.
      lwa_itmx-max_deviat_amnt =  abap_true.
    ENDIF.
    IF lwa_itm-max_dev_days IS NOT INITIAL.
      lwa_itmx-max_dev_days =  abap_true.
    ENDIF.
    IF lwa_itm-max_dev_perc IS NOT INITIAL.
      lwa_itmx-max_dev_perc =  abap_true.
    ENDIF.
    IF lwa_itm-max_pl_dlv IS NOT INITIAL.
      lwa_itmx-max_pl_dlv =  abap_true.
    ENDIF.
    IF lwa_itm-mn_invoice IS NOT INITIAL.
      lwa_itmx-mn_invoice =  abap_true.
    ENDIF.
    IF lwa_itm-net_weight IS NOT INITIAL.
      lwa_itmx-net_weight =  abap_true.
    ENDIF.
    IF lwa_itm-no_gr_posted IS NOT INITIAL.
      lwa_itmx-no_gr_posted =  abap_true.
    ENDIF.
    IF lwa_itm-orderid IS NOT INITIAL.
      lwa_itmx-orderid =  abap_true.
    ENDIF.
    IF lwa_itm-order_prob IS NOT INITIAL.
      lwa_itmx-order_prob =  abap_true.
    ENDIF.
    IF lwa_itm-ord_comp_in IS NOT INITIAL.
      lwa_itmx-ord_comp_in =  abap_true.
    ENDIF.
    IF lwa_itm-overhead_key IS NOT INITIAL.
      lwa_itmx-overhead_key =  abap_true.
    ENDIF.
    IF lwa_itm-over_dlv_tol IS NOT INITIAL.
      lwa_itmx-over_dlv_tol =  abap_true.
    ENDIF.
    IF lwa_itm-part_dlv IS NOT INITIAL.
      lwa_itmx-part_dlv =  abap_true.
    ENDIF.
    IF lwa_itm-plandlvschedins IS NOT INITIAL.
      lwa_itmx-plandlvschedins =  abap_true.
    ENDIF.
    IF lwa_itm-plant IS NOT INITIAL.
      lwa_itmx-plant =  abap_true.
    ENDIF.
    IF lwa_itm-pmnttrms IS NOT INITIAL.
      lwa_itmx-pmnttrms =  abap_true.
    ENDIF.
    IF lwa_itm-po_dat_s IS NOT INITIAL.
      lwa_itmx-po_dat_s =  abap_true.
    ENDIF.
    IF lwa_itm-po_itm_no IS NOT INITIAL.
      lwa_itmx-po_itm_no =  abap_true.
    ENDIF.
    IF lwa_itm-po_itm_no_s IS NOT INITIAL.
      lwa_itmx-po_itm_no_s =  abap_true.
    ENDIF.
    IF lwa_itm-po_method IS NOT INITIAL.
      lwa_itmx-po_method =  abap_true.
    ENDIF.
    IF lwa_itm-po_meth_s IS NOT INITIAL.
      lwa_itmx-po_meth_s =  abap_true.
    ENDIF.
    IF lwa_itm-prc_group1 IS NOT INITIAL.
      lwa_itmx-prc_group1 =  abap_true.
    ENDIF.
    IF lwa_itm-prc_group2 IS NOT INITIAL.
      lwa_itmx-prc_group2 =  abap_true.
    ENDIF.
    IF lwa_itm-prc_group3 IS NOT INITIAL.
      lwa_itmx-prc_group3 =  abap_true.
    ENDIF.
    IF lwa_itm-prc_group4 IS NOT INITIAL.
      lwa_itmx-prc_group4 =  abap_true.
    ENDIF.
    IF lwa_itm-prc_group5 IS NOT INITIAL.
      lwa_itmx-prc_group5 =  abap_true.
    ENDIF.
    IF lwa_itm-price_date IS NOT INITIAL.
      lwa_itmx-price_date =  abap_true.
    ENDIF.
    IF lwa_itm-price_grp IS NOT INITIAL.
      lwa_itmx-price_grp =  abap_true.
    ENDIF.
    IF lwa_itm-price_list IS NOT INITIAL.
      lwa_itmx-price_list =  abap_true.
    ENDIF.
    IF lwa_itm-prod_hiera IS NOT INITIAL.
      lwa_itmx-prod_hiera =  abap_true.
    ENDIF.
    IF lwa_itm-profit_ctr IS NOT INITIAL.
      lwa_itmx-profit_ctr =  abap_true.
    ENDIF.
    IF lwa_itm-promotion IS NOT INITIAL.
      lwa_itmx-promotion =  abap_true.
    ENDIF.
    IF lwa_itm-pr_ref_mat IS NOT INITIAL.
      lwa_itmx-pr_ref_mat =  abap_true.
    ENDIF.
    IF lwa_itm-pr_ref_mat_external IS NOT INITIAL.
      lwa_itmx-pr_ref_mat_external =  abap_true.
    ENDIF.
    IF lwa_itm-pr_ref_mat_guid IS NOT INITIAL.
      lwa_itmx-pr_ref_mat_guid =  abap_true.
    ENDIF.
    IF lwa_itm-pr_ref_mat_long IS NOT INITIAL.
      lwa_itmx-pr_ref_mat_long =  abap_true.
    ENDIF.
    IF lwa_itm-pr_ref_mat_version IS NOT INITIAL.
      lwa_itmx-pr_ref_mat_version =  abap_true.
    ENDIF.
    IF lwa_itm-purch_date IS NOT INITIAL.
      lwa_itmx-purch_date =  abap_true.
    ENDIF.
    IF lwa_itm-purch_no_c IS NOT INITIAL.
      lwa_itmx-purch_no_c =  abap_true.
    ENDIF.
    IF lwa_itm-purch_no_s IS NOT INITIAL.
      lwa_itmx-purch_no_s =  abap_true.
    ENDIF.
    IF lwa_itm-pymt_gar_proc IS NOT INITIAL.
      lwa_itmx-pymt_gar_proc =  abap_true.
    ENDIF.
    IF lwa_itm-pymt_meth IS NOT INITIAL.
      lwa_itmx-pymt_meth =  abap_true.
    ENDIF.
    IF lwa_itm-reason_rej IS NOT INITIAL.
      lwa_itmx-reason_rej =  abap_true.
    ENDIF.
    IF lwa_itm-rec_point IS NOT INITIAL.
      lwa_itmx-rec_point =  abap_true.
    ENDIF.
    IF lwa_itm-reflogsys IS NOT INITIAL.
      lwa_itmx-reflogsys =  abap_true.
    ENDIF.
    IF lwa_itm-refobjkey IS NOT INITIAL.
      lwa_itmx-refobjkey =  abap_true.
    ENDIF.
    IF lwa_itm-refobjtype IS NOT INITIAL.
      lwa_itmx-refobjtype =  abap_true.
    ENDIF.
    IF lwa_itm-ref_1 IS NOT INITIAL.
      lwa_itmx-ref_1 =  abap_true.
    ENDIF.
    IF lwa_itm-ref_1_s IS NOT INITIAL.
      lwa_itmx-ref_1_s =  abap_true.
    ENDIF.
    IF lwa_itm-ref_doc IS NOT INITIAL.
      lwa_itmx-ref_doc =  abap_true.
    ENDIF.
    IF lwa_itm-ref_doc_ca IS NOT INITIAL.
      lwa_itmx-ref_doc_ca =  abap_true.
    ENDIF.
    IF lwa_itm-ref_doc_ca_long IS NOT INITIAL.
      lwa_itmx-ref_doc_ca_long =  abap_true.
    ENDIF.
    IF lwa_itm-ref_doc_it IS NOT INITIAL.
      lwa_itmx-ref_doc_it =  abap_true.
    ENDIF.
    IF lwa_itm-reqmts_type IS NOT INITIAL.
      lwa_itmx-reqmts_type =  abap_true.
    ENDIF.
    IF lwa_itm-req_segment IS NOT INITIAL.
      lwa_itmx-req_segment =  abap_true.
    ENDIF.
    IF lwa_itm-req_seg_long IS NOT INITIAL.
      lwa_itmx-req_seg_long =  abap_true.
    ENDIF.
    IF lwa_itm-res_anal_key IS NOT INITIAL.
      lwa_itmx-res_anal_key =  abap_true.
    ENDIF.
    IF lwa_itm-revenue_type IS NOT INITIAL.
      lwa_itmx-revenue_type =  abap_true.
    ENDIF.
    IF lwa_itm-route IS NOT INITIAL.
      lwa_itmx-route =  abap_true.
    ENDIF.
    IF lwa_itm-sales_dist IS NOT INITIAL.
      lwa_itmx-sales_dist =  abap_true.
    ENDIF.
    IF lwa_itm-sales_qty_denom IS NOT INITIAL.
      lwa_itmx-sales_qty_denom =  abap_true.
    ENDIF.
    IF lwa_itm-sales_qty_num IS NOT INITIAL.
      lwa_itmx-sales_qty_num =  abap_true.
    ENDIF.
    IF lwa_itm-sales_unit IS NOT INITIAL.
      lwa_itmx-sales_unit =  abap_true.
    ENDIF.
    IF lwa_itm-sd_taxcode IS NOT INITIAL.
      lwa_itmx-sd_taxcode =  abap_true.
    ENDIF.
    IF lwa_itm-sepa_mandate_id IS NOT INITIAL.
      lwa_itmx-sepa_mandate_id =  abap_true.
    ENDIF.
    IF lwa_itm-sequence_no IS NOT INITIAL.
      lwa_itmx-sequence_no =  abap_true.
    ENDIF.
    IF lwa_itm-serv_date IS NOT INITIAL.
      lwa_itmx-serv_date =  abap_true.
    ENDIF.
    IF lwa_itm-ship_point IS NOT INITIAL.
      lwa_itmx-ship_point =  abap_true.
    ENDIF.
    IF lwa_itm-short_text IS NOT INITIAL.
      lwa_itmx-short_text =  abap_true.
    ENDIF.
    IF lwa_itm-store_loc IS NOT INITIAL.
      lwa_itmx-store_loc =  abap_true.
    ENDIF.
    IF lwa_itm-target_qty IS NOT INITIAL.
      lwa_itmx-target_qty =  abap_true.
    ENDIF.
    IF lwa_itm-target_qu IS NOT INITIAL.
      lwa_itmx-target_qu =  abap_true.
    ENDIF.
    IF lwa_itm-target_val IS NOT INITIAL.
      lwa_itmx-target_val =  abap_true.
    ENDIF.
    IF lwa_itm-targ_qty_denom IS NOT INITIAL.
      lwa_itmx-targ_qty_denom =  abap_true.
    ENDIF.
    IF lwa_itm-targ_qty_num IS NOT INITIAL.
      lwa_itmx-targ_qty_num =  abap_true.
    ENDIF.
    IF lwa_itm-taxlawicms IS NOT INITIAL.
      lwa_itmx-taxlawicms =  abap_true.
    ENDIF.
    IF lwa_itm-taxlawipi IS NOT INITIAL.
      lwa_itmx-taxlawipi =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class1 IS NOT INITIAL.
      lwa_itmx-tax_class1 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class2 IS NOT INITIAL.
      lwa_itmx-tax_class2 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class3 IS NOT INITIAL.
      lwa_itmx-tax_class3 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class4 IS NOT INITIAL.
      lwa_itmx-tax_class4 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class5 IS NOT INITIAL.
      lwa_itmx-tax_class5 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class6 IS NOT INITIAL.
      lwa_itmx-tax_class6 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class7 IS NOT INITIAL.
      lwa_itmx-tax_class7 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class8 IS NOT INITIAL.
      lwa_itmx-tax_class8 =  abap_true.
    ENDIF.
    IF lwa_itm-tax_class9 IS NOT INITIAL.
      lwa_itmx-tax_class9 =  abap_true.
    ENDIF.
    IF lwa_itm-t_unit_iso IS NOT INITIAL.
      lwa_itmx-t_unit_iso =  abap_true.
    ENDIF.
    IF lwa_itm-under_dlv_tol IS NOT INITIAL.
      lwa_itmx-under_dlv_tol =  abap_true.
    ENDIF.
    IF lwa_itm-unit_of_weight IS NOT INITIAL.
      lwa_itmx-unit_of_weight =  abap_true.
    ENDIF.
    IF lwa_itm-unlimited_dlv IS NOT INITIAL.
      lwa_itmx-unlimited_dlv =  abap_true.
    ENDIF.
    IF lwa_itm-usage_ind IS NOT INITIAL.lwa_itmx-usage_ind =  abap_true. ENDIF.
    IF lwa_itm-val_type IS NOT INITIAL.lwa_itmx-val_type =  abap_true. ENDIF.
    IF lwa_itm-volume IS NOT INITIAL.lwa_itmx-volume =  abap_true. ENDIF.
    IF lwa_itm-volumeunit IS NOT INITIAL.lwa_itmx-volumeunit =  abap_true. ENDIF.
    IF lwa_itm-wbs_elem IS NOT INITIAL.lwa_itmx-wbs_elem =  abap_true. ENDIF.

    APPEND lwa_itmx  TO lt_itmx.
  ENDLOOP.
  LOOP AT gt_sales_order_ptrs INTO lwa_ptr_temp.
    MOVE-CORRESPONDING lwa_ptr_temp TO lwa_ptr.
    APPEND lwa_ptr TO lt_ptr.
  ENDLOOP.
  LOOP AT gt_sales_order_cnds INTO lwa_con_temp.
    MOVE-CORRESPONDING lwa_con_temp TO lwa_con.
    APPEND lwa_con TO lt_con.
  ENDLOOP.


  CALL FUNCTION 'BAPI_SALESDOCU_CREATEWITHDIA'
    EXPORTING
      sales_header_in     = ls_hdr
      sales_header_inx    = ls_hdrx
    IMPORTING
      salesdocument_ex    = gs_variables-dmr_vbeln
    TABLES
      return              = lt_return
      sales_items_in      = lt_itm
      sales_items_inx     = lt_itmx
      sales_partners      = lt_ptr
      sales_conditions_in = lt_con.
  IF sy-subrc <> 0.
  ENDIF.
ENDFORM.
FORM create_dyn_table_using_fcat USING lt_fcat TYPE lvc_t_fcat
                                       lo_data TYPE REF TO data.
  CALL METHOD /cgdc/cl_common_util=>create_dynamic_table
    EXPORTING
      it_fcat                 = lt_fcat
      i_style                 = abap_true
    IMPORTING
      eref_table              = lo_data
    EXCEPTIONS
      table_generation_failed = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.
ENDFORM.

FORM check_authority  USING lv_calrq_type TYPE /cgdc/clrqt
                            lv_activity
                   CHANGING lv_subrc.

  AUTHORITY-CHECK OBJECT gc_auth_obj-/cgdc/crty
           ID gc_auth_obj-/cgdc/crty FIELD lv_calrq_type.

  lv_subrc = sy-subrc.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_EBDR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> SPACE
*&---------------------------------------------------------------------*
FORM create_ebdr  USING lv_commit_work.

  DATA: ls_control_data            TYPE bapiebdrrequestctrl,
        ls_administration_data     TYPE bapiebdrrequestadmin,
        lt_condition_data          TYPE bapiebdrrequestcond_t,
        ls_condition_data          TYPE bapiebdrrequestcond,
        lt_bdr_ptr                 TYPE bapiebdrrequestparnr_t,
        lt_ebdrcreateddoc          TYPE bapiebdrrequestextbilldocreq_t,
        lt_ebdrcreateddoc_bufr     TYPE bapiebdrrequestextbilldocreq_t,
        lt_ebdrcreateddocitem      TYPE bapiebdrrequestresult_t,
        lt_ebdrcreatefaileddocitem TYPE bapiebdrrequestfailed_t,
        lt_message                 TYPE bapiebdrrequestmsg_t,
        lwa_message                LIKE LINE OF lt_message,
        lt_return                  TYPE bapiret2_t,
        lt_whitelist               TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line,
        lt_posv_bill_pre           TYPE TABLE OF /cgdc/s_clrqbi_fcat,
        lt_neg_bill_pre            TYPE TABLE OF /cgdc/s_clrqbi_fcat,
        lt_bill_pre_data           TYPE TABLE OF /cgdc/s_clrqbi_fcat,
*        lwa_critm                  TYPE /cgdc/s_clrqit,
        lt_critm                   TYPE /cgdc/tt_clrqit,
*        lt_critm_temp              TYPE /cgdc/tt_clrqit,
*        lt_grp_prf_data            TYPE /cgdc/tt_clrqgrp,
        lwa_critm                  TYPE /cgdc/s_clrqit,
        lwa_critm_temp             TYPE /cgdc/s_clrqit,
        lt_critm_temp              TYPE TABLE OF /cgdc/s_clrqit,
        lt_cds_fields              TYPE dfies_table,
        lt_ebdr_data               TYPE bapiebdrrequest_t,
        lv_where                   TYPE string,
        lv_xref_doc_tabix          TYPE sy-tabix VALUE 1,
        lv_kposn                   TYPE kposn,
        lt_xref_docs               TYPE t_vbeln,
        lwa_crdfl                  TYPE /cgdc/s_clrqdf,
        lwa_xref_doc               TYPE s_vbeln,
        lwa_bdr_item               TYPE LINE OF bapiebdrrequestresult_t,
        lo_data                    TYPE REF TO data,
        lo_data_all                TYPE REF TO data,
        lv_item_subrc              TYPE sy-subrc,
        lv_item_tabix              TYPE sy-tabix,
        lv_view_name               TYPE string,
        lv_clrno                   TYPE /cgdc/clrqno,
        lv_vbeln                   TYPE vbeln,
        lv_bill_amount_item        TYPE netwr,
        lt_fcat                    TYPE lvc_t_fcat,
        lv_bill_qty_item           TYPE dzmeng,
        lt_clrqbi                  TYPE STANDARD TABLE OF /cgdc/s_clrqbi,
        ls_message                 TYPE /cgdc/s_message,
        ls_vbap                    TYPE vbap,
        ls_cafrdst                 TYPE /cgdc/_cafrdst,
        lv_cafs_flag               TYPE flag,
        lwa_selected_row           TYPE lvc_s_row.

  DATA : lwa_clrqit_fcat TYPE /cgdc/s_clrqit_fcat,
         lv_flag         TYPE flag.
  FIELD-SYMBOLS: <lt_data>            TYPE table,
                 <lwa_data>           TYPE /cgdc/s_clrqbi_fcat,
                 <lwa_critm_0subitem> TYPE /cgdc/s_clrqit,
                 <lwa_critm>          TYPE /cgdc/s_clrqit,
                 <lv_data>            TYPE data,
                 <lv_clrno>           TYPE any,
                 <lv_rtbbinr>         TYPE any,
                 <lwa_clrqbi>         TYPE /cgdc/s_clrqbi.

  DATA: "ls_clrqbs_doc TYPE /cgdc/s_clrqbs_doc,
        "lwa_clrqbsh   TYPE /cgdc/s_clrqbsh,
        "lwa_clrqbsi   TYPE /cgdc/s_clrqbsi,
        "lwa_clrqbsc   TYPE /cgdc/s_clrqbsc,
        lv_billcount  TYPE /cgdc/clrq_blscount.
  DATA : lv_block_bill TYPE flag.
  DATA : ls_cont_itm TYPE vbap.
  DATA : lv_invalid TYPE flag.

  DATA: lt_rtbsgcl         TYPE TABLE OF /cgdc/_rtbsgcl,
        lwa_rtbsgcl        LIKE LINE OF lt_rtbsgcl,
        lr_msg_type        TYPE RANGE OF bdc_mart,
        ls_msg_type        LIKE LINE OF lr_msg_type,
        lt_char_and_freq   TYPE TABLE OF /cgdc/t_rtbsc,
        lwa_char_and_freq  LIKE LINE OF lt_char_and_freq,
        lt_group_clin_log  TYPE TABLE OF /cgdc/_rtbsgcl,
        lwa_group_clin_log LIKE LINE OF lt_group_clin_log,
        lv_billrel         TYPE rvari_val_255.

  CLEAR: ls_cafrdst.
  "CHECK Authority Check for Billing
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                             gs_clrqdoc_infocus-x-crhdr-vkorg
                             gs_clrqdoc_infocus-x-crhdr-vtweg
                             gs_clrqdoc_infocus-x-crhdr-spart
                             gc_auth_actv-request_billing
                             space
                       CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL.

    gs_messages-msgid = gc_clrq_msg_cls.
    gs_messages-msgnr = gc_msg_cls_msgnr-091.
    gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
    gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
    gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
    gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
    gs_messages-msgty = gc_message_type-information.
    APPEND gs_messages TO gt_messages.
    CLEAR gs_messages.
    IF gs_variables-call_from_ui EQ abap_false.
      CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
        EXPORTING
          it_messages = gt_messages.
    ENDIF.
    CLEAR gt_messages.
    RETURN.
  ENDIF.

  PERFORM read_contract_details USING gs_contract_hdr-vbeln.

  "++SOC AMISHARMA - don't validate billing status only for BDR proforma

  CLEAR lv_billrel.
  PERFORM get_billing_relevance USING gc_var_type-cb123
                                CHANGING lv_billrel.

  SELECT clrno, bill_item, fkrel, bstat
    FROM /cgdc/_clrqbi
    WHERE clrno = @gs_clrqdoc_infocus-clrno
      AND bstat NOT IN (@gc_bibstat-open,@gc_bibstat-invoice_posted,@gc_bibstat-invoice_cleared)
    INTO @DATA(ls_clrbi) UP TO 1 ROWS.
  ENDSELECT.
  "++EOC AMISHARMA - don't validate billing status only for BDR proforma

  IF sy-subrc = 0 AND ls_clrbi-fkrel CA lv_billrel.
    SELECT SINGLE clrno, sbqdc
     FROM /cgdc/_clrqdf
     WHERE clrno   = @ls_clrbi-clrno    "@gs_clrqdoc_infocus-clrno
       AND rtbbinr = @ls_clrbi-bill_item
       AND sbdct   = @gc_pbd
     INTO @DATA(ls_clrdf).
    IF sy-subrc = 0.
      IF ls_clrbi-bstat = gc_bibstat-invoice_created. "invoice not posted message added,
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-152.
        gs_messages-msgty = gc_message_type-error.
        gs_messages-msgv1 = ls_clrdf-sbqdc.
        APPEND gs_messages TO gt_messages.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-058.
        gs_messages-msgty = gc_message_type-error.
        gs_messages-msgv1 = ls_clrdf-sbqdc.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      IF gs_variables-call_from_ui IS INITIAL.
        CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
          EXPORTING
            it_messages = gt_messages.
        CLEAR gt_messages.
      ENDIF.
      EXIT.
    ENDIF.
  ENDIF.


  SELECT SINGLE * FROM /cgdc/_cafrdst
                  INTO ls_cafrdst
                  WHERE vbeln EQ gs_contract_hdr-vbeln.
  IF sy-subrc EQ 0.
    IF ls_cafrdst-rd_complete EQ abap_false.

      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-068.
      gs_messages-msgty = gc_message_type-error.
      gs_messages-msgv1 = gs_contract_hdr-vbeln.
      APPEND gs_messages TO gt_messages.

      "SHOW MESSAGES
      IF gs_variables-call_from_ui IS INITIAL.
        CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
          EXPORTING
            it_messages = gt_messages.
        CLEAR gt_messages.
      ENDIF.
      EXIT.
    ENDIF.
  ENDIF.
  "VALIDATION ADDED BY NMOTWANI
  IF gs_contract_hdr-faksk IS NOT INITIAL.
    lv_block_bill = abap_true.
  ELSE.
    "check items - moved here before other processing
    LOOP AT gt_bill_pre_data ASSIGNING <lwa_data>.
      IF <lv_data> IS ASSIGNED.
        UNASSIGN <lv_data>.
      ENDIF.
      ASSIGN COMPONENT gc_clrqbi_field-ps_psp_pnr OF STRUCTURE <lwa_data> TO <lv_data>.
      CLEAR ls_vbap.
      READ TABLE gt_contract_itm INTO ls_vbap
        WITH KEY ps_psp_pnr = <lv_data>.
      "Put messages in GT_MESSAGES
      IF ls_vbap-faksp IS NOT INITIAL.
        "Put messages in GT_MESSAGES

        CLEAR ls_message.
        ls_message-msgid = gc_clrq_msg_cls.
        ls_message-msgnr = gc_msg_cls_msgnr-070.
        ls_message-msgty = gc_message_type-information.
        ls_message-msgv1 = ls_vbap-vbeln.
        ls_message-msgv2 = ls_vbap-posnr.
        APPEND ls_message TO gt_messages.

        lv_block_bill = abap_true.
      ENDIF.
    ENDLOOP.
  ENDIF.
  IF lv_block_bill IS NOT INITIAL.

    CLEAR gs_messages.
    gs_messages-msgid = gc_clrq_msg_cls.
    gs_messages-msgnr = gc_msg_cls_msgnr-039.
    gs_messages-msgty = gc_message_type-error.
    gs_messages-msgv1 = gs_contract_hdr-vbeln.
    APPEND gs_messages TO gt_messages.

    "SHOW MESSAGES
    CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
      EXPORTING
        it_messages = gt_messages.
    CLEAR gt_messages.
    RETURN.
  ELSE.

***New changes
***New calc group related changes
    CLEAR: gs_clrqdoc_infocus-x-crgrr[],
           gs_clrqdoc_infocus-x-crgrrf[],
           gs_clrqdoc_infocus-x-cgrcon[],
           gv_index.                      "++AMISHARMA DCLM 6632 reset to avoid incorrect index

    CLEAR: gs_variables-bit_num_gen.
    gs_variables-cgrr_itm_crt = abap_true.
    PERFORM prep_calc_grp_row_data USING abap_false    "abap_true is changing to abap_false for so update_item01 wont trigger
                                CHANGING lt_fcat   .

    PERFORM release_calc_group USING 'X'    "calling the release cal with X so the update_item01 will get trigger for all the base values apart from PBP Event
                               lwa_selected_row.
    gs_variables-bit_num_gen = abap_true.
    gs_clrqdoc_infocus-updkz =  abap_true.
    gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
    PERFORM document_save USING gs_clrqdoc_infocus
          abap_true.
    gs_variables-key_only = abap_false.
    PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-clrno.
    gs_variables-key_only = abap_true.
    PERFORM fill_bill_pre_data USING 'Y'.          " DCLM 7059
    CLEAR lv_cafs_flag.
    PERFORM caf_assignment USING gt_bill_pre_data
                               gs_clrqdoc_infocus-x-crhdr-clrno
                           CHANGING lv_cafs_flag.
    CLEAR: gs_variables-bit_num_gen.
**trigger fresh data for PBP event
    PERFORM prep_calc_grp_row_data USING abap_false    "abap_true is changing to abap_false for so update_item01 wont trigger
                                CHANGING lt_fcat   .
    gs_variables-bit_num_gen = abap_true.
    PERFORM release_calc_group USING 'Y'    "calling the release cal with X so the update_item01 will get trigger for all the base values apart from PBP Event
                               lwa_selected_row.

    gs_clrqdoc_infocus-updkz =  abap_true.
    gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
    PERFORM document_save USING gs_clrqdoc_infocus
          abap_true.
    PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-clrno.
    CLEAR: gt_bill_pre_data, gt_bill_pre_data_all.
***DCLM 7145
    IF lv_cafs_flag EQ abap_true.
      PERFORM open_postp_itms_for_next_bill USING lv_commit_work.
    ENDIF.
***
    CHECK lv_cafs_flag EQ abap_false.

    PERFORM select_bill_pre_data USING abap_false.
    IF gt_bill_pre_data IS INITIAL.
      CLEAR ls_message.
      ls_message-msgid = gc_clrq_msg_cls.
      ls_message-msgnr = gc_msg_cls_msgnr-151.
      ls_message-msgty = gc_message_type-error.
      ls_message-msgv1 = ls_vbap-vbeln.
      ls_message-msgv2 = ls_vbap-posnr.
      APPEND ls_message TO gt_messages.
      IF gs_variables-call_from_ui IS INITIAL.
        CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
          EXPORTING
            it_messages = gt_messages.
        CLEAR gt_messages.
      ENDIF.
      EXIT.
    ENDIF.
    CHECK gt_bill_pre_data IS NOT INITIAL.



    IF <lwa_data> IS ASSIGNED.
      UNASSIGN <lwa_data>.
    ENDIF.

    "--AMISHARMA - moving this up so that the check happens before any other processing
*    LOOP AT gt_bill_pre_data ASSIGNING <lwa_data>.
*      IF <lv_data> IS ASSIGNED.
*        UNASSIGN <lv_data>.
*      ENDIF.
*      ASSIGN COMPONENT gc_clrqbi_field-ps_psp_pnr OF STRUCTURE <lwa_data> TO <lv_data>.
*      CLEAR ls_vbap.
*      READ TABLE gt_contract_itm INTO ls_vbap
*        WITH KEY ps_psp_pnr = <lv_data>.
*      "Put messages in GT_MESSAGES
*      IF ls_vbap-faksp IS NOT INITIAL.
*        "Put messages in GT_MESSAGES
*
*        CLEAR ls_message.
*        ls_message-msgid = gc_clrq_msg_cls.
*        ls_message-msgnr = gc_msg_cls_msgnr-070.
*        ls_message-msgty = gc_message_type-information.
*        ls_message-msgv1 = ls_vbap-vbeln.
*        ls_message-msgv2 = ls_vbap-posnr.
*        APPEND ls_message TO gt_messages.
*
*        lv_block_bill = abap_true.
*      ENDIF.
*    ENDLOOP.
*
*    IF lv_block_bill = abap_true.
*      EXIT.
*    ENDIF.


    PERFORM create_ebdr_proforma USING lv_commit_work.

    CLEAR gt_bill_pre_data_all.
    gt_bill_pre_data_all = gt_bill_pre_data.
    CLEAR gt_bill_pre_data.

    LOOP AT gt_bill_pre_data_all INTO DATA(ls_bill_pre_data).
      IF ls_bill_pre_data-netwr GT 0.                      "lt_pos = +ve netwr with debit auart and bdrty + neg netwr w/o credit values
        IF ls_bill_pre_data-auart IS NOT INITIAL AND
           ls_bill_pre_data-bdrty IS NOT INITIAL.
          APPEND ls_bill_pre_data TO lt_posv_bill_pre.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-164.
          gs_messages-msgty = gc_message_type-error.
          gs_messages-msgv1 = ls_bill_pre_data-bill_item.
          gs_messages-msgv2 = ls_bill_pre_data-bitype.
          APPEND gs_messages TO gt_messages.

        ENDIF.

      ELSEIF ls_bill_pre_data-netwr LT 0.                        "lt_neg = -ve netwr with credit values
        IF ls_bill_pre_data-auart IS INITIAL OR
           ls_bill_pre_data-bdrty IS INITIAL.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-164.
          gs_messages-msgty = gc_message_type-error.
          gs_messages-msgv1 = ls_bill_pre_data-bill_item.
          gs_messages-msgv2 = ls_bill_pre_data-bitype.
          APPEND gs_messages TO gt_messages.
        ELSEIF ls_bill_pre_data-cr_auart IS NOT INITIAL AND
            ls_bill_pre_data-cr_bdrty IS NOT INITIAL.
          APPEND ls_bill_pre_data TO lt_neg_bill_pre.
        ELSEIF ls_bill_pre_data-auart IS NOT INITIAL AND
           ls_bill_pre_data-bdrty IS NOT INITIAL.
          APPEND ls_bill_pre_data TO lt_posv_bill_pre.
        ENDIF.

      ENDIF.
    ENDLOOP.

    SORT lt_posv_bill_pre BY grpid splt_id auart bdrty.

    SORT lt_neg_bill_pre BY grpid splt_id cr_auart cr_bdrty.

    DO 2 TIMES.
      CASE sy-index.
        WHEN 1.
          lt_bill_pre_data = lt_posv_bill_pre.
          DELETE ADJACENT DUPLICATES FROM lt_bill_pre_data COMPARING grpid splt_id auart bdrty.
          DATA(lv_pos_flag) = 1.

        WHEN 2.
          lt_bill_pre_data = lt_neg_bill_pre.
          DELETE ADJACENT DUPLICATES FROM lt_bill_pre_data COMPARING grpid splt_id cr_auart cr_bdrty.
          lv_pos_flag = 2.
      ENDCASE.

      LOOP AT lt_bill_pre_data INTO ls_bill_pre_data.
        CLEAR: gt_bill_pre_data, lt_ebdr_data,
                                           lt_bdr_ptr,
                                           lt_condition_data,
                                           ls_control_data,
                                           ls_administration_data,
                                           lt_cds_fields,
                                           lt_xref_docs.
        CASE lv_pos_flag.
          WHEN 1.
*              Instead of looping gt_bill_pre_all, loop at lt_pos and lt_neg,
*              to avoid billing same bill item twice when the bill item has both debit and credit value
            LOOP AT lt_posv_bill_pre INTO DATA(lwa_bill_pre) WHERE
              grpid   = ls_bill_pre_data-grpid   AND
              splt_id = ls_bill_pre_data-splt_id AND
              auart   = ls_bill_pre_data-auart   AND
              bdrty   = ls_bill_pre_data-bdrty.
              APPEND lwa_bill_pre TO gt_bill_pre_data.
            ENDLOOP.
          WHEN 2.
            LOOP AT lt_neg_bill_pre INTO lwa_bill_pre WHERE
              grpid    = ls_bill_pre_data-grpid   AND
              splt_id  = ls_bill_pre_data-splt_id AND
              cr_auart = ls_bill_pre_data-cr_auart   AND
              cr_bdrty = ls_bill_pre_data-cr_bdrty.
              APPEND lwa_bill_pre TO gt_bill_pre_data.
            ENDLOOP.
        ENDCASE.



        PERFORM prepare_ebdr_data CHANGING gt_bill_pre_data
                                           lt_ebdr_data
                                           lt_bdr_ptr
                                           lt_condition_data
                                           ls_control_data
                                           ls_administration_data
                                           lt_cds_fields
                                           lt_xref_docs.

        IF lt_ebdr_data IS INITIAL.
          "Message that BDR creation is not possible.

          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-049.
          gs_messages-msgty = gc_message_type-information.
          APPEND gs_messages TO gt_messages.

          "SHOW MESSAGES
          IF gs_variables-call_from_ui IS INITIAL.
            CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
              EXPORTING
                it_messages = gt_messages.
            CLEAR gt_messages.
          ENDIF.
          EXIT.
        ENDIF.

        CALL FUNCTION 'BAPI_EBDR_CREATEMULTIPLE'
          EXPORTING
            is_control_data            = ls_control_data
            is_administration_data     = ls_administration_data
            it_data                    = lt_ebdr_data
            it_condition_data          = lt_condition_data
            it_partner_data            = lt_bdr_ptr
          IMPORTING
            et_ebdrcreateddoc          = lt_ebdrcreateddoc_bufr
            et_ebdrcreateddocitem      = lt_ebdrcreateddocitem
            et_ebdrcreatefaileddocitem = lt_ebdrcreatefaileddocitem
            et_message                 = lt_message
            return                     = lt_return.

        IF sy-subrc <> 0 OR line_exists( lt_message[ systemmessagetype = 'E' ] ).  "++AMISHARMA DCLM 6644

          LOOP AT lt_message INTO lwa_message.

            CLEAR gs_messages.
*          gs_messages-msgid = lwa_message-systemmessagetype. "DCLM - 6365
            gs_messages-msgid = lwa_message-systemmessageidentification.
            gs_messages-msgnr = lwa_message-systemmessagenumber.
            gs_messages-msgty = lwa_message-systemmessagetype.
            gs_messages-msgv1 = lwa_message-systemmessagevariable1.
            gs_messages-msgv2 = lwa_message-systemmessagevariable2.
            gs_messages-msgv3 = lwa_message-systemmessagevariable3.
            gs_messages-msgv4 = lwa_message-systemmessagevariable4.
            APPEND gs_messages TO gt_messages.

            lwa_rtbsgcl-mtype = lwa_message-systemmessagetype.
            lwa_rtbsgcl-msgid = lwa_message-systemmessageidentification.
            lwa_rtbsgcl-msgnr = lwa_message-systemmessagenumber.
            lwa_rtbsgcl-msgv1 = lwa_message-systemmessagevariable1.
            lwa_rtbsgcl-msgv2 = lwa_message-systemmessagevariable2.
            lwa_rtbsgcl-msgv3 = lwa_message-systemmessagevariable3.
            lwa_rtbsgcl-msgv4 = lwa_message-systemmessagevariable4.

            IF NOT lwa_char_and_freq-logsm IS INITIAL.
              CLEAR ls_msg_type.
              ls_msg_type-sign = gc_range_tbl_sign-include.
              ls_msg_type-option = gc_operator-equal.
              ls_msg_type-low = gc_message_type-succes.
              APPEND ls_msg_type TO lr_msg_type.
            ENDIF.

            IF NOT lwa_char_and_freq-logem IS INITIAL.
              CLEAR ls_msg_type.
              ls_msg_type-sign = gc_range_tbl_sign-include.
              ls_msg_type-option = gc_operator-equal.
              ls_msg_type-low = gc_message_type-error.
              APPEND ls_msg_type TO lr_msg_type.
            ENDIF.

            IF NOT lwa_char_and_freq-logim IS INITIAL.
              CLEAR ls_msg_type.
              ls_msg_type-sign = gc_range_tbl_sign-include.
              ls_msg_type-option = gc_operator-equal.
              ls_msg_type-low = gc_message_type-information.
              APPEND ls_msg_type TO lr_msg_type.
            ENDIF.

          ENDLOOP.

        ELSE.

          lwa_rtbsgcl-mtype = gc_message_type-succes.
          lwa_rtbsgcl-msgid = gc_rtbs_msg_cls.
          lwa_rtbsgcl-msgnr = gc_msg_cls_msgnr-030.
          CLEAR lwa_rtbsgcl.

        ENDIF.


        IF lwa_rtbsgcl-mtype IN lr_msg_type[].

        ENDIF.


        IF lt_ebdrcreatefaileddocitem IS NOT INITIAL.
****raise message confirming if user wants to commit with few item erroring out
****If user says it is ok them update calc req items and commit else rollback
        ENDIF.

        IF lt_ebdrcreateddoc_bufr IS NOT INITIAL.

          APPEND LINES OF lt_ebdrcreateddoc_bufr TO lt_ebdrcreateddoc.

          lv_kposn = gs_clrqdoc_infocus-x-crhdr-xrfli.
          lwa_xref_doc-vbeln = gs_clrqdoc_infocus-x-crhdr-xrfdn.
          APPEND lwa_xref_doc TO lt_xref_docs.
          READ TABLE lt_xref_docs INTO lwa_xref_doc
          INDEX lv_xref_doc_tabix.

          LOOP AT gt_bill_pre_data ASSIGNING <lwa_data>.

*          lv_kposn = lv_kposn + 1.
            IF <lwa_data>-xrfin > gs_clrqdoc_infocus-x-crhdr-xrfli.
              gs_clrqdoc_infocus-x-crhdr-xrfli = <lwa_data>-xrfin.
            ENDIF.
*
*          ASSIGN COMPONENT gc_clrqbi_field-clrno   OF STRUCTURE <lwa_data> TO <lv_clrno>.
*          ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE <lwa_data> TO <lv_rtbbinr>.
*          IF <lv_clrno> IS ASSIGNED AND <lv_rtbbinr> IS ASSIGNED.
*            READ TABLE gs_clrqdoc_infocus-x-crbinr TRANSPORTING NO FIELDS
*                                                   WITH KEY clrno = <lv_clrno>
*                                                            bill_item = <lv_rtbbinr>
*                                                            bstat = gc_ibill_stat-pbd_in_progress.
*            IF sy-subrc IS INITIAL.
*              CONTINUE.
*            ENDIF.
*            UNASSIGN: <lv_clrno>, <lv_rtbbinr>.
*          ENDIF.

*          CLEAR lwa_bdr_item .
*          IF lv_kposn = gc_kposn_low.
*            lv_xref_doc_tabix = lv_xref_doc_tabix + 1.
*            READ TABLE lt_xref_docs INTO lwa_xref_doc
*            INDEX lv_xref_doc_tabix.
*            lv_kposn = lv_kposn + 1.
*          ENDIF.
            READ TABLE lt_ebdrcreateddocitem INTO lwa_bdr_item
            WITH KEY precedingdocument = <lwa_data>-xrfdn
                     precedingdocumentitem = <lwa_data>-xrfin.
            CHECK sy-subrc = 0.


*        CLEAR lv_where.
*        PERFORM prep_ebdr_critm_where_cls USING <lwa_data>
*                                                lt_cds_fields
*                                                abap_true
*                                       CHANGING lv_where.

*        CLEAR:lt_critm.
*
**        SELECT * FROM /cgdc/_clrqit
**          WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno
**            AND clrsit NE  @gc_clrsit_low
**            AND psdat IS INITIAL
**            AND istat = @gc_ibill_stat-postponed "'P'
**          INTO CORRESPONDING FIELDS OF TABLE @lt_critm_temp
**          .
*
*        INSERT lv_where INTO TABLE lt_whitelist .
*        TRY.
*            lv_where   = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_where whitelist = lt_whitelist ).
*          CATCH cx_abap_not_in_whitelist.
*        ENDTRY.
*
*        SELECT * FROM /cgdc/_clrqit
*          INTO TABLE @lt_critm
*          WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno
*          AND clrsit NE  @gc_clrsit_low
*          AND (lv_where).
*
*        CHECK sy-subrc = 0.
*          SORT lt_critm_temp BY clrno clrit clrsit clrdit.
*          SORT lt_critm BY rtbbinr.
*          DELETE ADJACENT DUPLICATES FROM lt_critm COMPARING rtbbinr.

*        LOOP AT lt_critm INTO lwa_critm .

            READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_clrqbi>
                                  WITH KEY clrno     = <lwa_data>-clrno " lwa_critm-clrno
                                           bill_item = <lwa_data>-bill_item " lwa_critm-rtbbinr
                                           bitype    = <lwa_data>-bitype. " lwa_critm-bityp.

            IF sy-subrc IS INITIAL.
              <lwa_clrqbi>-updkz = gc_updkz_update.
              <lwa_clrqbi>-bstat = /cgdc/cl_clrq_process=>gc_itm_bill_status-billing_req..
              CLEAR : lwa_crdfl.
              lwa_crdfl-clrno = <lwa_data>-clrno. "lwa_critm-clrno.
              lwa_crdfl-rtbbinr = <lwa_data>-bill_item. "lwa_critm-rtbbinr
              IF <lwa_clrqbi>-netwr < 0.
                IF <lwa_data>-cr_bdrty IS NOT INITIAL. " BDRTY and CR_BDRTY is getting uppdate pre_data insted bi using predata
                  lwa_crdfl-sbqty = <lwa_data>-cr_bdrty.
                ELSEIF gs_rtbp-cr_bdrty IS NOT INITIAL AND <lwa_data>-bdrty IS INITIAL.
                  lwa_crdfl-sbqty = gs_rtbp-cr_bdrty.
                ELSEIF <lwa_data>-bdrty IS NOT INITIAL.
                  lwa_crdfl-sbqty = <lwa_data>-bdrty.
                ENDIF.
              ELSE.
                IF <lwa_data>-bdrty IS NOT INITIAL.
                  lwa_crdfl-sbqty = <lwa_data>-bdrty.
                ELSEIF gs_rtbp-bdrty IS NOT INITIAL.
                  lwa_crdfl-sbqty = gs_rtbp-bdrty.
                ENDIF.
              ENDIF.

*            lwa_crdfl-sbqty = gs_rtbp-bdrty.
              lwa_crdfl-sbdct = gc_sub_doc_cat-billing_doc_req.
              lwa_crdfl-sbqdc = lwa_bdr_item-extbillingdocrequest.
              lwa_crdfl-sbqit = lwa_bdr_item-extbillingdocrequestitem.
              lwa_crdfl-netwr = <lwa_clrqbi>-netwr.
              lwa_crdfl-waerk = <lwa_clrqbi>-waerk.
              lwa_crdfl-xrfdn = <lwa_data>-xrfdn. "lwa_xref_doc-vbeln.
              lwa_crdfl-xrfin = <lwa_data>-xrfin. "lv_kposn.
              lwa_crdfl-erdat = sy-datum.
              lwa_crdfl-ernam = sy-uname.
              lwa_crdfl-erzet = sy-uzeit.
              lwa_crdfl-updkz = gc_updkz_new.
              APPEND lwa_crdfl TO gs_clrqdoc_infocus-x-crdfl.
            ENDIF.

*        ENDLOOP.

          ENDLOOP.
          CLEAR gt_calc_req_cond[].

          IF  gs_clrqdoc_infocus-y-crhdr IS INITIAL.
            gs_clrqdoc_infocus-y-crhdr = gs_clrqdoc_infocus-x-crhdr.
          ENDIF.

          CLEAR gs_clrqdoc_infocus-x-crhdr-rel_calc_dt.
          gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.

        ENDIF.

        PERFORM document_save USING  gs_clrqdoc_infocus
                                      lv_commit_work .
        CLEAR gs_variables-key_only.
        PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno CHANGING gs_clrqdoc_infocus.
        gs_variables-key_only = 'X'.

      ENDLOOP.

    ENDDO.


*
*    LOOP AT gt_bill_pre_data ASSIGNING <lwa_data>.
*
*      PERFORM prep_ebdr_critm_where_cls USING <lwa_data>
*                                              lt_cds_fields
*                                              abap_false
*                                     CHANGING lv_where.
*
*
*
*      CLEAR:lt_critm.
***DCLM 5764
*    SELECT * FROM /cgdc/_clrqit
*      WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno
*        AND clrsit NE  @gc_clrsit_low
*        AND psdat IS INITIAL
*        AND istat = @gc_ibill_stat-postponed
*      INTO CORRESPONDING FIELDS OF TABLE @lt_critm_temp.

    PERFORM open_postp_itms_for_next_bill USING lv_commit_work.           " DCLM 7145
***
    CLEAR: lv_vbeln.
    PERFORM create_pbd USING lt_ebdrcreateddoc
                       CHANGING lv_vbeln. "Changing is no more in used NMOTWANI
    "Moved Below in Message to Create_pbd subroutine NMOTWANI
*    IF NOT lv_vbeln IS INITIAL.
*      CLEAR gs_messages.
*      gs_messages-msgid = gc_clrq_msg_cls.
*      gs_messages-msgnr = gc_msg_cls_msgnr-050.
*      gs_messages-msgty = gc_message_type-information.
*      gs_messages-msgv1 = lv_vbeln.
*      APPEND gs_messages TO gt_messages.
*    ELSE.
*
*      CLEAR gs_messages.
*      gs_messages-msgid = gc_clrq_msg_cls.
*      gs_messages-msgnr = gc_msg_cls_msgnr-010.
*      gs_messages-msgty = gc_message_type-information.
*      gs_messages-msgv1 = lwa_bdr_item-extbillingdocrequest.
*      APPEND gs_messages TO gt_messages.
**      ENDIF.
*    ENDIF.
*    IF gs_variables-call_from_ui IS INITIAL.
*      CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
*        EXPORTING
*          it_messages = gt_messages.
*      CLEAR gt_messages.
*    ENDIF.
  ENDIF.

ENDFORM.
FORM calculate_overhead_for_doc USING is_cobk        TYPE cobk
                                      it_coep        TYPE tt_coep_ext
                                      iv_ovrhd_date  TYPE d
                                      iv_val_perio   TYPE co_perio
                                CHANGING ct_coep     TYPE tt_coep
                                         ct_coep_add TYPE tt_coep_add.

  DATA: lv_overhead_doc_count TYPE i           VALUE 1,
        lv_zlenr              TYPE coep-zlenr,
        lv_buzei              TYPE coep-buzei,
        lt_coep_per_object    TYPE tt_coep_ext.

  FIELD-SYMBOLS <ls_coep> TYPE coep_ext.

* Calculate the overhead for each object
  LOOP AT it_coep ASSIGNING <ls_coep>
                  WHERE wrttp = con_wrttp_actual AND "Only for actual postings
                        belnr = is_cobk-belnr    AND
                        beknz NE gc_beknz-stlmt_cr
                  GROUP BY <ls_coep>-objnr.
*   Collect all line items of the same object
    CLEAR lt_coep_per_object.
    LOOP AT GROUP <ls_coep> ASSIGNING FIELD-SYMBOL(<ls_coep_per_object>).
      APPEND <ls_coep_per_object> TO lt_coep_per_object.
    ENDLOOP.

*   Calculate the overhead per object
    PERFORM calculate_overhead_per_object
            USING <ls_coep>-objnr
                  is_cobk
                  <ls_coep>
                  iv_ovrhd_date
                  iv_val_perio
                  lt_coep_per_object
         CHANGING ct_coep
                  ct_coep_add
                  lv_overhead_doc_count
                  lv_zlenr
                  lv_buzei.

*   Any errors processing the object?
    IF g_max_error_severity > con_msg_severity-warning.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "calculate_overhead_for_doc

*&---------------------------------------------------------------------*
*&      Form  calculate_overhead_per_object
*&---------------------------------------------------------------------*
*       Set up parameters for call to overhead function modules
*
*       Format required parameters:
*       - Pricing communcation structures KOMK, KOMP
*       - Line item data as it would be in totals tables COSS or COSP
*
*       On return from overhead calculation, the overhead line items
*       are stored in global itabs for later posting.
*----------------------------------------------------------------------*
FORM calculate_overhead_per_object
      USING iv_objnr              TYPE j_objnr
            is_cobk               TYPE cobk
            is_coep               TYPE coep_ext
            iv_ovrhd_date         TYPE d
            iv_val_perio          TYPE co_perio
            it_coep               TYPE tt_coep_ext "All items of same object in document
   CHANGING ct_coep               TYPE tt_coep
            ct_coep_add           TYPE tt_coep_add
            cv_overhead_doc_count TYPE i
            cv_zlenr              TYPE dzlenr
            cv_buzei              TYPE co_buzei.

  DATA: lt_coiob          TYPE tt_coiob,
        ls_komk           TYPE komk,
        ls_komp           TYPE komp,
        lt_cossa          TYPE t_cossa,
        lt_cospa          TYPE t_cospa,
        ls_tksvd          TYPE tksvd,
        lv_doc_item_count TYPE i,
        lv_zlenr_temp     TYPE dzlenr,
        ls_coep           TYPE coep,
        ls_coep_add       TYPE coep_add,

*       Params for calling K_SURCHARGE_CALCULATE:
        lt_coep_debit     TYPE tt_coep_ext,
        lt_coep_credit    TYPE tt_coep_ext,
        lv_wert_dat       TYPE d,
        lt_excl_vorgang   TYPE STANDARD TABLE OF co_vorgang.

  STATICS: sv_active_checked_budat TYPE datum,
           sv_function_active      TYPE fm_function_active,
           sv_fund_active          TYPE fm_fund_active,
           sv_grant_active         TYPE gm_grant_active,
           sv_subkey_active        TYPE fcom_s_subkey_active.


  FIELD-SYMBOLS: <coep>    TYPE coep,
                 <ls_coep> TYPE coep_ext,
                 <coiob>   TYPE coiob.

  IF sv_active_checked_budat <> is_cobk-budat.
    sv_active_checked_budat = is_cobk-budat.
    CALL FUNCTION 'K_GET_ACTIVE_DIMENSIONS'
      EXPORTING
        i_date            = is_cobk-budat
      IMPORTING
        e_function_active = sv_function_active
        e_fund_active     = sv_fund_active
        e_grant_active    = sv_grant_active
        es_subkey_active  = sv_subkey_active.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.

* For message context
  g_objnr_for_messages = iv_objnr.
  g_msg_context_needed  = con_on.

* Read object master data and fill pricing communcation structures
  PERFORM fill_pricing_comm_structure
          USING    iv_objnr
                   iv_ovrhd_date
                   is_cobk-budat
                   iv_val_perio
                   is_coep-owaer
                   is_coep
          CHANGING ls_komk
                   ls_komp
                   lt_coiob.

* Any errors reading master data?
  IF g_max_error_severity > con_msg_severity-warning.
    EXIT.
  ENDIF.

* Does the object have an overhead costing sheet assigned?
  CHECK NOT ls_komk-kalsm IS INITIAL.

* Fill in FM fields for active applications
  IF sv_fund_active = con_on.
    ls_komk-geber = is_coep-geber.
  ENDIF.
  IF sv_function_active = con_on OR
    sv_subkey_active-f_cogs_function = con_on.
    ls_komk-fkber = is_coep-fkber.
  ENDIF.
  IF sv_grant_active = con_on.
    ls_komk-grant_nbr = is_coep-grant_nbr.
  ENDIF.

* Access the only row in COIOB table
  READ TABLE lt_coiob ASSIGNING <coiob> INDEX 1.

* Check whether costing sheet exists
  CALL FUNCTION 'READ_T683'
    EXPORTING
      i_kalsm   = ls_komk-kalsm
      i_kappl   = gc_kappl-orders                                       "#EC NOTEXT
      i_kvewe   = gc_kvewe-pricing                                        "#EC NOTEXT
    EXCEPTIONS
      not_found = 1
      OTHERS    = 2.
  IF sy-subrc <> 0.
    MESSAGE e462(ka) WITH ls_komk-kalsm INTO DATA(lv_message).
    PERFORM message_add.
    EXIT.
  ENDIF.

  LOOP AT it_coep ASSIGNING FIELD-SYMBOL(<ls_coep_lednr>)   "Do it per ledger
                  GROUP BY <ls_coep_lednr>-lednr.
    IF <ls_coep_lednr>-lednr <> gc_lednr-std_lednr.
      ls_komk-rldnr = <ls_coep_lednr>-lednr.
* Get version from finsc_cmp_versnd
    ENDIF.
    LOOP AT GROUP <ls_coep_lednr> ASSIGNING <ls_coep>
                                  GROUP BY <ls_coep>-vornr.

      CLEAR: lt_cospa,
             lt_cossa.
      LOOP AT GROUP <ls_coep> ASSIGNING FIELD-SYMBOL(<ls_coep_vornr>).
*       Fill itab of either COSPA or COSSA totals table with a single entry for
*       the object we're processing.
        PERFORM fill_cossa_cospa_table USING <ls_coep_vornr>
                                             is_cobk-vrgng
                                    CHANGING lt_cossa
                                             lt_cospa.
      ENDLOOP.

*     Any errors filling totals tables?
      IF g_max_error_severity > con_msg_severity-warning.
        EXIT.
      ENDIF.

*     Determine which date is used as the basis for overhead calculations:
      CALL METHOD cl_k_ksvd_config=>profile_determine
        EXPORTING
          i_kokrs   = is_cobk-kokrs
          i_vorgang = is_cobk-vrgng
        IMPORTING
          e_tksvd   = ls_tksvd.

*     Parameter WERT_DAT of K_SURCHARGE_CALCULATE specified the date to
*     use for overhead valuation.  If this business transaction is
*     configured to use special valuation date, the COBK-VALDT of the
*     original document has been passed along in i_ovrhd_date, and we
*     will pass it in the WERT_DAT parameter. Otherwise, leave WERT_DAT blank
*     for default date behavior.
      IF ls_tksvd-for_overhead = con_on.
        lv_wert_dat = iv_ovrhd_date.
      ENDIF.

*     Remember this date for when we post the document
      g_wert_dat_used = lv_wert_dat.

*     Get version
      DATA lv_version TYPE versn.
      IF <ls_coep_vornr>-lednr = gc_lednr-std_lednr.
        lv_version = gc_versn-act_ver.
      ELSE.
        lv_version = <ls_coep_vornr>-versn.
      ENDIF.

*     Calculate overhead for this object
      CALL FUNCTION 'K_SURCHARGE_CALCULATE'
        EXPORTING
          buchen              = space                                " Do not post
          i_realtime_overhead = con_on
          bu_datum            = is_cobk-budat
          export_steuerung    = con_kasc_control-export_no_delta     " Value = 3
          gjahr_bis           = is_cobk-gjahr
          gjahr_von           = is_cobk-gjahr
          import_steuerung    = con_kasc_control-import_cossa_cospa  " Value = 1
          init                = con_on
          kokrs               = is_cobk-kokrs
          kurst               = space                                " KASC will determine KURST
          objnr               = iv_objnr
          objwaer             = <coiob>-owaer
          periode_bis         = <ls_coep_vornr>-perio
          periode_von         = <ls_coep_vornr>-perio
          version             = lv_version
          tkomk               = ls_komk
          tkomp               = ls_komp
          vorgang             = con_vrgng-realtime_overhead
          wert_dat            = lv_wert_dat                          " Valuation date for overhead costing
          wrttpw              = is_coep-wrttp                        " Value type actual 04
        TABLES
          excl_vorgang        = lt_excl_vorgang                      " Empty table for mandatory parameter
          xcoep               = lt_coep_debit                        " Calculated overhead debit items
          xcoepe              = lt_coep_credit                       " Calculated overhead credit items
          xcoiob              = lt_coiob                             " Object info
          xcospa              = lt_cospa                             " COEP data as it would be in totals table
          xcossa              = lt_cossa                             " COEP data as it would be in totals table
        EXCEPTIONS
          fehler_protokoll    = 1
          ungueltiger_zustand = 2
          OTHERS              = 3.
      IF sy-subrc <> 0.
      ENDIF.

*     If error during function, get the messages out of the handler and
*     check for E and A message types
      IF sy-subrc <> 0.
        CALL FUNCTION 'MESSAGES_COUNT'
          IMPORTING
            max_severity = g_max_error_severity.
      ENDIF.

      IF g_max_error_severity > con_msg_severity-warning.
        EXIT.
      ENDIF.

*     Treat the overhead for each object as a document item:
      ADD 1 TO cv_zlenr.

*     Save COIOB data collected by the function into a global itab
*     to pass back during posting phase:
      READ TABLE gt_coiob_buffer ASSIGNING FIELD-SYMBOL(<ls_coiob_buffer>)                   "sFIN3.0
           WITH TABLE KEY vrgng = is_cobk-vrgng orgvg = is_cobk-orgvg perab = is_cobk-perab "2870106
                          kokrs = is_cobk-kokrs belnr = is_cobk-belnr. "3068128
      IF sy-subrc <> 0.
        INSERT VALUE #( vrgng = is_cobk-vrgng orgvg = is_cobk-orgvg perab = is_cobk-perab "2870106
                        kokrs = is_cobk-kokrs belnr = is_cobk-belnr ) "3068128
               INTO TABLE gt_coiob_buffer ASSIGNING <ls_coiob_buffer>.
      ENDIF.
      LOOP AT lt_coiob ASSIGNING <coiob>.
        COLLECT <coiob> INTO <ls_coiob_buffer>-t_coiob.
      ENDLOOP.
      SORT <ls_coiob_buffer>-t_coiob BY objnr datbi.        "3070285

*     Read last overhead item already in global itab to get its line
*     number.  If the overhead lines for this object will
*     cause document split due to 999 line limit; then indicate
*     this split by changing the BELNR and resetting BUZEI
      IF NOT ct_coep IS INITIAL.
        DESCRIBE TABLE ct_coep.
        READ TABLE ct_coep ASSIGNING <coep> INDEX sy-tfill.
        lv_doc_item_count = <coep>-buzei.
      ENDIF.

      DESCRIBE TABLE lt_coep_debit.
      ADD sy-tfill TO lv_doc_item_count.
      DESCRIBE TABLE lt_coep_credit.
      ADD sy-tfill TO lv_doc_item_count.

      IF lv_doc_item_count > 998.
        ADD 1 TO cv_overhead_doc_count.
        CLEAR cv_buzei.
      ENDIF.

      MOVE cv_zlenr TO lv_zlenr_temp.

*     Add debit and credit items for this line to global itabs
      LOOP AT lt_coep_debit ASSIGNING <ls_coep>.
        ADD 1 TO cv_buzei.
        <ls_coep>-belnr = cv_overhead_doc_count.
        <ls_coep>-buzei = cv_buzei.
        <ls_coep>-refbz = is_coep-buzei.
        <ls_coep>-zlenr = cv_zlenr.
        <ls_coep>-bw_refbz = cv_buzei.
        MOVE-CORRESPONDING <ls_coep> TO ls_coep.
        APPEND ls_coep TO ct_coep.
        MOVE-CORRESPONDING <ls_coep> TO ls_coep_add.
        ls_coep_add-rldnr = <ls_coep>-lednr.
*      Add additional parameters                                  "3117634
        ls_coep_add-vornr = <ls_coep_vornr>-vornr.          "3117634
        ls_coep_add-arbid = <ls_coep_vornr>-arbid.          "3117634
        APPEND ls_coep_add TO ct_coep_add.
        ADD 1 TO cv_zlenr.
      ENDLOOP.

      MOVE lv_zlenr_temp TO cv_zlenr.

      LOOP AT lt_coep_credit ASSIGNING <ls_coep>.
        ADD 1 TO cv_buzei.
        <ls_coep>-belnr = cv_overhead_doc_count.
        <ls_coep>-buzei = cv_buzei.
        <ls_coep>-refbz = is_coep-buzei.
        <ls_coep>-zlenr = cv_zlenr.
        <ls_coep>-bw_refbz = cv_buzei.
        MOVE-CORRESPONDING <ls_coep> TO ls_coep.
        APPEND ls_coep TO ct_coep.
        MOVE-CORRESPONDING <ls_coep> TO ls_coep_add.
        ls_coep_add-rldnr = <ls_coep>-lednr.
*      Add additional parameters                                  "3117634
        ls_coep_add-vornr = <ls_coep_vornr>-vornr.          "3117634
        ls_coep_add-arbid = <ls_coep_vornr>-arbid.          "3117634
        APPEND ls_coep_add TO ct_coep_add.
        ADD 1 TO cv_zlenr.
      ENDLOOP.

      SUBTRACT 1 FROM cv_zlenr.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                               " calculate_overhead_per_object
*&---------------------------------------------------------------------*
*& Form convert_cost_cond
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LT_KOMV_COST
*&      <-- LT_KOMV
*&---------------------------------------------------------------------*
FORM convert_cost_cond  USING lt_komv_cost TYPE komv_tab
                     CHANGING lv_status
                              lt_komv TYPE komv_tab.

  DATA:lwa_komv            LIKE LINE OF lt_komv,
       lt_kmov_for_stunr   TYPE komv_tab,
       lwa_kmov_for_stunr  TYPE LINE OF komv_tab,
       lv_kalsm            TYPE kalsm,
       lt_costsheet_condn  TYPE /cgdc/tt_clrtcscc,
       lwa_costsheet_condn TYPE /cgdc/s_clrtcscc,
       lt_procedure_data   TYPE TABLE OF t683s,
       lwa_procedure_data  TYPE t683s.

  FIELD-SYMBOLS: <lwa_procedure_data> TYPE t683s,
                 <lwa_komv>           TYPE komv.
  lv_kalsm = gs_clrqdoc_infocus-x-crhdr-kalsm.


  PERFORM select_costsheet_copy_cond USING gs_clrqdoc_infocus-x-crhdr-clrqt
                                  CHANGING lt_costsheet_condn.
  PERFORM select_pricingprocedure_data USING gs_clrqdoc_infocus-x-crhdr-kalsm
                                       CHANGING lt_procedure_data.

  LOOP AT lt_komv_cost INTO lwa_komv.
    CLEAR lwa_costsheet_condn.
    READ TABLE lt_costsheet_condn INTO lwa_costsheet_condn
    WITH KEY cscon = lwa_komv-kschl
    BINARY SEARCH.
    IF sy-subrc NE 0.
      lv_status = gc_costingsheet_status-active_but_incomp_mapping.
      CONTINUE.
    ELSE.
      IF lwa_costsheet_condn-excld EQ abap_true.
        CONTINUE.
      ENDIF.
    ENDIF.
    READ TABLE lt_procedure_data ASSIGNING <lwa_procedure_data>
    WITH KEY kschl =  lwa_costsheet_condn-clrcn
    BINARY SEARCH.

    CHECK lwa_costsheet_condn IS NOT INITIAL
    AND <lwa_procedure_data> IS ASSIGNED .
    UNASSIGN:<lwa_komv>.
    READ TABLE lt_komv ASSIGNING <lwa_komv>
    WITH KEY kschl = lwa_costsheet_condn-clrcn.
    IF <lwa_komv> IS ASSIGNED.
      <lwa_komv>-kbetr = <lwa_komv>-kbetr +  lwa_komv-kbetr.
      <lwa_komv>-kwert = <lwa_komv>-kwert +  lwa_komv-kwert.
    ELSE.
      APPEND INITIAL LINE TO lt_komv ASSIGNING <lwa_komv>.
      MOVE-CORRESPONDING lwa_komv TO <lwa_komv>.
      <lwa_komv>-stunr = <lwa_procedure_data>-stunr.
      <lwa_komv>-zaehk = <lwa_procedure_data>-zaehk.
      <lwa_komv>-kappl = gc_kappl-sales.
      <lwa_komv>-kschl = lwa_costsheet_condn-clrcn.
      <lwa_procedure_data>-zaehk = <lwa_procedure_data>-zaehk + 1.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_blnpl_item_exists
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_BLP_DOC_X_BLPLN
*&      <-- LV_ADD
*&---------------------------------------------------------------------*
FORM check_blnpl_item_exists  USING    ls_blpln TYPE /cgdc/s_blnpln
                              CHANGING lv_add.
  IF gs_clrqdoc_infocus-x-crhdr-updkz NE gc_updkz_new.
    READ TABLE gt_clrq_blpl_exst
    TRANSPORTING NO FIELDS
    WITH KEY vbeln = ls_blpln-vbeln
             posnr = ls_blpln-posnr
             billitem = ls_blpln-billitem.
    IF sy-subrc NE 0.
      lv_add = abap_true.
    ENDIF.
  ELSE.
    lv_add = abap_true.
  ENDIF.




ENDFORM.
FORM create_post_rej_line CHANGING ls_clrqit TYPE /cgdc/s_clrqit_fcat
                                   ls_grid_data TYPE /cgdc/s_clrq_postpone.

  gs_variables-calc_changed = abap_true.
ENDFORM.

FORM check_missing_cost_lines.
  DATA:
    lwa_objnr       TYPE /cgdc/s_objnr,
    lv_count        TYPE i,
    lv_cnt_flg      TYPE flag,
    lv_belnr        TYPE co_belnr,
    lv_clrno        TYPE /cgdc/clrqno,
    lv_where_clause TYPE string,
    lv_valid,
    lv_maxod        TYPE /cgdc/maxod.

  REFRESH: gt_objnr.
  CLEAR: "lv_count,
         lv_maxod,
         lwa_objnr.



  CALL METHOD /cgdc/cl_rtb_source_util=>missing_cost_lines
    EXPORTING
      iv_rtbpn = gs_contract_hdr-/cgdc/rtbpn
      iv_clrno = gs_clrqdoc_infocus-x-crhdr-clrno
      iv_vbeln = gs_contract_hdr-vbeln
      iv_bukrs = gs_contract_hdr-bukrs_vf
      iv_kokrs = gs_contract_hdr-kokrs
      it_item  = gt_contract_itm
    IMPORTING
      iv_flag  = lv_cnt_flg.


  CLEAR gs_variables-max_on_dmd_excd.
  IF NOT lv_cnt_flg IS INITIAL.
    gs_variables-max_on_dmd_excd = gc_max_on_dmd_excd-r.
  ELSE.
    CLEAR lv_clrno.
    SELECT SINGLE clrno
      FROM /cgdc/_clrqit
      WHERE clrno EQ @gs_clrqdoc_infocus-x-crhdr-clrno
      AND   clrsit EQ @gc_clrsit_low                        "'000000'
      AND   no_price EQ @abap_true
      INTO @lv_clrno.
    IF sy-subrc EQ 0.
      gs_variables-max_on_dmd_excd = gc_max_on_dmd_excd-y.
    ELSE.
      gs_variables-max_on_dmd_excd = gc_max_on_dmd_excd-g.
    ENDIF.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_costingsheet
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM check_costingsheet  USING    ls_clrq_itm_new    TYPE /cgdc/s_clrqit
                                  lv_objnr   TYPE j_objnr
                                  lv_vbeln   TYPE vbeln_va
                                  lv_posnr   TYPE posnr_va
                                  lv_ovrhd   TYPE d
                         CHANGING lv_csist TYPE /cgdc/clrq_csist
                                  lv_kalsm  TYPE /cgdc/costing_sheet
                                  lv_zschl  TYPE aufzschl.
  DATA:lwa_wbsmcs TYPE /cgdc/_wbsmcst .
  DATA:lwa_rtbclnmcs TYPE /cgdc/_rtbclmcs,
       lwa_prps      TYPE prps,
       lwa_item_catg TYPE /cgdc/t_rtbic,
       lv_subrc      TYPE sy-subrc,
       lv_tabix      TYPE sy-tabix.
  FIELD-SYMBOLS : <lwa_rtbwbsmcs> TYPE /cgdc/_wbsmcst.
  FIELD-SYMBOLS : <lwa_rtbclnmcs> TYPE /cgdc/_rtbclmcs.

  CLEAR : lv_csist,
          lv_kalsm,
          lv_zschl.

  lv_csist = abap_true.
  IF gs_rtbp-achin IS INITIAL.
    lv_csist = space. "No active costing sheet integration at RTB profile
  ENDIF.
  CHECK lv_csist IS NOT INITIAL.

  " Project level CIS-AD Costing Sheet
  READ TABLE gt_rtbwbsmcs INTO lwa_wbsmcs WITH KEY objnr = lv_objnr.
  IF sy-subrc = 4.
    SELECT * FROM /cgdc/_wbsmcst  APPENDING TABLE gt_rtbwbsmcs
      WHERE objnr = lv_objnr .
  ENDIF.
  LOOP AT gt_rtbwbsmcs ASSIGNING <lwa_rtbwbsmcs> WHERE objnr = lv_objnr.
    IF ( <lwa_rtbwbsmcs>-begdat LE lv_ovrhd  AND <lwa_rtbwbsmcs>-enddat GE lv_ovrhd ).
      lv_kalsm = <lwa_rtbwbsmcs>-csheet.
      lv_zschl = <lwa_rtbwbsmcs>-zschl.
      EXIT.
    ENDIF.
  ENDLOOP.

  IF lv_kalsm IS INITIAL.
    "++SOC - Multipayer setup: Determine Costing sheet for Source WBS
    IF ls_clrq_itm_new-cc_pspnr IS NOT INITIAL.
      "check cost collector allocation
      DATA(ls_src_wbs) = VALUE #( gt_add_cost_collector[ vbeln = ls_clrq_itm_new-vgbel
                                wbs_cost_col =  ls_clrq_itm_new-cc_pspnr
                                wbsel = ls_clrq_itm_new-ps_psp_pnr ] OPTIONAL ).
      IF ls_src_wbs IS INITIAL OR ls_src_wbs-multi_payer_ind = abap_false.
        DATA(lv_mpaycsht) = abap_false.
      ELSE.
        lv_mpaycsht = abap_true.
      ENDIF.
    ENDIF.

    IF lv_mpaycsht = abap_false.
      "CIS-AD Cont item Costing sheet.
      READ TABLE gt_rtbclnmcs
      TRANSPORTING NO FIELDS
      WITH KEY vbeln = lv_vbeln
             posnr = lv_posnr.
      IF sy-subrc NE 0.
        SELECT * FROM /cgdc/_rtbclmcs APPENDING TABLE gt_rtbclnmcs
         WHERE vbeln = lv_vbeln AND posnr = lv_posnr.
      ENDIF.

      LOOP AT gt_rtbclnmcs ASSIGNING <lwa_rtbclnmcs>
         WHERE vbeln = lv_vbeln AND posnr = lv_posnr.
        IF ( <lwa_rtbclnmcs>-begdat LE lv_ovrhd  AND <lwa_rtbclnmcs>-enddat GE lv_ovrhd ).
          lv_kalsm = <lwa_rtbclnmcs>-csheet.
          lv_zschl = <lwa_rtbclnmcs>-zschl.
          EXIT.
        ENDIF.
      ENDLOOP.
    ELSE.
      "CIS-AD Master Cont Src WBS Costing sheet.
      READ TABLE gt_rtbmpaycs
      TRANSPORTING NO FIELDS
      WITH KEY srcwbs = ls_clrq_itm_new-cc_pspnr.
      IF sy-subrc NE 0.
        SELECT * FROM /cgdc/t_mlpay_cs APPENDING TABLE gt_rtbmpaycs
         WHERE srcwbs = ls_clrq_itm_new-cc_pspnr.
      ENDIF.

      LOOP AT gt_rtbmpaycs ASSIGNING FIELD-SYMBOL(<lwa_rtbmpaycs>)
         WHERE srcwbs = ls_clrq_itm_new-cc_pspnr.
        IF ( <lwa_rtbmpaycs>-begdat LE lv_ovrhd  AND <lwa_rtbmpaycs>-enddat GE lv_ovrhd ).
          lv_kalsm = <lwa_rtbmpaycs>-csheet.
          lv_zschl = <lwa_rtbmpaycs>-zschl.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
    "++EOC - Multipayer setup: Determine Costing sheet for Source WBS
  ENDIF.

  IF lv_kalsm IS INITIAL.
    "Standard Costing Sheet on Project
    CLEAR: lwa_prps.

    READ TABLE gt_prps INTO lwa_prps
    WITH KEY objnr = lv_objnr
    BINARY SEARCH.
    lv_subrc = sy-subrc.
    lv_tabix = sy-tabix.

    IF lv_subrc IS NOT INITIAL .
      SELECT SINGLE * FROM prps
        INTO lwa_prps
        WHERE objnr = lv_objnr.
    ENDIF.
    IF lv_subrc = 4.
      INSERT lwa_prps INTO gt_prps INDEX lv_tabix.
    ELSEIF lv_subrc = 8.
      APPEND lwa_prps TO gt_prps.
    ENDIF.
    IF sy-subrc = 0.
      lv_kalsm  = lwa_prps-kalsm.
      lv_zschl  = lwa_prps-zschl.
    ENDIF.

  ENDIF.
  IF lv_kalsm IS NOT INITIAL.
    lv_csist = gc_csist-acv_cost_sht. "'A'.   "Active costing sheet integration at RTB profile and WBS.
  ELSE.
    lv_csist = gc_csist-no_cost_sht_at_wbs."'B'.   "No costing sheet at WBS
  ENDIF.


ENDFORM.
FORM create_dyn_fcat_calc_grp CHANGING lt_fcat TYPE lvc_t_fcat.
  TYPES: BEGIN OF ty_tabname,
           tabname TYPE tabname,
         END OF ty_tabname.
  DATA: lv_colpos        TYPE i,
        lv_fieldname(30),
        lt_tabname       TYPE TABLE OF ty_tabname,
        lwa_tabname      TYPE ty_tabname,
        lwa_crgrr        TYPE /cgdc/s_clrqgrr.
  DATA: lt_fcat1           TYPE lvc_t_fcat,
        lt_fcat1_temp      TYPE lvc_t_fcat,
        lt_fcat1_it        TYPE lvc_t_fcat,
        lt_fcat1_ic        TYPE lvc_t_fcat,
        lt_fcat_t          TYPE lvc_t_fcat,
        lt_fcat_tmp        TYPE lvc_t_fcat,
        lt_fcat_komv       TYPE  lvc_t_fcat,
        lwa_calc_group_fun TYPE /cgdc/s_rtbpcgf,
        lwa_fcat           TYPE lvc_s_fcat.
* Get CIS-AD: Realtime Billing Calculation Groups Functions
  SELECT * FROM /cgdc/t_rtbcgstt
    INTO TABLE gt_subtotal_field
    WHERE spras = sy-langu.

* Create Fieldcatlog for KOMV
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = gc_structure-komv "'KOMV'
    CHANGING
      ct_fieldcat            = lt_fcat_komv[]
    EXCEPTIONS
      ##fm_subrc_ok
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = '/CGDC/_CLRQIT'
    CHANGING
      ct_fieldcat            = lt_fcat1_it[]
    EXCEPTIONS
      ##fm_subrc_ok
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = '/CGDC/_CLRQIC'
    CHANGING
      ct_fieldcat            = lt_fcat1_ic[]
    EXCEPTIONS
      ##fm_subrc_ok
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

  SELECT * FROM /cgdc/t_rtbsubgp INTO TABLE @DATA(lt_subgrp)
                                 FOR ALL ENTRIES IN @gs_clrqdoc_infocus-x-crgrr
                                 WHERE clgrn = @gs_clrqdoc_infocus-x-crgrr-clgrn.

  LOOP AT gs_clrqdoc_infocus-x-crgrr INTO lwa_crgrr.
    CONCATENATE gc_a lwa_crgrr-clgrp_kotabnr INTO lwa_tabname-tabname.
    READ TABLE lt_tabname TRANSPORTING NO FIELDS WITH KEY tabname = lwa_tabname-tabname.
    IF sy-subrc <> 0.
      APPEND lwa_tabname TO lt_tabname.
      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name       = lwa_tabname-tabname
        CHANGING
          ct_fieldcat            = lt_fcat1_temp[]
        EXCEPTIONS
          ##fm_subrc_ok
          inconsistent_interface = 1
          program_error          = 2
          OTHERS                 = 3.
      IF sy-subrc <> 0.
      ENDIF.
    ENDIF.
    CLEAR lwa_tabname.
    APPEND LINES OF lt_fcat1_temp TO lt_fcat1[].
    CLEAR lt_fcat1_temp[].

***Subgroup fcat
    READ TABLE lt_subgrp INTO DATA(ls_subgrp) WITH KEY clgrn = lwa_crgrr-clgrn.
    IF sy-subrc = 0.
      READ TABLE lt_fcat1_it INTO DATA(ls_fcat_it) WITH KEY fieldname = ls_subgrp-fname.
      IF sy-subrc = 0.
        APPEND ls_fcat_it TO lt_fcat1.
      ENDIF.

      READ TABLE lt_fcat1_ic INTO DATA(ls_fcat_ic) WITH KEY fieldname = ls_subgrp-fname.
      IF sy-subrc = 0.
        APPEND ls_fcat_ic TO lt_fcat1.
      ENDIF.
    ENDIF.

***New changes
    lv_colpos = 20.

    LOOP AT gt_calc_group_fun INTO lwa_calc_group_fun WHERE clgrn EQ lwa_crgrr-clgrn.

      IF lwa_calc_group_fun-fname IS NOT INITIAL.
        READ TABLE lt_fcat_komv INTO lwa_fcat WITH KEY  fieldname = gc_komv_field-kwert.
        IF sy-subrc EQ 0.
          lwa_fcat-fieldname = lwa_calc_group_fun-fname.
          READ TABLE gt_subtotal_field INTO DATA(lwa_subtotal_field)
                             WITH KEY fname = lwa_calc_group_fun-fname.
          IF sy-subrc EQ 0.
            lwa_fcat-scrtext_s =  lwa_subtotal_field-sflbl.
            lwa_fcat-scrtext_m =  lwa_subtotal_field-mflbl.
            lwa_fcat-scrtext_l =  lwa_subtotal_field-lfbl.
            lwa_fcat-reptext   =  lwa_subtotal_field-descr.
            lwa_fcat-no_out = abap_false.
            lwa_fcat-tech = abap_false.
            APPEND lwa_fcat TO lt_fcat1_temp.
          ENDIF.
        ENDIF.
      ENDIF.
      APPEND LINES OF lt_fcat1_temp TO lt_fcat[].
      CLEAR : lwa_fcat,lwa_subtotal_field,lwa_calc_group_fun,lwa_fcat.
    ENDLOOP.
***
  ENDLOOP.


  DELETE lt_fcat1 WHERE fieldname = gc_calc_grp_rows_field-datab OR fieldname = gc_calc_grp_rows_field-datbi.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = gc_structure-calc_grp_rows  "'/CGDC/S_CLRQGRR'
    CHANGING
      ct_fieldcat            = lt_fcat_tmp[]
    EXCEPTIONS
      ##fm_subrc_ok
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

  LOOP AT lt_fcat_tmp INTO lwa_fcat.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-updkz.
      CONTINUE.
    ENDIF.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-dist_flag.
      CONTINUE.
    ENDIF.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-dist_method.
      CONTINUE.
    ENDIF.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-dist_base.
      CONTINUE.
    ENDIF.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-clrit.
      CONTINUE.
    ENDIF.
    IF lwa_fcat-fieldname = gc_calc_grp_rows_field-rtbbinr.
      CONTINUE.
    ENDIF.

    APPEND lwa_fcat TO lt_fcat_t.
  ENDLOOP.
  CLEAR:lt_fcat_tmp.


***New changes
  CLEAR lwa_fcat.
  lwa_fcat-col_pos = 25.
  lwa_fcat-fieldname = gc_fieldname-srno.
  lwa_fcat-tabname = 1.
  lwa_fcat-datatype = TEXT-156.
  lwa_fcat-inttype = TEXT-157.
  lwa_fcat-intlen = 4.
  lwa_fcat-scrtext_s = lwa_fcat-scrtext_m = lwa_fcat-reptext = lwa_fcat-scrtext_l = TEXT-078.
  lwa_fcat-domname = TEXT-158.
  lwa_fcat-dd_outlen = 4.
  APPEND lwa_fcat TO lt_fcat_t.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = gc_structure-calc_req_scr_fld "'/CGDC/S_CLRQ_SCREENFIELDS'
    CHANGING
      ct_fieldcat      = lt_fcat_tmp[]
    EXCEPTIONS
      ##fm_subrc_ok
      program_error    = 2
      OTHERS           = 3.
  IF sy-subrc <> 0.
  ENDIF.
***
  LOOP AT lt_fcat_tmp INTO lwa_fcat.
    IF lwa_fcat-fieldname = gc_fieldname-rwclr.
      CONTINUE.
    ENDIF.
    DELETE lt_fcat_tmp.
  ENDLOOP.
  APPEND LINES OF lt_fcat_tmp TO lt_fcat_t.
  CLEAR:lt_fcat_tmp.
  LOOP AT lt_fcat_t INTO lwa_fcat.
    CASE lwa_fcat-fieldname.
      WHEN gc_fieldname-srno.
        lwa_fcat-col_pos = 1.
        lwa_fcat-hotspot = abap_true.
      WHEN gc_calc_grp_rows_field-rowid.
        lwa_fcat-no_out = abap_true..
        lwa_fcat-tech = abap_true..
      WHEN gc_calc_grp_rows_field-clgrn.
        lwa_fcat-col_pos = 2.
      WHEN gc_calc_grp_rows_field-descr.
        lwa_fcat-col_pos = 3.
      WHEN gc_calc_grp_rows_field-clgrp_knumh.
        lwa_fcat-col_pos = 4.
      WHEN gc_calc_grp_rows_field-prsok.
        lwa_fcat-tech = abap_false.
        lwa_fcat-no_out = abap_true.
      WHEN gc_calc_grp_rows_field-datab.
        lwa_fcat-col_pos = 5.
      WHEN gc_calc_grp_rows_field-datbi.
        lwa_fcat-col_pos = 6.
      WHEN gc_fieldname-bsamt.
        lwa_fcat-no_out = abap_false.
      WHEN gc_fieldname-srcam.
        lwa_fcat-no_out = abap_false.
    ENDCASE.
    lwa_fcat-edit = abap_false.
    APPEND lwa_fcat TO lt_fcat.

  ENDLOOP.



  LOOP AT lt_fcat1 INTO lwa_fcat.
    IF lwa_fcat-fieldname = gc_fieldname-/cgdc/orgi OR lwa_fcat-fieldname = gc_fieldname-posnr.
      lwa_fcat-fieldname = gc_fieldname-cntit.
    ENDIF.
    READ TABLE gs_clrqdoc_infocus-x-crgrrf TRANSPORTING NO FIELDS WITH KEY fname = lwa_fcat-fieldname.
    IF sy-subrc = 0.
      lwa_fcat-no_out = abap_false.
      APPEND lwa_fcat TO lt_fcat.
    ENDIF.
  ENDLOOP.
  SORT lt_fcat BY fieldname.
  DELETE ADJACENT DUPLICATES FROM lt_fcat COMPARING fieldname.

ENDFORM.

FORM create_cost_line_prl_bcg_job  USING ls_parallel_process TYPE /cgdc/s_parallel_process
                                         lv_vbeln            TYPE vbeln.

  DATA:lt_objnr               TYPE /cgdc/t_objnr,
       lwa_objnr              TYPE /cgdc/s_objnr,
       lt_objnr_temp          TYPE /cgdc/t_objnr,
       lt_prps                TYPE TABLE OF s_prps,
       lv_no_attempt          TYPE num4,
       lv_max_attempts        TYPE num4,
       lv_max_attempt_failure TYPE c,
       lwa_clrqsrc            TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc             TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc1            TYPE /cgdc/s_clrq_cost_keys,
       lt_clrqsrc             TYPE /cgdc/tt_clrq_cost_keys,
       lv_row_count           TYPE sy-tabix,
       lv_job_name            TYPE btcjob,
       lv_job_number          TYPE btcjobcnt,
       lv_memory_id           TYPE char20,
       lv_blk                 TYPE sy-tabix,
       lv_memory_id_1         TYPE char20,
       lv_memory_id_2         TYPE char20,
       lwa_bgwp_list          LIKE LINE OF gt_bgwp_list,
       lt_wpinfo              TYPE TABLE OF wpinfo,
       lt_final_proc          TYPE TABLE OF wpinfo,
       lt_clrq_indx           TYPE TABLE OF /cgdc/_clrq_indx,
       lt_objnr_db            TYPE TABLE OF /cgdc/_clrq_objr.


  PERFORM select_prps CHANGING lt_prps.
  MOVE-CORRESPONDING lt_prps TO lt_objnr.
  IF lt_objnr IS NOT INITIAL.
  ENDIF.

*- get maximum available servers at a given point of time
  SELECT DISTINCT applserver
                  FROM rzllitab
                  INTO TABLE @DATA(lt_server)
                  WHERE classname =  @ls_parallel_process-server_group.
*- get number of background processess available
  LOOP AT lt_server INTO DATA(ls_server).
    CLEAR lt_wpinfo[].
    CALL FUNCTION 'TH_GET_WPINFO'
      EXPORTING
        srvname    = ls_server-applserver
      TABLES
        wplist     = lt_wpinfo
      EXCEPTIONS
        send_error = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.
*- get all work processes in the server
    APPEND LINES OF lt_wpinfo TO lt_final_proc.
  ENDLOOP.

*- get open work processes
  IF ls_parallel_process-background_job EQ abap_true.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-149 .
    DELETE lt_final_proc WHERE wp_status NE TEXT-150.
  ELSE.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-151 AND wp_status NE TEXT-150.
  ENDIF.
  DESCRIBE TABLE lt_final_proc LINES DATA(lv_times).
*- get optimal block size
  DESCRIBE TABLE gt_clrqsrc LINES DATA(lv_data).

  IF lv_times IS NOT INITIAL   .
    lv_blk = ceil( lv_data DIV lv_times ).
  ENDIF.

  IF lv_blk EQ gc_zero.
    lv_blk = 1.
  ENDIF.

  IF lv_blk LT gs_variables-cmfrq.
    gs_variables-cmfrq = lv_blk.
  ENDIF.

  DO.
    gs_parallel_porcess-total_session_count = gs_parallel_porcess-total_session_count + 1.
    CLEAR lv_no_attempt.
    IF gt_clrqsrc IS INITIAL.
      EXIT.
    ENDIF.

    CLEAR: lv_row_count,
           lwa_objnr,
           lv_job_name,
           lt_objnr_temp,
           lt_clrqsrc.

    LOOP AT gt_clrqsrc INTO lwa_clrqsrc .
      lv_row_count = lv_row_count + 1.
      IF lv_row_count  GT gs_variables-cmfrq .
        EXIT.
      ENDIF.
      APPEND lwa_clrqsrc TO lt_clrqsrc.
      DELETE gt_clrqsrc .
      IF lwa_objnr-objnr NE lwa_clrqsrc-objnr.
        READ TABLE lt_objnr_temp
        TRANSPORTING NO FIELDS
        WITH KEY objnr = lwa_clrqsrc-objnr
        BINARY SEARCH.
        IF sy-subrc = 4.
          lwa_objnr-objnr = lwa_clrqsrc-objnr.
          INSERT lwa_objnr INTO lt_objnr_temp INDEX sy-tabix.
        ELSEIF sy-subrc = 8.
          lwa_objnr-objnr = lwa_clrqsrc-objnr.
          APPEND lwa_objnr TO lt_objnr_temp.
        ENDIF.
      ENDIF.

    ENDLOOP.

    CONCATENATE gc_job_name1 lv_vbeln TEXT-152 gs_parallel_porcess-total_session_count INTO lv_job_name.
    CONDENSE lv_job_name NO-GAPS.

    CALL FUNCTION 'JOB_OPEN'
      EXPORTING
        jobname          = lv_job_name
      IMPORTING
        jobcount         = lv_job_number
      EXCEPTIONS
        cant_create_job  = 1
        invalid_job_data = 2
        jobname_missing  = 3
        OTHERS           = 4.
    IF sy-subrc NE 0.
      EXIT.
    ENDIF.
    CONCATENATE gc_mem_id-/cgdc/clrq gs_parallel_porcess-total_session_count INTO lv_memory_id.

    CONCATENATE lv_memory_id TEXT-153 INTO lv_memory_id_1.
    CONCATENATE lv_memory_id TEXT-154 INTO lv_memory_id_2.
    EXPORT lt_clrqsrc TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id_1.
    EXPORT lt_objnr_temp TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id_2.

    SUBMIT (gc_clrq_process_program)
      WITH p_memid   = lv_memory_id
      WITH p_clrub   = abap_true
      WITH p_parall = abap_true
      WITH p_bcg = abap_true
      WITH p_noprc = gs_variables-no_pricing
      WITH so_vbeln  = lv_vbeln
      VIA JOB lv_job_name
      NUMBER lv_job_number
      AND RETURN.

    DO.
****Job CLOSE (Send the job to background processing system)
      CALL FUNCTION 'JOB_CLOSE'
        EXPORTING
          jobcount             = lv_job_number
          jobname              = lv_job_name
          strtimmed            = abap_true
          targetgroup          = ls_parallel_process-server_group
        EXCEPTIONS
          cant_start_immediate = 1
          invalid_startdate    = 2
          jobname_missing      = 3
          job_close_failed     = 4
          job_nosteps          = 5
          job_notex            = 6
          lock_failed          = 7
          invalid_target       = 8
          OTHERS               = 9.


      IF sy-subrc NE 0.
        lv_no_attempt = lv_no_attempt + 1.
        IF lv_no_attempt GE ls_parallel_process-retrie.
          lv_max_attempt_failure = abap_true.
          EXIT.
        ELSE.
          WAIT UP TO ls_parallel_process-max_wait SECONDS.
        ENDIF.

      ELSE.
        CLEAR lwa_bgwp_list.
        lwa_bgwp_list-task_name = lv_job_name.
        lwa_bgwp_list-task_number = lv_job_number.
        APPEND lwa_bgwp_list TO gt_bgwp_list.

        gs_parallel_porcess-active_session_count = gs_parallel_porcess-active_session_count + 1.
        EXIT.
      ENDIF.
    ENDDO.

    IF NOT lv_max_attempt_failure IS INITIAL.
      EXIT.
    ENDIF.
    IF gs_parallel_porcess-active_session_count GE lv_times. "T ls_parallel_process-max_process.
      PERFORM active_less_than_max_wait USING ls_parallel_process
                                              lv_times
                                     CHANGING gs_parallel_porcess-active_session_count.
    ENDIF.
  ENDDO.
  IF gs_parallel_porcess-active_session_count GT 0.
    PERFORM active_less_than_max_wait USING ls_parallel_process
                                            lv_times
                                   CHANGING gs_parallel_porcess-active_session_count.
  ENDIF.
ENDFORM.

*-- replacement routine for 5144 - Configured sources integration
FORM create_lines_bcg_job_schd  USING ls_parallel_process TYPE /cgdc/s_parallel_process
                                      lv_vbeln            TYPE vbeln
                                      lv_bg_job           TYPE abap_bool.

  DATA: lvc_class  TYPE REF TO /cgdc/cl_rtb_source_util,
        lt_srcdata TYPE tt_src_data.
  FIELD-SYMBOLS: <lt_src_data> TYPE table,
                 <lt_src>      TYPE tt_src_data, "lt_srcdata..
                 <lt_data1>    TYPE table,
                 <lt_data2>    TYPE table.

  ASSIGN lt_srcdata TO <lt_src>.

  IF <lt_src> IS ASSIGNED.

    CREATE OBJECT lvc_class.
    "read source data
    CALL METHOD lvc_class->source_get_data
      EXPORTING
        iv_rtbpn     = gs_contract_hdr-/cgdc/rtbpn
        iv_clrno     = gs_clrqdoc_infocus-x-crhdr-clrno
        iv_vbeln     = gs_contract_hdr-vbeln
        it_item      = gt_contract_itm
        iv_bukrs     = gs_contract_hdr-bukrs_vf
        iv_kokrs     = gs_contract_hdr-kokrs
      IMPORTING
        iv_exit_loop = gs_variables-exit_loop
        it_srcdata   = <lt_src>.

    "collect data for all contract items/sources into gt_src_dyn
    LOOP AT <lt_src> ASSIGNING FIELD-SYMBOL(<lfs_src>).
      READ TABLE gt_src_dyn ASSIGNING FIELD-SYMBOL(<lfs_src_dyn>)
                            WITH KEY source = <lfs_src>-source.
      IF sy-subrc = 0.
        "update existing one.
        ASSIGN <lfs_src>-data->*     TO <lt_data1>.
        ASSIGN <lfs_src_dyn>-data->* TO <lt_data2>.
        IF <lt_data1> IS ASSIGNED AND <lt_data2> IS ASSIGNED.
          APPEND LINES OF <lt_data1> TO <lt_data2>.
        ENDIF.
      ELSE.
        "add new record.
        APPEND INITIAL LINE TO gt_src_dyn ASSIGNING <lfs_src_dyn>.
        <lfs_src_dyn>-source       = <lfs_src>-source.
        <lfs_src_dyn>-/cgdc/rtbpn  = <lfs_src>-/cgdc/rtbpn.
        <lfs_src_dyn>-data         = <lfs_src>-data.
      ENDIF.
    ENDLOOP.

    "clear for next one
    CLEAR: <lt_src>.
  ENDIF.

  " loop through all sources to schedule individual jobs for each source
  LOOP AT gt_src_dyn ASSIGNING <lfs_src_dyn>.
    IF lv_bg_job = abap_true.
      PERFORM create_cost_line_prl_bcg_job01 USING ls_parallel_process lv_vbeln
                                                 <lfs_src_dyn>.
    ELSE.
      PERFORM update_lines_in_parallel_01 USING ls_parallel_process lv_vbeln
                                                <lfs_src_dyn>.
    ENDIF.
  ENDLOOP.

ENDFORM.
FORM create_cost_line_prl_bcg_job01  USING ls_parallel_process TYPE /cgdc/s_parallel_process
                                           lv_vbeln            TYPE vbeln
                                           ls_src_dyn          TYPE ty_src_data.

  TYPES: BEGIN OF lty_idx,
           idx TYPE i,
         END OF lty_idx,

         ltt_idx TYPE STANDARD TABLE OF lty_idx.

  DATA: lt_del_idx TYPE ltt_idx.

  DATA:lt_objnr               TYPE /cgdc/t_objnr,
       lwa_objnr              TYPE /cgdc/s_objnr,
       lt_objnr_temp          TYPE /cgdc/t_objnr,
       lt_prps                TYPE TABLE OF s_prps,
       lv_no_attempt          TYPE num4,
       lv_max_attempts        TYPE num4,
       lv_max_attempt_failure TYPE c,
       lwa_clrqsrc            TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc             TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc1            TYPE /cgdc/s_clrq_cost_keys,
       lt_clrqsrc             TYPE /cgdc/tt_clrq_cost_keys,
       lv_row_count           TYPE sy-tabix,
       lv_job_name            TYPE btcjob,
       lv_job_number          TYPE btcjobcnt,
       lv_memory_id           TYPE char22,
       lv_blk                 TYPE sy-tabix,
       lwa_bgwp_list          LIKE LINE OF gt_bgwp_list,
       lt_wpinfo              TYPE TABLE OF wpinfo,
       lt_final_proc          TYPE TABLE OF wpinfo,
       lt_clrq_indx           TYPE TABLE OF /cgdc/_clrq_indx,
       lt_objnr_db            TYPE TABLE OF /cgdc/_clrq_objr,
       lv_offset              TYPE i VALUE 0.

  DATA: lt_source             TYPE REF TO data.

  FIELD-SYMBOLS: <lt_table>   TYPE table,
                 <lt_src_tab> TYPE table.

*- get maximum available servers at a given point of time
  SELECT DISTINCT applserver
                  FROM rzllitab
                  INTO TABLE @DATA(lt_server)
                  WHERE classname =  @ls_parallel_process-server_group.
*- get number of background processess available
  LOOP AT lt_server INTO DATA(ls_server).
    CLEAR lt_wpinfo[].
    CALL FUNCTION 'TH_GET_WPINFO'
      EXPORTING
        srvname    = ls_server-applserver
*       WITH_CPU   =
      TABLES
        wplist     = lt_wpinfo
      EXCEPTIONS
        send_error = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.
*- get all work processes in the server
    APPEND LINES OF lt_wpinfo TO lt_final_proc.
  ENDLOOP.

*- get open work processes
  IF ls_parallel_process-background_job EQ abap_true.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-149 .
    DELETE lt_final_proc WHERE wp_status NE TEXT-150.
  ELSE.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-151 AND wp_status NE TEXT-150.
  ENDIF.


  ASSIGN ls_src_dyn-data->* TO <lt_src_tab>.
  IF <lt_src_tab> IS ASSIGNED.

    DESCRIBE TABLE lt_final_proc LINES DATA(lv_times).
*- get optimal block size
    DESCRIBE TABLE <lt_src_tab> LINES DATA(lv_data).

    IF lv_times IS NOT INITIAL   .
      lv_blk = ceil( lv_data DIV lv_times ).
    ENDIF.

    IF lv_blk EQ  gc_zero.
      lv_blk = gs_variables-cmfrq.
    ENDIF.

    IF lv_blk LT gs_variables-cmfrq.
      gs_variables-cmfrq = lv_blk.
    ENDIF.

    DO.
      gs_parallel_porcess-total_session_count = gs_parallel_porcess-total_session_count + 1.
      CLEAR lv_no_attempt.
      IF <lt_src_tab> IS INITIAL.
        EXIT.
      ENDIF.
      CLEAR: lv_row_count,
             lwa_objnr,
             lv_job_name,
             lt_objnr_temp,
             lt_clrqsrc.

      CONCATENATE gc_job_name1 lv_vbeln TEXT-152 gs_parallel_porcess-total_session_count INTO lv_job_name.
      CONDENSE lv_job_name NO-GAPS.

      CALL FUNCTION 'JOB_OPEN'
        EXPORTING
          jobname          = lv_job_name
        IMPORTING
          jobcount         = lv_job_number
        EXCEPTIONS
          cant_create_job  = 1
          invalid_job_data = 2
          jobname_missing  = 3
          OTHERS           = 4.

      IF sy-subrc NE 0.
        EXIT.
      ENDIF.

      "replace with GUID.
      TRY.
          cl_system_uuid=>if_system_uuid_static~create_uuid_c22( RECEIVING uuid = DATA(lv_guid) ).
        CATCH cx_uuid_error.

      ENDTRY.

      lv_memory_id = lv_guid.


      "get CDS view name
      DATA(ls_view) = /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc( iv_rtbsrc = CONV #( ls_src_dyn-source ) ).
      DATA(lv_cds_name) = ls_view-cds_view.

      "create data of CDS type.
      CREATE DATA lt_source TYPE TABLE OF (lv_cds_name).
      ASSIGN lt_source->* TO <lt_table>.
      IF <lt_table> IS ASSIGNED.
        LOOP AT <lt_src_tab> ASSIGNING FIELD-SYMBOL(<lfs_src_tab>).
          lv_row_count = lv_row_count + 1.
          IF lv_row_count GT gs_variables-cmfrq .                "limit processing to block size.
            EXIT.
          ENDIF.

          APPEND <lfs_src_tab> TO <lt_table>.

          "Initialize deletion idx table
          APPEND INITIAL LINE TO lt_del_idx ASSIGNING FIELD-SYMBOL(<lfs_idx>).
          <lfs_idx>-idx = lv_row_count.
        ENDLOOP.

        "export data
        EXPORT <lt_table> TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id.

      ENDIF.

      SUBMIT (gc_clrq_process_program)
        WITH p_memid   = lv_memory_id
        WITH p_clrub   = abap_true
        WITH p_parall = abap_true
        WITH p_bcg = abap_true
        WITH p_noprc = gs_variables-no_pricing
        WITH p_src   = ls_src_dyn-source
        WITH p_rtbpn = ls_src_dyn-/cgdc/rtbpn
        WITH so_vbeln  = lv_vbeln
        VIA JOB lv_job_name
        NUMBER lv_job_number
        AND RETURN.

      DO.
****Job CLOSE (Send the job to background processing system)
        CALL FUNCTION 'JOB_CLOSE'
          EXPORTING
            jobcount             = lv_job_number
            jobname              = lv_job_name
            strtimmed            = abap_true
*           targetgroup          = ls_parallel_process-server_group          "FM doesn't work with target group
          EXCEPTIONS
            cant_start_immediate = 1
            invalid_startdate    = 2
            jobname_missing      = 3
            job_close_failed     = 4
            job_nosteps          = 5
            job_notex            = 6
            lock_failed          = 7
            invalid_target       = 8
            OTHERS               = 9.


        IF sy-subrc NE 0.
          lv_no_attempt = lv_no_attempt + 1.
          IF lv_no_attempt GE ls_parallel_process-retrie.
            lv_max_attempt_failure = abap_true.
            EXIT.
          ELSE.
            WAIT UP TO ls_parallel_process-max_wait SECONDS.
          ENDIF.

        ELSE.
          CLEAR lwa_bgwp_list.
          lwa_bgwp_list-task_name = lv_job_name.
          lwa_bgwp_list-task_number = lv_job_number.
          lwa_bgwp_list-mem_id = lv_memory_id.
          APPEND lwa_bgwp_list TO gt_bgwp_list.

          gs_parallel_porcess-active_session_count = gs_parallel_porcess-active_session_count + 1.

          "delete processed records from source tab
          lv_offset = 0.
          LOOP AT lt_del_idx ASSIGNING <lfs_idx>.
            DATA(lv_idx) = <lfs_idx>-idx - lv_offset.
            DELETE <lt_src_tab> INDEX lv_idx.
            lv_offset += 1.             "Table line idxs change after deletion so use offset
          ENDLOOP.
          CLEAR: lt_del_idx.            "ready for next run
          EXIT.
        ENDIF.
      ENDDO.

      IF NOT lv_max_attempt_failure IS INITIAL.
        EXIT.
      ENDIF.
      IF gs_parallel_porcess-active_session_count GE lv_times. "T ls_parallel_process-max_process.
        PERFORM active_less_than_max_wait USING ls_parallel_process
                                                lv_times
                                       CHANGING gs_parallel_porcess-active_session_count.
      ENDIF.
    ENDDO.
    IF gs_parallel_porcess-active_session_count GT 0.
      PERFORM active_less_than_max_wait USING ls_parallel_process
                                              0
                                     CHANGING gs_parallel_porcess-active_session_count.
    ENDIF.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form create_manual_bill_item_num
*&---------------------------------------------------------------------*
*& On user command, this subroutine will create a bill item type
*& manually & assign it to the Calc req item.
*&---------------------------------------------------------------------*
*&      --> LWA_CALC_REQ_ITEMS_FCAT
*&---------------------------------------------------------------------*
FORM create_manual_bill_item_num  CHANGING
                                  lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat.

  DATA: ls_bill_typ  TYPE /cgdc/t_bilitty,
        ls_bill_item TYPE /cgdc/s_clrqbi,
        ls_clrq_cost TYPE /cgdc/s_clrqcost,
        ls_bill_num  TYPE /cgdc/s_clrqbi,
        ls_clrqbi    TYPE /cgdc/_clrqbi,
        ls_clrqit    TYPE /cgdc/s_clrqit,
        ls_clrqcost  TYPE /cgdc/s_clrqcost,
        lv_bitype    TYPE /cgdc/bitype,
        ls_crbinr    TYPE /cgdc/s_clrqbi,
        lv_pop_st    TYPE datum,
        lv_concat    TYPE string,
        lv_where     TYPE string,
        lv_pop_end   TYPE datum,
        lv_bilmatnr  TYPE /cgdc/bilmatnr.

  DATA: ls_clrqhd_brf   TYPE  /cgdc/s_clrqhd_brf,
        ls_clrqit_brf   TYPE  /cgdc/s_clrqit_brf,
        ls_clrqcost_brf TYPE  /cgdc/s_clrqcost_brf,
        lt_bilityp      TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp     TYPE  /cgdc/t_bilitty,
        ls_clrtic       TYPE /cgdc/t_rtbic.

  FIELD-SYMBOLS: <lwa_clrqit> TYPE /cgdc/s_clrqit,
                 <lwa_clrqbi> TYPE /cgdc/s_clrqbi.


  CLEAR: ls_clrqhd_brf,  ls_clrqit_brf,
         ls_clrqcost_brf .

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  CLEAR ls_clrqit.
  READ TABLE gs_clrqdoc_infocus-x-critm INTO ls_clrqit
                                        WITH KEY
                                        clrno  = lwa_calc_req_items_fcat-clrno
                                        clrit  = lwa_calc_req_items_fcat-clrit
                                        clrsit =  gc_clrsit_low.
  IF sy-subrc EQ 0.
    MOVE-CORRESPONDING ls_clrqit TO ls_clrqit_brf.
  ENDIF.

  CLEAR ls_clrqcost.
  READ TABLE gs_clrqdoc_infocus-x-crcost INTO ls_clrqcost
                                         WITH KEY
                                         clrno  = lwa_calc_req_items_fcat-clrno
                                         clrit  = lwa_calc_req_items_fcat-clrit.
  IF sy-subrc EQ 0.
    MOVE-CORRESPONDING ls_clrqcost TO ls_clrqcost_brf.
  ENDIF.

  CLEAR lv_bitype.
  CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
    EXPORTING
      is_clrqhd   = ls_clrqhd_brf
      is_clrqit   = ls_clrqit_brf
      is_clrqcost = ls_clrqcost_brf
    IMPORTING
      ev_bi_type  = lv_bitype.
  IF sy-subrc <> 0.
  ENDIF.

  SELECT *
     FROM /cgdc/t_bilitty
     INTO  TABLE @lt_bilityp.

  IF NOT lv_bitype IS INITIAL.

    CLEAR ls_bill_typ.
    SELECT SINGLE * FROM /cgdc/t_bilitty
                    INTO ls_bill_typ
                    WHERE bilitmtyp = lv_bitype.

    IF  lwa_calc_req_items_fcat-bill_usage IS INITIAL.
      lwa_calc_req_items_fcat-bill_usage = ls_bill_typ-bill_usage.
    ENDIF.


    CASE ls_bill_typ-pop_src_date.
      WHEN gc_pop_src_date-docu.
        lwa_calc_req_items_fcat-srvc_date = lwa_calc_req_items_fcat-bldat.
      WHEN gc_pop_src_date-post.
        lwa_calc_req_items_fcat-srvc_date = lwa_calc_req_items_fcat-budat.
      WHEN OTHERS.
        lwa_calc_req_items_fcat-srvc_date = lwa_calc_req_items_fcat-bldat.
    ENDCASE.

    CLEAR ls_bill_item.
    ls_bill_item-bitype = lv_bitype.
    ls_bill_item-vgbel  = lwa_calc_req_items_fcat-vgbel.
    ls_bill_item-vgpos  = lwa_calc_req_items_fcat-vgpos.
    ls_bill_item-ps_psp_pnr = lwa_calc_req_items_fcat-ps_psp_pnr.


    PERFORM get_performance_dates USING  ls_bill_item
                                         ls_clrqit
                                  CHANGING lv_pop_st
                                           lv_pop_end.
    CLEAR ls_bill_item.

    CASE ls_bill_typ-bilcreate_type.
      WHEN gc_bilcrttyp-manu OR gc_bilcrttyp-scit OR gc_bilcrttyp-auma.
        CLEAR ls_crbinr.

        IF NOT ls_bill_typ-bilmatnr IS INITIAL.
          lv_bilmatnr = ls_bill_typ-bilmatnr.
        ELSE.
          lv_bilmatnr = ls_clrqit-matnr.
        ENDIF.
        PERFORM prep_bi_where_cls  USING lwa_calc_req_items_fcat
                                          lv_bitype
                                          lv_bilmatnr
*                                          ls_bill_typ-bilmatnr
                                 CHANGING lv_where .

        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Check Fix

        LOOP AT gs_clrqdoc_infocus-x-crbinr
        INTO ls_crbinr WHERE (lv_where).
          EXIT.
        ENDLOOP.
        IF sy-subrc EQ 0.
          CLEAR ls_clrqbi.
          MOVE-CORRESPONDING ls_crbinr TO ls_clrqbi.
          PERFORM assign_exist_bill_item USING ls_clrqbi
                                               ls_bill_typ
                                               space
                                         CHANGING ls_clrqit
                                                  lwa_calc_req_items_fcat.

          IF  <lwa_clrqit> IS ASSIGNED.
            UNASSIGN <lwa_clrqit>.
          ENDIF.




          LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                             WHERE clrno  = lwa_calc_req_items_fcat-clrno
                                             AND   clrit  = lwa_calc_req_items_fcat-clrit.
            IF <lwa_clrqit>-updkz IS INITIAL.
              <lwa_clrqit>-updkz     = gc_updkz_update.
            ENDIF.

            PERFORM assign_exist_bill_item USING ls_clrqbi
                                               ls_bill_typ
                                               gc_call-1
                                         CHANGING <lwa_clrqit>
                                                  lwa_calc_req_items_fcat.
            <lwa_clrqit>-msg_icon   = icon_green_light.
            CLEAR <lwa_clrqit>-msg_code.

            IF <lwa_clrqit>-clrsit NE  gc_clrsit_low.
              IF <lwa_clrqbi> IS ASSIGNED.
                UNASSIGN <lwa_clrqbi>.
              ENDIF.
              READ TABLE gs_clrqdoc_infocus-x-crbinr
              ASSIGNING <lwa_clrqbi> WITH KEY clrno     = <lwa_clrqit>-clrno
                                              bill_item = <lwa_clrqit>-rtbbinr
                                              bitype    = <lwa_clrqit>-bityp.
              IF sy-subrc IS INITIAL.

                READ TABLE lt_bilityp INTO lwa_bilityp
                WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

                READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <lwa_clrqit>-pstyv. "RTB24-15


                IF sy-subrc = 0.
                  IF lwa_bilityp-qty_1 = abap_true.
                    <lwa_clrqbi>-zmeng = 1.
                  ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15
                    <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + <lwa_clrqit>-zmeng.
                  ENDIF.
                ENDIF.

                <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + <lwa_clrqit>-netwr.
                "++SOC - decimal precision field
                <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + <lwa_clrqit>-netwr24.
                "++EOC - decimal precision field
                <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + <lwa_clrqit>-wavwr.
                IF <lwa_clrqbi>-updkz IS INITIAL.
                  <lwa_clrqbi>-updkz = gc_updkz_update.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ELSE.
          CLEAR ls_clrqbi.
          lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Corrections
          SELECT SINGLE *
                 FROM /cgdc/_clrqbi
                 WHERE (lv_where)
                 INTO @ls_clrqbi.
          IF sy-subrc EQ 0.

            PERFORM assign_exist_bill_item USING ls_clrqbi
                                                 ls_bill_typ
                                                 space
                                           CHANGING ls_clrqit
                                                    lwa_calc_req_items_fcat.


            LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                               WHERE clrno  = lwa_calc_req_items_fcat-clrno
                                               AND   clrit  = lwa_calc_req_items_fcat-clrit.

              IF <lwa_clrqit>-updkz IS INITIAL.
                <lwa_clrqit>-updkz     = gc_updkz_update.
              ENDIF.
              PERFORM assign_exist_bill_item USING ls_clrqbi
                                                 ls_bill_typ
                                                 gc_call-1
                                           CHANGING <lwa_clrqit>
                                                    lwa_calc_req_items_fcat.
              <lwa_clrqit>-msg_icon   = icon_green_light.
              CLEAR <lwa_clrqit>-msg_code.

              IF <lwa_clrqit> NE  gc_clrsit_low.
                CLEAR ls_bill_num.
                ls_bill_num = CORRESPONDING #( ls_clrqbi ).

                READ TABLE lt_bilityp INTO lwa_bilityp
                  WITH KEY bilitmtyp = ls_bill_num-bitype.

                READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <lwa_clrqit>-pstyv. "RTB24-15

                IF sy-subrc = 0.
                  IF lwa_bilityp-qty_1 = abap_true.
                    ls_bill_num-zmeng = 1.
                  ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                    ls_bill_num-zmeng = ls_bill_num-zmeng + <lwa_clrqit>-zmeng.
                  ENDIF.
                ENDIF.
                ls_bill_num-netwr = ls_bill_num-netwr + <lwa_clrqit>-netwr.
                "++SOC - Decimal precision field
                ls_bill_num-netwr24 = ls_bill_num-netwr24 + <lwa_clrqit>-netwr24.
                "++EOC - decimal precision field
                ls_bill_num-wavwr = ls_bill_num-wavwr + <lwa_clrqit>-wavwr.
                APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.
              ENDIF.

            ENDLOOP.
          ELSE.
            "Create & assign the new Bill item number
            TRY.
                cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
                  RECEIVING
                    uuid = lwa_calc_req_items_fcat-rtbbinr ).
              CATCH cx_uuid_error.
            ENDTRY.

            lwa_calc_req_items_fcat-bityp    = lv_bitype.

            IF NOT ls_bill_typ-bilmatnr IS INITIAL.
              lv_bilmatnr = ls_bill_typ-bilmatnr.
            ELSE.
              lv_bilmatnr = ls_clrqit-matnr.
            ENDIF.

            lwa_calc_req_items_fcat-bilmatnr = lv_bilmatnr.
*            lwa_calc_req_items_fcat-bilmatnr = ls_bill_typ-bilmatnr.
            lwa_calc_req_items_fcat-fkrel    = ls_bill_typ-fkrel.
            lwa_calc_req_items_fcat-msg_icon = icon_green_light.
            CLEAR lwa_calc_req_items_fcat-msg_code.

            IF <lwa_clrqit> IS ASSIGNED.
              UNASSIGN <lwa_clrqit>.
            ENDIF.
            READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                                              WITH KEY
                                                              clrno  = lwa_calc_req_items_fcat-clrno
                                                              clrit  = lwa_calc_req_items_fcat-clrit
                                                              clrsit =  gc_clrsit_low.
            IF <lwa_clrqit> IS ASSIGNED.
              "Get more details to update the newly created Billing item
              "number in the table /CGDC/_CLRQBI


              CLEAR ls_bill_item.
              PERFORM get_additional_details_binr USING <lwa_clrqit>
                                                        ls_bill_typ
                                                  CHANGING ls_bill_item.

              lwa_calc_req_items_fcat-pop_stdt   = ls_bill_item-pop_stdt.
              lwa_calc_req_items_fcat-pop_enddt  = ls_bill_item-pop_enddt.
              lwa_calc_req_items_fcat-bldat_bi   = ls_bill_item-bldat.

              "Add it to the CR document structure for saving it on
              "/CGDC/_CLRQBI table
              ls_bill_item-bill_item  = lwa_calc_req_items_fcat-rtbbinr.
              ls_bill_item-ps_psp_pnr = lwa_calc_req_items_fcat-ps_psp_pnr.
              APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.
            ENDIF.

            LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                       WHERE clrno  = lwa_calc_req_items_fcat-clrno
                                       AND   clrit  = lwa_calc_req_items_fcat-clrit.
              <lwa_clrqit>-rtbbinr    = lwa_calc_req_items_fcat-rtbbinr.
              IF <lwa_clrqit>-updkz IS INITIAL.
                <lwa_clrqit>-updkz     = gc_updkz_update.
              ENDIF.
              <lwa_clrqit>-bityp      = lv_bitype.
              <lwa_clrqit>-fkrel      = ls_bill_typ-fkrel.
              <lwa_clrqit>-pop_stdt   = lv_pop_st. "DCLM-6558
              <lwa_clrqit>-pop_enddt  = lv_pop_end. "DCLM-6558
              <lwa_clrqit>-msg_icon   = icon_green_light.
              CLEAR <lwa_clrqit>-msg_code.
              <lwa_clrqit>-bldat_bi  = ls_bill_item-bldat.
              <lwa_clrqit>-srvc_date = lwa_calc_req_items_fcat-srvc_date.
            ENDLOOP.
          ENDIF.
        ENDIF.

        gs_variables-calc_changed = abap_true.
        IF <lwa_clrqit> IS ASSIGNED.
          UNASSIGN <lwa_clrqit>.
        ENDIF.

      WHEN OTHERS.
        "Billing item type does not allow manual assignment.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE i036(/cgdc/clrq) WITH lv_bitype.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-036.
          gs_messages-msgty = gc_message_type-information.
          gs_messages-msgv1 = lv_bitype.
          APPEND gs_messages TO gt_messages.
        ENDIF.


    ENDCASE.

  ELSE.
    "Billing item type could not be derived.

    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i037(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-037.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form check_and_reassign
*&---------------------------------------------------------------------*
*& This subroutine will check if the reassignment of the billing item
*& number is possible for the selected calculation req line item
*&---------------------------------------------------------------------*
*&      --> LWA_CALC_REQ_ITEMS_FCAT
*&---------------------------------------------------------------------*
FORM check_and_reassign  CHANGING lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA: lv_ans     TYPE c,
        ls_bilitty TYPE /cgdc/t_bilitty.
  DATA : lv_fnkey TYPE /cgdc/rtb_authfnkey.
  DATA :lv_invalid TYPE flag.
  "If billing item number is already assigned, ask the user
  " if the reassignment is to a different billing item number is required.
  CLEAR lv_ans.
  PERFORM popup_to_confirm_for_on_demand USING TEXT-090
                                               TEXT-091
                                               TEXT-065
                                               icon_checked
                                               TEXT-066
                                               icon_cancel
                                               abap_true
                                      CHANGING lv_ans.
  IF sy-subrc EQ 0.
    CASE lv_ans.
      WHEN gc_answer-yes.

        CLEAR ls_bilitty.
        READ TABLE gt_bilitty INTO ls_bilitty
                              WITH KEY bilitmtyp = lwa_calc_req_items_fcat-bityp.
        IF sy-subrc EQ 0.
          CONCATENATE gc_fnkey-bs ls_bilitty-rtb_authkey INTO lv_fnkey.
          PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
             gs_clrqdoc_infocus-x-crhdr-vkorg
             gs_clrqdoc_infocus-x-crhdr-vtweg
             gs_clrqdoc_infocus-x-crhdr-spart
             gc_auth_actv-reassign_request_item
             lv_fnkey
              CHANGING lv_invalid.
          IF lv_invalid IS NOT INITIAL.
            IF gs_variables-call_from_ui IS INITIAL.
              MESSAGE i100(gc_clrq_msg_cls) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                                    gs_clrqdoc_infocus-x-crhdr-vkorg
                                                    gs_clrqdoc_infocus-x-crhdr-vtweg
                                                    gs_clrqdoc_infocus-x-crhdr-spart.
            ELSE.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = gc_msg_cls_msgnr-100.
              gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
              gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
              gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
              gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
              CLEAR gs_messages.
            ENDIF.
            RETURN.
          ENDIF.


          IF ls_bilitty-allow_from EQ abap_false.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i041(/cgdc/clrq) WITH lwa_calc_req_items_fcat-bityp.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = gc_msg_cls_msgnr-041.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lwa_calc_req_items_fcat-bityp.
              APPEND gs_messages TO gt_messages.
            ENDIF.


            EXIT.
          ELSE.
            PERFORM reassign_billing_item_number CHANGING lwa_calc_req_items_fcat.
            gs_variables-refersh_bill_bp_grid  = abap_true.

          ENDIF.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_PBD
*&---------------------------------------------------------------------*
FORM create_pbd  USING    p_lt_ebdrcreateddoc TYPE bapiebdrrequestextbilldocreq_t
                 CHANGING lv_vbeln TYPE vbeln.
  TABLES : vbco7.
  TABLES : rv60a.
  TABLES : tvfk .
  TABLES : tvfkd.

  DATA : lt_vbeln  TYPE TABLE OF range_vbeln,
         lwa_vbeln TYPE range_vbeln,
         gt_fvkdfi TYPE TABLE OF vkdfif.

  RANGES : lt_kunnr FOR vbco7-kunnr,
           lt_land1 FOR vbco7-lland,
           lt_fkart FOR vbco7-fkart,
           lt_vtweg FOR vbco7-vtweg,
           lt_psart FOR vbco7-spart,
           lt_sort  FOR vbco7-sortkri.

  DATA:l_vbsk     TYPE vbsk,
       le_vbsk    TYPE vbsk,
       lt_komfk   TYPE TABLE OF komfk,
       lwa_komfk  TYPE komfk,
       lt_komv    TYPE TABLE OF komv,
       lt_thead   TYPE TABLE OF theadvb,
       lt_vbfs    TYPE TABLE OF vbfs,
       lt_vbpa1   TYPE TABLE OF vbpavb,
       lt_vbrk    TYPE TABLE OF vbrkvb,
       lt_vbrp    TYPE TABLE OF vbrpvb,
       lt_clrqdf  TYPE TABLE OF /cgdc/_clrqdf,
       lt_clrqbi  TYPE TABLE OF /cgdc/_clrqbi,
       lwa_clrqdf TYPE /cgdc/_clrqdf,
       lwa_clrqbi TYPE /cgdc/_clrqbi,
       lt_vbss    TYPE TABLE OF vbss,
       lwa_vbss   TYPE vbss,
       lv_billrel TYPE rvari_val_255.
  vbco7-allex = abap_true.
  vbco7-allel = abap_true.

  LOOP AT  p_lt_ebdrcreateddoc INTO DATA(lwa_ebdrcreateddoc).

    lwa_vbeln-option = gc_operator-equal.
    lwa_vbeln-sign   = gc_range_tbl_sign-include.
    lwa_vbeln-low = lwa_ebdrcreateddoc-extbillingdocrequest.
    APPEND lwa_vbeln TO lt_vbeln.

** To Read BDR document details
    CALL FUNCTION 'RV_READ_INVOICE_INDEX'
      EXPORTING
        comwa       = vbco7
        opt_enabled = abap_true
      TABLES
        lvkdfi      = gt_fvkdfi
        s_kunnr     = lt_kunnr
        s_vbeln     = lt_vbeln
        s_lland     = lt_land1
        s_fkart     = lt_fkart
        s_sortkri   = lt_sort
        s_vtweg     = lt_vtweg
        s_spart     = lt_psart.
    IF sy-subrc <> 0.
    ENDIF.

    LOOP AT gt_fvkdfi INTO DATA(lwa_vkdfs).
      MOVE-CORRESPONDING lwa_vkdfs TO lwa_komfk.
      lwa_komfk-fkart  = lwa_vkdfs-fkart."'CBD1'.
      lwa_komfk-vbtyp  = lwa_vkdfs-vbtyp."'EBDR'.
      lwa_komfk-vbeln  = lwa_vkdfs-vbeln.
      lwa_komfk-vkorg  = lwa_vkdfs-vkorg.
      lwa_komfk-seldat = lwa_vkdfs-fkdat.
      APPEND  lwa_komfk TO  lt_komfk.
      CLEAR : lwa_komfk,lwa_vkdfs.
    ENDLOOP.


** Create PBD from BDR
    IF lt_komfk IS NOT INITIAL.
      CALL FUNCTION 'RV_INVOICE_CREATE'
        EXPORTING
          vbsk_i               = l_vbsk
          with_posting         = gc_upd_without_error_async "'B'
          iv_create_prebilling = abap_true
        IMPORTING
          vbsk_e               = le_vbsk
        TABLES
          xkomfk               = lt_komfk
          xkomv                = lt_komv
          xthead               = lt_thead
          xvbfs                = lt_vbfs
          xvbpa                = lt_vbpa1
          xvbrk                = lt_vbrk
          xvbrp                = lt_vbrp
          xvbss                = lt_vbss.
      IF sy-subrc <> 0.
      ENDIF.
    ENDIF.

    READ TABLE lt_vbss INTO lwa_vbss INDEX 1.

    IF NOT lwa_vbss-vbeln IS INITIAL.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-050.
      gs_messages-msgty = gc_message_type-succes.
      gs_messages-msgv1 = lwa_vbss-vbeln.
      APPEND gs_messages TO gt_messages.
    ELSE.

      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-010.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = lwa_ebdrcreateddoc-extbillingdocrequest.
      APPEND gs_messages TO gt_messages.
*      ENDIF.
    ENDIF.
    CLEAR : lwa_ebdrcreateddoc,lt_komfk,lt_vbeln,lwa_vbeln.
    CLEAR :lwa_vbss,lt_vbss.
  ENDLOOP.

ENDFORM.
FORM create_post_rej_line1 CHANGING ls_clrqit TYPE /cgdc/s_clrqit_fcat
                                   ls_grid_data TYPE /cgdc/s_clrq_postpone.
  DATA: lv_process       TYPE i,
        lv_operation     TYPE c,
        lv_data          TYPE c,
        lv_amt_needed    TYPE netwr_ap,
        lv_amt_needed_t  TYPE netwr_ap,
        lv_amt_needed_r  TYPE netwr_ap,
        lv_amt_extra     TYPE netwr_ap,
        lv_amt_extra_t   TYPE netwr_ap,
        lv_qty_needed    TYPE dzmeng,
        lv_qty_needed_t  TYPE dzmeng,
        lv_dec           TYPE dzmeng,
        lv_clrit         TYPE /cgdc/clrq_itmno,
        lv_lclrsit       TYPE /cgdc/s_clrqit-lclrsit,
        lv_qty_extra     TYPE dzmeng,
        lv_qty_extra_t   TYPE dzmeng,
        lv_index         TYPE sytabix,
        lv_per_qty_price TYPE netwr_ap,
        lv_per_price_qty TYPE dzmeng,
        lv_bi_operation ,
        lv_date          TYPE sy-datum.
  DATA: lv_line_amt TYPE netwr_ap.
  DATA: lv_istat TYPE /cgdc/clrqi_istat.
  DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
  DATA: lwa_clrqit_new TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_qty  TYPE dzmeng,
        lv_rqty TYPE kpein,
        lv_amt  TYPE netwr_ap.

  DATA : lv_clear_rest TYPE flag,
         lv_exit       TYPE flag,
         lv_new_open   TYPE flag.
  DATA : lwa_clrqbi      TYPE /cgdc/s_clrqbi.
  DATA: lv_count TYPE i.
  FIELD-SYMBOLS : <lwa_critm>       TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_a> TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_p> TYPE /cgdc/s_clrqit,
                  <lwa_critm_item>  TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_itm_vals> TYPE s_item_val.
  FIELD-SYMBOLS: <lwa_postponed_data> TYPE /cgdc/s_clrq_postpone.
  FIELD-SYMBOLS: <lwa_clrqit_new_open> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrqit_post_rej_line> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lv_qty> TYPE any,
                  <lv_amt> TYPE any.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  SORT     gs_clrqdoc_infocus-x-critm BY clrit clrsit clrdit.
  gs_variables-process_type = gc_process_typ_p."'P'
  "Set Operation
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un OR  gs_variables-itm_rej_quan  .
      lv_operation = gc_operation-q ."gc_rsn_func-req_itm.
      CASE abap_true.
        WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_quan.
          lv_istat = gc_ibill_stat-rejected..
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
    WHEN  gs_variables-itm_rej_amt OR gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_operation = gc_operation-a. "gc_rsn_func-price_chg.
      CASE abap_true.
        WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_amt.
          lv_istat = gc_ibill_stat-rejected.
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
  ENDCASE.

  "Read Global Data for CLRIT Value with respect to date
  READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = ls_grid_data-clrit
                                                                        psdat = ls_grid_data-psdat.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
    <lwa_postponed_data>-clrit = ls_grid_data-clrit.
    <lwa_postponed_data>-psdat = ls_grid_data-psdat.
  ENDIF.

  "Read Global Data for CLRIT Value
  READ TABLE gt_item_values ASSIGNING <lwa_itm_vals> WITH KEY clrit = ls_clrqit-clrit.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_values ASSIGNING <lwa_itm_vals>.
  ENDIF.

  lv_date = ls_grid_data-psdat.
  "Make UPDKZ/ISTAT as Blank For New Existing Data.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  "POSTPONE/REJ QTY Start
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_qty < ls_grid_data-postp_qty.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_qty > ls_grid_data-postp_qty.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_quan.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_quan < ls_grid_data-rej_qty.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_quan > ls_grid_data-rej_qty.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_quan = ls_grid_data-rej_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_amt < ls_grid_data-postp_amt.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_amt > ls_grid_data-postp_amt.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_amt.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_amt < ls_grid_data-rej_amt.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_amt > ls_grid_data-rej_amt.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_amt = ls_grid_data-rej_amt.
        lv_process = 3.
      ENDIF.
  ENDCASE.
  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_item> WITH KEY clrit = ls_clrqit-clrit
                                                                               clrsit =  gc_clrsit_low.

  IF sy-subrc = 0.
    lv_index = sy-tabix.
    lv_lclrsit = <lwa_critm_item>-lclrsit.
    <lwa_critm_item>-updkz = gc_updkz_update.
  ENDIF.
  CASE  lv_process.
    WHEN 1.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed ."'P'.
        lv_qty_needed = ls_grid_data-postp_qty - <lwa_postponed_data>-postp_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + lv_qty_needed.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + lv_qty_needed.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lv_qty_needed .
*          check for amount
          IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
            <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.

        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        CLEAR gs_rounding.
        lv_amt_needed = ls_grid_data-postp_amt - <lwa_postponed_data>-postp_amt.
        lv_amt_needed_t = lv_amt_needed.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_amt / <lwa_itm_vals>-cost_ratio.

              DATA(lv_quan_temp) = trunc( <lwa_postponed_data>-postp_qty ).
              lv_dec = <lwa_postponed_data>-postp_qty - lv_quan_temp.
              IF lv_dec > 0.

                gs_rounding-kschl1 = gc_kschl1-ydif. "'YDIF'.
                gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                gs_rounding-zmeng = lv_dec.

              ENDIF.
            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + lv_amt_needed.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt  + <lwa_itm_vals>-bill_amt ).
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + lv_amt_needed.

            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.

              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                      + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        lv_qty_needed = ls_grid_data-rej_qty - <lwa_postponed_data>-rej_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.

          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + lv_qty_needed.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lv_qty_needed .
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        lv_amt_needed = ls_grid_data-rej_amt - <lwa_postponed_data>-rej_amt.
        lv_amt_needed_t = lv_amt_needed.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.

          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.

            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.

          <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_amt / <lwa_itm_vals>-cost_ratio.

            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).

          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).

        ENDIF.
      ENDIF.

      IF <lwa_critm> IS ASSIGNED.
        UNASSIGN <lwa_critm>.
      ENDIF.
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                      istat = lv_istat
                                                                      psdat = lv_date
                                                                      updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                                               cuepos = <lwa_critm>-cuepos
                                                                                               istat = 'A'
                                                                                               updkz = gc_updkz_new.
        IF <lwa_critm_new_a> IS ASSIGNED.
          CASE lv_operation.
            WHEN gc_operation-q. " "QUANTITY
              IF <lv_qty> <= ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                "RESET P/R
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng = <lwa_critm>-zmeng + lv_qty_needed.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta =  gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.

                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                ELSEIF lwa_clrqit_new-zmeng < 0.

                ENDIF.
                <lwa_critm>-updkz = abap_true.

                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng =  <lwa_critm_new_a>-zmeng  - lv_qty_needed.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta =  gc_clrdit_low.
                gs_clrit_org-istat = gc_ibill_stat-open.  "'A'.

                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.

                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_qty_needed = 0.
              ELSE.
              ENDIF.
            WHEN gc_operation-a."'A'.
              "RESET P/R
              IF <lv_amt> <= ( ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ) * <lwa_itm_vals>-cost_ratio ).
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_needed )
                                          / <lwa_itm_vals>-cost_ratio.
                    lwa_clrqit_new-zmeng = ( <lwa_critm>-kbetr1 + lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.

                    CLEAR : lv_dec , lv_quan_temp.
                    lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
                    lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                    IF lv_dec > 0.
                      gs_rounding-kschl1 = gc_kschl1-ydif."'YDIF'.
                      gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                      gs_rounding-zmeng = lv_dec.
                    ENDIF.

                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.

                lwa_clrqit_new-kbetr1 =  ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_needed .
*              ENDIF.

                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta =  gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                CLEAR : lwa_clrqit_new-netwr,
                         lwa_clrqit_new-netpr,
                         lwa_clrqit_new-wavwr,
                         lwa_clrqit_new-rtbbinr,
                         lwa_clrqit_new-bityp,
                         lwa_clrqit_new-bilmatnr,
                         lwa_clrqit_new-pop_stdt,
                         lwa_clrqit_new-pop_enddt,
                         lwa_clrqit_new-bldat_bi,
                         lwa_clrqit_new-/cgdc/cline.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm>-updkz = abap_true.

                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = ( ( <lwa_critm_new_a>-zmeng * <lwa_itm_vals>-cost_ratio ) - lv_amt_needed )
                                              / <lwa_itm_vals>-cost_ratio.

                    lwa_clrqit_new-zmeng = <lwa_itm_vals>-open_quan.
                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.
                lwa_clrqit_new-kbetr1 =  lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open."'A'.
*
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.

                CLEAR : lwa_clrqit_new-netwr,
                          lwa_clrqit_new-netpr,
                          lwa_clrqit_new-wavwr,
                          lwa_clrqit_new-psdat.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.

                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_amt_needed = 0.
              ELSE.
              ENDIF.

          ENDCASE.


        ENDIF.
      ENDIF.

    WHEN 2.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.  " lv_operation = 'Q' AND lv_istat = 'P'.
        lv_qty_extra = <lwa_postponed_data>-postp_qty - ls_grid_data-postp_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-postp_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed."lv_operation = 'A' AND lv_istat = 'P'.


        lv_amt_extra = <lwa_postponed_data>-postp_amt - ls_grid_data-postp_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_amt + <lwa_postponed_data>-postp_amt ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-018.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.

                CLEAR : lv_dec , lv_quan_temp.
                lv_quan_temp = trunc( <lwa_itm_vals>-post_quan ).
                lv_dec = <lwa_itm_vals>-post_quan - lv_quan_temp.
                IF lv_dec > 0.
                  gs_rounding-kschl1 = gc_kschl1-ydif."'YDIF'.
                  gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                  gs_rounding-zmeng = lv_dec.
                ENDIF.

              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
          ENDIF.

          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
          TRY.
              <lwa_postponed_data>-postp_qty = ls_grid_data-postp_amt / <lwa_itm_vals>-cost_ratio.

            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected."lv_operation = 'Q' AND lv_istat = 'R'.
        lv_qty_extra = <lwa_postponed_data>-rej_qty - ls_grid_data-rej_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-rej_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan - <lwa_postponed_data>-rej_qty.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + ls_grid_data-rej_qty.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = ls_grid_data-rej_qty.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected."lv_operation = 'A' AND lv_istat = 'R'.
        lv_amt_extra = <lwa_postponed_data>-rej_amt - ls_grid_data-rej_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-rej_amt ) < lv_amt_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt - <lwa_postponed_data>-rej_amt.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + ls_grid_data-rej_amt.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_amt.
          TRY.
              <lwa_postponed_data>-rej_qty = ls_grid_data-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ENDIF.

      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                           istat = lv_istat
                                                                           psdat = lv_date
                                                                           updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        CASE lv_operation.
          WHEN gc_operation-q." 'Q'.
            IF lv_qty_extra < ( <lwa_critm>-zmeng ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng - lv_qty_extra.
              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.

              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                        cuepos = <lwa_critm>-cuepos
                                                                        istat = gc_ibill_stat-open"'A'
                                                                        updkz = gc_updkz_new.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_qty_extra < <lwa_critm>-zmeng.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + lv_qty_extra.
                ELSE.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                UNASSIGN <lwa_critm_new_a>.

              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
              ENDIF.

              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = gc_ibill_stat-open ."'A'.

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              IF lv_qty_extra > <lwa_critm>-zmeng.
                lv_qty_extra = lv_qty_extra - <lwa_critm>-zmeng.
              ELSE.
                lv_qty_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.
          WHEN gc_operation-a."'A'.
            IF lv_amt_extra < ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              TRY.

                  lwa_clrqit_new-zmeng = ( ( <lwa_critm>-kbetr1 ) - lv_amt_extra )
                                                 / <lwa_itm_vals>-cost_ratio.

                CATCH cx_root.
                  lwa_clrqit_new-zmeng = 1.
              ENDTRY.
              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                         cuepos = <lwa_critm>-cuepos
                                                                         istat = gc_ibill_stat-open. "'A'.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_amt_extra < ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                  TRY.
                      lwa_clrqit_new-zmeng = ( ( <lwa_critm_new_a>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_extra )
                                             / <lwa_itm_vals>-cost_ratio.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ELSE.
                  TRY.
                      lwa_clrqit_new-zmeng = ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ENDIF.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                UNASSIGN <lwa_critm_new_a>.
              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
              ENDIF.

              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low.
              gs_clrit_org-istat = gc_ibill_stat-open."'A'.
*

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

              ENDIF.

              IF lv_amt_extra > ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                lv_amt_extra = lv_amt_extra - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
              ELSE.
                lv_amt_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.

        ENDCASE.
      ENDIF.


    WHEN 3.
      "
    WHEN OTHERS.
  ENDCASE.
  CASE lv_process.
    WHEN 1.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index. ""LOOOP
        IF <lwa_critm>-clrit <> ls_clrqit-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.
          READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi
                                                 WITH KEY clrno     = <lwa_critm>-clrno
                                                          bill_item = <lwa_critm>-rtbbinr
                                                          bitype    = <lwa_critm>-bityp.
          IF <lwa_critm>-clrsit = gc_clrsit_low.

            CONTINUE.
          ELSE.
            IF lv_qty_needed = 0 AND lv_amt_needed = 0.
              EXIT.
*
            ELSEIF <lwa_critm>-istat = gc_ibill_stat-open AND lwa_clrqbi-bstat IS INITIAL."<lwa_critm>-bstat IS INITIAL.
              CLEAR gs_rounding.

              IF ( lv_operation = gc_operation-q AND <lwa_critm>-zmeng <= lv_qty_needed )
                OR ( lv_operation = gc_operation-a AND ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) <= lv_amt_needed ).
                "Create X.
                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems . "'X'.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
                "Create P.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                lwa_clrqit_new-istat = lv_istat.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-psdat = lv_date.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  TRY.
                      lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                      lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.

                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ENDIF.


                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.

                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                IF lv_operation = gc_operation-q.
                  lv_qty_needed = lv_qty_needed - <lwa_critm>-zmeng.
                ELSE.
                  lv_amt_needed = lv_amt_needed - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.
                CLEAR <lwa_critm>-rtbbinr.
              ELSE.
                "Make Current Line 'X'.

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems . "'X'.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.

                "Create lv_istat ( lv_qty_needed)
                CLEAR : lwa_clrqit_new,
                     gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                lwa_clrqit_new-istat =  lv_istat.
                lwa_clrqit_new-psdat = lv_date.
                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  lwa_clrqit_new-cuepos = <lwa_critm>-cuepos.
                ELSE.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =   lv_qty_needed.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ELSE.
                  lwa_clrqit_new-kbetr1 = lv_amt_needed.
                  TRY.
                      lwa_clrqit_new-zmeng = lv_amt_needed / <lwa_itm_vals>-cost_ratio .

                      CLEAR : lv_dec , lv_quan_temp.
                      lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
                      lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                      IF lv_dec > 0.
                        gs_rounding-kschl1 = gc_kschl1-ydif .
                        gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                        gs_rounding-zmeng = lv_dec.
                      ENDIF.

                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
*                 Check for  amount
                  IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
                    lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  ENDIF.
                ENDIF.

                "espos Logic
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.

                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                "Create 'A' ( current line - lv_qty_needed )
                CLEAR : lwa_clrqit_new,
                     gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.

                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.

                lwa_clrqit_new-istat = gc_ibill_stat-open.
                CLEAR lwa_clrqit_new-psdat.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  ( <lwa_critm>-zmeng - lv_qty_needed ).
                  IF lwa_clrqit_new-zmeng < 0.
                    lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
                  ENDIF.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 = ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )
                                                  - lv_amt_needed ).
                  lwa_clrqit_new-kbetr1 = <lwa_itm_vals>-open_amt.
                  TRY.
                      lwa_clrqit_new-zmeng =  ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )
                                                  - lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.

                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  IF lwa_clrqit_new-zmeng < 0.
                    lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
                  ENDIF.
*                 Check for  amount
                  IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
                    lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  ENDIF.
                ENDIF.


                "espos Logic
                gs_clrit_org-clrno = <lwa_critm>-clrno.
                gs_clrit_org-clrit = <lwa_critm>-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.

                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                CLEAR <lwa_critm>-rtbbinr.
                CLEAR gs_variables-bit_num_gen.
                EXIT.
              ENDIF.

            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed ."lv_operation = 'Q' AND lv_istat = 'P'.
        ls_grid_data-postp_qty = ls_grid_data-postp_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed ."lv_operation = 'A' AND lv_istat = 'P'.
        ls_grid_data-postp_amt = ls_grid_data-postp_amt - lv_amt_needed_t.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected ."lv_operation = gc_operation-q AND lv_istat = 'R'.
        ls_grid_data-rej_qty = ls_grid_data-rej_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected."lv_operation = 'A' AND lv_istat = 'R'.
        ls_grid_data-rej_amt = ls_grid_data-rej_amt - lv_amt_needed_t.
      ENDIF.
    WHEN 2.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index.
        IF <lwa_critm>-clrit <> <lwa_critm_item>-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.

          IF <lwa_critm>-clrsit =  gc_clrsit_low.
            CONTINUE.
          ELSE.

            IF ( lv_operation = gc_operation-q AND lv_qty_extra = 0 ) OR
              ( lv_operation = gc_operation-a AND lv_amt_extra = 0 ).
              EXIT.

            ELSEIF <lwa_critm>-istat = lv_istat AND <lwa_critm>-psdat = lv_date.
              IF ( lv_operation = gc_operation-q AND <lwa_critm>-zmeng <= lv_qty_extra ) OR
                ( lv_operation = gc_operation-a AND ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) <= lv_amt_extra ).
                "Make Current Line 'X'.

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
                "Create A
                CLEAR : lwa_clrqit_new,
                                             gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ELSE.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng .
                ENDIF.


                CLEAR lwa_clrqit_new-psdat.
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                CLEAR gs_variables-bit_num_gen.
                IF lv_operation = gc_operation-q.
                  lv_qty_extra = lv_qty_extra - <lwa_critm>-zmeng.
                ELSE.
                  lv_amt_extra = lv_amt_extra - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.
                CLEAR <lwa_critm>-rtbbinr.
              ELSE.

*                    Make Current Line 'X'

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.

                """Create P (  lv_qty_extra)
                CLEAR : lwa_clrqit_new,
                                            gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-istat = lv_istat.
                lwa_clrqit_new-psdat = lv_date.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng = <lwa_critm>-zmeng - lv_qty_extra.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 =  ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ) - lv_amt_extra ).
                  TRY.
                      lwa_clrqit_new-zmeng =  lwa_clrqit_new-kbetr1 / <lwa_itm_vals>-cost_ratio.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.

                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = '000000'. "ls_clrqit_first-ldetla. "gc_clsdit_low.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                "Create A ( Current Line Qty = lv_qty_extra )
                CLEAR : lwa_clrqit_new,
                                                                gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  lwa_clrqit_new-cuepos = <lwa_critm>-cuepos.
                ELSE.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-istat = gc_ibill_stat-open ."'A'.
                CLEAR lwa_clrqit_new-psdat.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =   lv_qty_extra.
                  lwa_clrqit_new-kbetr1 =  lv_qty_extra * <lwa_itm_vals>-cost_ratio ."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 = lv_amt_extra.
                  TRY.
                      lwa_clrqit_new-zmeng =   lv_amt_extra / <lwa_itm_vals>-cost_ratio.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.


                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                CLEAR gs_variables-bit_num_gen.
                CLEAR <lwa_critm>-rtbbinr.
                EXIT.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_qty = 0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_amt = 0.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_qty =  0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_amt =  0.
      ENDIF.
  ENDCASE.
*// Make the main item( 000000 ) reason code as MULT when sub items having multiple reason codes
  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WHERE clrno = ls_clrqit-clrno
                                                          AND  clrit = ls_clrqit-clrit
                                                          AND  clrsit <> gc_sub_main .
    IF <lwa_critm>-rsncd IS NOT INITIAL.
      IF lv_count IS INITIAL.
        lv_count = 1.
        DATA(lv_rsncd) = <lwa_critm>-rsncd.
        CONTINUE.
      ELSEIF lv_rsncd IS NOT INITIAL AND lv_rsncd <> <lwa_critm>-rsncd.
        lv_count = lv_count + 1.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_cr_mainitm>)
          WITH KEY clrno = <lwa_critm>-clrno
                   clrit = <lwa_critm>-clrit
                   clrsit = gc_sub_main.
  IF sy-subrc EQ 0 AND
  <lwa_cr_mainitm> IS ASSIGNED.
    IF lv_count = 1.
      <lwa_cr_mainitm>-rsncd = lv_rsncd.
    ELSEIF lv_count > 1.
      <lwa_cr_mainitm>-rsncd = gc_clin_mult.
    ENDIF.
    IF <lwa_cr_mainitm>-updkz IS INITIAL.
      <lwa_cr_mainitm>-updkz = gc_updkz_update.
    ENDIF.
    gs_variables-refresh_calc_req_items_grid = abap_true.
    gs_variables-refersh_bill_bp_grid = abap_true.
  ENDIF.

  gs_variables-calc_changed = abap_true.
  DELETE gs_clrqdoc_infocus-x-critm WHERE updkz = abap_true.
  CLEAR gs_variables-process_type.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form dropdown_val
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LT_DROPDOWN
*&---------------------------------------------------------------------*
FORM dropdown_val  CHANGING lt_dropdown TYPE lvc_t_dral.

  SELECT * FROM tvfst
    INTO TABLE @DATA(lt_tvfst)
    WHERE spras = @sy-langu.

  LOOP AT lt_tvfst INTO DATA(ls_tvfst).
    APPEND VALUE #( handle    = gc_handle_one
                    value     = |{ ls_tvfst-faksp }| & | | & |{ ls_tvfst-vtext }|
                    int_value = ls_tvfst-faksp ) TO lt_dropdown.
  ENDLOOP.

  lt_dropdown = VALUE lvc_t_dral( BASE lt_dropdown ( handle = gc_handle_one
                                  value = space
                                  int_value = space ) ).
ENDFORM.
*&---------------------------------------------------------------------*
*& Form confirm_to_save
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM confirm_to_save .

  DATA lv_answer TYPE c.
  CLEAR: lv_answer.
  PERFORM popup_to_confirm_for_on_demand USING TEXT-054
                                               TEXT-055
                                               TEXT-065
                                               space "'ICON_CHECKED'
                                               TEXT-066
                                               space "'ICON_CANCEL'
                                               abap_true
                                         CHANGING lv_answer.
  CASE lv_answer.
    WHEN gc_answer-yes.
      PERFORM document_save USING gs_clrqdoc_infocus
                                  abap_true.
      CLEAR gs_variables-calc_changed.
      PERFORM set_calc_request_doc_infocus USING gs_variables-selected_vbeln.
    WHEN gc_answer-no.
      PERFORM set_calc_request_doc_infocus USING gs_variables-selected_vbeln.
      gs_variables-refersh_document = abap_true.
      gs_variables-refresh_calc_req_items_grid = abap_true.
      gs_variables-refersh_bill_bp_grid = abap_true.
    WHEN OTHERS.
      "Cancel : Answer - A
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_cost_element_group
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CONTRACT_HDR_/CGDC/RTBPN
*&      --> LWA_DATA_KSTAR
*&      <-- LV_WHERE_CLAUSE
*&      <-- LV_VALID
*&---------------------------------------------------------------------*
FORM  check_cost_element_group  USING lv_bukrs TYPE bukrs
                                     lv_kokrs TYPE kokrs
                                     lv_rtbpn TYPE /cgdc/rtbpn
                                     lv_kstar TYPE kstar
                                     lv_alisa
                            CHANGING lv_where_clause TYPE string
                                     lv_valid TYPE char1.

  DATA: lwa_rtb_ce_grp   TYPE /cgdc/t_rtbaceg,
        ls_t001          TYPE t001,
        lt_set_lines     TYPE TABLE OF grpobjects,
        ls_info          LIKE  grphinfo,
        ls_overwrite     LIKE  sy-datar,
        lv_setid         TYPE setid,
        lt_set_line_val  TYPE TABLE OF grpvalues,
        lwa_set_line_val TYPE grpvalues.

  CLEAR: lv_where_clause.
  SELECT SINGLE * FROM t001
    INTO ls_t001
    WHERE bukrs = lv_bukrs.

  LOOP AT gt_rtbp_costelem_grp INTO lwa_rtb_ce_grp.
    IF lwa_rtb_ce_grp-cegroup IS NOT INITIAL.
      CONCATENATE gc_setclass-cost_elem_grp ls_t001-ktopl lwa_rtb_ce_grp-cegroup INTO lv_setid.
      CALL FUNCTION 'K_HIERARCHY_TABLES_READ'
        EXPORTING
          e_class     = gc_setclass-cost_elem_grp
          e_setid     = lv_setid
          e_kokrs     = lv_kokrs
          e_mandt     = sy-mandt
        TABLES
          t_nodes     = lt_set_lines
          t_values    = lt_set_line_val
        CHANGING
          c_info      = ls_info
          c_overwrite = ls_overwrite.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      LOOP AT lt_set_line_val INTO lwa_set_line_val.
        IF lv_kstar IS NOT INITIAL.
          IF lwa_set_line_val-vfrom >= lv_kstar AND lwa_set_line_val-vfrom =< lv_kstar.
            lv_valid = abap_true.
            EXIT.
          ENDIF.
        ELSE.
          IF lv_where_clause IS INITIAL.
            CONCATENATE lv_where_clause ` ( ` lv_alisa `~KSTAR <= '` lwa_set_line_val-vfrom `' AND `
            lv_alisa `~KSTAR >= '` lwa_set_line_val-vfrom `' )` INTO  lv_where_clause.
          ELSE.
            CONCATENATE lv_where_clause ` OR ( ` lv_alisa `~KSTAR <= '` lwa_set_line_val-vfrom `' AND `
            lv_alisa `~KSTAR >= '` lwa_set_line_val-vfrom `' )` INTO  lv_where_clause.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE.
      IF lv_where_clause IS INITIAL.
        CONCATENATE lv_where_clause ` ( ` lv_alisa `~KSTAR = '` lwa_rtb_ce_grp-kstar `' )`
        INTO  lv_where_clause.
      ELSE.
        CONCATENATE lv_where_clause ` OR ( ` lv_alisa `~KSTAR = '` lwa_rtb_ce_grp-kstar `' )`
        INTO  lv_where_clause.
      ENDIF.

    ENDIF.
    IF lv_valid IS NOT INITIAL.
      lv_valid = abap_true.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.

FORM  check_cost_element_group_v2 TABLES ct_kstar TYPE ty_kstar_range
                                  USING
                                     lv_bukrs TYPE bukrs
                                     lv_kokrs TYPE kokrs
                                     lv_rtbpn TYPE /cgdc/rtbpn
                                     lv_kstar TYPE kstar
                                     lv_alisa
                                  CHANGING
                                     lv_valid TYPE char1.

  DATA: lwa_rtb_ce_grp   TYPE /cgdc/t_rtbaceg,
        ls_t001          TYPE t001,
        lt_set_lines     TYPE TABLE OF grpobjects,
        ls_info          LIKE  grphinfo,
        ls_overwrite     LIKE  sy-datar,
        lv_setid         TYPE setid,
        lt_set_line_val  TYPE TABLE OF grpvalues,
        lwa_set_line_val TYPE grpvalues.

  CLEAR: ct_kstar[].

  SELECT SINGLE * FROM t001
    INTO ls_t001
    WHERE bukrs = lv_bukrs.

  LOOP AT gt_rtbp_costelem_grp INTO lwa_rtb_ce_grp.
    IF lwa_rtb_ce_grp-cegroup IS NOT INITIAL.
      CONCATENATE gc_setclass-cost_elem_grp ls_t001-ktopl lwa_rtb_ce_grp-cegroup INTO lv_setid.
      CHECK lv_kokrs IS NOT INITIAL.
      CALL FUNCTION 'K_HIERARCHY_TABLES_READ'
        EXPORTING
          e_class                     = gc_setclass-cost_elem_grp
          e_setid                     = lv_setid
          e_kokrs                     = lv_kokrs
          e_mandt                     = sy-mandt
        TABLES
          t_nodes                     = lt_set_lines
          t_values                    = lt_set_line_val
        CHANGING
          c_info                      = ls_info
          c_overwrite                 = ls_overwrite
        EXCEPTIONS
          no_controlling_area         = 1
          no_chart_of_account         = 2
          different_controlling_areas = 3
          different_chart_of_accounts = 4
          set_not_found               = 5
          illegal_field_replacement   = 6
          illegal_table_replacement   = 7
          fm_raise                    = 8
          convert_error               = 9
          no_overwrite_standard_hier  = 10
          no_bukrs_for_kokrs          = 11
          OTHERS                      = 12.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
      LOOP AT lt_set_line_val INTO lwa_set_line_val.
        IF lv_kstar IS NOT INITIAL.
          IF lwa_set_line_val-vfrom >= lv_kstar AND lwa_set_line_val-vfrom =< lv_kstar.
            lv_valid = abap_true.
            EXIT.
          ENDIF.
        ELSE.
          "collect range
          APPEND VALUE #( sign  = gc_range_tbl_sign-include
                          option = COND #( WHEN lwa_set_line_val-vfrom < lwa_set_line_val-vto THEN gc_operator-between ELSE gc_operator-equal )
                          low = lwa_set_line_val-vfrom
                          high = lwa_set_line_val-vto ) TO  ct_kstar.
        ENDIF.
      ENDLOOP.
    ELSE.
      "Collect Range
      APPEND VALUE #( sign  = gc_range_tbl_sign-include
                      option = gc_operator-equal
                      low = lwa_rtb_ce_grp-kstar ) TO ct_kstar.
    ENDIF.
    IF lv_valid IS NOT INITIAL.
      lv_valid = abap_true.
      EXIT.
    ENDIF.
  ENDLOOP.

  SORT ct_kstar BY sign option low high.
  DELETE ADJACENT DUPLICATES FROM ct_kstar COMPARING ALL FIELDS.
ENDFORM.
FORM create_billing_item CHANGING ls_clrq_itm_new TYPE /cgdc/s_clrqit.

**  DATA: ls_clrqcost      TYPE /cgdc/s_clrqcost,
**        ls_clr_blpl      TYPE /cgdc/s_clrqblpl,
**        lv_bill_typ      TYPE /cgdc/bitype,
**        lv_pop_st        TYPE datum,
**        lv_pop_end       TYPE datum,
**        ls_bill_num_open TYPE /cgdc/_clrqbi,
**        ls_bill_item     TYPE /cgdc/s_clrqbi,
**        ls_bill_num      TYPE /cgdc/s_clrqbi,
**        ls_bill_typ      TYPE /cgdc/t_bilitty,
**        ls_message       TYPE /cgdc/s_message,
**        ls_cafrdst       TYPE /cgdc/_cafrdst,
**        lv_billrel       TYPE rvari_val_255.
**
**  DATA : ls_clrqhd_brf  TYPE /cgdc/s_clrqhd_brf,
**         ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
**         ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
**         lt_clrq_msgs   TYPE /cgdc/tt_cafd_clrqit_messages,
**         lt_mult_data   TYPE /cgdc/tt_cafd_clrqit_mult,
**         ls_mult_data   TYPE /cgdc/s_cafd_clrqit_mult,
**         lt_cafd_mult   TYPE STANDARD TABLE OF t_cafd_mult,
**         lwa_calc_grp   TYPE /cgdc/t_rtbpcg,
**         ls_cafd_mult   TYPE t_cafd_mult,
**         lv_bilmatnr    TYPE /cgdc/bilmatnr,
**         lv_amount      TYPE /cgdc/cafd_funda,
**         lv_where       TYPE string,
**         lt_bilityp     TYPE TABLE OF /cgdc/t_bilitty,
**         lwa_bilityp    TYPE  /cgdc/t_bilitty,
**         ls_bilitty     TYPE  /cgdc/t_bilitty,
**         ls_clrtic      TYPE /cgdc/t_rtbic.
**  DATA: ls_clrq_itm_new_fcat TYPE /cgdc/s_clrqit_fcat.
**  DATA: ls_itmkey TYPE /cgdc/s_clrqit_key.
**  FIELD-SYMBOLS: <lv_field> TYPE  data.
**  FIELD-SYMBOLS: <lwa_clrqit>    TYPE /cgdc/s_clrqit,
**                 <lwa_cafd_mult> TYPE t_cafd_mult.
**  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.
**
**  DATA: lv_cegrp    TYPE /cgdc/cegroup,
**        lv_skfgrp   TYPE /cgdc/skfgrp,
**        lv_atgrp    TYPE /cgdc/atgrp,
**        lv_ccggrp   TYPE /cgdc/ccgrp,
**        lv_msg_code TYPE /cgdc/err_msg,
**        lv_msg_typ  TYPE symsgty.
**  CLEAR : lv_bill_typ, ls_clrqhd_brf,
**            ls_clrqit_brf, ls_clrcost_brf.
**  DATA: lt_clrq_err TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
**        ls_clrq_err TYPE /cgdc/t_clrq_err.
**  "Derive the billing item type
**  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.
**  MOVE-CORRESPONDING ls_clrq_itm_new            TO ls_clrqit_brf.
**  MOVE-CORRESPONDING ls_clrq_itm_new            TO ls_clrcost_brf.
**  CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
**    EXPORTING
**      is_clrqhd   = ls_clrqhd_brf
**      is_clrqit   = ls_clrqit_brf
**      is_clrqcost = ls_clrcost_brf
**    IMPORTING
**      ev_bi_type  = lv_bill_typ.
**  IF sy-subrc <> 0.
**  ENDIF.
**
**  IF NOT lv_bill_typ IS INITIAL.
**    CLEAR ls_bill_typ.
**    SELECT SINGLE * FROM /cgdc/t_bilitty
**                      INTO ls_bill_typ
**                      WHERE bilitmtyp EQ lv_bill_typ.
**  ENDIF.
**  IF  ls_clrq_itm_new-bill_usage IS INITIAL.
**    ls_clrq_itm_new-bill_usage = ls_bill_typ-bill_usage.
**  ENDIF.
**
**  IF gt_bilitty IS INITIAL.
**    SELECT * FROM /cgdc/t_bilitty
**             INTO TABLE gt_bilitty.
**  ENDIF.
**  SELECT *
**     FROM /cgdc/t_bilitty
**     INTO  TABLE @lt_bilityp.
**
**  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15
**
**  "++SOC - Performance optimization
***  SELECT * FROM /cgdc/t_clrq_err
***           INTO TABLE lt_clrq_err.
**  CALL METHOD /cgdc/cl_clrq_process=>get_error_confg
**    IMPORTING
**      et_clrq_err = lt_clrq_err.
**  "++EOC - Performance optimization
**
**  "Only process this code when a new item is being added
**  " in real time to the calculation request.
**  IF gs_variables-bit_num_gen EQ abap_true.
**
**    "If the message code from material determination is of type
**    " error then do not assign billing item number
**    IF NOT lv_msg_code IS INITIAL.
**      CLEAR: lv_msg_typ, ls_clrq_err.
**      READ TABLE lt_clrq_err INTO ls_clrq_err
**      WITH KEY msg_code = lv_msg_code.
**      lv_msg_typ = ls_clrq_err-msgty.
**    ENDIF.
**
**    IF lv_msg_code IS INITIAL OR
**     ( lv_msg_code IS NOT INITIAL AND lv_msg_typ NE gc_message_type-error ).
**
**      IF NOT lv_bill_typ IS INITIAL.
**        CLEAR ls_bilitty.
**        READ TABLE gt_bilitty INTO ls_bilitty
**                              WITH KEY bilitmtyp = lv_bill_typ.
**        IF sy-subrc EQ 0.
**          CASE ls_bilitty-pop_src_date.
**            WHEN gc_pop_src_date-docu.
**              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
**            WHEN gc_pop_src_date-post.
**              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-budat.
**            WHEN OTHERS.
**              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
**          ENDCASE.
**        ENDIF.
**
**        IF NOT lv_bill_typ IS INITIAL.
**          ls_clrq_itm_new-bityp = lv_bill_typ.
**          IF NOT ls_bill_typ IS INITIAL.
**
**            CLEAR ls_bill_item.
**            ls_bill_item-bitype     = lv_bill_typ.
**            ls_bill_item-vgbel      = ls_clrq_itm_new-vgbel.
**            ls_bill_item-vgpos      = ls_clrq_itm_new-vgpos.
**            ls_bill_item-ps_psp_pnr = ls_clrq_itm_new-ps_psp_pnr.
**
**            PERFORM get_performance_dates USING ls_bill_item
**                                                ls_clrq_itm_new
**                                          CHANGING lv_pop_st
**                                                   lv_pop_end.
**
**            "Check if a billing item number of the type exists
**            "in the calc req. item table in open status
**            IF <lwa_clrqbi> IS ASSIGNED.
**              UNASSIGN <lwa_clrqbi>.
**            ENDIF.
**            IF NOT ls_bill_typ-bilmatnr IS INITIAL.
**              lv_bilmatnr = ls_bill_typ-bilmatnr.
**            ELSE.
**              lv_bilmatnr = ls_clrq_itm_new-matnr.
**            ENDIF.
***          LOOP AT gs_clrqdoc_infocus-x-crbinr
***          ASSIGNING <lwa_clrqbi> WHERE clrno     = ls_clrq_itm_new-clrno
***                                AND bitype      = lv_bill_typ
***                                AND bilmatnr    = lv_bilmatnr "ls_bill_typ-bilmatnr
***                                AND ps_psp_pnr  = ls_clrq_itm_new-ps_psp_pnr
***                                AND bstat       = space
***                                AND pop_stdt    <= lv_pop_st
***                                AND pop_enddt   >= lv_pop_end
***                                AND /cgdc/cline = ls_clrq_itm_new-/cgdc/cline.
***            EXIT.
***          ENDLOOP.
**            PERFORM prep_bi_where_cls  USING  ls_clrq_itm_new
**                                    lv_bill_typ
**                                    lv_bilmatnr
**                           CHANGING lv_where.
**
**            LOOP AT gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_clrqbi> WHERE (lv_where).
**              EXIT.
**            ENDLOOP.
**            IF <lwa_clrqbi> IS ASSIGNED.
**              MOVE-CORRESPONDING <lwa_clrqbi> TO ls_bill_num_open.
**              PERFORM assign_exist_bill_item USING ls_bill_num_open
**                                                   ls_bill_typ
**                                                   '1'
**                                             CHANGING ls_clrq_itm_new
**                                                      ls_clrq_itm_new_fcat.
**
**              READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = ls_clrq_itm_new-pstyv. "RTB24-15
**
**              READ TABLE lt_bilityp INTO lwa_bilityp
**              WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.
**              IF sy-subrc = 0.
**                IF lwa_bilityp-qty_1 = abap_true.
**                  <lwa_clrqbi>-zmeng = 1.
**                ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
**                  <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + ls_clrq_itm_new-zmeng.
**                ENDIF.
**              ENDIF.
**              <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + ls_clrq_itm_new-netwr.
**              <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + ls_clrq_itm_new-wavwr.
**              <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + ls_clrq_itm_new-kzwi1.
**              <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + ls_clrq_itm_new-kzwi2.
**              <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + ls_clrq_itm_new-kzwi3.
**              <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + ls_clrq_itm_new-kzwi4.
**              <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + ls_clrq_itm_new-kzwi5.
**              <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + ls_clrq_itm_new-kzwi6.
**              "++SOC- Decimal precision fields
**              <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + ls_clrq_itm_new-netwr24.
**              <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
**              <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
**              <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
**              <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
**              <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
**              <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
**              "++EOC- Decimal precision fields
**              <lwa_clrqbi>-updkz = gc_updkz_update.
**            ELSE.
**
**              IF NOT ls_bill_typ-bilmatnr IS INITIAL.
**                lv_bilmatnr = ls_bill_typ-bilmatnr.
**              ELSE.
**                lv_bilmatnr = ls_clrq_itm_new-matnr.
**              ENDIF.
**
**              SELECT SINGLE *
**                     FROM /cgdc/_clrqbi
**                     INTO ls_bill_num_open
**                WHERE clrno       EQ ls_clrq_itm_new-clrno
**                AND   bitype      EQ lv_bill_typ
**                AND   bilmatnr    EQ lv_bilmatnr "ls_bill_typ-bilmatnr
**                AND   ps_psp_pnr  EQ ls_clrq_itm_new-ps_psp_pnr
**                AND   bstat       EQ space
**                AND   pop_stdt    LE lv_pop_st
**                AND   pop_enddt   GE lv_pop_end
**                AND   /cgdc/cline EQ ls_clrq_itm_new-/cgdc/cline.
**              IF sy-subrc IS INITIAL.
**                PERFORM assign_exist_bill_item USING ls_bill_num_open
**                                                     ls_bill_typ
**                                                     '1' "gc_call- "
**                                               CHANGING ls_clrq_itm_new
**                                                        ls_clrq_itm_new_fcat.
**                CLEAR ls_bill_num.
**                ls_bill_num = CORRESPONDING #( ls_bill_num_open ).
**
**                READ TABLE lt_bilityp INTO lwa_bilityp
**                WITH KEY bilitmtyp = ls_bill_num-bitype.
**
**                READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = ls_clrq_itm_new-pstyv. "RTB24-15
**
**                IF sy-subrc = 0.
**                  IF lwa_bilityp-qty_1 = abap_true.
**                    ls_bill_num-zmeng = 1.
**                  ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
**                    ls_bill_num-zmeng = ls_bill_num-zmeng + ls_clrq_itm_new-zmeng.
**                  ENDIF.
**                ENDIF.
**
**                ls_bill_num-netwr = ls_bill_num-netwr + ls_clrq_itm_new-netwr.
**                ls_bill_num-wavwr = ls_bill_num-wavwr + ls_clrq_itm_new-wavwr.
**                ls_bill_num-kzwi1 = ls_bill_num-kzwi1 + ls_clrq_itm_new-kzwi1.
**                ls_bill_num-kzwi2 = ls_bill_num-kzwi2 + ls_clrq_itm_new-kzwi2.
**                ls_bill_num-kzwi3 = ls_bill_num-kzwi3 + ls_clrq_itm_new-kzwi3.
**                ls_bill_num-kzwi4 = ls_bill_num-kzwi4 + ls_clrq_itm_new-kzwi4.
**                ls_bill_num-kzwi5 = ls_bill_num-kzwi5 + ls_clrq_itm_new-kzwi5.
**                ls_bill_num-kzwi6 = ls_bill_num-kzwi6 + ls_clrq_itm_new-kzwi6.
**                "++SOC- Decimal Precision fields
**                ls_bill_num-netwr24 = ls_bill_num-netwr24 + ls_clrq_itm_new-netwr24.
**                ls_bill_num-kzwi1_24 = ls_bill_num-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
**                ls_bill_num-kzwi2_24 = ls_bill_num-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
**                ls_bill_num-kzwi3_24 = ls_bill_num-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
**                ls_bill_num-kzwi4_24 = ls_bill_num-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
**                ls_bill_num-kzwi5_24 = ls_bill_num-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
**                ls_bill_num-kzwi6_24 = ls_bill_num-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
**                "++EOC- Decimal precision fields
**
**                APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.
**              ELSE.
**                CASE ls_bill_typ-bilcreate_type.
**                  WHEN gc_bilcrttyp-auto OR gc_bilcrttyp-auma or gc_bilcrttyp-scit.
**
**                    ls_clrq_itm_new_fcat = CORRESPONDING #( ls_clrq_itm_new ).
**                    SELECT SINGLE  crbukrs, cgjahr,
**                                   cbelnr, cbuzei FROM /cgdc/_clrqcost
**                           INTO ( @ls_clrq_itm_new_fcat-rbukrs, @ls_clrq_itm_new_fcat-gjahr,
**                                  @ls_clrq_itm_new_fcat-belnr,  @ls_clrq_itm_new_fcat-buzei )
**                           WHERE clrno EQ @ls_clrq_itm_new-clrno
**                           AND   clrit EQ @ls_clrq_itm_new-clrit.
**
**
**                    "Assign/Create billing item number to the calc req item
**                    PERFORM generate_billing_item_number  USING ls_bill_typ
**                                                                ls_clrq_itm_new_fcat
**                                                          CHANGING ls_clrq_itm_new.
**
**                  WHEN OTHERS.
**                    "Do not assign bill item number
**                    CLEAR ls_message.
**                    ls_message-msgid = gc_clrq_msg_cls.
**                    ls_message-msgnr = gc_msg_cls_msgnr-056.
**                    ls_message-msgty = gc_message_type-warning.
**                    ls_message-msgv1 = lv_bill_typ.
**                    ls_message-fieldname = gc_clrqit_field-rtbbinr.
**                    APPEND ls_message TO gt_messages.
**
**                    CLEAR ls_clrq_err.
**                    READ TABLE lt_clrq_err INTO ls_clrq_err
**                    WITH KEY msgclass = gc_clrq_msg_cls
**                             msgid = gc_msg_cls_msgnr-056.
**                    IF sy-subrc EQ 0.
**                      ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
**                      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
**                      IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
**                        ls_clrq_itm_new-msg_icon = icon_yellow_light .
**                      ELSE.
**                        ls_clrq_itm_new-msg_icon = icon_green_light.
**                      ENDIF.
**                    ELSE.
**                      ls_clrq_itm_new-msg_icon = icon_yellow_light .
**                    ENDIF.
**                ENDCASE.
**              ENDIF.
**            ENDIF.
**            IF ( ls_clrq_itm_new-rtbbinr IS INITIAL AND
**               ( ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-auto
**              OR ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-auma
**              OR ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-scit  )  ).
**              CLEAR ls_message.
**              ls_message-msgid = gc_clrq_msg_cls.
**              ls_message-msgnr = gc_msg_cls_msgnr-055.
**              ls_message-msgty = gc_message_type-error.
**              ls_message-msgv1 = lv_bill_typ.
**              ls_message-fieldname = gc_clrqit_field-rtbbinr.
**              APPEND ls_message TO gt_messages.
**
**              CLEAR ls_clrq_err.
**              READ TABLE lt_clrq_err INTO ls_clrq_err
**              WITH KEY msgclass = gc_clrq_msg_cls
**                       msgid = gc_msg_cls_msgnr-055.
**              IF sy-subrc EQ 0.
**                ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
**                CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
**                IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
**                  ls_clrq_itm_new-msg_icon = icon_red_light.
**                ELSE.
**                  ls_clrq_itm_new-msg_icon = icon_green_light.
**                ENDIF.
**              ENDIF.
**            ENDIF.
**          ELSE.
**            "Config for bill item type is missing
**            CLEAR ls_message.
**            ls_message-msgid = gc_clrq_msg_cls.
**            ls_message-msgnr = gc_msg_cls_msgnr-042.
**            ls_message-msgty = gc_message_type-error.
**            ls_message-msgv1 = lv_bill_typ.
**            ls_message-fieldname = gc_clrqit_field-rtbbinr.
**            APPEND ls_message TO gt_messages.
**
**            CLEAR ls_clrq_err.
**            READ TABLE lt_clrq_err INTO ls_clrq_err
**            WITH KEY msgclass = gc_clrq_msg_cls
**                     msgid = gc_msg_cls_msgnr-042.
**            IF sy-subrc EQ 0.
**              ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
**              CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
**              IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
**                ls_clrq_itm_new-msg_icon = icon_red_light.
**              ELSE.
**                ls_clrq_itm_new-msg_icon = icon_green_light.
**              ENDIF.
**            ENDIF.
**          ENDIF.
**        ELSE.
**          "No bill item type found.
**          CLEAR ls_message.
**          ls_message-msgid = gc_clrq_msg_cls.
**          ls_message-msgnr = gc_msg_cls_msgnr-037.
**          ls_message-msgty = gc_message_type-error.
**          ls_message-msgv1 = ls_clrq_itm_new-clrno.
**          ls_message-msgv2 = ls_clrq_itm_new-clrit.
**          ls_message-fieldname = gc_clrqit_field-rtbbinr.
**          APPEND ls_message TO gt_messages.
**
**          CLEAR ls_clrq_err.
**          READ TABLE lt_clrq_err INTO ls_clrq_err
**          WITH KEY msgclass = gc_clrq_msg_cls
**                   msgid = gc_msg_cls_msgnr-037.
**          IF sy-subrc EQ 0.
**            ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
**            CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
**            IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
**              ls_clrq_itm_new-msg_icon = icon_red_light.
**            ELSE.
**              ls_clrq_itm_new-msg_icon = icon_green_light.
**            ENDIF.
**          ENDIF.
**        ENDIF.
**      ELSE.
**        "Message that BIL ITEM will not be generated due to mat determination error.
**        CLEAR ls_message.
**        ls_message-msgid = gc_clrq_msg_cls.
**        ls_message-msgnr = gc_msg_cls_msgnr-048.
**        ls_message-msgty = gc_message_type-error.
**        ls_message-msgv1 = ls_clrq_itm_new-clrno.
**        ls_message-msgv2 = ls_clrq_itm_new-clrit.
**        ls_message-fieldname = gc_clrqit_field-rtbbinr.
**        APPEND ls_message TO gt_messages.
**      ENDIF.
**    ELSE.
**      "When parallel processing, billing item number is not determined.
**      "populate error.
**      CLEAR ls_clrq_err.
**      READ TABLE lt_clrq_err INTO ls_clrq_err
**      WITH KEY msgclass = gc_clrq_msg_cls
**               msgid    = gc_msg_cls_msgnr-061.
**      IF sy-subrc EQ 0.
**        CLEAR ls_clrq_itm_new-msg_code.
**        ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
**        CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
**        ls_clrq_itm_new-msg_icon = icon_red_light.
**      ENDIF.
**    ENDIF.
**  ENDIF.
  DATA ls_clrq_itm_new_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA lv_call_bit_ex TYPE flag.

  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.
  PERFORM determine_billing_item USING    '' ''
                              CHANGING ls_clrq_itm_new_fcat
                                       ls_clrq_itm_new
                                       lv_call_bit_ex.

*  *****BOC - After pricing update amount on billing item*****************************
  IF gt_item_catg  IS INITIAL.
    PERFORM select_item_catgs USING ''.
  ENDIF.
  READ TABLE gt_item_catg INTO DATA(lwa_item_catg) WITH KEY pstyv = ls_clrq_itm_new-pstyv.
  IF <lwa_clrqbi> IS ASSIGNED.
    UNASSIGN <lwa_clrqbi>.
  ENDIF.
  SELECT *
           FROM /cgdc/t_bilitty
           INTO  TABLE @DATA(lt_bilityp).

  READ TABLE gs_clrqdoc_infocus-x-crbinr
  ASSIGNING <lwa_clrqbi>
  WITH KEY clrno     = ls_clrq_itm_new-clrno
           bill_item = ls_clrq_itm_new-rtbbinr.
  IF sy-subrc = 0 AND ( gs_clrit_org-istat = gc_ibill_stat-open  OR ls_clrq_itm_new-clrsit = '000001' ).
    IF lv_call_bit_ex = abap_true.

      READ TABLE lt_bilityp INTO DATA(lwa_bilityp)
       WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15..
          <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.

      <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + ls_clrq_itm_new-kzwi6.
      <lwa_clrqbi>-waerk = ls_clrq_itm_new-waerk.
      "++SOC - decimal precision fields
      <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields
      IF <lwa_clrqbi>-updkz IS INITIAL.
        <lwa_clrqbi>-updkz = gc_updkz_update.
      ENDIF.

    ELSE.
      READ TABLE lt_bilityp INTO lwa_bilityp
       WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15.
          <lwa_clrqbi>-zmeng =  ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.
      <lwa_clrqbi>-netwr = ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = ls_clrq_itm_new-kzwi6.
      <lwa_clrqbi>-waerk = ls_clrq_itm_new-waerk.
      "++SOC - Decimal precision fields
      <lwa_clrqbi>-netwr24 = ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields

    ENDIF.


  ENDIF.
*****EOC - After pricing update amount on billing item*****************************

ENDFORM.
*&---------------------------------------------------------------------*
*& Form caf_assignment
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <GT_BILL_PRE_DATA>
*&      --> GS_CLRQDOC_INFOCUS_X_CRHDR_CLR
*&---------------------------------------------------------------------*
FORM caf_assignment  USING lt_bill_pre_data TYPE data
                           lv_clrno         TYPE /cgdc/clrqno
                     CHANGING lv_cafs_flag     TYPE flag.

  DATA: BEGIN OF ls_clrqit_key,
          clrno  TYPE /cgdc/clrqno,
          clrit  TYPE /cgdc/clrq_itmno,
          clrsit TYPE /cgdc/clrq_sitmno,
          clrdit TYPE /cgdc/clrq_delta_item,
        END OF ls_clrqit_key.

  DATA: lt_messages          TYPE /cgdc/tt_cafd_clrqit_messages,
        lt_mult              TYPE /cgdc/tt_cafd_clrqit_mult,
        lt_mult_tmp          TYPE /cgdc/tt_cafd_clrqit_mult,
        ls_mult              TYPE /cgdc/s_cafd_clrqit_mult,
        lt_pre_bill_data_fin LIKE gt_bill_pre_data,
        lt_clrqit_main       TYPE /cgdc/tt_clrqit,
        lt_clrqit            TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin        TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin_open   TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin_postp  TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin_tmp    TYPE /cgdc/tt_clrqit,
        lt_clrqit_tmp        TYPE /cgdc/tt_clrqit,
        lt_clrqit_x          TYPE /cgdc/tt_clrqit,
        lt_cafs              TYPE /cgdc/tt_clrqcaf,
        lt_cafs_del          TYPE /cgdc/tt_clrqcaf,
        ls_cafs              TYPE /cgdc/s_clrqcaf,
        ls_clrq_doc          TYPE /cgdc/s_clrq_doc,
        ls_postpone_fcat     TYPE /cgdc/s_clrq_postpone,
        lt_clrq_doc          TYPE /cgdc/tt_clrq_doc,
        lt_bill_data         TYPE STANDARD TABLE OF /cgdc/d_clrq_ag,
        lt_bill_data_fin     TYPE STANDARD TABLE OF /cgdc/d_clrq_ag,
        ls_bill_data         TYPE /cgdc/d_clrq_ag,
        lv_billrel           TYPE rvari_val_255,
        ls_clrqit            TYPE /cgdc/s_clrqit,
        ls_clrqit_tmp        TYPE /cgdc/s_clrqit,
        ls_clrqit_new        TYPE /cgdc/s_clrqit,
        lv_netwr             TYPE netwr_ap,
        lt_clrqbi            TYPE /cgdc/tt_clrqbi,
        lt_clrqic_fin        TYPE TABLE OF /cgdc/_clrqic,
        ls_clrqbi            TYPE /cgdc/s_clrqbi,
        ls_clrq_itm_new      TYPE /cgdc/s_clrqit_fcat,
        lv_line              TYPE i,
        lwa_clrqit           TYPE /cgdc/s_clrqit,
        lwa_clrqit_fin       TYPE /cgdc/s_clrqit,
        lwa_message          TYPE /cgdc/s_cafd_clrqit_messages,
        lwa_bplnty           TYPE /cgdc/t_bplnty.

  FIELD-SYMBOLS: <lv_fsched>         TYPE any,
                 <lfs_cafs>          TYPE /cgdc/s_clrqcaf,
                 <lfs_bill_pre_data> TYPE data,
                 <lfs_clrqit>        TYPE /cgdc/s_clrqit.

  DATA: ls_clrqit_key_prev LIKE ls_clrqit_key,
        ls_bplnty          TYPE /cgdc/t_bplnty.

  REFRESH: lt_messages, lt_mult,
           lt_clrqit_main.

  SELECT SINGLE COUNT(*)
    FROM /cgdc/_clrqbi
    WHERE clrno = @gs_clrqdoc_infocus-clrno
      AND bstat NOT IN (@gc_bibstat-open,@gc_bibstat-invoice_posted,@gc_bibstat-invoice_cleared).
  IF sy-subrc = 0.
    SELECT SINGLE COUNT(*)
     FROM /cgdc/_clrqdf
     WHERE clrno = @gs_clrqdoc_infocus-clrno
       AND sbdct = @gc_pbd.
    IF sy-subrc = 0.
      EXIT.
    ENDIF.
  ENDIF.

  CLEAR lv_billrel.
  PERFORM get_billing_relevance USING gc_var_type-cb124
                                CHANGING lv_billrel.

  IF <lfs_bill_pre_data> IS ASSIGNED.
    UNASSIGN <lfs_bill_pre_data>.
  ENDIF.

  LOOP AT lt_bill_pre_data ASSIGNING <lfs_bill_pre_data>.
***DCLM 5764
    CLEAR ls_bill_data.
    UNASSIGN <lv_fsched>.
    ASSIGN COMPONENT 'FSCHED' OF STRUCTURE <lfs_bill_pre_data> TO <lv_fsched>.
    CHECK <lv_fsched> IS ASSIGNED.
    ls_bill_data = CORRESPONDING #( <lfs_bill_pre_data> ).

    IF ( ls_bill_data-fkrel CA lv_billrel
      AND ls_bill_data-bstat IS INITIAL ).

      IF <lv_fsched> IS INITIAL.
        APPEND ls_bill_data TO lt_bill_data.
      ELSE.
        APPEND ls_bill_data TO lt_bill_data_fin.
      ENDIF.

    ENDIF.
***
  ENDLOOP.

  IF NOT lt_bill_data IS INITIAL.
    SELECT * FROM /cgdc/_clrqit AS a
      LEFT OUTER JOIN  /cgdc/_clrqic AS b ON
                      a~clrno  = b~clrno
                  AND a~clrit  = b~clrit
                  AND a~clrsit = b~clrsit
                  AND a~clrdit = b~clrdit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqit
      FOR ALL ENTRIES IN lt_bill_data
      WHERE a~clrno   EQ lt_bill_data-clrno
      AND   a~rtbbinr EQ lt_bill_data-bill_item
      AND   istat     EQ gc_ibill_stat-open.
    IF sy-subrc EQ 0.
      SELECT * FROM /cgdc/_clrqit AS a
      LEFT OUTER JOIN  /cgdc/_clrqic AS b ON
                  a~clrno = b~clrno
                  AND a~clrit = b~clrit
                  AND a~clrsit = b~clrsit
                  AND a~clrdit = b~clrdit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqit_fin
      FOR ALL ENTRIES IN lt_clrqit
      WHERE a~clrno   EQ lt_clrqit-clrno
      AND   a~clrit   EQ lt_clrqit-clrit
      AND   a~clrsit  EQ gc_sub_main
      AND   istat   EQ gc_ibill_stat-open.
    ENDIF.

    APPEND LINES OF lt_clrqit_fin TO lt_clrqit.
    SORT lt_clrqit BY clrno clrit clrsit clrdit.
***DCLM 6995
*    DELETE ADJACENT DUPLICATES FROM lt_clrqit COMPARING clrno clrit clrsit clrdit.

    LOOP AT lt_clrqit INTO lwa_clrqit.

      MOVE-CORRESPONDING lwa_clrqit TO ls_clrqit_key.

      IF ls_clrqit_key_prev EQ ls_clrqit_key.
        DELETE lt_clrqit.
        CONTINUE.
      ELSE.
        ls_clrqit_key_prev = ls_clrqit_key.
      ENDIF.

      CLEAR: ls_bplnty.
      PERFORM read_blnpl_item_type_data USING lwa_clrqit-bpln_type lwa_clrqit-pstyv CHANGING ls_bplnty.

      IF NOT ls_bplnty IS INITIAL AND ls_bplnty-dndca IS NOT INITIAL.
        DELETE lt_clrqit.
      ENDIF.

    ENDLOOP.
***
    lt_clrqit_tmp = lt_clrqit.
    DELETE lt_clrqit_tmp WHERE clrsit NE gc_sub_main.

    DELETE lt_clrqit_fin WHERE /cgdc/cline IS NOT INITIAL.
    SORT lt_clrqit_fin BY clrno clrit.

    CLEAR ls_clrqit.
    LOOP AT lt_clrqit_fin INTO ls_clrqit.
      CLEAR: ls_clrqit_new, lv_netwr.
      LOOP AT lt_clrqit INTO ls_clrqit_new WHERE clrno EQ ls_clrqit-clrno
                                           AND   clrit EQ ls_clrqit-clrit
                                           AND   clrsit NE gc_sub_main.
        lv_netwr = lv_netwr + ls_clrqit_new-netwr.
        CLEAR ls_clrqit_new.
      ENDLOOP.

      IF <lfs_clrqit> IS ASSIGNED.
        UNASSIGN <lfs_clrqit>.
      ENDIF.
      READ TABLE lt_clrqit ASSIGNING <lfs_clrqit>
                           WITH KEY clrno = ls_clrqit-clrno
                                    clrit = ls_clrqit-clrit
                                    clrsit = gc_sub_main.
      IF sy-subrc EQ 0.
        <lfs_clrqit>-netwr = lv_netwr.
      ENDIF.
      CLEAR ls_clrqit.
    ENDLOOP.

    CALL FUNCTION '/CGDC/CAFD_CLRQIT'
      EXPORTING
        iv_call_from       = gc_cal_request
        iv_clr_no          = lv_clrno
        iv_det_missing_caf = abap_true
        it_clrqit          = lt_clrqit_fin
      IMPORTING
        et_clrq_messages   = lt_messages
        et_mult_data       = lt_mult
        et_clrqit_main     = lt_clrqit_main
      CHANGING
        ct_clrqit          = lt_clrqit.
    IF sy-subrc <> 0.
    ENDIF.


    READ TABLE lt_messages TRANSPORTING NO FIELDS
                           WITH KEY msgid = gc_cafd_msg_cls
                                    msgno = gc_msg_cls_msgnr-186.
    IF sy-subrc EQ 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e186(/cgdc/cafd) DISPLAY LIKE gc_message_type-information.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_cafd_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-186.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      lv_cafs_flag = abap_true.
      EXIT.
    ENDIF.

    REFRESH lt_clrqbi.
    lt_clrqbi = gs_clrqdoc_infocus-x-crbinr.

    IF NOT lt_mult IS INITIAL.
      REFRESH lt_mult_tmp.

      CLEAR ls_clrqbi.
      LOOP AT lt_clrqbi INTO ls_clrqbi.
        CLEAR: ls_clrqit, ls_clrqit_tmp.
        LOOP AT lt_clrqit INTO ls_clrqit WHERE clrno   EQ ls_clrqbi-clrno
                                         AND   rtbbinr EQ ls_clrqbi-bill_item.

          REFRESH lt_mult_tmp.
          lt_mult_tmp[] = lt_mult[].

          DELETE lt_mult_tmp WHERE NOT ( clrno  EQ ls_clrqit-clrno
                                    AND  clrit  EQ ls_clrqit-clrit
                                    AND  clrsit EQ ls_clrqit-clrsit
                                    AND  clrdit EQ ls_clrqit-clrdit ).

          IF NOT lt_mult_tmp IS INITIAL.
            SORT lt_mult_tmp BY clin.
            DELETE ADJACENT DUPLICATES FROM lt_mult_tmp COMPARING clin.

            CLEAR lv_line.
            lv_line = lines( lt_mult_tmp ).

            IF lv_line GT 1.
              ls_clrqbi-/cgdc/cline = gc_clin_mult.
            ELSE.
              ls_clrqbi-/cgdc/cline = ls_mult-clin.
            ENDIF.

            ls_clrqbi-updkz = gc_updkz_update.
            CLEAR ls_clrqit.
          ENDIF.

        ENDLOOP.
        APPEND ls_clrqbi TO ls_clrq_doc-x-crbinr.
        CLEAR ls_clrqbi.
      ENDLOOP.
    ENDIF.

    SORT lt_clrqit BY /cgdc/cline.

    REFRESH lt_clrqit_x.
    lt_clrqit_x[] = lt_clrqit[].

    DELETE lt_clrqit_x WHERE /cgdc/cline EQ gc_clin_mult
                       OR    /cgdc/acrns EQ gc_clin_mult
                       OR    /cgdc/fmsck EQ gc_clin_mult.

    IF NOT lt_clrqit_x IS INITIAL.
      CLEAR ls_clrqbi.
      LOOP AT lt_clrqbi INTO ls_clrqbi.
        CLEAR: ls_clrqit, ls_clrqit_tmp.
        LOOP AT lt_clrqit_x INTO ls_clrqit WHERE clrno   EQ ls_clrqbi-clrno
                                           AND   rtbbinr EQ ls_clrqbi-bill_item.

          ls_clrqbi-/cgdc/cline = ls_clrqit-/cgdc/cline.
          IF NOT ls_clrqit_tmp IS INITIAL.
            IF ls_clrqit_tmp-/cgdc/cline NE ls_clrqit-/cgdc/cline.
              ls_clrqbi-/cgdc/cline = gc_clin_mult.
            ENDIF.
          ENDIF.
          CLEAR ls_clrqit_tmp.
          ls_clrqit_tmp = ls_clrqit.
          CLEAR: ls_clrqit.
        ENDLOOP.
        IF sy-subrc NE 0.
          CONTINUE.
        ENDIF.
        ls_clrqbi-updkz = gc_updkz_update.
        MODIFY lt_clrqbi FROM ls_clrqbi.
        CLEAR ls_clrqbi.
      ENDLOOP.
      APPEND LINES OF lt_clrqbi TO ls_clrq_doc-x-crbinr.
    ENDIF.


    IF <lfs_clrqit> IS ASSIGNED.
      UNASSIGN <lfs_clrqit>.
    ENDIF.

    LOOP AT lt_clrqit ASSIGNING <lfs_clrqit> WHERE clrsit EQ gc_sub_main.
      CLEAR ls_clrqit.
      READ TABLE lt_clrqit_tmp INTO ls_clrqit
                               WITH KEY clrno  = <lfs_clrqit>-clrno
                                        clrit  = <lfs_clrqit>-clrit
                                        clrsit = <lfs_clrqit>-clrsit.
      IF sy-subrc EQ 0.
        <lfs_clrqit>-netwr = ls_clrqit-netwr.
      ENDIF.
    ENDLOOP.

    ls_clrq_doc-updkz         = abap_true.
    ls_clrq_doc-clrno         = gs_clrqdoc_infocus-clrno.
    ls_clrq_doc-x-crhdr       = gs_clrqdoc_infocus-x-crhdr.
    APPEND LINES OF lt_clrqit TO ls_clrq_doc-x-critm.

    IF NOT lt_mult IS INITIAL.

      DELETE lt_mult WHERE clrsit = gc_sub_main.
      SELECT * FROM /cgdc/_clrqcaf
      INTO CORRESPONDING FIELDS OF TABLE lt_cafs_del
      FOR ALL ENTRIES IN lt_mult
      WHERE clrno  EQ lt_mult-clrno
      AND   clrit  EQ lt_mult-clrit
      AND   clrsit EQ lt_mult-clrsit
      AND   clrdit EQ lt_mult-clrdit.
      IF sy-subrc EQ 0.
        IF <lfs_cafs> IS ASSIGNED.
          UNASSIGN <lfs_cafs>.
        ENDIF.
        LOOP AT lt_cafs_del ASSIGNING <lfs_cafs>.
          <lfs_cafs>-updkz = gc_updkz_delete.
        ENDLOOP.

        ls_clrq_doc-updkz         = abap_true.
        ls_clrq_doc-y-crhdr       = gs_clrqdoc_infocus-x-crhdr.
        ls_clrq_doc-y-crhdr-updkz = gc_updkz_update.
        ls_clrq_doc-y-crcaf       = lt_cafs_del.
      ENDIF.

      CLEAR ls_mult.
      LOOP AT lt_mult INTO ls_mult.
        CLEAR ls_cafs.
        ls_cafs-clrno       = ls_mult-clrno.
        ls_cafs-clrit       = ls_mult-clrit.
        ls_cafs-clrsit      = ls_mult-clrsit.
        ls_cafs-clrdit      = ls_mult-clrdit.
        ls_cafs-/cgdc/cline = ls_mult-clin.
        ls_cafs-/cgdc/acrns = ls_mult-acrns.
        ls_cafs-/cgdc/fmsck = ls_mult-fmsck.
        ls_cafs-cslin       = ls_mult-cslin.
        ls_cafs-netwr       = CONV netwr_ap( ls_mult-amount ).
        ls_cafs-fcuky       = ls_mult-fcuky.
        ls_cafs-updkz       = gc_updkz_new.
        APPEND ls_cafs TO lt_cafs.
      ENDLOOP.

      ls_clrq_doc-updkz         = abap_true.
      ls_clrq_doc-clrno         = gs_clrqdoc_infocus-clrno.
      ls_clrq_doc-x-crhdr       = gs_clrqdoc_infocus-x-crhdr.
      ls_clrq_doc-x-crhdr-updkz = gc_updkz_update.
      APPEND LINES OF lt_cafs TO ls_clrq_doc-x-crcaf.


    ENDIF.

    REFRESH lt_clrq_doc.
    APPEND ls_clrq_doc TO lt_clrq_doc.
    CALL FUNCTION '/CGDC/CLRQ_SAVE'
      EXPORTING
        i_commit_work = abap_true
      CHANGING
        ct_clrq_doc   = lt_clrq_doc
      EXCEPTIONS
        no_change     = 1
        OTHERS        = 2.
    IF sy-subrc <> 0.
    ENDIF.

    PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno CHANGING gs_clrqdoc_infocus.

  ENDIF.                                    " DCLM 7059
***DCLM 5764
  IF lt_bill_data_fin IS NOT INITIAL.       " DCLM 7059

    SELECT *
      FROM /cgdc/_clrqit AS a
      LEFT OUTER JOIN /cgdc/_clrqic AS b
      ON a~clrno = b~clrno
        AND a~clrit = b~clrit
        AND a~clrsit = b~clrsit
        AND a~clrdit = b~clrdit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqit
      FOR ALL ENTRIES IN lt_bill_data_fin
      WHERE a~clrno EQ lt_bill_data_fin-clrno
      AND a~rtbbinr EQ lt_bill_data_fin-bill_item
      AND istat EQ gc_ibill_stat-open.

    IF sy-subrc EQ 0.

      SELECT *
        FROM /cgdc/_clrqit AS a
        LEFT OUTER JOIN /cgdc/_clrqic AS b
        ON a~clrno = b~clrno
          AND a~clrit = b~clrit
          AND a~clrsit = b~clrsit
          AND a~clrdit = b~clrdit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqit_fin
      FOR ALL ENTRIES IN lt_clrqit
      WHERE a~clrno EQ lt_clrqit-clrno
        AND a~clrit EQ lt_clrqit-clrit.

    ENDIF.

    IF NOT lt_clrqit_fin IS INITIAL.

      LOOP AT lt_clrqit_fin INTO lwa_clrqit_fin.

        IF lwa_clrqit_fin-istat EQ gc_ibill_stat-open AND lwa_clrqit_fin-clrsit EQ gc_sub_main.
          APPEND lwa_clrqit_fin TO lt_clrqit_fin_open.
        ELSEIF lwa_clrqit_fin-istat EQ gc_ibill_stat-postponed.
          APPEND lwa_clrqit_fin TO lt_clrqit_fin_postp.
        ENDIF.

      ENDLOOP.

    ENDIF.

    APPEND LINES OF lt_clrqit_fin_open TO lt_clrqit.
    SORT lt_clrqit BY clrno clrit clrsit clrdit.
    SORT lt_clrqit_fin_postp BY clrno clrit.
***DCLM 6995
*    DELETE ADJACENT DUPLICATES FROM lt_clrqit COMPARING clrno clrit clrsit clrdit.

    LOOP AT lt_clrqit INTO lwa_clrqit.

      MOVE-CORRESPONDING lwa_clrqit TO ls_clrqit_key.

      IF ls_clrqit_key_prev EQ ls_clrqit_key.
        DELETE lt_clrqit.
        CONTINUE.
      ELSE.
        ls_clrqit_key_prev = ls_clrqit_key.
      ENDIF.

      CLEAR: ls_bplnty.
      PERFORM read_blnpl_item_type_data USING lwa_clrqit-bpln_type lwa_clrqit-pstyv CHANGING ls_bplnty.

      IF NOT ls_bplnty IS INITIAL AND ls_bplnty-dndca IS NOT INITIAL.
        DELETE lt_clrqit.
      ENDIF.

    ENDLOOP.
***
    lt_clrqit_tmp = lt_clrqit.
    DELETE lt_clrqit_tmp WHERE clrsit NE gc_sub_main.
    SORT lt_clrqit_fin_open BY clrno clrit.
    CLEAR ls_clrqit.

    LOOP AT lt_clrqit_fin_open INTO ls_clrqit.

      CLEAR: ls_clrqit_new, lv_netwr.

      LOOP AT lt_clrqit INTO ls_clrqit_new WHERE clrno EQ ls_clrqit-clrno AND clrit EQ ls_clrqit-clrit AND clrsit NE gc_sub_main.
        lv_netwr = lv_netwr + ls_clrqit_new-netwr.
        CLEAR ls_clrqit_new.
      ENDLOOP.

      IF <lfs_clrqit> IS ASSIGNED.
        UNASSIGN <lfs_clrqit>.
      ENDIF.

      READ TABLE lt_clrqit
      ASSIGNING <lfs_clrqit>
      WITH KEY clrno = ls_clrqit-clrno
               clrit = ls_clrqit-clrit
               clrsit = gc_sub_main.

      IF sy-subrc EQ 0.
        <lfs_clrqit>-netwr = lv_netwr.
      ENDIF.

      CLEAR ls_clrqit.

    ENDLOOP.

    CALL FUNCTION '/CGDC/CAFD_CLRQIT'
      EXPORTING
        iv_call_from       = gc_cal_request
        iv_clr_no          = lv_clrno
        iv_det_missing_caf = abap_true
        it_clrqit          = lt_clrqit_fin_open
        is_contract_data   = gs_contract_hdr
      IMPORTING
        et_clrq_messages   = lt_messages
        et_mult_data       = lt_mult
        et_clrqit_main     = lt_clrqit_main
      CHANGING
        ct_clrqit          = lt_clrqit.

    PERFORM split_pbp_country_funding_base USING lt_messages lt_clrqit_fin_open lt_clrqit_fin_postp.  "DCLM 7059
***
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_cafs_grid_items
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_cafs_grid_items .
  DATA: lt_fcat            TYPE lvc_t_fcat,
        lv_title           TYPE lvc_title,
        ls_layout          TYPE lvc_s_layo,
        ls_variant         TYPE disvariant,
        lt_toolbar_exclude TYPE ui_functions.




  CREATE OBJECT go_grid_disp_cafs
    EXPORTING
      i_parent          = go_display_alv_cafs
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.


  PERFORM exclude_toolbar_buttons USING gc_call-1
                                  CHANGING lt_toolbar_exclude.
  PERFORM prepare_field_catalog USING gc_structure-disp_cafs
                                CHANGING lt_fcat.

  IF NOT gt_cafs IS INITIAL.
    CLEAR lv_title.
    lv_title = TEXT-114.

    CLEAR ls_layout.
    ls_layout-sel_mode   = gc_layout_selmode-a.
    ls_layout-stylefname = gc_layout_style.
    ls_layout-info_fname = gc_layout_info_fname.
    ls_layout-grid_title = lv_title.
    ls_layout-smalltitle = abap_true.

    CLEAR ls_variant.
    ls_variant-report = gc_program.

    CALL METHOD go_grid_disp_cafs->set_table_for_first_display(
      EXPORTING
        i_bypassing_buffer            = abap_true
        is_variant                    = ls_variant
        i_save                        = gc_save-a
        is_layout                     = ls_layout
        it_toolbar_excluding          = lt_toolbar_exclude
      CHANGING
        it_outtab                     = gt_cafs
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4 ).

  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form create_ebdr_proforma
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <GT_BILL_PRE_DATA>
*&---------------------------------------------------------------------*
FORM create_ebdr_proforma USING lv_commit_work.
  DATA: lo_data                    TYPE REF TO data,
        lv_billrel                 TYPE rvari_val_255,
        ls_control_data            TYPE bapiebdrrequestctrl,
        ls_administration_data     TYPE bapiebdrrequestadmin,
        lt_ebdr_data               TYPE bapiebdrrequest_t,
        lt_condition_data          TYPE bapiebdrrequestcond_t,
        lt_bdr_ptr                 TYPE bapiebdrrequestparnr_t,
        lt_cds_fields              TYPE dfies_table,
        lt_xref_docs               TYPE t_vbeln,
        lt_ebdrcreateddoc          TYPE bapiebdrrequestextbilldocreq_t,
        lt_ebdrcreateddocitem      TYPE bapiebdrrequestresult_t,
        lt_ebdrcreatefaileddocitem TYPE bapiebdrrequestfailed_t,
        lt_message                 TYPE bapiebdrrequestmsg_t,
        lt_return                  TYPE bapiret2_t.
*        lt_grp_prf_data            TYPE /cgdc/tt_clrqgrp.

  DATA: lv_xref_doc_tabix TYPE sy-tabix VALUE 1,
        lv_kposn          TYPE kposn,
        lwa_xref_doc      TYPE s_vbeln,
        ls_bdr_item       TYPE bapiebdrrequestresult,
        lv_where          TYPE string,
        lt_critm          TYPE /cgdc/tt_clrqit,
        ls_critm          TYPE /cgdc/s_clrqit,
        ls_crdfl          TYPE /cgdc/s_clrqdf,
        lt_bill_pre_all   TYPE TABLE OF /cgdc/s_clrqbi_fcat,
        lt_bill_pre_pos   TYPE TABLE OF /cgdc/s_clrqbi_fcat,
        lt_bill_pre_neg   TYPE TABLE OF /cgdc/s_clrqbi_fcat,
        lt_bill_grpid     TYPE TABLE OF /cgdc/s_clrqbi_fcat.

  FIELD-SYMBOLS: <lt_bill_pre_data> TYPE STANDARD TABLE,
                 <ls_data>          TYPE /cgdc/s_clrqbi_fcat,
                 <lv_fkrel>         TYPE data,
                 <lv_clrno>         TYPE any,
                 <lv_rtbbinr>       TYPE any,
                 <ls_clrqbi>        TYPE /cgdc/s_clrqbi.

  CREATE DATA lo_data TYPE TABLE OF /cgdc/s_clrqbi_fcat.
  ASSIGN lo_data->* TO <lt_bill_pre_data>.

  LOOP AT gt_bill_pre_data INTO DATA(lwa_bill_data).
    APPEND INITIAL LINE TO <lt_bill_pre_data> ASSIGNING FIELD-SYMBOL(<lwa_bill_pre_data>).
    MOVE-CORRESPONDING lwa_bill_data TO <lwa_bill_pre_data>.
    ASSIGN COMPONENT gc_clrqbi_field-bldat OF STRUCTURE <lwa_bill_pre_data> TO FIELD-SYMBOL(<lwa_value>).
    IF <lwa_value> IS ASSIGNED.
      <lwa_value> = lwa_bill_data-bldat.
      UNASSIGN <lwa_value>.
    ENDIF.

    ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE <lwa_bill_pre_data> TO <lwa_value>.
    IF <lwa_value> IS ASSIGNED.
      <lwa_value> = lwa_bill_data-bill_item.
      UNASSIGN <lwa_value>.
    ENDIF.
  ENDLOOP.
  CLEAR lv_billrel.
  PERFORM get_billing_relevance USING gc_var_type-cb124
                                CHANGING lv_billrel.

  DELETE <lt_bill_pre_data> WHERE (`FKREL CA lv_billrel`).

  DELETE gt_bill_pre_data WHERE (`FKREL NA lv_billrel`).

  IF NOT <lt_bill_pre_data> IS INITIAL.
    lt_bill_pre_all = <lt_bill_pre_data>.
    CLEAR <lt_bill_pre_data>.
    lt_bill_pre_all = <lt_bill_pre_data>.
    CLEAR <lt_bill_pre_data>.
*    lt_bill_grpid = lt_bill_pre_all.

*    IF sy-uname = 'SRISHETTY'.
    LOOP AT lt_bill_pre_all INTO DATA(lwa_bill_pre).
      IF lwa_bill_pre-netwr GT 0.
        IF lwa_bill_pre-auart IS NOT INITIAL AND
           lwa_bill_pre-bdrty IS NOT INITIAL.
          APPEND lwa_bill_pre TO lt_bill_pre_pos.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-164.
          gs_messages-msgty = gc_message_type-error.
          gs_messages-msgv1 = lwa_bill_pre-bill_item.
          gs_messages-msgv2 = lwa_bill_pre-bitype.
          APPEND gs_messages TO gt_messages.

        ENDIF.

      ELSEIF lwa_bill_pre-netwr LT 0.
        IF lwa_bill_pre-auart IS INITIAL OR
         lwa_bill_pre-bdrty IS INITIAL.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = gc_msg_cls_msgnr-164.
          gs_messages-msgty = gc_message_type-error.
          gs_messages-msgv1 = lwa_bill_pre-bill_item.
          gs_messages-msgv2 = lwa_bill_pre-bitype.
          APPEND gs_messages TO gt_messages.
        ELSEIF lwa_bill_pre-cr_auart IS NOT INITIAL AND
            lwa_bill_pre-cr_bdrty IS NOT INITIAL.
          APPEND lwa_bill_pre TO lt_bill_pre_neg. "Negative netwr + credit value ==> credit auart and bdrty
        ELSEIF lwa_bill_pre-auart IS NOT INITIAL AND
           lwa_bill_pre-bdrty IS NOT INITIAL.
          APPEND lwa_bill_pre TO lt_bill_pre_pos.
        ENDIF.
      ENDIF.


    ENDLOOP.

    SORT lt_bill_pre_pos BY grpid splt_id auart bdrty.
    DELETE ADJACENT DUPLICATES FROM lt_bill_pre_pos COMPARING grpid splt_id auart bdrty.

    SORT lt_bill_pre_neg BY grpid splt_id cr_auart cr_bdrty.
    DELETE ADJACENT DUPLICATES FROM lt_bill_pre_neg COMPARING grpid splt_id cr_auart cr_bdrty.

    UNASSIGN <lwa_bill_pre_data>.

    DO 2 TIMES.
      CASE sy-index.
        WHEN 1.
          lt_bill_grpid = lt_bill_pre_pos.
          DATA(lv_pos_flag) = 1.
        WHEN 2.
          lt_bill_grpid = lt_bill_pre_neg.
          lv_pos_flag = 2.
      ENDCASE.

      LOOP AT lt_bill_grpid INTO DATA(ls_bill_grpid).
        CASE lv_pos_flag.
          WHEN 1.
            LOOP AT lt_bill_pre_all INTO lwa_bill_pre WHERE
        grpid   = ls_bill_grpid-grpid AND
        splt_id = ls_bill_grpid-splt_id AND
        auart   = ls_bill_grpid-auart   AND
        bdrty   = ls_bill_grpid-bdrty.
              APPEND INITIAL LINE TO <lt_bill_pre_data> ASSIGNING <lwa_bill_pre_data>.
              MOVE-CORRESPONDING lwa_bill_pre TO <lwa_bill_pre_data>.
            ENDLOOP.
          WHEN 2.
            LOOP AT lt_bill_pre_all INTO lwa_bill_pre WHERE
        grpid   = ls_bill_grpid-grpid AND
        splt_id = ls_bill_grpid-splt_id AND
        cr_auart   = ls_bill_grpid-cr_auart   AND
        cr_bdrty   = ls_bill_grpid-cr_bdrty.
              APPEND INITIAL LINE TO <lt_bill_pre_data> ASSIGNING <lwa_bill_pre_data>.
              MOVE-CORRESPONDING lwa_bill_pre TO <lwa_bill_pre_data>.
            ENDLOOP.
        ENDCASE.



        PERFORM prepare_ebdr_data CHANGING <lt_bill_pre_data>
                                        lt_ebdr_data
                                        lt_bdr_ptr
                                        lt_condition_data
                                        ls_control_data
                                        ls_administration_data
                                        lt_cds_fields
                                        lt_xref_docs.
        IF lt_ebdr_data IS INITIAL.
          EXIT.
        ENDIF.

        CALL FUNCTION 'BAPI_EBDR_CREATEMULTIPLE'
          EXPORTING
            is_control_data            = ls_control_data
            is_administration_data     = ls_administration_data
            it_data                    = lt_ebdr_data
            it_condition_data          = lt_condition_data
            it_partner_data            = lt_bdr_ptr
          IMPORTING
            et_ebdrcreateddoc          = lt_ebdrcreateddoc
            et_ebdrcreateddocitem      = lt_ebdrcreateddocitem
            et_ebdrcreatefaileddocitem = lt_ebdrcreatefaileddocitem
            et_message                 = lt_message
            return                     = lt_return.
        IF sy-subrc <> 0.
        ENDIF.
        READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = gc_message_type-error.
        IF sy-subrc <> 0.
          IF lt_ebdrcreateddoc IS NOT INITIAL.
            lv_kposn = gs_clrqdoc_infocus-x-crhdr-xrfli.
            lwa_xref_doc-vbeln = gs_clrqdoc_infocus-x-crhdr-xrfdn.
            APPEND lwa_xref_doc TO lt_xref_docs.
            READ TABLE lt_xref_docs INTO lwa_xref_doc
            INDEX lv_xref_doc_tabix.

            LOOP AT <lt_bill_pre_data> ASSIGNING <ls_data>.
*        ASSIGN COMPONENT gc_clrqbi_field-clrno   OF STRUCTURE <ls_data> TO <lv_clrno>.
*        ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE <ls_data> TO <lv_rtbbinr>.
*        IF <lv_clrno> IS ASSIGNED AND <lv_rtbbinr> IS ASSIGNED.
*          READ TABLE gs_clrqdoc_infocus-x-crbinr TRANSPORTING NO FIELDS
*                                                 WITH KEY clrno     = <lv_clrno>
*                                                          bill_item = <lv_rtbbinr>
*                                                          bstat     = gc_ibill_stat-pbd_in_progress.
*          IF sy-subrc IS INITIAL.
*            CONTINUE.
*          ENDIF.
*          UNASSIGN: <lv_clrno>, <lv_rtbbinr>.
*        ENDIF.

*        lv_kposn = lv_kposn + 1.
*        CLEAR ls_bdr_item .
*        IF lv_kposn =  gc_kposn_low.
*          lv_xref_doc_tabix = lv_xref_doc_tabix + 1.
*          READ TABLE lt_xref_docs INTO lwa_xref_doc
*          INDEX lv_xref_doc_tabix.
*          lv_kposn = lv_kposn + 1.
*        ENDIF.

              READ TABLE lt_ebdrcreateddocitem INTO ls_bdr_item
              WITH KEY precedingdocument     = <ls_data>-xrfdn "lwa_xref_doc-vbeln
                       precedingdocumentitem = <ls_data>-xrfin. "lv_kposn.
              CHECK sy-subrc = 0.

*        CLEAR lv_where.
*        PERFORM prep_ebdr_critm_where_cls USING <ls_data>
*                                                lt_cds_fields
*                                                abap_true
*                                       CHANGING lv_where.
*
*        CLEAR lt_critm.
*        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC C
*        SELECT * FROM /cgdc/_clrqit
*            INTO TABLE @lt_critm
*            WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno
*            AND clrsit NE  @gc_clrsit_low
*            AND (lv_where).
*        CHECK sy-subrc EQ 0.
*
*        SORT lt_critm BY rtbbinr.
*        DELETE ADJACENT DUPLICATES FROM lt_critm COMPARING rtbbinr.
*
*        CLEAR ls_critm.
*        LOOP AT lt_critm INTO ls_critm.
              READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <ls_clrqbi>
                                      WITH KEY clrno     = <ls_data>-clrno
                                               bill_item = <ls_data>-bill_item
                                               bitype    = <ls_data>-bitype.
              IF sy-subrc EQ 0.
                <ls_clrqbi>-updkz = gc_updkz_update.
                <ls_clrqbi>-bstat = /cgdc/cl_clrq_process=>gc_itm_bill_status-billing_req..

                CLEAR : ls_crdfl.
                ls_crdfl-clrno   = <ls_data>-clrno. "ls_critm-clrno.
                ls_crdfl-rtbbinr = <ls_data>-bill_item. "ls_critm-rtbbinr.


                IF <ls_clrqbi>-netwr < 0.
                  IF <ls_clrqbi>-cr_bdrty IS NOT INITIAL.
                    ls_crdfl-sbqty = <ls_clrqbi>-cr_bdrty.
                  ELSEIF gs_rtbp-cr_bdrty IS NOT INITIAL AND <ls_clrqbi>-bdrty IS INITIAL.
                    ls_crdfl-sbqty = gs_rtbp-cr_bdrty.
                  ELSEIF <ls_clrqbi>-bdrty IS NOT INITIAL.
                    ls_crdfl-sbqty = <ls_clrqbi>-bdrty.
                  ENDIF.
                ELSE.
                  IF <ls_clrqbi>-bdrty IS NOT INITIAL.
                    ls_crdfl-sbqty = <ls_clrqbi>-bdrty.
                  ELSEIF gs_rtbp-bdrty IS NOT INITIAL.
                    ls_crdfl-sbqty = gs_rtbp-bdrty.
                  ENDIF.
                ENDIF.
                ls_crdfl-sbdct   = gc_sub_doc_cat-billing_doc_req.
                ls_crdfl-sbqdc   = ls_bdr_item-extbillingdocrequest.
                ls_crdfl-sbqit   = ls_bdr_item-extbillingdocrequestitem.
                ls_crdfl-netwr   = <ls_clrqbi>-netwr.
                ls_crdfl-waerk   = <ls_clrqbi>-waerk.
                ls_crdfl-xrfdn   = <ls_data>-xrfdn. "lwa_xref_doc-vbeln.
                ls_crdfl-xrfin   = <ls_data>-xrfin. "lv_kposn.
                ls_crdfl-erdat   = sy-datum.
                ls_crdfl-ernam   = sy-uname.
                ls_crdfl-erzet   = sy-uzeit.
                ls_crdfl-updkz   = gc_updkz_new.
                APPEND ls_crdfl TO gs_clrqdoc_infocus-x-crdfl.
              ENDIF.
*        ENDLOOP.
            ENDLOOP.

            IF  gs_clrqdoc_infocus-y-crhdr IS INITIAL.
              gs_clrqdoc_infocus-y-crhdr = gs_clrqdoc_infocus-x-crhdr.
            ENDIF.

            gs_clrqdoc_infocus-x-crhdr-xrfli = lv_kposn.
            gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
          ENDIF.
        ENDIF.
        PERFORM document_save USING  gs_clrqdoc_infocus
                                      lv_commit_work .

        PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno
                                           CHANGING gs_clrqdoc_infocus.

      ENDLOOP.

    ENDDO.






  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_item_billed
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CRITM_CLRNO
*&      --> LWA_CRITM_CLRIT
*&      <-- LV_BILLED
*&---------------------------------------------------------------------*
FORM check_item_billed  USING    lv_clrno
                                 lv_clrit
                        CHANGING lv_billed.
  DATA : lwa_critm TYPE /cgdc/s_clrqit.
  DATA : lwa_crbinr TYPE /cgdc/s_clrqbi.
  READ TABLE gs_clrqdoc_infocus-x-critm TRANSPORTING NO FIELDS WITH KEY clrno = lv_clrno clrit = lv_clrit BINARY SEARCH.
  IF sy-subrc = 0.
    LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm FROM sy-tabix.
      IF lwa_critm-clrit <> lv_clrit OR lwa_critm-clrno <> lv_clrno.
        EXIT.
      ELSEIF lwa_critm-clrsit <> gc_clrsit_low.             "'000000'.
        READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_crbinr WITH KEY bitype = lwa_critm-bityp
                                                                        bill_item = lwa_critm-rtbbinr.
        IF sy-subrc = 0 AND lwa_crbinr-bstat IS NOT INITIAL.
          lv_billed = abap_true.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM check_clrq_authorization USING lv_clrqy  TYPE /cgdc/clrqt
                                    lv_vkorg  TYPE vkorg
                                    lv_vtweg  TYPE vtweg
                                    lv_spart  TYPE spart
                                    lv_rtac   TYPE activ_auth
                                    lv_rtb_auth TYPE /cgdc/rtb_authfnkey
                             CHANGING lv_invalid TYPE flag.
  CALL METHOD /cgdc/cl_clrq_process=>rtb_authorization
    EXPORTING
      iv_clrqy    = lv_clrqy
      iv_vkorg    = lv_vkorg
      iv_spart    = lv_spart
      iv_fnkey    = lv_rtb_auth
      iv_rtb_actv = lv_rtac
      iv_vtweg    = lv_vtweg
    IMPORTING
      ev_invalid  = lv_invalid.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_dropdown_rcode
*&---------------------------------------------------------------------*
FORM create_dropdown_rcode.

  DATA: lt_rcode  TYPE STANDARD TABLE OF s_rcode,
        ls_rcode  TYPE s_rcode,
        lv_bitype TYPE /cgdc/bitype,
        lv_rsnprf TYPE /cgdc/rtb_rsnprf,
        lt_return TYPE STANDARD TABLE OF ddshretval,
        ls_return TYPE ddshretval.

  CLEAR lv_bitype.
  lv_bitype = /cgdc/s_clrqbi_scrnfld-bitype.

  CLEAR lv_rsnprf.
  SELECT SINGLE rsnprf FROM /cgdc/t_bilitty
                INTO lv_rsnprf
                WHERE bilitmtyp = lv_bitype.

  SELECT rsncd
         descr
         FROM /cgdc/t_rtbrpart INTO TABLE lt_rcode
         WHERE spras    EQ sy-langu
         AND   rsn_func EQ gc_rsn_func-bill_itm "'B'
         AND   rsnpf    EQ lv_rsnprf.


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = gc_rtbrpart_field-rsncd
      value_org       = gc_val_org-structure "'S'
    TABLES
      value_tab       = lt_rcode
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc EQ 0.
    CLEAR ls_return.
    READ TABLE lt_return INTO ls_return INDEX 1.
    /cgdc/s_clrqbi_scrnfld-rcode = ls_return-fieldval.

    CLEAR ls_rcode.
    READ TABLE lt_rcode INTO ls_rcode WITH KEY rsncd = /cgdc/s_clrqbi_scrnfld-rcode.
    IF sy-subrc EQ 0.
      /cgdc/t_rtbrpart-descr = ls_rcode-descr.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form create_rej_post_for_bill_items
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_rej_post_for_bill_items USING lv_flag TYPE char1
                                          ls_clrqit TYPE /cgdc/s_clrqit_fcat.

  FIELD-SYMBOLS : <lwa_crbinr> TYPE any,
                  <lwa_netwr>  TYPE any,
                  <lwa_bitype> TYPE any,
                  <lwa_zmeng>  TYPE any,
                  <lwa_wavr>   TYPE any.
  DATA : lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
         lwa_bilityp TYPE  /cgdc/t_bilitty.

  SELECT *
                FROM /cgdc/t_bilitty
                INTO  TABLE @lt_bilityp.

  IF lv_flag = gc_operator-minus_sign.
    READ TABLE gs_clrqdoc_infocus-x-crbinr INTO <lwa_crbinr> WITH KEY bill_item = ls_clrqit-rtbbinr
                                                              bitype  = ls_clrqit-bityp
                                                              pop_stdt = ls_clrqit-pop_stdt
                                                              pop_enddt = ls_clrqit-pop_enddt.
    IF sy-subrc = 0.
      ASSIGN COMPONENT gc_clrqbi_field-netwr OF STRUCTURE <lwa_crbinr> TO <lwa_netwr>.
      ASSIGN COMPONENT gc_clrqbi_field-zmeng OF STRUCTURE <lwa_crbinr> TO <lwa_zmeng>.
      ASSIGN COMPONENT gc_clrqbi_field-bitype  OF STRUCTURE <lwa_crbinr> TO <lwa_bitype>.
      ASSIGN COMPONENT 'WAVR' OF STRUCTURE <lwa_crbinr> TO <lwa_wavr>.
      IF <lwa_netwr> IS ASSIGNED AND <lwa_zmeng> IS ASSIGNED AND <lwa_wavr> IS ASSIGNED.

        READ TABLE lt_bilityp INTO lwa_bilityp
               WITH KEY bilitmtyp = <lwa_bitype>.

        IF sy-subrc = 0.
          IF lwa_bilityp-qty_1 = abap_true.
            <lwa_zmeng> = 1.
          ELSE.
            <lwa_zmeng> =  <lwa_zmeng> - ls_clrqit-zmeng.
          ENDIF.
        ENDIF.

        <lwa_crbinr> = <lwa_netwr> - ls_clrqit-netwr.
        <lwa_crbinr> = <lwa_wavr> - ls_clrqit-netwr.
      ENDIF.
    ENDIF.

  ELSEIF lv_flag = gc_operator-plus_sign.
    IF <lwa_crbinr> IS ASSIGNED.
      UNASSIGN <lwa_crbinr>.
    ENDIF.

    READ TABLE gs_clrqdoc_infocus-x-crbinr INTO <lwa_crbinr> WITH KEY bill_item = ls_clrqit-rtbbinr
                                                              bitype  = ls_clrqit-bityp
                                                              pop_stdt = ls_clrqit-pop_stdt
                                                              pop_enddt = ls_clrqit-pop_enddt.
    IF sy-subrc = 0.
      ASSIGN COMPONENT gc_clrqbi_field-netwr OF STRUCTURE <lwa_crbinr> TO <lwa_netwr>.
      ASSIGN COMPONENT gc_clrqbi_field-zmeng OF STRUCTURE <lwa_crbinr> TO <lwa_zmeng>.
      ASSIGN COMPONENT gc_clrqbi_field-bitype OF STRUCTURE <lwa_crbinr> TO <lwa_bitype>.
      ASSIGN COMPONENT 'WAVR' OF STRUCTURE <lwa_crbinr> TO <lwa_wavr>.
      IF <lwa_netwr> IS ASSIGNED AND <lwa_zmeng> IS ASSIGNED AND <lwa_wavr> IS ASSIGNED.

        READ TABLE lt_bilityp INTO lwa_bilityp
              WITH KEY bilitmtyp = <lwa_bitype>.

        IF sy-subrc = 0.
          IF lwa_bilityp-qty_1 = abap_true.
            <lwa_zmeng> = 1.
          ELSE.
            <lwa_zmeng> = <lwa_zmeng> + ls_clrqit-zmeng.
          ENDIF.
        ENDIF.
        <lwa_crbinr> = <lwa_netwr> + ls_clrqit-netwr.
*        <lwa_crbinr> = <lwa_zmeng> + ls_clrqit-zmeng.
        <lwa_crbinr> = <lwa_wavr> + ls_clrqit-netwr.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_holiday_date
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_CALENDARID
*&      --> LV_NEXT_WORKING_DAY
*&      <-- LV_NEXT_DATE
*&---------------------------------------------------------------------*
FORM check_holiday_date  USING lv_calendarid       TYPE btccalid
                              lv_next_working_day TYPE /cgdc/next_wrk_day
                     CHANGING lv_next_date        TYPE sy-datum.

  DATA: lv_error TYPE char1 VALUE abap_true.

  WHILE lv_error = abap_true.

    CALL FUNCTION '/CGDC/RRBS_CHECK_HOLIDAY_DATE'
      EXPORTING
        i_date       = lv_next_date
        i_calenderid = lv_calendarid
      IMPORTING
        e_error      = lv_error.

    IF lv_error = abap_true.

      IF lv_next_working_day EQ gc_operator-plus_sign.
        ADD 1 TO lv_next_date.
      ELSE.
        SUBTRACT 1 FROM lv_next_date.
      ENDIF.

    ENDIF.

  ENDWHILE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_need_for_scheduler
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM check_need_for_scheduler CHANGING lv_sched TYPE char1.
  DATA: lv_subrc                 TYPE sy-subrc,
        lv_tabix                 TYPE sy-tabix,
        lv_ucomm                 TYPE sy-ucomm,
        lv_vbeln                 TYPE vbeln_va,
        lv_button_1              TYPE string,
        lv_button_2              TYPE string,
        lv_question              TYPE string,
        lv_info_1                TYPE string,
        lv_info_2                TYPE string,
        lv_display_cancel_button,
        lv_excall(1),
        lv_skip_scheduler,
        lv_call_from_scheduler.
  DATA: lv_answer,
        lr_cr     TYPE RANGE OF /cgdc/clrqno,
        ls_cr     LIKE LINE OF lr_cr.
*- check if there is a autoscheduler assigned for contract
  SELECT SINGLE scheduling
         FROM  /cgdc/_blnplnh
          INTO @DATA(lv_sch)
          WHERE vbeln = @gs_clrqdoc_infocus-x-crhdr-vgbel.
  IF sy-subrc EQ 0.

    CONCATENATE TEXT-140 gs_clrqdoc_infocus-x-crhdr-vgbel
    TEXT-141 INTO lv_info_1.
    lv_question = TEXT-142.
    lv_info_2 = TEXT-143.
    lv_button_1 = TEXT-144.
    lv_display_cancel_button = abap_true.

  ELSE.

    SELECT * FROM /cgdc/t_rtbsc INTO TABLE @DATA(lt_scheduling_groups).

    IF sy-subrc EQ 0
      AND NOT lt_scheduling_groups IS INITIAL.
      CONCATENATE TEXT-145 lv_vbeln
     TEXT-146 INTO lv_info_1.
      lv_question = TEXT-142.
      lv_info_2 = TEXT-143.
      lv_button_1 = TEXT-147.
      lv_display_cancel_button = abap_true.
    ELSE.
      lv_skip_scheduler = abap_true.
    ENDIF.

  ENDIF.
  IF lv_skip_scheduler IS INITIAL.

    CALL FUNCTION '/CGDC/RRBS_POPUP_TO_CONFIRM'
      EXPORTING
        i_text_line_1   = lv_info_1
        i_text_line_2   = lv_question
        i_text_line_3   = lv_info_2
        i_text_button_1 = lv_button_1
        i_text_button_2 = lv_button_2
      IMPORTING
        e_answer        = lv_answer.
  ENDIF.

  IF lv_answer EQ gc_answer-yes.
    lv_sched = abap_true.
    ls_cr-sign = gc_range_tbl_sign-include.
    ls_cr-option = gc_operator-equal.
    ls_cr-low = gs_clrqdoc_infocus-x-crhdr-clrno.
    APPEND ls_cr TO lr_cr.
    SUBMIT /cgdc/r_rtbsch
           WITH s_clrqno IN lr_cr AND  RETURN.
  ELSE.
  ENDIF.
ENDFORM.
FORM create_post_rej_line3 CHANGING ls_clrqit TYPE /cgdc/s_clrqit_fcat
                                   ls_grid_data TYPE /cgdc/s_clrq_postpone.
  DATA: lv_process       TYPE i,
        lv_operation     TYPE c,
        lv_data          TYPE c,
        lv_amt_needed    TYPE netwr_ap,
        lv_amt_needed_t  TYPE netwr_ap,
        lv_amt_needed_r  TYPE netwr_ap,
        lv_amt_extra     TYPE netwr_ap,
        lv_amt_extra_t   TYPE netwr_ap,
        lv_qty_needed    TYPE dzmeng,
        lv_qty_needed_t  TYPE dzmeng,
        lv_dec           TYPE dzmeng,
        lv_clrit         TYPE /cgdc/clrq_itmno,
        lv_lclrsit       TYPE /cgdc/s_clrqit-lclrsit,
        lv_qty_extra     TYPE dzmeng,
        lv_qty_extra_t   TYPE dzmeng,
        lv_index         TYPE sytabix,
        lv_per_qty_price TYPE netwr_ap,
        lv_per_price_qty TYPE dzmeng,
        lv_bi_operation ,
        lv_date          TYPE sy-datum.
  DATA: lv_line_amt TYPE netwr_ap.
  DATA: lv_istat TYPE /cgdc/clrqi_istat.
  DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
  DATA: lwa_clrqit_new TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_qty  TYPE dzmeng,
        lv_rqty TYPE kpein,
        lv_amt  TYPE netwr_ap.

  DATA : lv_clear_rest TYPE flag,
         lv_exit       TYPE flag,
         lv_new_open   TYPE flag.
  DATA : lwa_clrqbi      TYPE /cgdc/s_clrqbi.
  DATA: lv_count TYPE i.
  FIELD-SYMBOLS : <lwa_critm>       TYPE /cgdc/s_clrqit,
                  <lwa_critm_tmp>   TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_a> TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_p> TYPE /cgdc/s_clrqit,
                  <lwa_critm_item>  TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_itm_vals> TYPE s_item_val.
  FIELD-SYMBOLS: <lwa_postponed_data> TYPE /cgdc/s_clrq_postpone.
  FIELD-SYMBOLS: <lwa_clrqit_new_open> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrqit_post_rej_line> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lv_qty>     TYPE any,
                  <lv_amt>     TYPE any,
                  <lwa_crbinr> TYPE /cgdc/s_clrqbi.

  DATA: lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp TYPE /cgdc/t_bilitty,
        ls_clrtic   TYPE /cgdc/t_rtbic. "RTB24-15
  SELECT *
         FROM /cgdc/t_bilitty
         INTO  TABLE @lt_bilityp.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  DATA: ls_link_data TYPE /cgdc/s_crlink.
  SORT     gs_clrqdoc_infocus-x-critm BY clrit clrsit clrdit.
  gs_variables-process_type = gc_process_typ_p.

* Fetch the rounding condition type
  SELECT SINGLE *
  FROM /cgdc/t_clrtype
  INTO @DATA(lwa_clrtype)
  WHERE clrqt = @gs_clrqdoc_infocus-x-crhdr-clrqt.
  IF sy-subrc IS NOT INITIAL.
    CLEAR lwa_clrtype.
  ENDIF.
  "Set Operation
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un OR  gs_variables-itm_rej_quan  .
      lv_operation = gc_operation-q.
      CASE abap_true.
        WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_quan.
          lv_istat = gc_ibill_stat-rejected..
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
    WHEN  gs_variables-itm_rej_amt OR gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_operation = gc_operation-a.
      CASE abap_true.
        WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_amt.
          lv_istat = gc_ibill_stat-rejected.
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
  ENDCASE.

  "Read Global Data for CLRIT Value with respect to date
  READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = ls_grid_data-clrit
                                                                        psdat = ls_grid_data-psdat.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
    <lwa_postponed_data>-clrit = ls_grid_data-clrit.
    <lwa_postponed_data>-psdat = ls_grid_data-psdat.
  ENDIF.

  "Read Global Data for CLRIT Value
  READ TABLE gt_item_values ASSIGNING <lwa_itm_vals> WITH KEY clrit = ls_clrqit-clrit.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_values ASSIGNING <lwa_itm_vals>.
  ENDIF.

  lv_date = ls_grid_data-psdat.
  "Make UPDKZ/ISTAT as Blank For New Existing Data.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  "POSTPONE/REJ QTY Start
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_qty < ls_grid_data-postp_qty.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_qty > ls_grid_data-postp_qty.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_quan.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_quan < ls_grid_data-rej_qty.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_quan > ls_grid_data-rej_qty.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_quan = ls_grid_data-rej_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_amt < ls_grid_data-postp_amt.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_amt > ls_grid_data-postp_amt.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_amt.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_amt < ls_grid_data-rej_amt.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_amt > ls_grid_data-rej_amt.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_amt = ls_grid_data-rej_amt.
        lv_process = 3.
      ENDIF.
  ENDCASE.
  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_item> WITH KEY clrit = ls_clrqit-clrit
                                                                               clrsit = '000000'.

  IF sy-subrc = 0.
    lv_index = sy-tabix.
    lv_lclrsit = <lwa_critm_item>-lclrsit.
    <lwa_critm_item>-updkz = gc_updkz_update.
  ENDIF.
  CASE  lv_process.
    WHEN 1.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        lv_qty_needed = ls_grid_data-postp_qty - <lwa_postponed_data>-postp_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + lv_qty_needed.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + lv_qty_needed.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lv_qty_needed .
*          check for amount
          IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
            <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        CLEAR gs_rounding.
        lv_amt_needed = ls_grid_data-postp_amt - <lwa_postponed_data>-postp_amt.
        lv_amt_needed_t = lv_amt_needed.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-018.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + lv_amt_needed.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt  + <lwa_itm_vals>-bill_amt ).
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + lv_amt_needed.
            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                      + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        lv_qty_needed = ls_grid_data-rej_qty - <lwa_postponed_data>-rej_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + lv_qty_needed.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lv_qty_needed .
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        lv_amt_needed = ls_grid_data-rej_amt - <lwa_postponed_data>-rej_amt.
        lv_amt_needed_t = lv_amt_needed.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.
          <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ENDIF.

      IF <lwa_critm> IS ASSIGNED.
        UNASSIGN <lwa_critm>.
      ENDIF.
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                      istat = lv_istat
                                                                      psdat = lv_date
                                                                      updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                                               cuepos = <lwa_critm>-cuepos
                                                                                               istat = gc_ibill_stat-open
                                                                                               updkz = gc_updkz_new.
        IF <lwa_critm_new_a> IS ASSIGNED.
          CASE lv_operation.
            WHEN gc_operation-q. "QUANTITY
              IF <lv_qty> <= ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                "RESET P/R
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng = <lwa_critm>-zmeng + lv_qty_needed.
                CLEAR : lv_dec , gs_rounding.
                DATA(lv_quan_temp) = trunc( lwa_clrqit_new-zmeng ).
                lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                  IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                    lv_dec =  1 - lv_dec.
                    gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                    gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                    gs_rounding-zmeng = lv_dec.
                  ELSEIF lv_dec > 0.
                    gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                    gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                    gs_rounding-zmeng = lv_dec.
                  ENDIF.
                ENDIF.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = '000000'."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
*                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
*                  PERFORM update_clrq_item USING space lwa_clrit_old
*                                          CHANGING lwa_clrqit_new.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm>-updkz = abap_true.
                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng =  <lwa_critm_new_a>-zmeng  - lv_qty_needed.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low.
                gs_clrit_org-istat = gc_ibill_stat-open.

                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
*                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_qty_needed = 0.
              ELSE.
              ENDIF.
            WHEN gc_operation-a.
              "RESET P/R
              IF <lv_amt> <= ( ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ) * <lwa_itm_vals>-cost_ratio ).
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_needed )
                                          / <lwa_itm_vals>-cost_ratio.
                    lwa_clrqit_new-zmeng = ( <lwa_critm>-kbetr1 + lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.

                    CLEAR : lv_dec,lv_quan_temp ,gs_rounding.
                    lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
                    lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                    IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                      IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                        lv_dec =  1 - lv_dec.
                        gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                        gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                        gs_rounding-zmeng = lv_dec.
                      ELSEIF lv_dec > 0.
                        gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                        gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                        gs_rounding-zmeng = lv_dec.
                      ENDIF.
                    ENDIF.
                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.

                lwa_clrqit_new-kbetr1 =  ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_needed .
                IF lv_istat = gc_ibill_stat-postponed OR lv_istat = gc_ibill_stat-rejected.
                  lwa_clrqit_new-kbetr1 = <lwa_critm>-kbetr1  +  lv_amt_needed .
                ENDIF.

                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = '000000'.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr.
*                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                CLEAR :  lwa_clrqit_new-netwr,
                         lwa_clrqit_new-netpr,
                         lwa_clrqit_new-wavwr,
                         lwa_clrqit_new-rtbbinr,
                         lwa_clrqit_new-bityp,
                         lwa_clrqit_new-bilmatnr,
                         lwa_clrqit_new-pop_stdt,
                         lwa_clrqit_new-pop_enddt,
                         lwa_clrqit_new-bldat_bi,
                         lwa_clrqit_new-/cgdc/cline.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm>-updkz = abap_true.

                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = ( ( <lwa_critm_new_a>-zmeng * <lwa_itm_vals>-cost_ratio ) - lv_amt_needed )
                                              / <lwa_itm_vals>-cost_ratio.

*                    lwa_clrqit_new-zmeng = <lwa_itm_vals>-open_quan.
                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.
                lwa_clrqit_new-kbetr1 =  lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low ."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.

                CLEAR : lwa_clrqit_new-netwr,
                          lwa_clrqit_new-netpr,
                          lwa_clrqit_new-wavwr,
                          lwa_clrqit_new-psdat.
*                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_amt_needed = 0.
              ELSE.
              ENDIF.
          ENDCASE.


        ENDIF.
      ENDIF.

    WHEN 2.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        lv_qty_extra = <lwa_postponed_data>-postp_qty - ls_grid_data-postp_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-postp_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        lv_amt_extra = <lwa_postponed_data>-postp_amt - ls_grid_data-postp_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_amt + <lwa_postponed_data>-postp_amt ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-018.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
          ENDIF.

          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
          TRY.
              <lwa_postponed_data>-postp_qty = ls_grid_data-postp_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        lv_qty_extra = <lwa_postponed_data>-rej_qty - ls_grid_data-rej_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-rej_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan - <lwa_postponed_data>-rej_qty.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + ls_grid_data-rej_qty.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = ls_grid_data-rej_qty.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        lv_amt_extra = <lwa_postponed_data>-rej_amt - ls_grid_data-rej_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_amt + <lwa_postponed_data>-rej_amt ) < lv_amt_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt - <lwa_postponed_data>-rej_amt.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + ls_grid_data-rej_amt.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_amt.
          TRY.
              <lwa_postponed_data>-rej_qty = ls_grid_data-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ENDIF.

      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                           istat = lv_istat
                                                                           psdat = lv_date
                                                                           updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        CASE lv_operation.
          WHEN gc_operation-q.
            IF lv_qty_extra < ( <lwa_critm>-zmeng ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng - lv_qty_extra.

              CLEAR : lv_dec,lv_quan_temp ,gs_rounding.
              lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
              lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
              IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                  lv_dec =  1 - lv_dec.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                  gs_rounding-zmeng = lv_dec.
                ELSEIF lv_dec > 0.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                  gs_rounding-zmeng = lv_dec.
                ENDIF.
              ENDIF.
              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.

              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                        cuepos = <lwa_critm>-cuepos
                                                                        istat = gc_ibill_stat-open
                                                                        updkz = gc_updkz_new.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_qty_extra < <lwa_critm>-zmeng.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + lv_qty_extra.
                ELSE.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                UNASSIGN <lwa_critm_new_a>.

              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.

              ENDIF.

              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = gc_ibill_stat-open.

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
*              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              IF lv_qty_extra > <lwa_critm>-zmeng.
                lv_qty_extra = lv_qty_extra - <lwa_critm>-zmeng.
              ELSE.
                lv_qty_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.
          WHEN gc_operation-a.
            IF lv_amt_extra < ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              TRY.
                  lwa_clrqit_new-zmeng = ( ( <lwa_critm>-kbetr1 ) - lv_amt_extra )
                                                 / <lwa_itm_vals>-cost_ratio.
                  CLEAR : lv_dec,lv_quan_temp ,gs_rounding.
                  lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
                  lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                  IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                    IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                      lv_dec =  1 - lv_dec.
                      gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                      gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                      gs_rounding-zmeng = lv_dec.
                    ELSEIF lv_dec > 0.
                      gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                      gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                      gs_rounding-zmeng = lv_dec.
                    ENDIF.
                  ENDIF.
                CATCH cx_root.
                  lwa_clrqit_new-zmeng = 1.
              ENDTRY.
              lwa_clrqit_new-kbetr1 =  <lwa_critm>-kbetr1  - lv_amt_extra .
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
*              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                         cuepos = <lwa_critm>-cuepos
                                                                         istat = gc_ibill_stat-open.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_amt_extra < ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                  TRY.
                      lwa_clrqit_new-zmeng = ( ( <lwa_critm_new_a>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_extra )
                                             / <lwa_itm_vals>-cost_ratio.
                      lwa_clrqit_new-zmeng =  <lwa_itm_vals>-open_quan.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ELSE.
                  TRY.
                      lwa_clrqit_new-zmeng = ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ENDIF.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
                UNASSIGN <lwa_critm_new_a>.
              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
              ENDIF.

              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = gc_ibill_stat-open.
*

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
*              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
*              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

              ENDIF.

              IF lv_amt_extra > ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                lv_amt_extra = lv_amt_extra - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
              ELSE.
                lv_amt_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.

        ENDCASE.
      ENDIF.


    WHEN 3.
      "
    WHEN OTHERS.
  ENDCASE.
  CASE lv_process.
    WHEN 1.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index.
        IF <lwa_critm>-clrit <> ls_clrqit-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.
          READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi
                                                 WITH KEY clrno     = <lwa_critm>-clrno
                                                          bill_item = <lwa_critm>-rtbbinr
                                                          bitype    = <lwa_critm>-bityp.

          IF <lwa_critm>-clrsit = gc_clrsit_low.
            CONTINUE.
          ELSE.

            IF lv_qty_needed = 0 AND lv_amt_needed = 0.
              EXIT.
            ELSEIF <lwa_critm>-istat = gc_ibill_stat-open  AND lwa_clrqbi-bstat IS INITIAL."AND <lwa_critm>-psdat = lv_date
              ASSIGN <lwa_critm>  TO <lwa_critm_tmp>.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.
              IF <lwa_critm>-updkz IS INITIAL.
                <lwa_critm>-updkz = gc_updkz_update.
              ENDIF.
            ELSEIF <lwa_critm>-istat = lv_istat AND <lwa_critm>-psdat = lv_date.
              <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.
              IF <lwa_critm>-updkz IS INITIAL.
                <lwa_critm>-updkz = gc_updkz_update.
              ENDIF.
            ENDIF.

            READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_crbinr>
                       WITH KEY clrno = <lwa_critm>-clrno
                                bill_item = <lwa_critm>-rtbbinr.
            IF sy-subrc = 0.
              <lwa_crbinr>-netwr = <lwa_crbinr>-netwr - <lwa_critm>-netwr.
              <lwa_crbinr>-wavwr = <lwa_crbinr>-wavwr - <lwa_crbinr>-wavwr.
              <lwa_crbinr>-kzwi1 = <lwa_crbinr>-kzwi1 - <lwa_crbinr>-kzwi1.
              <lwa_crbinr>-kzwi2 = <lwa_crbinr>-kzwi2 - <lwa_crbinr>-kzwi2.
              <lwa_crbinr>-kzwi3 = <lwa_crbinr>-kzwi3 - <lwa_crbinr>-kzwi3.
              <lwa_crbinr>-kzwi4 = <lwa_crbinr>-kzwi4 - <lwa_crbinr>-kzwi4.
              <lwa_crbinr>-kzwi5 = <lwa_crbinr>-kzwi5 - <lwa_crbinr>-kzwi5.
              <lwa_crbinr>-kzwi6 = <lwa_crbinr>-kzwi6 - <lwa_crbinr>-kzwi6.
              "++SOC - Decimal precision fields
              <lwa_crbinr>-netwr24 = <lwa_crbinr>-netwr24 - <lwa_critm>-netwr24.
              <lwa_crbinr>-kzwi1_24 = <lwa_crbinr>-kzwi1_24 - <lwa_crbinr>-kzwi1_24.
              <lwa_crbinr>-kzwi2_24 = <lwa_crbinr>-kzwi2_24 - <lwa_crbinr>-kzwi2_24.
              <lwa_crbinr>-kzwi3_24 = <lwa_crbinr>-kzwi3_24 - <lwa_crbinr>-kzwi3_24.
              <lwa_crbinr>-kzwi4_24 = <lwa_crbinr>-kzwi4_24 - <lwa_crbinr>-kzwi4_24.
              <lwa_crbinr>-kzwi5_24 = <lwa_crbinr>-kzwi5_24 - <lwa_crbinr>-kzwi5_24.
              <lwa_crbinr>-kzwi6_24 = <lwa_crbinr>-kzwi6_24 - <lwa_crbinr>-kzwi6_24.
              "++EOC - Decimal precision fields

              READ TABLE lt_bilityp INTO lwa_bilityp
              WITH KEY bilitmtyp = <lwa_crbinr>-bitype.

              READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <lwa_critm>-pstyv. "RTB24-15

              IF sy-subrc = 0.
                IF lwa_bilityp-qty_1 = abap_true.
                  <lwa_crbinr>-zmeng = 1.
                ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                  <lwa_crbinr>-zmeng = <lwa_crbinr>-zmeng - <lwa_critm>-zmeng.
                ENDIF.
              ENDIF.

            ENDIF.

            CLEAR <lwa_critm>-rtbbinr.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF ( lv_operation = gc_operation-q AND lv_qty_needed > 0 )
                     OR ( lv_operation = gc_operation-a AND  lv_amt_needed > 0 ).

        IF <lwa_critm_tmp>-updkz IS INITIAL.
          <lwa_critm_tmp>-updkz = gc_updkz_update.
        ENDIF.
        CLEAR : lwa_clrqit_new,
             gs_clrit_org.
        PERFORM move_itm_to_itm_fcat USING <lwa_critm_tmp>
            CHANGING lwa_clrqit_new.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lwa_clrqit_new-clrdit
          IMPORTING
            output = lwa_clrqit_new-clrdit.
        lwa_clrqit_new-clrno = <lwa_critm_tmp>-clrno.
        lwa_clrqit_new-clrit = <lwa_critm_tmp>-clrit.
        lwa_clrqit_new-istat =  lv_istat.
        lwa_clrqit_new-psdat = lv_date.
        <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_critm_item>-lclrsit
          IMPORTING
            output = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
        IF <lwa_critm_tmp>-updkz = gc_updkz_new.
          lwa_clrqit_new-cuepos = <lwa_critm_tmp>-cuepos.
        ELSE.
          lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        ENDIF.
        IF lv_operation = gc_operation-q.
          lwa_clrqit_new-zmeng =   lv_qty_needed.
          lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
          IF lv_istat = gc_ibill_stat-rejected.
            lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-rej_amt.
            lwa_clrqit_new-zmeng =   <lwa_itm_vals>-rej_quan.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_quan IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt.
            lwa_clrqit_new-zmeng =   <lwa_postponed_data>-postp_qty.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_quan_un IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt_ut.
            lwa_clrqit_new-zmeng =   <lwa_postponed_data>-postp_qty."<lwa_itm_vals>-post_quan_ut.
          ENDIF.
        ELSE.
          lwa_clrqit_new-kbetr1 =  lv_amt_needed .
          IF lv_istat = gc_ibill_stat-rejected.
            lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-rej_amt.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_amt IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_amt_un IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt_ut.
          ENDIF.
          TRY.
              lwa_clrqit_new-zmeng = lwa_clrqit_new-kbetr1  / <lwa_itm_vals>-cost_ratio .
              CLEAR : lv_dec,lv_quan_temp ,gs_rounding.
              lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
              lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
              IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                  lv_dec =  1 - lv_dec.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                  gs_rounding-zmeng = lv_dec.
                ELSEIF lv_dec > 0.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                  gs_rounding-zmeng = lv_dec.
                ENDIF.
              ENDIF.
            CATCH cx_root.
              lwa_clrqit_new-zmeng = 1.
          ENDTRY.
*                 Check for  amount
          IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
            gs_variables-itm_rej_amt IS INITIAL.
            lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
          ENDIF.
        ENDIF.

        "espos Logic
        gs_clrit_org-clrno = lwa_clrqit_new-clrno.
        gs_clrit_org-clrit = lwa_clrqit_new-clrit.
        gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
        gs_clrit_org-item_delta = gc_clrdit_low.
        gs_clrit_org-istat = lv_istat.
        lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
        CLEAR : lwa_clrqit_new-netwr,
               lwa_clrqit_new-netpr,
               lwa_clrqit_new-wavwr,
               lwa_clrqit_new-rtbbinr,
               lwa_clrqit_new-bityp,
               lwa_clrqit_new-bilmatnr,
               lwa_clrqit_new-pop_stdt,
               lwa_clrqit_new-pop_enddt,
               lwa_clrqit_new-bldat_bi,
               lwa_clrqit_new-/cgdc/cline.
        lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        lwa_clrqit_new-duepos = <lwa_critm_tmp>-clrdit.
        IF lwa_clrqit_new-zmeng > 0.
          PERFORM update_clrq_item01 USING space
                                                      ls_link_data
                                                      lwa_clrit_old
                                       CHANGING lwa_clrqit_new.

        ENDIF.
        "Create 'A' ( current line - lv_qty_needed )
        CLEAR : lwa_clrqit_new,
             gs_clrit_org.
        PERFORM move_itm_to_itm_fcat USING <lwa_critm_tmp>
            CHANGING lwa_clrqit_new.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lwa_clrqit_new-clrdit
          IMPORTING
            output = lwa_clrqit_new-clrdit.
        lwa_clrqit_new-clrno = <lwa_critm_tmp>-clrno.
        lwa_clrqit_new-clrit = <lwa_critm_tmp>-clrit.

        <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_critm_item>-lclrsit
          IMPORTING
            output = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-istat = gc_ibill_stat-open.
        CLEAR lwa_clrqit_new-psdat.
        IF lv_operation = gc_operation-q.
          lwa_clrqit_new-zmeng =  ( <lwa_critm_tmp>-zmeng - lv_qty_needed ).
          lwa_clrqit_new-zmeng =  <lwa_itm_vals>-open_quan.
          IF lwa_clrqit_new-zmeng < 0.
            lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
          ENDIF.
          lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
        ELSE.
          lwa_clrqit_new-kbetr1 = ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )
                                          - lv_amt_needed ).
          lwa_clrqit_new-kbetr1 = <lwa_itm_vals>-open_amt.
          TRY.
              lwa_clrqit_new-zmeng =  ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )
                                          - lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.
              lwa_clrqit_new-zmeng = <lwa_itm_vals>-open_quan.
            CATCH cx_root.
              lwa_clrqit_new-zmeng = 1.
          ENDTRY.
          IF lwa_clrqit_new-zmeng < 0.
            lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
          ENDIF.
*                 Check for  amount
          IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
            gs_variables-itm_rej_amt IS INITIAL.
            lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
          ENDIF.
        ENDIF.


        "espos Logic
        gs_clrit_org-clrno = <lwa_critm_tmp>-clrno.
        gs_clrit_org-clrit = <lwa_critm_tmp>-clrit.
        gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
        gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
        gs_clrit_org-istat = gc_ibill_stat-open.

        CLEAR : lwa_clrqit_new-netwr,
                      lwa_clrqit_new-netpr,
                      lwa_clrqit_new-wavwr.
        lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        lwa_clrqit_new-duepos = <lwa_critm_tmp>-clrdit.
        gs_variables-bit_num_gen = abap_true.
        IF lwa_clrqit_new-zmeng > 0.
          PERFORM update_clrq_item01 USING space
                                                      ls_link_data
                                                      lwa_clrit_old
                                       CHANGING lwa_clrqit_new.
        ENDIF.
        CLEAR <lwa_critm>-rtbbinr.
        CLEAR gs_variables-bit_num_gen.
      ENDIF.

      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_qty = ls_grid_data-postp_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_amt = ls_grid_data-postp_amt - lv_amt_needed_t.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_qty = ls_grid_data-rej_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_amt = ls_grid_data-rej_amt - lv_amt_needed_t.
      ENDIF.
    WHEN 2.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index.
        IF <lwa_critm>-clrit <> <lwa_critm_item>-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.
          READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi
                                                          WITH KEY clrno     = <lwa_critm>-clrno
                                                                   bill_item = <lwa_critm>-rtbbinr
                                                                   bitype    = <lwa_critm>-bityp.
          IF <lwa_critm>-clrsit = gc_clrsit_low.
            CONTINUE.
          ELSE.

            IF ( lv_operation = gc_operation-q AND lv_qty_extra = 0 ) OR
              ( lv_operation = gc_operation-a AND lv_amt_extra = 0 ).
              EXIT.
            ELSEIF <lwa_critm>-istat = gc_ibill_stat-open AND lwa_clrqbi-bstat IS INITIAL.
              ASSIGN <lwa_critm>  TO <lwa_critm_tmp>.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit = gs_clrit_org-clrit AND clrsit = gs_clrit_org-clrsit AND clrdit = gs_clrit_org-item_delta AND updkz IS NOT INITIAL.
              <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.
              IF <lwa_critm>-updkz IS INITIAL.
                <lwa_critm>-updkz = gc_updkz_update.
              ENDIF.
            ELSEIF <lwa_critm>-istat = lv_istat AND <lwa_critm>-psdat = lv_date.
              <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.
              IF <lwa_critm>-updkz IS INITIAL.
                <lwa_critm>-updkz = gc_updkz_update.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF ( lv_operation = gc_operation-q AND lv_qty_extra > 0 ) OR
                ( lv_operation = gc_operation-a AND  lv_amt_extra > 0 ).
        IF <lwa_critm_tmp>-updkz IS INITIAL.
          <lwa_critm_tmp>-updkz = gc_updkz_update.
        ENDIF.

        """Create P (  lv_qty_extra)
        CLEAR : lwa_clrqit_new,
                                    gs_clrit_org.
        PERFORM move_itm_to_itm_fcat USING <lwa_critm_tmp>
            CHANGING lwa_clrqit_new.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lwa_clrqit_new-clrdit
          IMPORTING
            output = lwa_clrqit_new-clrdit.
        lwa_clrqit_new-clrno = <lwa_critm_tmp>-clrno.
        lwa_clrqit_new-clrit = <lwa_critm_tmp>-clrit.
        <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_critm_item>-lclrsit
          IMPORTING
            output = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        lwa_clrqit_new-istat = lv_istat.
        lwa_clrqit_new-psdat = lv_date.
        IF lv_operation = gc_operation-q.
          lwa_clrqit_new-zmeng = <lwa_critm_tmp>-zmeng - lv_qty_extra.
          lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
          IF lv_istat = gc_ibill_stat-rejected.
            lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-rej_amt.
            lwa_clrqit_new-zmeng =   <lwa_itm_vals>-rej_quan.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_quan IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt.
            lwa_clrqit_new-zmeng =   <lwa_postponed_data>-postp_qty."<lwa_itm_vals>-post_quan.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_quan_un IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt_ut.
            lwa_clrqit_new-zmeng =   <lwa_postponed_data>-postp_qty."<lwa_itm_vals>-post_quan_ut.
          ENDIF.
        ELSE.
          lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-post_amt.
          IF lv_istat = gc_ibill_stat-rejected.
            lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-rej_amt.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_amt IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt.
          ELSEIF lv_istat = gc_ibill_stat-postponed AND gs_variables-itm_post_amt_un IS NOT INITIAL.
            lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt."<lwa_itm_vals>-post_amt_ut.
          ENDIF.
          TRY.
              lwa_clrqit_new-zmeng =  lwa_clrqit_new-kbetr1 / <lwa_itm_vals>-cost_ratio.
              CLEAR : lv_dec , lv_quan_temp.
              lv_quan_temp = trunc( lwa_clrqit_new-zmeng ).
              IF lwa_clrtype-kschl_flg IS NOT INITIAL AND lwa_clrtype-kschl IS NOT INITIAL.
                lv_dec = lwa_clrqit_new-zmeng - lv_quan_temp.
                IF lwa_clrqit_new-zmeng < 1 AND lv_dec < 1.
                  lv_dec =  1 - lv_dec.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = - ( lv_dec * <lwa_itm_vals>-cost_ratio ).
                  gs_rounding-zmeng = lv_dec.
                ELSEIF lv_dec > 0.
                  gs_rounding-kschl1 = lwa_clrtype-kschl."'YDIF'.
                  gs_rounding-kbetr1 = lv_dec * <lwa_itm_vals>-cost_ratio.
                  gs_rounding-zmeng = lv_dec.
                ENDIF.
              ENDIF.
            CATCH cx_root.
              lwa_clrqit_new-zmeng = 1.
          ENDTRY.
        ENDIF.


        gs_clrit_org-clrno = lwa_clrqit_new-clrno.
        gs_clrit_org-clrit = lwa_clrqit_new-clrit.
        gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
        gs_clrit_org-item_delta = gc_clrdit_low.
        gs_clrit_org-istat = lv_istat.
        lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
        CLEAR : lwa_clrqit_new-netwr,
               lwa_clrqit_new-netpr,
               lwa_clrqit_new-wavwr,
               lwa_clrqit_new-rtbbinr,
               lwa_clrqit_new-bityp,
               lwa_clrqit_new-bilmatnr,
               lwa_clrqit_new-pop_stdt,
               lwa_clrqit_new-pop_enddt,
               lwa_clrqit_new-bldat_bi,
               lwa_clrqit_new-/cgdc/cline.
        lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        lwa_clrqit_new-duepos = <lwa_critm_tmp>-clrdit.
        IF lwa_clrqit_new-zmeng > 0.
          PERFORM update_clrq_item01 USING space
                                                      ls_link_data
                                                      lwa_clrit_old
                                       CHANGING lwa_clrqit_new.
        ENDIF.

        "Create A ( Current Line Qty = lv_qty_extra )
        CLEAR : lwa_clrqit_new,
                                                        gs_clrit_org.
        PERFORM move_itm_to_itm_fcat USING <lwa_critm_tmp>
            CHANGING lwa_clrqit_new.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lwa_clrqit_new-clrdit
          IMPORTING
            output = lwa_clrqit_new-clrdit.
        lwa_clrqit_new-clrno = <lwa_critm_tmp>-clrno.
        lwa_clrqit_new-clrit = <lwa_critm_tmp>-clrit.
        <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <lwa_critm_item>-lclrsit
          IMPORTING
            output = <lwa_critm_item>-lclrsit.
        lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
        IF <lwa_critm_tmp>-updkz = gc_updkz_new.
          lwa_clrqit_new-cuepos = <lwa_critm_tmp>-cuepos.
        ELSE.
          lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        ENDIF.
        lwa_clrqit_new-istat = gc_ibill_stat-open.
        CLEAR lwa_clrqit_new-psdat.
        IF lv_operation = gc_operation-q.
          lwa_clrqit_new-zmeng =   lv_qty_extra.
          lwa_clrqit_new-kbetr1 =  lv_qty_extra * <lwa_itm_vals>-cost_ratio .
*          lwa_clrqit_new-zm = <lwa_itm_vals>-open_quan.
        ELSE.
          lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
          TRY.
              lwa_clrqit_new-zmeng =   lv_amt_extra / <lwa_itm_vals>-cost_ratio.
              lwa_clrqit_new-zmeng =    <lwa_itm_vals>-open_quan.
            CATCH cx_root.
              lwa_clrqit_new-zmeng = 1.
          ENDTRY.
        ENDIF.

        gs_clrit_org-clrno = lwa_clrqit_new-clrno.
        gs_clrit_org-clrit = lwa_clrqit_new-clrit.
        gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
        gs_clrit_org-item_delta = gc_clrdit_low.
        gs_clrit_org-istat = gc_ibill_stat-open.
        CLEAR : lwa_clrqit_new-netwr,
                      lwa_clrqit_new-netpr,
                      lwa_clrqit_new-wavwr.
        lwa_clrqit_new-cuepos = <lwa_critm_tmp>-clrsit.
        lwa_clrqit_new-duepos = <lwa_critm_tmp>-clrdit.
        gs_variables-bit_num_gen = abap_true.
        IF lwa_clrqit_new-zmeng > 0.
          PERFORM update_clrq_item01 USING space
                                                      ls_link_data
                                                      lwa_clrit_old
                                       CHANGING lwa_clrqit_new.
        ENDIF.

        CLEAR gs_variables-bit_num_gen.
        CLEAR <lwa_critm>-rtbbinr.

      ENDIF.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_qty = 0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_amt = 0.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_qty =  0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_amt =  0.
      ENDIF.
  ENDCASE.
*// Make the main item( 000000 ) reason code as MULT when sub items having multiple reason codes
  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WHERE clrno = ls_clrqit-clrno
                                      AND  clrit = ls_clrqit-clrit
                                      AND  clrsit <> gc_sub_main .
    IF <lwa_critm>-rsncd IS NOT INITIAL.
      IF lv_count IS INITIAL.
        lv_count = 1.
        DATA(lv_rsncd) = <lwa_critm>-rsncd.
        CONTINUE.
      ELSEIF lv_rsncd IS NOT INITIAL AND lv_rsncd <> <lwa_critm>-rsncd.
        lv_count = lv_count + 1.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_cr_mainitm>)
  WITH KEY clrno = <lwa_critm>-clrno
  clrit = <lwa_critm>-clrit
  clrsit = gc_sub_main.
  IF sy-subrc EQ 0 AND
  <lwa_cr_mainitm> IS ASSIGNED.
    IF lv_count = 1.
      <lwa_cr_mainitm>-rsncd = lv_rsncd.
    ELSEIF lv_count > 1.
      <lwa_cr_mainitm>-rsncd = gc_clin_mult.
    ENDIF.
    IF <lwa_cr_mainitm>-updkz IS INITIAL.
      <lwa_cr_mainitm>-updkz = gc_updkz_update.
    ENDIF.
    gs_variables-refresh_calc_req_items_grid = abap_true.
    gs_variables-refersh_bill_bp_grid = abap_true.
  ENDIF.

  gs_variables-calc_changed = abap_true.
  DELETE gs_clrqdoc_infocus-x-critm WHERE updkz = abap_true.
  CLEAR gs_variables-process_type.
ENDFORM.
FORM create_post_rej_line2 CHANGING ls_clrqit TYPE /cgdc/s_clrqit_fcat
                                   ls_grid_data TYPE /cgdc/s_clrq_postpone.
  DATA: lv_process       TYPE i,
        lv_operation     TYPE c,
        lv_data          TYPE c,
        lv_amt_needed    TYPE netwr_ap,
        lv_amt_needed_t  TYPE netwr_ap,
        lv_amt_needed_r  TYPE netwr_ap,
        lv_amt_extra     TYPE netwr_ap,
        lv_amt_extra_t   TYPE netwr_ap,
        lv_qty_needed    TYPE dzmeng,
        lv_qty_needed_t  TYPE dzmeng,
        lv_clrit         TYPE /cgdc/clrq_itmno,
        lv_lclrsit       TYPE /cgdc/s_clrqit-lclrsit,
        lv_qty_extra     TYPE dzmeng,
        lv_qty_extra_t   TYPE dzmeng,
        lv_index         TYPE sytabix,
        lv_per_qty_price TYPE netwr_ap,
        lv_per_price_qty TYPE dzmeng,
        lv_bi_operation ,
        lv_date          TYPE sy-datum.
  DATA: lv_line_amt TYPE netwr_ap.
  DATA: lv_istat TYPE /cgdc/clrqi_istat.
  DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
  DATA: lwa_clrqit_new TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_qty  TYPE dzmeng,
        lv_rqty TYPE kpein,
        lv_amt  TYPE netwr_ap.

  DATA : lv_clear_rest TYPE flag,
         lv_exit       TYPE flag,
         lv_new_open   TYPE flag.
  DATA : lwa_clrqbi      TYPE /cgdc/s_clrqbi.
  DATA: lv_count TYPE i.
  FIELD-SYMBOLS : <lwa_critm>       TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_a> TYPE /cgdc/s_clrqit,
                  <lwa_critm_new_p> TYPE /cgdc/s_clrqit,
                  <lwa_critm_item>  TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_itm_vals> TYPE s_item_val.
  FIELD-SYMBOLS: <lwa_postponed_data> TYPE /cgdc/s_clrq_postpone.
  FIELD-SYMBOLS: <lwa_clrqit_new_open> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrqit_post_rej_line> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lv_qty> TYPE any,
                  <lv_amt> TYPE any.
  DATA: ls_link_data TYPE /cgdc/s_crlink.
  SORT     gs_clrqdoc_infocus-x-critm BY clrit clrsit clrdit.
  gs_variables-process_type = gc_process_typ_p."gc_ibill_stat-postponed.
  "Set Operation
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un OR  gs_variables-itm_rej_quan  .
      lv_operation = gc_operation-q.
      CASE abap_true.
        WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_quan.
          lv_istat = gc_ibill_stat-rejected..
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
    WHEN  gs_variables-itm_rej_amt OR gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_operation = gc_operation-a.
      CASE abap_true.
        WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
          lv_istat = gc_ibill_stat-postponed.
          ASSIGN ls_grid_data-postp_qty TO <lv_qty>.
          ASSIGN ls_grid_data-postp_amt TO <lv_amt>.
        WHEN gs_variables-itm_rej_amt.
          lv_istat = gc_ibill_stat-rejected.
          ASSIGN ls_grid_data-rej_qty TO <lv_qty>.
          ASSIGN ls_grid_data-rej_amt TO <lv_amt>.
      ENDCASE.
  ENDCASE.

  "Read Global Data for CLRIT Value with respect to date
  READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = ls_grid_data-clrit
                                                                        psdat = ls_grid_data-psdat.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
    <lwa_postponed_data>-clrit = ls_grid_data-clrit.
    <lwa_postponed_data>-psdat = ls_grid_data-psdat.
  ENDIF.

  "Read Global Data for CLRIT Value
  READ TABLE gt_item_values ASSIGNING <lwa_itm_vals> WITH KEY clrit = ls_clrqit-clrit.
  IF sy-subrc <> 0.
    APPEND INITIAL LINE TO gt_item_values ASSIGNING <lwa_itm_vals>.
  ENDIF.

  lv_date = ls_grid_data-psdat.
  "Make UPDKZ/ISTAT as Blank For New Existing Data.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  "POSTPONE/REJ QTY Start
  CASE abap_true.
    WHEN gs_variables-itm_post_quan OR gs_variables-itm_post_quan_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_qty < ls_grid_data-postp_qty.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_qty > ls_grid_data-postp_qty.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_quan.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_quan < ls_grid_data-rej_qty.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_quan > ls_grid_data-rej_qty.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_quan = ls_grid_data-rej_qty.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_post_amt OR gs_variables-itm_post_amt_un.
      lv_istat = gc_ibill_stat-postponed.
      IF <lwa_postponed_data>-postp_amt < ls_grid_data-postp_amt.
        lv_process = 1.
      ELSEIF <lwa_postponed_data>-postp_amt > ls_grid_data-postp_amt.
        lv_process = 2.
      ELSEIF <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
        lv_process = 3.
      ENDIF.
    WHEN gs_variables-itm_rej_amt.
      lv_istat = gc_ibill_stat-rejected.
      IF <lwa_itm_vals>-rej_amt < ls_grid_data-rej_amt.
        lv_process = 1.
      ELSEIF <lwa_itm_vals>-rej_amt > ls_grid_data-rej_amt.
        lv_process = 2.
      ELSEIF <lwa_itm_vals>-rej_amt = ls_grid_data-rej_amt.
        lv_process = 3.
      ENDIF.
  ENDCASE.
  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_item> WITH KEY clrit = ls_clrqit-clrit
                                                                               clrsit = gc_clrsit_low.

  IF sy-subrc = 0.
    lv_index = sy-tabix.
    lv_lclrsit = <lwa_critm_item>-lclrsit.
    <lwa_critm_item>-updkz = gc_updkz_update.
  ENDIF.
  CASE  lv_process.
    WHEN 1.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        lv_qty_needed = ls_grid_data-postp_qty - <lwa_postponed_data>-postp_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false..
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.

          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + lv_qty_needed.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + lv_qty_needed.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lv_qty_needed .
*          check for amount
          IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
            <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.

        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        CLEAR gs_rounding.
        lv_amt_needed = ls_grid_data-postp_amt - <lwa_postponed_data>-postp_amt.
        lv_amt_needed_t = lv_amt_needed.
*       Logic Rounding off
        TRY.
            <lwa_postponed_data>-postp_qty = lv_amt_needed / <lwa_itm_vals>-cost_ratio.
            lv_rqty = <lwa_postponed_data>-postp_qty.
            IF lv_rqty < 1.
              lv_rqty = 1.
            ENDIF.
            <lwa_postponed_data>-postp_qty = lv_rqty.
          CATCH cx_root.
            <lwa_postponed_data>-postp_qty = 1.
        ENDTRY.
        lv_amt_needed_r = ( <lwa_postponed_data>-postp_qty * <lwa_itm_vals>-cost_ratio ) -  lv_amt_needed.
        IF lv_amt_needed_r IS NOT INITIAL.
          gs_rounding-kschl1 = gc_kschl1-ydif.
          gs_rounding-kbetr1  = lv_amt_needed_r.
        ENDIF.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-018.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_amt / <lwa_itm_vals>-cost_ratio.
              lv_rqty = <lwa_postponed_data>-postp_qty.
              IF lv_rqty < 1.
                lv_rqty = 1.
              ENDIF.
              <lwa_postponed_data>-postp_qty = lv_rqty.
            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + lv_amt_needed.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.
                lv_rqty = <lwa_itm_vals>-post_quan_ut.
                IF lv_rqty < 1.
                  lv_rqty = 1.
                ENDIF.
                <lwa_itm_vals>-post_quan_ut = lv_rqty.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt  + <lwa_itm_vals>-bill_amt ).
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + lv_amt_needed.
            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.
                lv_rqty =   <lwa_itm_vals>-post_quan.
                IF lv_rqty < 1.
                  lv_rqty = 1.
                ENDIF.
                <lwa_itm_vals>-post_quan = lv_rqty.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
            <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                      <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
          ENDIF.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                      + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          lv_rqty =  <lwa_itm_vals>-open_quan.
          <lwa_itm_vals>-open_quan = lv_rqty.

        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        lv_qty_needed = ls_grid_data-rej_qty - <lwa_postponed_data>-rej_qty.
        lv_qty_needed_t = lv_qty_needed.
        IF lv_qty_needed > <lwa_itm_vals>-open_quan.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + lv_qty_needed.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lv_qty_needed .
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        lv_amt_needed = ls_grid_data-rej_amt - <lwa_postponed_data>-rej_amt.
        lv_amt_needed_t = lv_amt_needed.

*       Logic Rounding off
        TRY.
            <lwa_postponed_data>-rej_qty = ls_grid_data-rej_amt / <lwa_itm_vals>-cost_ratio.
            lv_rqty = <lwa_postponed_data>-rej_qty.
            IF lv_rqty < 1.
              lv_rqty = 1.
            ENDIF.
            <lwa_postponed_data>-rej_qty = lv_rqty.
          CATCH cx_root.
            <lwa_postponed_data>-rej_qty = 1.
        ENDTRY.
        lv_amt_needed_r = ( <lwa_postponed_data>-rej_qty * <lwa_itm_vals>-cost_ratio ) - ls_grid_data-rej_amt.
        IF lv_amt_needed_r IS NOT INITIAL.
          gs_rounding-kschl1 = gc_kschl1-ydif.
          gs_rounding-kbetr1  = lv_amt_needed_r.
        ENDIF.

        IF lv_amt_needed > <lwa_itm_vals>-open_amt.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_postponed_data>-rej_amt  = <lwa_postponed_data>-rej_amt + lv_amt_needed.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.
              lv_rqty = <lwa_itm_vals>-rej_quan.
              IF lv_rqty < 1.
                lv_rqty = 1.
              ENDIF.
              <lwa_itm_vals>-rej_quan = lv_rqty.
            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.

          <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + lv_amt_needed.
          TRY.
              <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_amt / <lwa_itm_vals>-cost_ratio.
              lv_rqty = <lwa_postponed_data>-rej_qty.
              IF lv_rqty < 1.
                lv_rqty = 1.
              ENDIF.
              <lwa_postponed_data>-rej_qty = lv_rqty.
            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.

          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).

          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).

        ENDIF.
      ENDIF.

      IF <lwa_critm> IS ASSIGNED.
        UNASSIGN <lwa_critm>.
      ENDIF.
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                      istat = lv_istat
                                                                      psdat = lv_date
                                                                      updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                                               cuepos = <lwa_critm>-cuepos
                                                                                               istat = gc_ibill_stat-open
                                                                                               updkz = gc_updkz_new.
        IF <lwa_critm_new_a> IS ASSIGNED.
          CASE lv_operation.
            WHEN gc_operation-q. "QUANTITY
              IF <lv_qty> <= ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                "RESET P/R
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng = <lwa_critm>-zmeng + lv_qty_needed.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm>-updkz = abap_true.

                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-zmeng =  <lwa_critm_new_a>-zmeng  - lv_qty_needed.
                lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.

                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_qty_needed = 0.
              ELSE.
              ENDIF.
            WHEN gc_operation-a.
              "RESET P/R
              IF <lv_amt> <= ( ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ) * <lwa_itm_vals>-cost_ratio ).
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = ( <lwa_critm>-kbetr1 + lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.
                    CLEAR lv_rqty.
                    lv_rqty = lwa_clrqit_new-zmeng.
                    IF lv_rqty < 1.
                      lv_rqty = 1.
                    ENDIF.
                    lwa_clrqit_new-zmeng = lv_rqty.
                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.

                lwa_clrqit_new-kbetr1 =  ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_needed .
                IF lv_istat = gc_ibill_stat-postponed.
                  lwa_clrqit_new-kbetr1 = <lwa_critm>-kbetr1  +  + lv_amt_needed .
                ENDIF.

                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
                CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                CLEAR : lwa_clrqit_new-netwr,
                         lwa_clrqit_new-netpr,
                         lwa_clrqit_new-wavwr,
                         lwa_clrqit_new-rtbbinr,
                         lwa_clrqit_new-bityp,
                         lwa_clrqit_new-bilmatnr,
                         lwa_clrqit_new-pop_stdt,
                         lwa_clrqit_new-pop_enddt,
                         lwa_clrqit_new-bldat_bi,
                         lwa_clrqit_new-/cgdc/cline.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm>-updkz = abap_true.

                "RESET "A
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                TRY.
                    lwa_clrqit_new-zmeng = <lwa_itm_vals>-open_quan.
                    CLEAR lv_rqty.
                    lv_rqty = lwa_clrqit_new-zmeng.
                    lwa_clrqit_new-zmeng = lv_rqty.
                  CATCH cx_root.
                    lwa_clrqit_new-zmeng = 1.
                ENDTRY.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
*
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.

                CLEAR : lwa_clrqit_new-netwr,
                          lwa_clrqit_new-netpr,
                          lwa_clrqit_new-wavwr,
                          lwa_clrqit_new-psdat.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                IF lwa_clrqit_new-zmeng > 0.
                  PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                ELSEIF lwa_clrqit_new-zmeng < 0.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                lv_amt_needed = 0.
              ELSE.
              ENDIF.
          ENDCASE.


        ENDIF.
      ENDIF.

    WHEN 2.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        lv_qty_extra = <lwa_postponed_data>-postp_qty - ls_grid_data-postp_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-postp_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-017 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-017.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.

          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_quan_ut + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_quan_ut * <lwa_itm_vals>-cost_ratio.
          ELSE.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan - <lwa_postponed_data>-postp_qty.
            <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_quan + ls_grid_data-postp_qty.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_quan * <lwa_itm_vals>-cost_ratio.
          ENDIF.
          <lwa_postponed_data>-postp_qty = ls_grid_data-postp_qty.
          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.

***    Rounding the qunatity based on amount and calculating the amount
        TRY.
            <lwa_postponed_data>-postp_qty = ls_grid_data-postp_amt / <lwa_itm_vals>-cost_ratio.
            CLEAR lv_rqty.
            lv_rqty = <lwa_postponed_data>-postp_qty .
            <lwa_postponed_data>-postp_qty  = lv_rqty.
          CATCH cx_root.
            <lwa_postponed_data>-postp_qty = 1.
        ENDTRY.

        lv_amt_needed_r = ( <lwa_postponed_data>-postp_qty * <lwa_itm_vals>-cost_ratio ) - ls_grid_data-postp_amt.
        IF lv_amt_needed_r IS NOT INITIAL.
          gs_rounding-kschl1 = gc_kschl1-ydif.
          gs_rounding-kbetr1  = lv_amt_needed_r.
        ENDIF.

        lv_amt_extra = <lwa_postponed_data>-postp_amt - ls_grid_data-postp_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_amt + <lwa_postponed_data>-postp_amt ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-018 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-018.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          IF lv_date IS NOT INITIAL.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt_ut = <lwa_itm_vals>-post_amt_ut + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan_ut = <lwa_itm_vals>-post_amt_ut / <lwa_itm_vals>-cost_ratio.

              CATCH cx_root.
                <lwa_itm_vals>-post_quan_ut = 1.
            ENDTRY.
          ELSE.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt - <lwa_postponed_data>-postp_amt.
            <lwa_itm_vals>-post_amt = <lwa_itm_vals>-post_amt + ls_grid_data-postp_amt.
            TRY.
                <lwa_itm_vals>-post_quan = <lwa_itm_vals>-post_amt / <lwa_itm_vals>-cost_ratio.
                CLEAR lv_rqty.
                lv_rqty = <lwa_itm_vals>-post_quan.
                <lwa_itm_vals>-post_quan = lv_rqty.
              CATCH cx_root.
                <lwa_itm_vals>-post_quan = 1.
            ENDTRY.
          ENDIF.

          <lwa_postponed_data>-postp_amt = ls_grid_data-postp_amt.
          TRY.
              <lwa_postponed_data>-postp_qty = ls_grid_data-postp_amt / <lwa_itm_vals>-cost_ratio.
              CLEAR lv_rqty.
              lv_rqty = <lwa_postponed_data>-postp_qty .
              <lwa_postponed_data>-postp_qty  = lv_rqty.
            CATCH cx_root.
              <lwa_postponed_data>-postp_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        lv_qty_extra = <lwa_postponed_data>-rej_qty - ls_grid_data-rej_qty.
        lv_qty_extra_t = lv_qty_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-rej_qty ) < lv_qty_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-019 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-019.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan - <lwa_postponed_data>-rej_qty.
          <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_quan + ls_grid_data-rej_qty.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_quan * <lwa_itm_vals>-cost_ratio.
          <lwa_postponed_data>-rej_qty = ls_grid_data-rej_qty.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_qty * <lwa_itm_vals>-cost_ratio.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-open_quan * <lwa_itm_vals>-cost_ratio.
        ENDIF.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        lv_amt_extra = <lwa_postponed_data>-rej_amt - ls_grid_data-rej_amt.
        lv_amt_extra_t = lv_amt_extra.
        IF ( <lwa_itm_vals>-open_quan + <lwa_postponed_data>-rej_amt ) < lv_amt_extra .
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE ID gc_clrq_msg_cls TYPE gc_message_type-warning NUMBER gc_msg_cls_msgnr-020 DISPLAY LIKE gc_message_type-error.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-020.
            gs_messages-msgty = gc_message_type-error.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          RETURN.
        ELSE.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt - <lwa_postponed_data>-rej_amt.
          <lwa_itm_vals>-rej_amt = <lwa_itm_vals>-rej_amt + ls_grid_data-rej_amt.
          TRY.
              <lwa_itm_vals>-rej_quan = <lwa_itm_vals>-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_itm_vals>-rej_quan = 1.
          ENDTRY.
          <lwa_postponed_data>-rej_amt = ls_grid_data-rej_amt.
          TRY.
              <lwa_postponed_data>-rej_qty = ls_grid_data-rej_amt / <lwa_itm_vals>-cost_ratio.
            CATCH cx_root.
              <lwa_postponed_data>-rej_qty = 1.
          ENDTRY.
          <lwa_itm_vals>-open_quan = <lwa_itm_vals>-tot_quan - ( <lwa_itm_vals>-rej_quan + <lwa_itm_vals>-post_quan
                                     + <lwa_itm_vals>-bill_quan + <lwa_itm_vals>-post_quan_ut ).
          <lwa_itm_vals>-open_amt = <lwa_itm_vals>-tot_amt - ( <lwa_itm_vals>-post_amt_ut +
                                    <lwa_itm_vals>-post_amt + <lwa_itm_vals>-rej_amt + <lwa_itm_vals>-bill_amt ).
        ENDIF.
      ENDIF.

      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WITH KEY clrit = ls_grid_data-clrit
                                                                           istat = lv_istat
                                                                           psdat = lv_date
                                                                           updkz = gc_updkz_new.
      IF <lwa_critm> IS ASSIGNED.
        CASE lv_operation.
          WHEN gc_operation-q.
            IF lv_qty_extra < ( <lwa_critm>-zmeng ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng - lv_qty_extra.
              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.

              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                        cuepos = <lwa_critm>-cuepos
                                                                        istat = gc_ibill_stat-open
                                                                        updkz = gc_updkz_new.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_qty_extra < <lwa_critm>-zmeng.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + lv_qty_extra.
                ELSE.
                  lwa_clrqit_new-zmeng = <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng.
                ENDIF.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                UNASSIGN <lwa_critm_new_a>.

              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
              ENDIF.

              lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = gc_ibill_stat-open.

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              IF lv_qty_extra > <lwa_critm>-zmeng.
                lv_qty_extra = lv_qty_extra - <lwa_critm>-zmeng.
              ELSE.
                lv_qty_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.
          WHEN gc_operation-a.
            IF lv_amt_extra < ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) ).
              "RESET P/R
              CLEAR : lwa_clrqit_new,
                       gs_clrit_org.
              PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                  CHANGING lwa_clrqit_new.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lwa_clrqit_new-clrdit
                IMPORTING
                  output = lwa_clrqit_new-clrdit.
              TRY.
                  lwa_clrqit_new-zmeng = ( ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) - lv_amt_extra )
                                                / <lwa_itm_vals>-cost_ratio.
                  CLEAR lv_rqty.
                  lv_rqty = lwa_clrqit_new-zmeng .
                  lwa_clrqit_new-zmeng = lv_rqty.
                CATCH cx_root.
                  lwa_clrqit_new-zmeng = 1.
              ENDTRY.
              lwa_clrqit_new-kbetr1 =  <lwa_postponed_data>-postp_amt.
              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = lv_istat.
              lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
              DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm>-clrit AND clrsit = <lwa_critm>-clrsit.
              CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
              ELSEIF lwa_clrqit_new-zmeng < 0.
              ENDIF.
              <lwa_critm>-updkz = abap_true.

              "RESET "A
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm_new_a> WITH KEY clrit = <lwa_critm>-clrit
                                                                         cuepos = <lwa_critm>-cuepos
                                                                         istat = gc_ibill_stat-open.
              IF <lwa_critm_new_a> IS ASSIGNED.
                CLEAR : lwa_clrqit_new,
                         gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm_new_a>
                    CHANGING lwa_clrqit_new.
                IF lv_amt_extra < ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                  TRY.
                      lwa_clrqit_new-zmeng = ( ( <lwa_critm_new_a>-zmeng * <lwa_itm_vals>-cost_ratio ) + lv_amt_extra )
                                             / <lwa_itm_vals>-cost_ratio.
                      CLEAR lv_rqty.
                      lv_rqty = lwa_clrqit_new-zmeng .
                      lwa_clrqit_new-zmeng = lv_rqty.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ELSE.
                  TRY.
                      lwa_clrqit_new-zmeng = ( <lwa_critm_new_a>-zmeng + <lwa_critm>-zmeng ).
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ENDIF.
                lwa_clrqit_new-kbetr1 =  <lwa_itm_vals>-open_amt.
                <lwa_critm_new_a>-updkz = abap_true.
                DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit = <lwa_critm_new_a>-clrit AND clrsit = <lwa_critm_new_a>-clrsit.
                UNASSIGN <lwa_critm_new_a>.
              ELSE.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.


              ENDIF.

              gs_clrit_org-clrno = lwa_clrqit_new-clrno.
              gs_clrit_org-clrit = lwa_clrqit_new-clrit.
              gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
              gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
              gs_clrit_org-istat = gc_ibill_stat-open.
*

              CLEAR : lwa_clrqit_new-netwr,
                        lwa_clrqit_new-netpr,
                        lwa_clrqit_new-wavwr,
                        lwa_clrqit_new-psdat.
              lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
              lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
              IF lwa_clrqit_new-zmeng > 0.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

              ENDIF.

              IF lv_amt_extra > ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                lv_amt_extra = lv_amt_extra - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
              ELSE.
                lv_amt_extra = 0.
              ENDIF.
            ELSE.
            ENDIF.

        ENDCASE.
      ENDIF.


    WHEN 3.
      "
    WHEN OTHERS.
  ENDCASE.
  CASE lv_process.
    WHEN 1.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index. ""LOOOP
        IF <lwa_critm>-clrit <> ls_clrqit-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.
          READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi
                                                 WITH KEY clrno     = <lwa_critm>-clrno
                                                          bill_item = <lwa_critm>-rtbbinr
                                                          bitype    = <lwa_critm>-bityp.
          IF <lwa_critm>-clrsit = gc_clrsit_low.
            CONTINUE.
          ELSE.
            IF lv_qty_needed = 0 AND lv_amt_needed = 0.
              EXIT.

            ELSEIF <lwa_critm>-istat = gc_ibill_stat-open AND lwa_clrqbi-bstat IS INITIAL."<lwa_critm>-bstat IS INITIAL.


              IF ( lv_operation = gc_operation-q AND <lwa_critm>-zmeng <= lv_qty_needed )
                OR ( lv_operation = gc_operation-a AND ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) <= lv_amt_needed ).
                "Create X.

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
                "Create P.
                CLEAR : lwa_clrqit_new,
                        gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                lwa_clrqit_new-istat = lv_istat.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-psdat = lv_date.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  TRY.
                      lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                      lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.

                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                ENDIF.


                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                IF lv_operation = gc_operation-q.
                  lv_qty_needed = lv_qty_needed - <lwa_critm>-zmeng.
                ELSE.
                  lv_amt_needed = lv_amt_needed - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.
                CLEAR <lwa_critm>-rtbbinr.
              ELSE.
                "Make Current Line 'X'.

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.


                "Create lv_istat ( lv_qty_needed)
                CLEAR : lwa_clrqit_new,
                     gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                lwa_clrqit_new-istat =  lv_istat.
                lwa_clrqit_new-psdat = lv_date.
                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  lwa_clrqit_new-cuepos = <lwa_critm>-cuepos.
                ELSE.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =   lv_qty_needed.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 = lv_amt_needed.
                  TRY.
                      lwa_clrqit_new-zmeng = lv_amt_needed / <lwa_itm_vals>-cost_ratio .
                      CLEAR lv_rqty.
                      lv_rqty = lwa_clrqit_new-zmeng .
                      IF lv_rqty < 1.
                        lv_rqty = 1.
                      ENDIF.
                      lwa_clrqit_new-zmeng = lv_rqty.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
*                 Check for  amount
                  IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
                    lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  ENDIF.
                ENDIF.

                "espos Logic
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                "Create 'A' ( current line - lv_qty_needed )
                CLEAR : lwa_clrqit_new,
                     gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.

                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.

                lwa_clrqit_new-istat = gc_ibill_stat-open.
                CLEAR lwa_clrqit_new-psdat.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  ( <lwa_critm>-zmeng - lv_qty_needed ).
                  IF lwa_clrqit_new-zmeng < 0.
                    lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
                  ENDIF.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.

                  lwa_clrqit_new-kbetr1 = <lwa_itm_vals>-open_amt.
                  TRY.
                      lwa_clrqit_new-zmeng =  ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )
                                                  - lv_amt_needed ) / <lwa_itm_vals>-cost_ratio.
                      CLEAR lv_rqty.
                      lv_rqty = lwa_clrqit_new-zmeng .
                      lwa_clrqit_new-zmeng = lv_rqty.
                      lwa_clrqit_new-zmeng = <lwa_itm_vals>-open_quan.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  IF lwa_clrqit_new-zmeng < 0.
                    lwa_clrqit_new-zmeng = lwa_clrqit_new-zmeng * ( -1 ).
                  ENDIF.
*                 Check for  amount
                  IF gs_variables-itm_post_amt IS INITIAL AND gs_variables-itm_post_amt_un IS INITIAL AND
                    gs_variables-itm_rej_amt IS INITIAL.
                    lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  ENDIF.
                ENDIF.


                "espos Logic
                gs_clrit_org-clrno = <lwa_critm>-clrno.
                gs_clrit_org-clrit = <lwa_critm>-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.

                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                CLEAR <lwa_critm>-rtbbinr.
                CLEAR gs_variables-bit_num_gen.
                EXIT.
              ENDIF.

            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_qty = ls_grid_data-postp_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_amt = ls_grid_data-postp_amt - lv_amt_needed_t.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_qty = ls_grid_data-rej_qty - lv_qty_needed_t.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_amt = ls_grid_data-rej_amt - lv_amt_needed_t.
      ENDIF.
    WHEN 2.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> FROM lv_index.
        IF <lwa_critm>-clrit <> <lwa_critm_item>-clrit OR <lwa_critm>-clrsit > lv_lclrsit.
          EXIT.
        ELSE.

          IF <lwa_critm>-clrsit = gc_clrsit_low.
            CONTINUE.
          ELSE.

            IF ( lv_operation = gc_operation-q AND lv_qty_extra = 0 ) OR
              ( lv_operation = gc_operation-a AND lv_amt_extra = 0 ).
              EXIT.
*
            ELSEIF <lwa_critm>-istat = lv_istat AND <lwa_critm>-psdat = lv_date.
              IF ( lv_operation = gc_operation-q AND <lwa_critm>-zmeng <= lv_qty_extra ) OR
                ( lv_operation = gc_operation-a AND ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ) <= lv_amt_extra ).
                "Make Current Line 'X'.

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
                "Create A
                CLEAR : lwa_clrqit_new,
                                             gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ELSE.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                  lwa_clrqit_new-zmeng =  <lwa_critm>-zmeng .
                ENDIF.


                CLEAR lwa_clrqit_new-psdat.
                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.
                CLEAR gs_variables-bit_num_gen.
                IF lv_operation = gc_operation-q.
                  lv_qty_extra = lv_qty_extra - <lwa_critm>-zmeng.
                ELSE.
                  lv_amt_extra = lv_amt_extra - ( <lwa_critm>-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.
                CLEAR <lwa_critm>-rtbbinr.
              ELSE.

*                    Make Current Line 'X'

                <lwa_critm>-istat = gc_ibill_stat-copied_to_subitems.

                IF <lwa_critm>-updkz IS INITIAL.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.

                """Create P (  lv_qty_extra)
                CLEAR : lwa_clrqit_new,
                                            gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  <lwa_critm>-updkz = abap_true.
                ELSE.
                  <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.
                  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                    EXPORTING
                      input  = <lwa_critm_item>-lclrsit
                    IMPORTING
                      output = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-istat = lv_istat.
                lwa_clrqit_new-psdat = lv_date.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng = <lwa_critm>-zmeng - lv_qty_extra.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio )."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 =  ( ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ) - lv_amt_extra ).
                  TRY.
                      lwa_clrqit_new-zmeng =  lwa_clrqit_new-kbetr1 / <lwa_itm_vals>-cost_ratio.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.


                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = lv_istat.
                lwa_clrqit_new-rsncd = ls_grid_data-rsncd.
                CLEAR : lwa_clrqit_new-netwr,
                       lwa_clrqit_new-netpr,
                       lwa_clrqit_new-wavwr,
                       lwa_clrqit_new-rtbbinr,
                       lwa_clrqit_new-bityp,
                       lwa_clrqit_new-bilmatnr,
                       lwa_clrqit_new-pop_stdt,
                       lwa_clrqit_new-pop_enddt,
                       lwa_clrqit_new-bldat_bi,
                       lwa_clrqit_new-/cgdc/cline.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.


                "Create A ( Current Line Qty = lv_qty_extra )
                CLEAR : lwa_clrqit_new,
                                                                gs_clrit_org.
                PERFORM move_itm_to_itm_fcat USING <lwa_critm>
                    CHANGING lwa_clrqit_new.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = lwa_clrqit_new-clrdit
                  IMPORTING
                    output = lwa_clrqit_new-clrdit.
                lwa_clrqit_new-clrno = <lwa_critm>-clrno.
                lwa_clrqit_new-clrit = <lwa_critm>-clrit.
                <lwa_critm_item>-lclrsit = <lwa_critm_item>-lclrsit + 1.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = <lwa_critm_item>-lclrsit
                  IMPORTING
                    output = <lwa_critm_item>-lclrsit.
                lwa_clrqit_new-clrsit = <lwa_critm_item>-lclrsit.
                IF <lwa_critm>-updkz = gc_updkz_new.
                  lwa_clrqit_new-cuepos = <lwa_critm>-cuepos.
                ELSE.
                  lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                ENDIF.
                lwa_clrqit_new-istat = gc_ibill_stat-open.
                CLEAR lwa_clrqit_new-psdat.
                IF lv_operation = gc_operation-q.
                  lwa_clrqit_new-zmeng =   lv_qty_extra.
                  lwa_clrqit_new-kbetr1 =  lv_qty_extra * <lwa_itm_vals>-cost_ratio ."/ ls_clrqit_last-netwr ) * 100.
                ELSE.
                  lwa_clrqit_new-kbetr1 = lv_amt_extra.
                  TRY.
                      lwa_clrqit_new-zmeng =   lv_amt_extra / <lwa_itm_vals>-cost_ratio.
                    CATCH cx_root.
                      lwa_clrqit_new-zmeng = 1.
                  ENDTRY.
                  lwa_clrqit_new-kbetr1 =  ( lwa_clrqit_new-zmeng * <lwa_itm_vals>-cost_ratio ).
                ENDIF.


                gs_clrit_org-clrno = lwa_clrqit_new-clrno.
                gs_clrit_org-clrit = lwa_clrqit_new-clrit.
                gs_clrit_org-clrsit = lwa_clrqit_new-clrsit.
                gs_clrit_org-item_delta = gc_clrdit_low."ls_clrqit_first-ldetla.
                gs_clrit_org-istat = gc_ibill_stat-open.
                CLEAR : lwa_clrqit_new-netwr,
                              lwa_clrqit_new-netpr,
                              lwa_clrqit_new-wavwr.
                lwa_clrqit_new-cuepos = <lwa_critm>-clrsit.
                lwa_clrqit_new-duepos = <lwa_critm>-clrdit.
                gs_variables-bit_num_gen = abap_true.
                PERFORM update_clrq_item01 USING space
                                                    ls_link_data
                                                    lwa_clrit_old
                                     CHANGING lwa_clrqit_new.

                CLEAR gs_variables-bit_num_gen.
                CLEAR <lwa_critm>-rtbbinr.
                EXIT.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_qty = 0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-postponed.
        ls_grid_data-postp_amt = 0.
      ELSEIF lv_operation = gc_operation-q AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_qty =  0.
      ELSEIF lv_operation = gc_operation-a AND lv_istat = gc_ibill_stat-rejected.
        ls_grid_data-rej_amt =  0.
      ENDIF.
  ENDCASE.
*// Make the main item( 000000 ) reason code as MULT when sub items having multiple reason codes
  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WHERE clrno = ls_clrqit-clrno
                                                            AND  clrit = ls_clrqit-clrit
                                                            AND  clrsit <> gc_sub_main .
    IF <lwa_critm>-rsncd IS NOT INITIAL.
      IF lv_count IS INITIAL.
        lv_count = 1.
        DATA(lv_rsncd) = <lwa_critm>-rsncd.
        CONTINUE.
      ELSEIF lv_rsncd IS NOT INITIAL AND lv_rsncd <> <lwa_critm>-rsncd.
        lv_count = lv_count + 1.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_cr_mainitm>)
            WITH KEY clrno = <lwa_critm>-clrno
                     clrit = <lwa_critm>-clrit
                     clrsit = gc_sub_main.
  IF sy-subrc EQ 0 AND
    <lwa_cr_mainitm> IS ASSIGNED.
    IF lv_count = 1.
      <lwa_cr_mainitm>-rsncd = lv_rsncd.
    ELSEIF lv_count > 1.
      <lwa_cr_mainitm>-rsncd = gc_clin_mult.
    ENDIF.
    IF <lwa_cr_mainitm>-updkz IS INITIAL.
      <lwa_cr_mainitm>-updkz = gc_updkz_update.
    ENDIF.
    gs_variables-refresh_calc_req_items_grid = abap_true.
    gs_variables-refersh_bill_bp_grid = abap_true.
  ENDIF.
*// DCLM 4307

  gs_variables-calc_changed = abap_true.
  DELETE gs_clrqdoc_infocus-x-critm WHERE updkz = abap_true.
  CLEAR gs_variables-process_type.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_old_blk_auth
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_BLK_AUTH_PRE_DATA_FAKSP
*&      <-- LV_AUTH_OLD
*&---------------------------------------------------------------------*
FORM check_old_blk_auth  USING    lv_faksp TYPE faksp
                                  lv_bill_item TYPE /cgdc/billitem_guid
                         CHANGING lv_auth_old TYPE abap_bool
                                  lv_manual_old TYPE xfeld
                                  lv_blk_desc_old TYPE vtext
                                  lv_blkid_old TYPE /cgdc/blkid.

  CALL METHOD /cgdc/cl_be_helper=>get_blkobj_by_blkcd
    EXPORTING
      im_blkcd  = lv_faksp
    IMPORTING
      re_blkobj = DATA(lv_blkid).
*
  CALL METHOD /cgdc/cl_be_helper=>get_instance
    EXPORTING
      iv_blkid  = lv_blkid
      iv_blktyp = /cgdc/cl_be_helper=>gc_block_type-billing_block
    RECEIVING
      ro_blkobj = DATA(lo_blkobj).

  lo_blkobj->get_block_info(
    IMPORTING
      es_blkobjhdr = DATA(ls_blkobjhdr)
  ).


  lv_blk_desc_old = ls_blkobjhdr-blkcd_descr.
  lv_blkid_old = ls_blkobjhdr-blkid.

  IF ls_blkobjhdr-manual <> abap_true.
    ""error message here.
    MESSAGE i115(/cgdc/blk) WITH  lv_bill_item
                                      lv_faksp
                                      lv_blk_desc_old.
  ELSE.

    CALL METHOD lo_blkobj->check_auth
      EXPORTING
        xvbpa_hdr     = gt_x_vbpa
        im_action     = gc_auth_action-remove "'1'
      RECEIVING
        rv_authorised = lv_auth_old.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_curr_blk_auth
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_CURR_FAKSK
*&      <-- LV_AUTH_CURR
*&      <-- LV_MANUAL_CURR
*&      <-- LV_BLK_DESC_CURR
*&---------------------------------------------------------------------*
FORM check_curr_blk_auth  USING    lv_curr_faksk TYPE faksk
                          CHANGING lv_auth_curr TYPE abap_bool.


  /cgdc/cl_be_helper=>get_blkobj_by_blkcd(
    EXPORTING
      im_blkcd  = lv_curr_faksk
    IMPORTING
      re_blkobj = DATA(lv_curr_blkobj)
  ).

  /cgdc/cl_be_helper=>get_instance(
    EXPORTING
      iv_blkid  = lv_curr_blkobj
      iv_blktyp = /cgdc/cl_be_helper=>gc_block_type-billing_block
    RECEIVING
      ro_blkobj = DATA(lo_curr_blkobj)
  ).

  /cgdc/cl_be_helper=>get_blkcd_descr(
    EXPORTING
      iv_blkcd = lv_curr_faksk
    RECEIVING
      re_descr = DATA(lv_faksk_descr)
  ).

  lo_curr_blkobj->get_block_info(
    IMPORTING
      es_blkobjhdr = DATA(ls_blkobjhdr)
  ).

  IF ls_blkobjhdr-manual <> abap_true.
    "" if auto bill block changed manually

    /cgdc/_clrqhd-faksk = gs_be_crhdr_buffer-faksk. "" reset the block

    MESSAGE i116(/cgdc/blk) WITH gs_clrqdoc_infocus-clrno
                                 lv_curr_faksk
                                 lv_faksk_descr.
    EXIT.
  ELSE.
    "" if manual block, check auth to remove
    lo_curr_blkobj->check_auth(
      EXPORTING
        im_action     = gc_auth_action-apply "'2'
      RECEIVING
        rv_authorised = DATA(lv_auth)
    ).

    IF lv_auth <> abap_true.
      /cgdc/_clrqhd-faksk = gs_be_crhdr_buffer-faksk. "" reset the block
      MESSAGE i116(/cgdc/blk) WITH gs_clrqdoc_infocus-clrno
                                   lv_curr_faksk
                                   lv_faksk_descr.
      EXIT.
    ELSE.
      lv_auth_curr = lv_auth.
    ENDIF.
  ENDIF.
ENDFORM.
FORM Validate_existing_lines USING lv_vbeln TYPE vbeln_va
                                   lt_vbap TYPE /cgdc/tt_vbap
                                   lt_iflowdn TYPE /cgdc/tt_iflowdn.
  ""COmpare DB WBS with Current WBS if Change give error
  ""Check If any Line Contract line is deleted
  DATA: lt_posnr_r  TYPE RANGE OF posnr.
  DATA: lt_posnr_w_r  TYPE RANGE OF posnr. "wbs deleted
  DATA: lt_posnr_c_r  TYPE RANGE OF posnr. "contract
  DATA: lwa_posnr_r LIKE LINE OF lt_posnr_r.
  DATA : lt_clrqit_key TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA : lv_subrc TYPE sysubrc.
  DATA : lwa_clrqpit TYPE /cgdc/s_clrqpit,
         lt_clrqpit  TYPE TABLE OF /cgdc/s_clrqpit.
  DATA : lt_con_it_flow  TYPE TABLE OF /cgdc/cf_sd_it,
         lwa_con_it_flow TYPE /cgdc/cf_sd_it.

*  -----------------------
  lwa_posnr_r-option = 'EQ'.
  lwa_posnr_r-sign = 'I'.

  "READ IT_HEADERFLOW
  SELECT *
    FROM /cgdc/cf_sd_it
    INTO TABLE lt_con_it_flow
    FOR ALL ENTRIES IN lt_iflowdn
    WHERE vbeln = lv_vbeln AND posnr = lt_iflowdn-posnr.



  ""IF WBS Is Updated
  LOOP AT gt_contract_itm INTO DATA(lwa_cont_itm).
    READ TABLE lt_vbap INTO DATA(lwa_vbap) WITH KEY vbeln = lwa_cont_itm-vbeln
                                                    posnr = lwa_cont_itm-posnr.
    IF lwa_cont_itm-ps_psp_pnr <> lwa_vbap-ps_psp_pnr.
      lwa_posnr_r-low = lwa_vbap-posnr.
      APPEND lwa_posnr_r TO lt_posnr_r.
      APPEND lwa_posnr_r TO lt_posnr_w_r.
    ENDIF.
    IF lwa_cont_itm-/cgdc/pbpgp <> lwa_vbap-/cgdc/pbpgp.
      lwa_posnr_r-low = lwa_vbap-posnr.
      APPEND lwa_posnr_r TO lt_posnr_r.
      APPEND lwa_posnr_r TO lt_posnr_c_r.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_iflowdn INTO DATA(lwa_iflowdn).
    READ TABLE lt_con_it_flow INTO lwa_con_it_flow WITH KEY posnr = lwa_iflowdn-posnr.        " DCLM 6686
    IF sy-subrc = 0 AND lwa_iflowdn-/cgdc/defin <> lwa_con_it_flow-/cgdc/defin.
      lwa_posnr_r-low = lwa_iflowdn-posnr.                                                    " DCLM 6686
      APPEND lwa_posnr_r TO lt_posnr_r.
      APPEND lwa_posnr_r TO lt_posnr_c_r.
    ELSEIF sy-subrc <> 0.
      lwa_posnr_r-low = lwa_iflowdn-posnr.                                                    " DCLM 6686
      APPEND lwa_posnr_r TO lt_posnr_r.
      APPEND lwa_posnr_r TO lt_posnr_c_r.
    ENDIF.
  ENDLOOP.
  "IF Contract Line Item Deleted
  LOOP AT lt_vbap INTO lwa_vbap WHERE updkz = gc_updkz_delete.
    lwa_posnr_r-low = lwa_vbap-posnr.
    APPEND lwa_posnr_r TO lt_posnr_r.
    APPEND lwa_posnr_r TO lt_posnr_w_r.
  ENDLOOP.

  "Update Message
  SORT lt_posnr_r BY low.
  DELETE ADJACENT DUPLICATES FROM lt_posnr_r COMPARING ALL FIELDS.
  IF lt_posnr_r IS NOT INITIAL.
*    gs_clrqdoc_infocus-x-crhdr-msgcode = 'Q'.
*    gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
    SELECT clrno clrit
      FROM /cgdc/_clrqit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqit_key
      WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno
          AND vgbel = gs_clrqdoc_infocus-x-crhdr-vgbel
          AND vgpos IN lt_posnr_r.
    IF sy-subrc = 0.
      gs_variables-overview_mode = gc_mode_change.
      gs_variables-bill_blk_reval = abap_true.
      PERFORM set_calc_req_item_doc_infocus USING lt_clrqit_key CHANGING lv_subrc.
      CLEAR gs_variables-bill_blk_reval.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_critm>).
        "Update WBS Message
        IF gs_clrqdoc_infocus-x-crhdr-msgcode NA 'Q'.
          READ TABLE lt_posnr_w_r TRANSPORTING NO FIELDS  WITH KEY low = <lwa_critm>-vgpos.
          IF sy-subrc = 0.
            CONCATENATE gs_clrqdoc_infocus-x-crhdr-msgcode 'Q' INTO gs_clrqdoc_infocus-x-crhdr-msgcode.
            gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
          ENDIF.
        ENDIF.

**      Update Cost Lines Contract Line Item Updated Fields.
        IF <lwa_critm>-istat = gc_ibill_stat-open AND ( <lwa_critm>-itmty IS INITIAL OR <lwa_critm>-itmty = gc_clrq_itmty-bill_plan_line ).
          READ TABLE lt_posnr_c_r TRANSPORTING NO FIELDS WITH KEY low = <lwa_critm>-vgpos.
          IF sy-subrc = 0.
            IF lv_subrc IS INITIAL.
              READ TABLE gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WITH KEY bitype = <lwa_critm>-bityp
                                                                                    bill_item = <lwa_critm>-rtbbinr.
              IF ( sy-subrc = 0 AND lwa_crbinr-bstat IS INITIAL ) OR <lwa_critm>-clrsit = '000000'.
                READ TABLE lt_vbap INTO lwa_vbap WITH KEY vbeln = <lwa_critm>-vgbel
                                                          posnr = <lwa_critm>-vgpos.
                IF sy-subrc = 0.
                  <lwa_critm>-/cgdc/pbpgp = lwa_vbap-/cgdc/pbpgp.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
                READ TABLE lt_iflowdn INTO lwa_iflowdn WITH KEY   posnr = <lwa_critm>-vgpos.
                IF sy-subrc = 0.
                  <lwa_critm>-/cgdc/defin = lwa_con_it_flow-/cgdc/defin.
                  <lwa_critm>-updkz = gc_updkz_update.
                ENDIF.
              ENDIF.
            ELSE.
              "Update Contract Data Message
              IF gs_clrqdoc_infocus-x-crhdr-msgcode NA 'Y'.
                READ TABLE lt_posnr_w_r TRANSPORTING NO FIELDS  WITH KEY low = <lwa_critm>-vgpos.
                IF sy-subrc = 0.
                  CONCATENATE gs_clrqdoc_infocus-x-crhdr-msgcode 'Y' INTO gs_clrqdoc_infocus-x-crhdr-msgcode.
                  gs_clrqdoc_infocus-x-crhdr-msgcode = gc_updkz_update.
                ENDIF.
              ENDIF.
              MOVE-CORRESPONDING <lwa_critm> TO lwa_clrqpit.
              lwa_clrqpit-cont_fld_upd = abap_true.
              lwa_clrqpit-updkz = gc_updkz_new.
              APPEND lwa_clrqpit TO lt_clrqpit.
              CLEAR lwa_clrqpit.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lt_clrqpit IS NOT INITIAL.
        CALL FUNCTION '/CGDC/CLRQ_CLRQPRS_UPDATE_DB' IN UPDATE TASK
          EXPORTING
            it_clrqpit = lt_clrqpit
*           IT_CLRQPCN =
          .

      ENDIF.
    ENDIF.
  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_cgitm_for_scheditm_base
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_cgitm_for_scheditm_base USING ls_calc_grp TYPE /cgdc/s_rtbpcg.

  DATA: lv_subrc           TYPE sy-subrc,
        lv_counter         TYPE sy-tabix,
        ls_komk            TYPE komk,
        ls_komp            TYPE komp,
        lwa_clrqgrrf       TYPE /cgdc/s_clrqgrrf,
        lwa_bpit_per_posnr LIKE LINE OF gt_pbp_bpit_per_posnr,
        lwa_clrqgrr        TYPE /cgdc/s_clrqgrr.

  IF gs_contract_hdr-/cgdc/pbplq EQ 'I'.

    LOOP AT gt_pbp_bpit_per_posnr INTO lwa_bpit_per_posnr.

      ls_komp-/cgdc/orgh = lwa_bpit_per_posnr-vbeln.
      ls_komp-/cgdc/orgi = lwa_bpit_per_posnr-posnr.
      CLEAR lv_subrc.

      CALL METHOD /cgdc/cl_prc_formula_functions=>check_preq_clauses
        EXPORTING
          i_kschl         = ls_calc_grp-kschl_base
          i_call_from_rtb = abap_true
          is_komk         = ls_komk
          is_komp         = ls_komp
        CHANGING
          c_subrc         = lv_subrc.

      CHECK lv_subrc EQ 0.
      CLEAR: lwa_clrqgrr.
      lv_counter = lv_counter + 1.
      lwa_clrqgrr-rowid = lv_counter.
      lwa_clrqgrr-conno = gs_clrqdoc_infocus-x-crhdr-vgbel.
      lwa_clrqgrr-conitm = lwa_bpit_per_posnr-posnr.
      lwa_clrqgrr-datab = lwa_bpit_per_posnr-svcstart.
      lwa_clrqgrr-datbi = lwa_bpit_per_posnr-svcend.
      lwa_clrqgrr-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
      lwa_clrqgrr-clgrn = ls_calc_grp-clgrn.
      lwa_clrqgrr-clgrp_kschl = ls_calc_grp-kschl_base.
      APPEND lwa_clrqgrr TO gs_clrqdoc_infocus-x-crgrr.
      MOVE-CORRESPONDING lwa_clrqgrr TO lwa_clrqgrrf.
      lwa_clrqgrrf-fname = '/CGDC/ORGI'.
      lwa_clrqgrrf-fcatg = 'IT'.
      lwa_clrqgrrf-fvalue = lwa_bpit_per_posnr-posnr.
      APPEND lwa_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
* Check if we have to add other fields as well
    ENDLOOP.

  ELSEIF gs_contract_hdr-/cgdc/pbplq EQ 'H'.

    READ TABLE gt_pbp_bpit_per_vbeln INTO DATA(lwa_bpit_per_vbeln) INDEX 1.
    CHECK sy-subrc EQ 0.
    ls_komp-/cgdc/orgh = lwa_bpit_per_vbeln-vbeln.

    CALL METHOD /cgdc/cl_prc_formula_functions=>check_preq_clauses
      EXPORTING
        i_kschl         = ls_calc_grp-kschl_base
        i_call_from_rtb = abap_true
        is_komk         = ls_komk
        is_komp         = ls_komp
      CHANGING
        c_subrc         = lv_subrc.

    CHECK lv_subrc EQ 0.
    CLEAR: lwa_clrqgrr.
    lwa_clrqgrr-rowid = '1'.
    lwa_clrqgrr-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
    lwa_clrqgrr-conno = gs_clrqdoc_infocus-x-crhdr-vgbel.
    lwa_clrqgrr-datab = lwa_bpit_per_vbeln-svcstart.
    lwa_clrqgrr-datbi = lwa_bpit_per_vbeln-svcend.
    lwa_clrqgrr-clgrn = ls_calc_grp-clgrn.
    lwa_clrqgrr-clgrp_kschl = ls_calc_grp-kschl_base.
    APPEND lwa_clrqgrr TO gs_clrqdoc_infocus-x-crgrr.
    MOVE-CORRESPONDING lwa_clrqgrr TO lwa_clrqgrrf.
    APPEND lwa_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
* Check if we have to add other fields as well

  ENDIF.

ENDFORM.
**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: INCLUDE /CGDC/LCLRQMF0D
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0D.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form display_controls
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_controls.

  DATA: lv_perform(30) VALUE gc_display_control.

  CONCATENATE lv_perform sy-dynnr INTO lv_perform.
  CONDENSE lv_perform NO-GAPS.
  PERFORM (lv_perform) IN PROGRAM (gc_program) IF FOUND.

ENDFORM.
FORM display_controls_0506.

  IF go_reassign_bi_container IS INITIAL.

    CREATE OBJECT go_reassign_bi_container
      EXPORTING
        container_name              = gc_custom_area-reassign_bi_grid
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_reassign_bi_grid.

ENDFORM.

FORM display_controls_0100.

  IF go_docking_container IS INITIAL.

    CREATE OBJECT go_docking_container
      EXPORTING
        repid                       = gc_program
        dynnr                       = gc_screen-overview
        side                        = cl_gui_docking_container=>dock_at_left
        extension                   = 280
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_request_worklist.

ENDFORM.


FORM dequeue_calc_request USING lv_clrno   TYPE /cgdc/clrqno
                                lv_enqmode TYPE enqmode.
  CALL FUNCTION 'DEQUEUE_/CGDC/E_CLRQ'
    EXPORTING
      mode_/cgdc/_clrqhd = lv_enqmode
      mandt              = sy-mandt
      clrno              = lv_clrno.
  IF sy-subrc <> 0.
  ENDIF.
ENDFORM.

FORM display_controls_0997.
  gs_variables-cscon_msg1 = TEXT-126.
  gs_variables-cscon_msg2 = TEXT-127.
ENDFORM.

FORM display_calc_req_header_data.

  CLEAR: /cgdc/_clrqhd-clrno, /cgdc/_clrqhd-kunnr, /cgdc/_clrqhd-waerk,
         /cgdc/_clrqhd-bukrs, /cgdc/_clrqhd-vkorg,/cgdc/_clrqhd-vgbel,
         /cgdc/_clrqhd-vtweg, /cgdc/_clrqhd-spart,/cgdc/_clrqhd-faksk,
         /cgdc/_clrqhd-ernam, /cgdc/_clrqhd-erdat, /cgdc/_clrqhd-erzet,
         /cgdc/_clrqhd-aenam, /cgdc/_clrqhd-aedat, /cgdc/_clrqhd-aezet.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO /cgdc/_clrqhd.
  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO gs_header_0110.
  "++SOC - decimal precision
  IF gs_clrqdoc_infocus-x-crhdr-netwr24 IS NOT INITIAL.
    gs_header_0110-netwr = CONV #( gs_clrqdoc_infocus-x-crhdr-netwr24 ).
  ENDIF.
  "++SOC - decimal precision

  PERFORM set_icon.

ENDFORM.

FORM display_controls_0170.

  IF go_items_grid_container IS INITIAL.

    CREATE OBJECT go_items_grid_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_items_grid
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_items_grid.

ENDFORM.
FORM  display_controls_0171.
  DATA :ls_environment    TYPE /cgdc/s_bsel_envr,
        lref_event_data   TYPE REF TO cl_alv_event_data,
        lwa_selection     TYPE /cgdc/s_bsel_values,
        lt_selopt         TYPE /cgdc/t_bsel_selopt,
        lv_where          TYPE string,
        lv_structure_name TYPE dd02l-tabname.

  IF gs_variables-filter_html IS NOT INITIAL.
    CLEAR gs_variables-filter_html.

    CASE gs_variables-dyn_selscr_ucomm.
      WHEN gc_fcode-set_bill_itm_filter.
        lv_structure_name = gc_bilitm_tabname.
      WHEN gc_fcode-setfilter.
        lv_structure_name = gc_structure-clrq_items.
    ENDCASE.


    PERFORM selections_fcat USING lv_structure_name CHANGING gt_selection_fcat.
    PERFORM selections_data CHANGING gt_selection.
  ENDIF.
  IF ref_selections IS INITIAL .

    IF ref_dyn_selections_container IS INITIAL.
      CREATE OBJECT ref_dyn_selections_container
        EXPORTING
          container_name              = gc_cc_dyn_sel
        EXCEPTIONS
          cntl_error                  = 1
          cntl_system_error           = 2
          create_error                = 3
          lifetime_error              = 4
          lifetime_dynpro_dynpro_link = 5
          OTHERS                      = 6.

      CHECK sy-subrc EQ 0.
      IF go_bsel_event_handler IS NOT BOUND.
        CREATE OBJECT go_bsel_event_handler.
      ENDIF.
      CREATE OBJECT ref_selections
        EXPORTING
          i_parent               = ref_dyn_selections_container
          i_no_3d_border         = abap_true
          i_enable_f4_in_display = abap_true
          i_ref_event_handler    = go_bsel_event_handler.

    ENDIF.


    PERFORM control_events_register.

****Preparing Environment
    ls_environment-display_only        = space.
    ls_environment-hide_variant_button = abap_true.
    ls_environment-show_description    = abap_true.
    ls_environment-hide_toolbar        = abap_true.
    ls_environment-skip_check          = abap_true.

    CALL METHOD ref_selections->do_refresh.

    CALL METHOD ref_selections->selections_display
      EXPORTING
        is_environment     = ls_environment
        it_selections_fcat = gt_selection_fcat
      CHANGING
        ct_selections      = gt_selection
      EXCEPTIONS
        invalid_parameters = 1
        OTHERS             = 2.

  ELSE.

    CLEAR lv_where.
    PERFORM prepare_where_cond_from_html CHANGING lv_where.
    CASE gs_variables-dyn_selscr_ucomm.
      WHEN gc_fcode-set_bill_itm_filter.
        gv_bi_where = lv_where.
      WHEN gc_fcode-setfilter.
        gv_where = lv_where.
    ENDCASE.

    ls_environment-display_only        = space.
    ls_environment-hide_variant_button = abap_true.
    ls_environment-show_description    = abap_true.
    ls_environment-hide_toolbar        = abap_true.
    ls_environment-skip_check          = abap_true.
    CALL METHOD ref_selections->do_refresh.
    CALL METHOD ref_selections->selections_display
      EXPORTING
        is_environment     = ls_environment
        it_selections_fcat = gt_selection_fcat
      CHANGING
        ct_selections      = gt_selection
      EXCEPTIONS
        invalid_parameters = 1
        OTHERS             = 2.

  ENDIF.

ENDFORM.


*** XIDK900913 by Vinit Jain
*&---------------------------------------------------------------------*
*& Form document_save
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM document_save USING ls_clrq_doc TYPE /cgdc/s_clrq_doc
                         lv_commit_work.
  DATA: lt_clrq_doc   TYPE /cgdc/tt_clrq_doc.

  APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
  CALL FUNCTION '/CGDC/CLRQ_SAVE'
    EXPORTING
      i_commit_work = lv_commit_work
    CHANGING
      ct_clrq_doc   = lt_clrq_doc
    EXCEPTIONS
      no_change     = 1
      OTHERS        = 2.
  IF sy-subrc = 0.
    MESSAGE s170(/cgdc/clrq).
  ELSEIF  sy-subrc = 1.
    MESSAGE s171(/cgdc/clrq).
  ENDIF.


ENDFORM.
*** XIDK900913 by Vinit Jain
*&---------------------------------------------------------------------*
*& Form display_item_quick_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_item_quick_info.

  DATA: lwa_critm      TYPE /cgdc/s_clrqit,
        lwa_critm_fcat TYPE /cgdc/s_clrqit_fcat,
        lwa_itm_value  TYPE s_item_val.
  DATA : lwa_clrlt TYPE /cgdc/s_clrqlink_data.
  CLEAR: /cgdc/s_clrqit-clrit,
         /cgdc/s_clrqit-matnr, /cgdc/s_clrqit-netwr, /cgdc/s_clrqit-waerk,
         /cgdc/s_clrqit-pstyv.

  READ TABLE gt_calc_req_items_fcat
  WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
           clrit = gs_variables-item_infocus
  INTO lwa_critm_fcat.
  CHECK sy-subrc EQ 0.
  MOVE-CORRESPONDING lwa_critm_fcat TO /cgdc/s_clrqit.
  /cgdc/s_clrqit-zmeng = lwa_critm_fcat-zmeng.
  /cgdc/s_clrqit-total_netwr = lwa_critm_fcat-netwr.
  /cgdc/s_clrqit-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.

  SELECT SINGLE vtext
    FROM tvapt
    INTO /cgdc/s_clrqit-pstyv_desc
    WHERE spras = sy-langu AND pstyv = /cgdc/s_clrqit-pstyv.


  READ TABLE gt_item_values INTO lwa_itm_value WITH KEY clrit = gs_variables-item_infocus.
  IF sy-subrc = 0.

    /cgdc/s_clrqit-netwr = lwa_itm_value-open_amt.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-clrit_link INTO lwa_clrlt WITH KEY clrno = lwa_critm_fcat-clrno
                                                                clrit = lwa_critm_fcat-clrit.
  IF sy-subrc = 0.
    PERFORM prepare_calc_itm_source USING lwa_clrlt
                                    CHANGING /cgdc/s_clrqit.
  ENDIF.

ENDFORM.

FORM determine_pstyv USING ls_contract_itm TYPE vbap
                  CHANGING ls_clrq_itm_new TYPE /cgdc/s_clrqit.

  DATA: lv_msg_code TYPE /cgdc/msg_id.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt.
  SELECT SINGLE * FROM /cgdc/t_clrticg
          INTO @DATA(lwa_clrticg)
          WHERE clrqt    = @gs_clrqdoc_infocus-x-crhdr-clrqt
          AND   rtbusage = @ls_clrq_itm_new-rtbusage
          AND   rfpstyv = @ls_contract_itm-pstyv
          AND   mtpos    = @ls_clrq_itm_new-mtpos.
  IF sy-subrc EQ 0 AND lwa_clrticg-pstyv IS NOT INITIAL.
    ls_clrq_itm_new-pstyv  = lwa_clrticg-pstyv.
  ENDIF.

  IF  ls_clrq_itm_new-pstyv IS INITIAL.
    lv_msg_code = gc_message_type-information .
    IF ls_clrq_itm_new-msg_code NA gc_message_type-information.
      ls_clrq_itm_new-msg_code =  ls_clrq_itm_new-msg_code && lv_msg_code.
      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
    ENDIF.
  ELSE.
    IF ls_clrq_itm_new-msg_code CA gc_message_type-information.
      REPLACE gc_message_type-information IN ls_clrq_itm_new-msg_code WITH space.
      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
    ENDIF.

  ENDIF.


ENDFORM.

FORM display_controls_0191.

  IF go_bill_pre_container IS INITIAL.

    CREATE OBJECT go_bill_pre_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_billing_preview
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_bill_pre.

ENDFORM.
FORM display_controls_0193.

  IF go_subitm_alv_container IS INITIAL.

    CREATE OBJECT go_subitm_alv_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_sub_item_grid
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_subitems_grid.

ENDFORM.

FORM display_controls_0197.

  IF go_rej_itm_container IS INITIAL.

    CREATE OBJECT go_rej_itm_container
      EXPORTING
        container_name              = gc_custom_area-rej_itm_lst
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_rej_itm_grid.

ENDFORM.

FORM display_controls_0121.

  IF go_bill_hist_container IS INITIAL.
    CREATE OBJECT go_bill_hist_container
      EXPORTING
        container_name              = gc_custom_area-bill_hist
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
  ENDIF.

  PERFORM build_bill_hist.

ENDFORM.
FORM display_controls_0194.

  IF go_subitm_cond_container IS INITIAL.

    CREATE OBJECT go_subitm_cond_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_sub_item_cond
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_subitem_cond .

ENDFORM.
FORM display_controls_0195.

  IF go_subitm_part_container IS INITIAL.

    CREATE OBJECT go_subitm_part_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_sub_item_part
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_subitem_part.

ENDFORM.
FORM display_controls_0900.

  IF go_calc_req_upd_prc_container IS INITIAL.

    CREATE OBJECT go_calc_req_upd_prc_container
      EXPORTING
        container_name              = gc_custom_area-calc_req_calc_upd_prc
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_req_upd_prc.

ENDFORM.
FORM display_controls_0301.
  DATA: lwa_item TYPE /cgdc/s_clrqit.
  DATA: lt_dynvalues TYPE TABLE OF dynpread.
  DATA: lwa_dynvalues TYPE dynpread.
  FIELD-SYMBOLS: <lwa_itm_val>       TYPE s_item_val,
                 <lwa_postpone_data> TYPE /cgdc/s_clrq_postpone.
  DATA : lt_rows TYPE lvc_t_row,
         lwa_row TYPE lvc_s_row.
  DATA : lwa_cal_req_itm TYPE /cgdc/s_clrqit_fcat.
  CLEAR:
  /cgdc/s_clrq_screenfields-open_quan,
  /cgdc/s_clrq_screenfields-rej_quan,
  /cgdc/s_clrq_screenfields-rejected_quan,
  /cgdc/s_clrq_screenfields-total_quan,
  /cgdc/s_clrq_screenfields-post_quan,
  /cgdc/s_clrq_screenfields-postponed_quan,
  /cgdc/s_clrq_screenfields-billed_qty,
  /cgdc/s_clrq_screenfields-postponed_ut_qty,
  /cgdc/s_clrq_screenfields-rsncd .
  /cgdc/s_clrq_screenfields-cummulative = gc_scrn_filed_cumm."'* Cummulative'.

  go_grid_calc_req_items->get_selected_rows( IMPORTING et_index_rows = lt_rows ).
  LOOP AT lt_rows INTO lwa_row.
    READ TABLE gt_calc_req_items_fcat INTO lwa_cal_req_itm INDEX lwa_row-index.
    IF sy-subrc = 0.
      READ TABLE gt_item_values ASSIGNING <lwa_itm_val> WITH KEY clrit = lwa_cal_req_itm-clrit.
      IF sy-subrc <> 0.
        APPEND INITIAL LINE TO gt_item_values ASSIGNING <lwa_itm_val>.
        <lwa_itm_val>-clrit = lwa_cal_req_itm-clrit.
      ENDIF.


      READ TABLE gt_item_postponed ASSIGNING <lwa_postpone_data> WITH KEY clrit = lwa_cal_req_itm-clrit psdat = gc_psdat_low.
      IF sy-subrc <> 0.
        APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postpone_data>.
        <lwa_postpone_data>-clrit = lwa_cal_req_itm-clrit.
      ENDIF.
      /cgdc/s_clrq_screenfields-open_quan = <lwa_itm_val>-open_quan + /cgdc/s_clrq_screenfields-open_quan.
      /cgdc/s_clrq_screenfields-total_quan = <lwa_itm_val>-tot_quan + /cgdc/s_clrq_screenfields-total_quan.
      /cgdc/s_clrq_screenfields-rej_quan = <lwa_itm_val>-rej_quan +  /cgdc/s_clrq_screenfields-rej_quan.
      /cgdc/s_clrq_screenfields-rejected_quan = <lwa_itm_val>-rej_quan + /cgdc/s_clrq_screenfields-rejected_quan.
      /cgdc/s_clrq_screenfields-billed_qty = <lwa_itm_val>-bill_quan + /cgdc/s_clrq_screenfields-billed_qty.

      /cgdc/s_clrq_screenfields-postponed_ut_qty = <lwa_itm_val>-post_quan_ut +  /cgdc/s_clrq_screenfields-postponed_quan.
      /cgdc/s_clrq_screenfields-post_quan = <lwa_postpone_data>-postp_qty + /cgdc/s_clrq_screenfields-post_quan.
      /cgdc/s_clrq_screenfields-postponed_quan = <lwa_postpone_data>-postp_qty + /cgdc/s_clrq_screenfields-postponed_quan.

    ENDIF.
  ENDLOOP.

ENDFORM.
FORM  display_controls_0302.
  DATA: lwa_item TYPE /cgdc/s_clrqit.
  DATA: lt_dynvalues TYPE TABLE OF dynpread.
  DATA: lwa_dynvalues TYPE dynpread.
  FIELD-SYMBOLS: <lwa_itm_val>       TYPE s_item_val,
                 <lwa_postpone_data> TYPE /cgdc/s_clrq_postpone.
  DATA : lt_rows TYPE lvc_t_row,
         lwa_row TYPE lvc_s_row.
  DATA : lwa_cal_req_itm TYPE /cgdc/s_clrqit_fcat.
  CLEAR:
  /cgdc/s_clrq_screenfields-open_netwr,
  /cgdc/s_clrq_screenfields-rejected_netwr,
  /cgdc/s_clrq_screenfields-rej_netwr,
  /cgdc/s_clrq_screenfields-total_netwr,
  /cgdc/s_clrq_screenfields-post_netwr,
  /cgdc/s_clrq_screenfields-postponed_netwr,
  /cgdc/s_clrq_screenfields-billed_amt,
  /cgdc/s_clrq_screenfields-postponed_ut_amt,
  /cgdc/s_clrq_screenfields-rsncd ." DCLM 4307
  /cgdc/s_clrq_screenfields-cummulative = gc_scrn_filed_cumm."'* Cummulative'.

  go_grid_calc_req_items->get_selected_rows( IMPORTING et_index_rows = lt_rows ).
  LOOP AT lt_rows INTO lwa_row.
    READ TABLE gt_calc_req_items_fcat INTO lwa_cal_req_itm INDEX lwa_row-index.
    IF sy-subrc = 0.
      READ TABLE gt_item_values ASSIGNING <lwa_itm_val> WITH KEY clrit = lwa_cal_req_itm-clrit.
      IF sy-subrc <> 0.
        APPEND INITIAL LINE TO gt_item_values ASSIGNING <lwa_itm_val>.
        <lwa_itm_val>-clrit = lwa_cal_req_itm-clrit.
      ENDIF.
      IF <lwa_itm_val>-open_quan <= 1.
        gs_variables-lc_flag = abap_true.
      ENDIF.
      READ TABLE gt_item_postponed ASSIGNING <lwa_postpone_data> WITH KEY clrit = lwa_cal_req_itm-clrit psdat = gc_psdat_low.
      IF sy-subrc <> 0.
        APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postpone_data>.
        <lwa_postpone_data>-clrit = lwa_cal_req_itm-clrit.
      ENDIF.
      /cgdc/s_clrq_screenfields-open_netwr = <lwa_itm_val>-open_amt + /cgdc/s_clrq_screenfields-open_netwr.
      /cgdc/s_clrq_screenfields-total_netwr = <lwa_itm_val>-tot_amt + /cgdc/s_clrq_screenfields-total_netwr.
      /cgdc/s_clrq_screenfields-rej_netwr = <lwa_itm_val>-rej_amt +  /cgdc/s_clrq_screenfields-rej_netwr.
      /cgdc/s_clrq_screenfields-rejected_netwr = <lwa_itm_val>-rej_amt + /cgdc/s_clrq_screenfields-rejected_netwr.
      /cgdc/s_clrq_screenfields-billed_amt = <lwa_itm_val>-bill_amt + /cgdc/s_clrq_screenfields-billed_amt.

      /cgdc/s_clrq_screenfields-postponed_ut_amt = <lwa_itm_val>-post_amt_ut +  /cgdc/s_clrq_screenfields-postponed_netwr.
      /cgdc/s_clrq_screenfields-post_netwr = <lwa_postpone_data>-postp_amt + /cgdc/s_clrq_screenfields-post_netwr.
      /cgdc/s_clrq_screenfields-postponed_netwr = <lwa_postpone_data>-postp_amt + /cgdc/s_clrq_screenfields-postponed_netwr.

    ENDIF.
  ENDLOOP.

ENDFORM.
FORM display_controls_0901.

  IF go_message_container IS INITIAL.

    CREATE OBJECT go_message_container
      EXPORTING
        container_name              = gc_custom_area-messages_cont
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_message_alv.

ENDFORM.
FORM display_controls_0303.

  IF go_postpone_container IS INITIAL.

    CREATE OBJECT go_postpone_container
      EXPORTING
        container_name              = gc_custom_area-postpone_cont
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_postpone_alv.

ENDFORM.
FORM display_controls_0201.
  DATA: lt_rtbpamit TYPE TABLE OF /cgdc/t_rtbpamit,
        lt_rtbmitt  TYPE TABLE OF /cgdc/t_rtbmitt,
        lwa_rtbmitt TYPE /cgdc/t_rtbmitt,
        lt_values   TYPE vrm_values,
        lwa_value   TYPE vrm_value.
  DATA : lt_rtbmit TYPE TABLE OF /cgdc/t_rtbmit.

  SELECT *
    FROM /cgdc/t_rtbpamit
    INTO TABLE lt_rtbpamit
    WHERE rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn.
  IF sy-subrc = 0.
    SELECT *
      FROM /cgdc/t_rtbmit
      INTO TABLE lt_rtbmit
      FOR ALL ENTRIES IN lt_rtbpamit
      WHERE mityp = lt_rtbpamit-mityp
      AND micat = space.
    IF sy-subrc = 0.
      SELECT *
        FROM /cgdc/t_rtbmitt
        INTO TABLE lt_rtbmitt
        FOR ALL ENTRIES IN lt_rtbmit
        WHERE mityp = lt_rtbmit-mityp
      AND spras = sy-langu.
      IF sy-subrc = 0.
        LOOP AT lt_rtbmitt INTO lwa_rtbmitt.
          lwa_value-key = lwa_rtbmitt-mityp.
          lwa_value-text = lwa_rtbmitt-descr.
          APPEND lwa_value TO lt_values.
        ENDLOOP.
        CALL FUNCTION 'VRM_SET_VALUES'
          EXPORTING
            id     = gc_rtb_manl_itm "'/CGDC/T_RTBMIT-MITYP'
            values = lt_values[].
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

FORM display_progress_indicator USING lv_loop_count "TYPE i
                                      lv_total_count." TYPE i.
  DATA: lv_message TYPE string,
        lv_loop    TYPE sy-tabix,
        lv_total   TYPE sy-tabix.
  CLEAR: lv_message, lv_loop, lv_total.

  CONCATENATE lv_loop_count
              TEXT-062
              lv_total_count
              TEXT-061 INTO lv_message SEPARATED BY space.
  lv_loop = lv_loop_count.
  lv_total = lv_total_count.

  CALL METHOD cl_progress_indicator=>progress_indicate
    EXPORTING
      i_text               = lv_message
      i_processed          = lv_loop
      i_total              = lv_total
      i_output_immediately = abap_true.
ENDFORM.
FORM display_controls_0204.
  DATA: lt_rtbpamit TYPE TABLE OF /cgdc/t_rtbpamit,
        lt_rtbmitt  TYPE TABLE OF /cgdc/t_rtbmitt,
        lwa_rtbmitt TYPE /cgdc/t_rtbmitt,
        lt_values   TYPE vrm_values,
        lwa_value   TYPE vrm_value.
  DATA : lt_rtbmit TYPE TABLE OF /cgdc/t_rtbmit.

  SELECT *
    FROM /cgdc/t_rtbpamit
    INTO TABLE lt_rtbpamit
    WHERE rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn.
  IF sy-subrc = 0.
    SELECT * FROM /cgdc/t_rtbmit
     INTO TABLE lt_rtbmit
     FOR ALL ENTRIES IN lt_rtbpamit
      WHERE mityp = lt_rtbpamit-mityp
      AND micat EQ 2.
    IF sy-subrc = 0.
      SELECT *
        FROM /cgdc/t_rtbmitt
        INTO TABLE lt_rtbmitt
        FOR ALL ENTRIES IN lt_rtbmit
        WHERE mityp = lt_rtbmit-mityp
      AND spras = sy-langu.
      IF sy-subrc = 0.
        LOOP AT lt_rtbmitt INTO lwa_rtbmitt.
          lwa_value-key = lwa_rtbmitt-mityp.
          lwa_value-text = lwa_rtbmitt-descr.
          APPEND lwa_value TO lt_values.
        ENDLOOP.
        CALL FUNCTION 'VRM_SET_VALUES'
          EXPORTING
            id     = gc_rtb_manl_itm "'/CGDC/T_RTBMIT-MITYP'
            values = lt_values[].
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM. "

FORM display_controls_0205.
  DATA: lt_rtbpamit TYPE TABLE OF /cgdc/t_rtbpamit,
        lt_rtbmitt  TYPE TABLE OF /cgdc/t_rtbmitt,
        lwa_rtbmitt TYPE /cgdc/t_rtbmitt,
        lt_values   TYPE vrm_values,
        lwa_value   TYPE vrm_value.
  DATA : lt_rtbmit TYPE TABLE OF /cgdc/t_rtbmit.

  SELECT *
    FROM /cgdc/t_rtbpamit
    INTO TABLE lt_rtbpamit
    WHERE rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn.
  IF sy-subrc = 0.
    SELECT * FROM /cgdc/t_rtbmit
     INTO TABLE lt_rtbmit
     FOR ALL ENTRIES IN lt_rtbpamit
      WHERE mityp = lt_rtbpamit-mityp
      AND micat EQ 1.
    IF sy-subrc = 0.
      SELECT *
        FROM /cgdc/t_rtbmitt
        INTO TABLE lt_rtbmitt
        FOR ALL ENTRIES IN lt_rtbmit
        WHERE mityp = lt_rtbmit-mityp
      AND spras = sy-langu.
      IF sy-subrc = 0.
        LOOP AT lt_rtbmitt INTO lwa_rtbmitt.
          lwa_value-key = lwa_rtbmitt-mityp.
          lwa_value-text = lwa_rtbmitt-descr.
          APPEND lwa_value TO lt_values.
        ENDLOOP.
        CALL FUNCTION 'VRM_SET_VALUES'
          EXPORTING
            id     = gc_rtb_manl_itm "'/CGDC/T_RTBMIT-MITYP'
            values = lt_values[].
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM display_controls_0151.
  IF go_calc_grp_cont IS INITIAL.

    CREATE OBJECT go_calc_grp_cont
      EXPORTING
        container_name              = gc_custom_area-calc_grp
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_calc_grps_alv.

ENDFORM.

FORM display_controls_0173.
  TYPES: BEGIN OF ls_value,
           bldat TYPE /cgdc/clrq_bldat,
         END OF ls_value.

  DATA: lt_value_tab TYPE TABLE OF ls_value,
        lt_rettab    TYPE TABLE OF ddshretval
        .
  FIELD-SYMBOLS: <ls_valuetab> TYPE ls_value.

  CHECK gs_variables-rel_constr_dt IS INITIAL.
  LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE
    bstat = space AND
    bldat LE sy-datum.
    UNASSIGN <ls_valuetab>.
    APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
    <ls_valuetab>-bldat = lwa_crbinr-bldat.
  ENDLOOP.

  SORT lt_value_tab BY bldat DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_value_tab COMPARING bldat.
  READ TABLE lt_value_tab INDEX 1 ASSIGNING <ls_valuetab>.

  IF sy-subrc = 0 AND gs_variables-rel_constr_dt IS INITIAL.
    gs_variables-rel_constr_dt = <ls_valuetab>-bldat.
  ENDIF.
ENDFORM.

FORM display_controls_0174.
  TYPES: BEGIN OF ls_value,
           bldat TYPE /cgdc/clrq_bldat,
         END OF ls_value.

  DATA: lt_value_tab TYPE TABLE OF ls_value,
        lt_rettab    TYPE TABLE OF ddshretval
        .
  FIELD-SYMBOLS: <ls_valuetab> TYPE ls_value.

  CHECK gs_variables-rel_constr_dt IS INITIAL.
  LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE
    bstat = space AND
    bldat LE sy-datum.
    UNASSIGN <ls_valuetab>.
    APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
    <ls_valuetab>-bldat = lwa_crbinr-bldat.
  ENDLOOP.

  SORT lt_value_tab BY bldat DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_value_tab COMPARING bldat.
  READ TABLE lt_value_tab INDEX 1 ASSIGNING <ls_valuetab>.

  IF sy-subrc = 0 AND gs_variables-rel_constr_dt IS INITIAL.
    gs_variables-rel_constr_dt = <ls_valuetab>-bldat.
  ENDIF.
ENDFORM.



FORM display_controls_0998.
  /cgdc/s_clrq_screenfields-save_textline1 = TEXT-074.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form selections_fcat
*&---------------------------------------------------------------------*
FORM selections_fcat USING lv_structure_name TYPE dd02l-tabname
                     CHANGING lt_selection_fcat TYPE /cgdc/t_bsel_fcat.
  DATA: lt_selection_fcat_tmp TYPE /cgdc/t_bsel_fcat,
        lwa_selection_fcat    TYPE /cgdc/s_bsel_fcat,
        lwa_fcat              TYPE lvc_s_fcat,
        lt_dd07v1             TYPE TABLE OF dd07v,
        lv_sel_type_s         TYPE sel_type VALUE 'S'.

  CLEAR: lt_selection_fcat[].

  IF gt_itm_src_fcat IS INITIAL.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = lv_structure_name
      CHANGING
        ct_fieldcat            = gt_itm_src_fcat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc <> 0.
      CLEAR gt_itm_src_fcat.
    ENDIF.

  ENDIF.

  CLEAR lt_selection_fcat[].

*adding parameters to the field catalog
  LOOP AT gt_dfies INTO DATA(lwa_dfies).
    READ TABLE gt_itm_src_fcat INTO lwa_fcat WITH KEY fieldname = lwa_dfies-fieldname.
    IF sy-subrc = 0.
      lwa_selection_fcat = CORRESPONDING #( lwa_fcat ).
      lwa_selection_fcat-outputlen = lwa_dfies-outputlen.
      lwa_selection_fcat-rollname = lwa_dfies-rollname.
      lwa_selection_fcat-domname = lwa_dfies-domname.
      lwa_selection_fcat-sel_type     = lv_sel_type_s.
      lwa_selection_fcat-tabname      = lv_structure_name.
      lwa_selection_fcat-no_out      = space.
      lwa_selection_fcat-ref_table      = lv_structure_name.
      lwa_selection_fcat-col_pos      = 10.
      CLEAR : lwa_selection_fcat-domname .

      IF lwa_selection_fcat-datatype NE 'CURR'.
        lwa_selection_fcat-handle_f4 = abap_true.
      ENDIF.

      APPEND lwa_selection_fcat TO lt_selection_fcat.
      CLEAR: lwa_selection_fcat,  lwa_fcat.
    ENDIF.

    CLEAR lwa_dfies.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form selections_data
*&---------------------------------------------------------------------*
FORM selections_data   CHANGING lt_selection TYPE /cgdc/t_bsel_values.
  DATA: lwa_selection_fcat  TYPE /cgdc/s_bsel_fcat,
        lwa_selection       TYPE /cgdc/s_bsel_values,
        lwa_selopt          TYPE selopt,
        lwa_final_selection TYPE /cgdc/s_bsel_values.

  FIELD-SYMBOLS: <fv_value> TYPE any.

  CONSTANTS: lc_dats TYPE datatype_d VALUE 'DATS',
             lc_tims TYPE datatype_d VALUE 'TIMS'.

  CLEAR lt_selection[].

  LOOP AT gt_selection_fcat INTO lwa_selection_fcat.

    lwa_final_selection-fieldname = lwa_selection_fcat-fieldname.
    lwa_final_selection-tabname = lwa_selection_fcat-tabname.
    ASSIGN COMPONENT lwa_selection_fcat-fieldname OF STRUCTURE /cgdc/s_clrqit TO <fv_value>.

    IF <fv_value> IS ASSIGNED.

      IF lwa_selection_fcat-datatype = lc_dats.
        IF <fv_value> IS NOT INITIAL AND <fv_value> <> space.
          CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
            EXPORTING
              date_internal            = <fv_value>
            IMPORTING
              date_external            = lwa_selopt-low
            EXCEPTIONS
              date_internal_is_invalid = 1
              OTHERS                   = 2.
          IF sy-subrc <> 0.
            CLEAR lwa_selopt-low.
          ENDIF.
        ELSE.
          CLEAR lwa_selopt-low.
        ENDIF.

      ELSEIF lwa_selection_fcat-datatype = lc_tims.
        IF <fv_value> IS NOT INITIAL AND <fv_value> <> space.
          CALL FUNCTION 'CONVERSION_EXIT_TIMLO_OUTPUT'
            EXPORTING
              input  = <fv_value>
            IMPORTING
              output = lwa_selopt-low.
          IF sy-subrc <> 0.
          ENDIF.
        ELSE.
          CLEAR lwa_selopt-low.
        ENDIF.

      ELSE.
        lwa_selopt-low = <fv_value>.
      ENDIF.

      APPEND lwa_selopt TO lwa_final_selection-selopt.
    ENDIF.

    APPEND lwa_final_selection TO lt_selection.
    CLEAR: lwa_final_selection, lwa_selopt.

    UNASSIGN <fv_value>.
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form refresh_data_hdr
*&---------------------------------------------------------------------*
FORM refresh_data_hdr CHANGING p_gt_selection TYPE /cgdc/t_bsel_values.
  DATA: lwa_selection_fcat TYPE /cgdc/s_bsel_fcat,
        lt_selopt          TYPE /cgdc/t_bsel_selopt.

  FIELD-SYMBOLS: <fv_value>     TYPE any,
                 <fs_selection> TYPE /cgdc/s_bsel_values.

*-Update Screen values for processing item to display in Dynamic screen (lt_selopt for each Z field).
  LOOP AT gt_selection_fcat INTO lwa_selection_fcat.
    UNASSIGN <fs_selection>.
    READ TABLE gt_selection ASSIGNING <fs_selection> WITH KEY fieldname = lwa_selection_fcat-fieldname.
    IF sy-subrc <> 0.
      CONTINUE. "go to next Z field in gt_selection_fcat
    ENDIF.

    lt_selopt[] = <fs_selection>-selopt[]. "Modify lt_selopt[] for processing item field using below logic

*-data will be available in /cgdc/s_hflowdn for processing item
    READ TABLE lt_selopt ASSIGNING FIELD-SYMBOL(<fs_selopt>) INDEX 1.
    IF sy-subrc = 0.
      ASSIGN COMPONENT lwa_selection_fcat-fieldname OF STRUCTURE /cgdc/s_clrqit TO <fv_value>.
      IF <fv_value> IS ASSIGNED.
        IF lwa_selection_fcat-datatype = 'DATS'.   "#EC CI_DATN_TIMN_OK
          IF <fv_value> IS NOT INITIAL AND <fv_value> <> space.
            CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
              EXPORTING
                date_internal            = <fv_value>
              IMPORTING
                date_external            = <fs_selopt>-low
              EXCEPTIONS
                date_internal_is_invalid = 1
                OTHERS                   = 2.
            IF sy-subrc <> 0.
            ENDIF.

          ELSE.
            CLEAR <fs_selopt>-low.
          ENDIF.

        ELSEIF lwa_selection_fcat-datatype = 'TIMS' .
          IF <fv_value> IS NOT INITIAL AND <fv_value> <> space.
            CALL FUNCTION 'CONVERSION_EXIT_TIMLO_OUTPUT'
              EXPORTING
                input  = <fv_value>
              IMPORTING
                output = <fs_selopt>-low.
            IF sy-subrc <> 0.
            ENDIF.

          ELSE.
            CLEAR <fs_selopt>-low.
          ENDIF.

        ELSE.
          <fs_selopt>-low = <fv_value>.
        ENDIF.

        <fs_selection>-selopt[] = lt_selopt[].
      ENDIF.
    ENDIF.

    CLEAR :lwa_selection_fcat,lt_selopt[].
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form searchhelp_values_cfh
*&---------------------------------------------------------------------*
FORM searchhelp_values_cfh .
  DATA: lt_dd07v TYPE TABLE OF dd07v,
        lv_where TYPE string,
        lv_date  TYPE sy-datum,
        lv_int   TYPE i,
        lv_msg   TYPE string,
        lv_time  TYPE sy-timlo.

  DATA lv_table TYPE string.

  FIELD-SYMBOLS: <fs_data> TYPE any,
                 <fv_date> TYPE any.
ENDFORM.
FORM delete_calc_req USING lv_clrno TYPE /cgdc/clrqno
                           lt_clritkey TYPE /cgdc/tt_clrqit_key
                           lv_process_type TYPE c.
  DATA : lt_clrq_doc TYPE TABLE OF /cgdc/s_clrq_doc.
  DATA: lwa_clritkey TYPE /cgdc/s_clrqit_key.
  FIELD-SYMBOLS:
    <lwa_crhdr>      TYPE  /cgdc/s_clrqhd,
    <lwa_critm>      TYPE  /cgdc/s_clrqit,
    <lwa_crist>      TYPE  /cgdc/s_clrqst,
    <lwa_crptr>      TYPE  /cgdc/s_clrqpt,
    <lwa_crcon>      TYPE  /cgdc/s_clrqcn,
    <lwa_critm_key>  TYPE  /cgdc/s_clrqit_key,
    <lwa_crcost>     TYPE  /cgdc/s_clrqcost,
    <lwa_crblpl>     TYPE  /cgdc/s_clrqblpl,
    <lwa_vbfa>       TYPE  /cgdc/s_vbfa,
    <lwa_crdfl>      TYPE  /cgdc/s_clrqdf,
    <lwa_crgrr>      TYPE  /cgdc/s_clrqgrr,
    <lwa_crgrrf>     TYPE  /cgdc/s_clrqgrrf,
    <lwa_cgrcon>     TYPE  komv,
    <lwa_crbinr>     TYPE /cgdc/s_clrqbi,
    <lwa_crlink>     TYPE /cgdc/s_crlink,
    <lwa_crlit_link> TYPE /cgdc/s_clrqlink_data.

  FIELD-SYMBOLS : <lt_crtab> TYPE STANDARD TABLE.
  CLEAR gs_variables-key_only.
  PERFORM read_calc_request_document USING lv_clrno
                                     CHANGING gs_clrqdoc_infocus.

  SELECT *
    FROM /cgdc/t_primtbls
    INTO TABLE @DATA(lt_primtb)
    FOR ALL ENTRIES IN @gs_clrqdoc_infocus-y-clrit_link
    WHERE prim_table = @gs_clrqdoc_infocus-y-clrit_link-prim_tb.

  gs_clrqdoc_infocus-y = gs_clrqdoc_infocus-x.
  IF lv_process_type = gc_process_typ_1.

    LOOP AT lt_clritkey INTO lwa_clritkey.
      LOOP AT gs_clrqdoc_infocus-y-critm ASSIGNING <lwa_critm> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_critm>-updkz = gc_updkz_delete.
        IF <lwa_critm>-clrsit <> 000000.
          UNASSIGN <lwa_crbinr>.
          READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_crbinr> WITH KEY bill_item = <lwa_critm>-rtbbinr. "deduct Billing Amount
          IF sy-subrc = 0.
            <lwa_crbinr>-netwr = <lwa_crbinr>-netwr - <lwa_critm>-netwr.
            <lwa_crbinr>-netwr24 = <lwa_crbinr>-netwr24 - <lwa_critm>-netwr24.
            <lwa_crbinr>-updkz = gc_updkz_update.
          ENDIF.
        ENDIF.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-crist ASSIGNING <lwa_crist> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_crist>-updkz = gc_updkz_delete.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-crptr ASSIGNING <lwa_crptr> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_crptr>-updkz = gc_updkz_delete.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-crcon ASSIGNING <lwa_crcon> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_crcon>-updkz = gc_updkz_delete.
      ENDLOOP.


      LOOP AT gs_clrqdoc_infocus-y-crblpl ASSIGNING <lwa_crblpl> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_crblpl>-updkz = gc_updkz_delete.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-crgrr ASSIGNING <lwa_crgrr> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        <lwa_crgrr>-updkz = gc_updkz_delete.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-clrit_link ASSIGNING <lwa_crlit_link> WHERE clrno = lwa_clritkey-clrno AND clrit = lwa_clritkey-clrit .
        APPEND INITIAL LINE TO gs_clrqdoc_infocus-y-crlink ASSIGNING <lwa_crlink>.
        <lwa_crlink>-prim_table = <lwa_crlit_link>-prim_tb.
        CREATE DATA <lwa_crlink>-crlink_tab TYPE TABLE OF (<lwa_crlit_link>-link_tb).
        ASSIGN <lwa_crlink>-crlink_tab->* TO <lt_crtab>.
        APPEND LINES OF <lwa_crlit_link>-data->* TO <lt_crtab>.
        READ TABLE lt_primtb INTO DATA(lwa_primtb) WITH KEY "prim_table = <lwa_crlit_link>-prim_tb  "--DCLM 6362
                                                            link_table = <lwa_crlit_link>-link_tb.
        IF sy-subrc = 0.
          <lwa_crlink>-lnktab_upd_fm = lwa_primtb-lnktab_upd_fm.
        ENDIF.
        <lwa_crlink>-link_table = <lwa_crlit_link>-link_tb.
        <lwa_crlink>-source = <lwa_crlit_link>-source.
        <lwa_crlink>-updkz = gc_updkz_delete.
      ENDLOOP.
    ENDLOOP.
    IF  gs_clrqdoc_infocus-x-crhdr-msgcode = gc_msg_code-v."'V'.
      CLEAR gs_clrqdoc_infocus-x-crhdr-msgcode.
      gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
    ENDIF.

  ELSEIF lv_process_type = gc_process_typ_2.
    gs_clrqdoc_infocus-y = gs_clrqdoc_infocus-x.
    gs_clrqdoc_infocus-y-crhdr-updkz = gc_updkz_delete.
    LOOP AT gs_clrqdoc_infocus-y-critm ASSIGNING <lwa_critm>.
      <lwa_critm>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-crist ASSIGNING <lwa_crist>.
      <lwa_crist>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-crptr ASSIGNING <lwa_crptr>.
      <lwa_crptr>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-crcon ASSIGNING <lwa_crcon>.
      <lwa_crcon>-updkz = gc_updkz_delete.
    ENDLOOP.


    LOOP AT gs_clrqdoc_infocus-y-crblpl ASSIGNING <lwa_crblpl>.
      <lwa_crblpl>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-vbfa ASSIGNING <lwa_vbfa>.
      <lwa_vbfa>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-crdfl ASSIGNING <lwa_crdfl>.
      <lwa_crdfl>-updkz = gc_updkz_delete.
    ENDLOOP.
    LOOP AT gs_clrqdoc_infocus-y-crgrr ASSIGNING <lwa_crgrr>.
      <lwa_crgrr>-updkz = gc_updkz_delete.
    ENDLOOP.

    LOOP AT gs_clrqdoc_infocus-y-crgrrf ASSIGNING <lwa_crgrrf>.
      <lwa_crgrrf>-updkz = gc_updkz_delete.
    ENDLOOP.


    LOOP AT gs_clrqdoc_infocus-y-clrit_link ASSIGNING <lwa_crlit_link> .
      APPEND INITIAL LINE TO gs_clrqdoc_infocus-y-crlink ASSIGNING <lwa_crlink>.
      <lwa_crlink>-prim_table = <lwa_crlit_link>-prim_tb.
      CREATE DATA <lwa_crlink>-crlink_tab TYPE TABLE OF (<lwa_crlit_link>-link_tb).
      ASSIGN <lwa_crlink>-crlink_tab->* TO <lt_crtab>.
      APPEND LINES OF <lwa_crlit_link>-data->* TO <lt_crtab>.
      READ TABLE lt_primtb INTO lwa_primtb WITH KEY "prim_table = <lwa_crlit_link>-prim_tb  "--DCLM 6362
                                                           link_table = <lwa_crlit_link>-link_tb.
      IF sy-subrc = 0.
        <lwa_crlink>-lnktab_upd_fm = lwa_primtb-lnktab_upd_fm.
      ENDIF.
      <lwa_crlink>-link_table = <lwa_crlit_link>-link_tb.
      <lwa_crlink>-source = <lwa_crlit_link>-source.
      <lwa_crlink>-updkz = gc_updkz_delete.
    ENDLOOP.
  ENDIF.
  IF gs_clrqdoc_infocus-x-crhdr-msgcode CA gc_msg_code-v OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'Q' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'W' OR
     gs_clrqdoc_infocus-x-crhdr-msgcode CA 'U' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'T'.
    REPLACE gc_msg_code-v INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
    REPLACE 'Q' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
    REPLACE 'W' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
*** SOC Wbs change in Project & Additional Cost Collector Change
    REPLACE 'U' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
    REPLACE 'T' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
*** EOC Wbs change in Project & Additional Cost Collector Change
    CONDENSE gs_clrqdoc_infocus-x-crhdr-msgcode NO-GAPS.
    gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
  ENDIF.
  APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
  CALL FUNCTION '/CGDC/CLRQ_SAVE'
    EXPORTING
      i_set_update_task = abap_true
      i_commit_work     = space
    CHANGING
      ct_clrq_doc       = lt_clrq_doc
    EXCEPTIONS
      no_change         = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
    "error handling
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_where_cond_from_html
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prepare_where_cond_from_html CHANGING ev_where TYPE string.
  DATA(lit_where) = VALUE rsds_twhere( ).
  DATA(lit_range) = VALUE rsds_trange( ).
  DATA: lwa_range  TYPE rsds_range,
        lv_fm_name TYPE string,
        lref_out   TYPE REF TO data.

  DATA lv_string TYPE string.

  FIELD-SYMBOLS: <lv_value>  TYPE any,
                 <lt_selopt> TYPE /cgdc/t_bsel_selopt,
                 <lv_out>    TYPE any.
  DATA: lv_date    TYPE d,
        lv_psp_pnr TYPE ps_posnr.
  LOOP AT gt_selection INTO DATA(lwa_selection).


    READ TABLE gt_selection_fcat INTO DATA(lwa_selection_fcat)
    WITH KEY fieldname = lwa_selection-fieldname
             tabname   = lwa_selection-tabname.
    IF sy-subrc = 0.
      READ TABLE lwa_selection-selopt ASSIGNING FIELD-SYMBOL(<lwa_selopt>) INDEX 1.
      IF <lt_selopt> IS ASSIGNED.
      ENDIF.

      IF <lwa_selopt> IS ASSIGNED.

        IF lwa_selection_fcat-datatype = 'DATS' .
          IF <lwa_selopt>-low IS NOT INITIAL AND <lwa_selopt>-low <> space.
            CALL FUNCTION 'DATE_CONV_EXT_TO_INT'
              EXPORTING
                i_date_ext = <lwa_selopt>-low
              IMPORTING
                e_date_int = lv_date
              EXCEPTIONS
                error      = 1
                OTHERS     = 2.
            IF sy-subrc <> 0.
              CLEAR <lwa_selopt>-low.
            ENDIF.

            MOVE lv_date TO <lwa_selopt>-low.
            CLEAR lv_date.

          ELSE.
            CLEAR <lwa_selopt>-low.
          ENDIF.

          IF <lwa_selopt>-high IS NOT INITIAL AND <lwa_selopt>-high <> space.
            CALL FUNCTION 'DATE_CONV_EXT_TO_INT'
              EXPORTING
                i_date_ext = <lwa_selopt>-high
              IMPORTING
                e_date_int = lv_date
              EXCEPTIONS
                error      = 1
                OTHERS     = 2.
            IF sy-subrc <> 0.
              CLEAR <lwa_selopt>-high.
            ENDIF.

            MOVE lv_date TO <lwa_selopt>-high.
            CLEAR lv_date.

          ELSE.
            CLEAR <lwa_selopt>-high.
          ENDIF.


        ELSEIF lwa_selection_fcat-convexit IS NOT INITIAL.
          IF <lwa_selopt>-low IS NOT INITIAL.
            IF lref_out IS BOUND.
              FREE lref_out.
            ENDIF.
            IF lwa_selection_fcat-rollname IS NOT INITIAL.
              CREATE DATA lref_out TYPE (lwa_selection_fcat-rollname).
            ELSEIF lwa_selection_fcat-domname IS NOT INITIAL.
              CREATE DATA lref_out TYPE (lwa_selection_fcat-domname).
            ENDIF.
            UNASSIGN <lv_out>.
            ASSIGN lref_out->* TO <lv_out>.
            lv_fm_name = lwa_selection_fcat-convexit.
            TRANSLATE lv_fm_name TO UPPER CASE.
            CONCATENATE 'CONVERSION_EXIT_'  lv_fm_name '_INPUT'
            INTO lv_fm_name.

            CALL FUNCTION lv_fm_name
              EXPORTING
                input     = <lwa_selopt>-low
              IMPORTING
                output    = <lv_out>
              EXCEPTIONS
                not_found = 1
                OTHERS    = 2.
            IF sy-subrc <> 0.
              CLEAR <lwa_selopt>-low.
            ENDIF.
            MOVE <lv_out> TO <lwa_selopt>-low.
            CLEAR <lv_out>.
          ENDIF.
        ELSE.

          <lwa_selopt>-low = <lwa_selopt>-low.
        ENDIF.

      ENDIF.

    ENDIF.




    LOOP AT lwa_selection-selopt ASSIGNING FIELD-SYMBOL(<lfs_selopt>)." WHERE sign IS NOT INITIAL
*                                                                        AND option IS INITIAL.
      IF <lfs_selopt> IS ASSIGNED.

        IF <lfs_selopt> IS INITIAL.
          DELETE lwa_selection-selopt INDEX sy-tabix.
        ELSEIF <lfs_selopt>-option IS INITIAL AND
               <lfs_selopt>-low    IS INITIAL AND
               <lfs_selopt>-high   IS INITIAL.
          DELETE lwa_selection-selopt INDEX sy-tabix.
        ENDIF.

      ENDIF.
    ENDLOOP.

    lwa_range-tablename = lwa_selection-tabname.

    lwa_range-frange_t = VALUE #( (
                                 fieldname = lwa_selection-fieldname
                                  selopt_t  = CORRESPONDING #( lwa_selection-selopt ) )  ) .
    APPEND lwa_range TO lit_range.
  ENDLOOP.

  CALL FUNCTION 'FREE_SELECTIONS_RANGE_2_WHERE'
    EXPORTING
      field_ranges  = lit_range
    IMPORTING
      where_clauses = lit_where.
  IF sy-subrc <> 0.
  ENDIF.

  DATA(lwa_where) = VALUE #( lit_where[ 1 ] OPTIONAL ).
  LOOP AT lwa_where-where_tab INTO DATA(lwa_line).
    lv_string = CONV #( lwa_line ).
    CONCATENATE ev_where lv_string INTO ev_where SEPARATED BY space.
  ENDLOOP.
  IF ev_where EQ space.
    ev_where = | ( CLRNO EQ| & | | & |{ gs_clrqdoc_infocus-x-crhdr-clrno } | & | )|.
  ELSE.
    ev_where =  | { ev_where } | & |AND|
    & | ( CLRNO EQ| & | | & |{ gs_clrqdoc_infocus-x-crhdr-clrno } | & | )|.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form determine_caf
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM determine_caf USING lv_commit TYPE c.
  DATA: lt_messages    TYPE /cgdc/tt_cafd_clrqit_messages,
        ls_messages    TYPE /cgdc/s_cafd_clrqit_messages,
        lt_mult        TYPE /cgdc/tt_cafd_clrqit_mult,
        lt_clrqit_main TYPE /cgdc/tt_clrqit,
        ls_clrqit_main TYPE /cgdc/s_clrqit,
        ls_mult        TYPE /cgdc/s_cafd_clrqit_mult,
        lt_cafd_mult   TYPE STANDARD TABLE OF t_cafd_mult,
        ls_cafd_mult   TYPE t_cafd_mult,
        lv_amount      TYPE /cgdc/cafd_funda,
        lt_clrqit      TYPE /cgdc/tt_clrqit,
        ls_clrqit      TYPE /cgdc/s_clrqit,
        ls_clrqit_tmp  TYPE /cgdc/s_clrqit,
        lt_crcon       TYPE /cgdc/tt_clrqcn,
        ls_crcon       TYPE /cgdc/s_clrqcn,
        lt_clrq_err    TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
        ls_clrq_err    TYPE /cgdc/t_clrq_err,
        lv_error       TYPE flag,
        ls_cafrdst     TYPE /cgdc/_cafrdst,
        lv_skip        TYPE flag,
        lv_key_only    TYPE flag.

  FIELD-SYMBOLS: <lwa_cafd_mult> TYPE t_cafd_mult.

  CLEAR lv_key_only.
  lv_key_only = gs_variables-key_only.
  CLEAR gs_variables-key_only.
  PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-x-crhdr-clrno.
  gs_variables-key_only = lv_key_only.
  CLEAR lv_key_only.

  CLEAR: ls_cafrdst, lv_skip.
  SELECT SINGLE * FROM /cgdc/_cafrdst
                  INTO ls_cafrdst
                  WHERE vbeln EQ gs_contract_hdr-vbeln.
  IF sy-subrc EQ 0.
    IF ls_cafrdst-rd_complete EQ abap_false.
      lv_skip = abap_true.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE w068(/cgdc/clrq) WITH gs_contract_hdr-vbeln
                                 DISPLAY LIKE gc_message_type-information.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-068.
        gs_messages-msgty = gc_message_type-warning.
        gs_messages-msgv1 = gs_contract_hdr-vbeln.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

  CHECK lv_skip IS INITIAL.
  DELETE FROM /cgdc/_cafrdst WHERE vbeln EQ ls_cafrdst-vbeln.
  CALL FUNCTION '/CGDC/CAFD_CLRQIT'
    EXPORTING
      iv_call_from       = gc_cal_request  "'CLR'
      iv_clr_no          = gs_clrqdoc_infocus-x-crhdr-clrno
      iv_det_missing_caf = abap_true
    IMPORTING
      et_clrq_messages   = lt_messages
      et_mult_data       = lt_mult
      et_clrqit_main     = lt_clrqit_main.
  IF sy-subrc <> 0.
  ENDIF.
  IF NOT lt_mult IS INITIAL.
    CLEAR: ls_mult, ls_cafd_mult,
           lv_amount.

    CLEAR lt_clrq_err.
    SELECT * FROM /cgdc/t_clrq_err
             INTO TABLE lt_clrq_err.

    LOOP AT lt_mult INTO ls_mult.
      CLEAR ls_cafd_mult.
      MOVE-CORRESPONDING ls_mult TO ls_cafd_mult.
      APPEND ls_cafd_mult TO lt_cafd_mult.

      lv_amount = lv_amount + ls_mult-amount.
    ENDLOOP.

    IF <lwa_cafd_mult> IS ASSIGNED.
      UNASSIGN <lwa_cafd_mult>.
    ENDIF.
    LOOP AT lt_cafd_mult ASSIGNING <lwa_cafd_mult>.
      <lwa_cafd_mult>-ratio = CONV wertv8( <lwa_cafd_mult>-amount / lv_amount ).
    ENDLOOP.

    CLEAR: ls_clrqit.
    REFRESH : lt_clrqit.
    lt_clrqit[] = gs_clrqdoc_infocus-x-critm.
    LOOP AT lt_clrqit INTO ls_clrqit.

      READ TABLE lt_messages TRANSPORTING NO FIELDS
                             WITH KEY clrno  = ls_clrqit-clrno
                                      clrit  = ls_clrqit-clrit
                                      clrsit = ls_clrqit-clrsit
                                      clrdit = ls_clrqit-clrdit
                                      msgty  = gc_message_type-error.
      IF sy-subrc EQ 0.
        CLEAR lv_error.
        lv_error = abap_true.
      ENDIF.
      CLEAR ls_clrqit_main .
      READ TABLE lt_clrqit_main INTO ls_clrqit_main
                                WITH KEY clrno  = ls_clrqit-clrno
                                         clrit  = ls_clrqit-clrit
                                         clrsit = ls_clrqit-clrsit
                                         clrdit = ls_clrqit-clrdit.
      IF sy-subrc EQ 0.

        CLEAR ls_crcon.
        REFRESH lt_crcon.

        LOOP AT gs_clrqdoc_infocus-x-crcon INTO ls_crcon WHERE clrno = ls_clrqit-clrno
                                                         AND   clrit = ls_clrqit-clrit.
          APPEND ls_crcon TO lt_crcon.
          CLEAR ls_crcon.
        ENDLOOP.

        "Remove conditions from the table to be updated.
        "Add them back proportionately for each subitem

        DELETE gs_clrqdoc_infocus-x-crcon WHERE clrno = ls_clrqit-clrno
                                          AND   clrit = ls_clrqit-clrit.


        "Remove all items for the CLRIT
        "Add it back along with CLIN-ACRNS-FMS-SLIN later for each subitem
        DELETE gs_clrqdoc_infocus-x-critm WHERE clrno EQ ls_clrqit_main-clrno
                                          AND   clrit EQ ls_clrqit_main-clrit.

        "Append line with CLRSIT = '000000'
        ls_clrqit-/cgdc/cline = ls_clrqit_main-/cgdc/cline.
        ls_clrqit-/cgdc/acrns = ls_clrqit_main-/cgdc/acrns.
        ls_clrqit-/cgdc/fmsck = ls_clrqit_main-/cgdc/fmsck.
        ls_clrqit-cslin       = ls_clrqit_main-cslin.
        ls_clrqit-updkz       = gc_updkz_update.
        IF lv_error EQ abap_true.
          CLEAR ls_clrq_err.
          READ TABLE lt_clrq_err INTO ls_clrq_err
                                  WITH KEY msgclass = gc_cafd_msg_cls
                                           msgid    = gc_msg_cls_msgnr-174.
          IF sy-subrc EQ 0.
            CLEAR ls_clrqit-msg_code.
            ls_clrqit-msg_code = ls_clrqit-msg_code && ls_clrq_err-msg_code.
            CONDENSE ls_clrqit-msg_code NO-GAPS.
            ls_clrqit-msg_icon = icon_red_light.
          ENDIF.
        ENDIF.
        APPEND ls_clrqit TO  gs_clrqdoc_infocus-x-critm.


        CLEAR ls_clrqit-clrsit.
        ls_clrqit-clrsit = gc_clrsit_one.

        CLEAR ls_clrqit_tmp.
        ls_clrqit_tmp = ls_clrqit.

        LOOP AT lt_cafd_mult INTO ls_cafd_mult.

          "Divide & assign condition amounts for each subitem.
          CLEAR: ls_crcon.
          LOOP AT lt_crcon INTO ls_crcon.
            ls_crcon-kbetr  = ls_cafd_mult-amount."ls_crcon-kbetr * ls_cafd_mult-ratio.
            ls_crcon-kwert  = ls_cafd_mult-amount."ls_crcon-kwert * ls_cafd_mult-ratio.
            ls_crcon-clrsit = ls_clrqit_tmp-clrsit.
            READ TABLE lt_crcon TRANSPORTING NO FIELDS
                                WITH KEY clrno  = ls_crcon-clrno
                                         clrit  = ls_crcon-clrit
                                         clrsit = ls_crcon-clrsit.
            IF sy-subrc EQ 0.
              ls_crcon-updkz = gc_updkz_update.
            ELSE.
              ls_crcon-updkz = gc_updkz_new.
            ENDIF.
            APPEND ls_crcon TO gs_clrqdoc_infocus-x-crcon.
          ENDLOOP.

          "Create a subitem for every combination of CLIN-ACRNS-FMS-SLIN
          ls_clrqit-/cgdc/cline = ls_cafd_mult-clin.
          ls_clrqit-/cgdc/acrns = ls_cafd_mult-acrns.
          ls_clrqit-/cgdc/fmsck = ls_cafd_mult-fmsck.
          ls_clrqit-cslin       = ls_cafd_mult-cslin.
          ls_clrqit-netwr       = ls_cafd_mult-amount."ls_cafd_mult-ratio * ls_clrqit_tmp-netwr.
          ls_clrqit-kbetr1      = ls_cafd_mult-amount."ls_cafd_mult-ratio * ls_clrqit_tmp-kbetr1.
          ls_clrqit-wavwr       = ls_cafd_mult-ratio * ls_clrqit_tmp-wavwr.
          ls_clrqit-kzwi1       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi1.
          ls_clrqit-kzwi2       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi2.
          ls_clrqit-kzwi3       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi3.
          ls_clrqit-kzwi4       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi4.
          ls_clrqit-kzwi5       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi5.
          ls_clrqit-kzwi6       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi6.
          ls_clrqit-postp_amt   = ls_cafd_mult-ratio * ls_clrqit_tmp-postp_amt.
          ls_clrqit-rej_amt     = ls_cafd_mult-ratio * ls_clrqit_tmp-rej_amt.
          ls_clrqit-billed_amt  = ls_cafd_mult-ratio * ls_clrqit_tmp-billed_amt.
          ls_clrqit-total_netwr = ls_cafd_mult-ratio * ls_clrqit_tmp-total_netwr.

          IF lv_error EQ abap_true.
            CLEAR ls_clrq_err.
            READ TABLE lt_clrq_err INTO ls_clrq_err
                                    WITH KEY msgclass = gc_cafd_msg_cls
                                             msgid    = gc_msg_cls_msgnr-174.
            IF sy-subrc EQ 0.
              CLEAR ls_clrqit-msg_code.
              ls_clrqit-msg_code = ls_clrqit-msg_code && ls_clrq_err-msg_code.
              CONDENSE ls_clrqit-msg_code NO-GAPS.
              ls_clrqit-msg_icon = icon_red_light .
            ENDIF.
          ENDIF.

          READ TABLE lt_clrqit TRANSPORTING NO FIELDS
                               WITH KEY clrno  = ls_clrqit-clrno
                                        clrit  = ls_clrqit-clrit
                                        clrsit = ls_clrqit-clrsit.
          IF sy-subrc EQ 0.
            ls_clrqit-updkz = gc_updkz_update.
          ELSE.
            ls_clrqit-updkz = gc_updkz_new.
          ENDIF.

          APPEND ls_clrqit TO gs_clrqdoc_infocus-x-critm.

          CLEAR: ls_clrqit, ls_cafd_mult.

          ls_clrqit_tmp-clrsit = ls_clrqit_tmp-clrsit + 1.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = ls_clrqit_tmp-clrsit
            IMPORTING
              output = ls_clrqit_tmp-clrsit.
          IF sy-subrc <> 0.
          ENDIF.

          ls_clrqit = ls_clrqit_tmp.
        ENDLOOP.
      ENDIF.
      CLEAR ls_clrqit.
    ENDLOOP.


  ENDIF.
  gs_clrqdoc_infocus-updkz = abap_true.
  gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
  PERFORM document_save USING gs_clrqdoc_infocus
                              lv_commit.


  PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-clrno.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form delete_rtb_sched_prof_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IS_VBAK_VBELN
*&---------------------------------------------------------------------*
FORM delete_rtb_sched_prof_data  USING is_vbak-vbeln TYPE vbak-vbeln .

  DATA:ls_rtbclnmcs_doc TYPE /cgdc/s_rtbclnmcs_doc,
       ls_blpn_doc      TYPE /cgdc/s_blp_doc.

  CALL FUNCTION '/CGDC/RTB_CONTRACT_VIEW'
    EXPORTING
      i_vbeln          = is_vbak-vbeln
    IMPORTING
      es_rtbclnmcs_doc = ls_rtbclnmcs_doc.
  IF sy-subrc <> 0.
  ENDIF.

  ls_rtbclnmcs_doc-y-clnmcs = ls_rtbclnmcs_doc-x-clnmcs.
  ls_rtbclnmcs_doc-updkz = abap_true.
  CLEAR ls_rtbclnmcs_doc-x.

  CALL FUNCTION '/CGDC/BLP_VIEW'
    EXPORTING
      i_vbeln    = is_vbak-vbeln
    IMPORTING
      es_blp_doc = ls_blpn_doc.
  IF sy-subrc <> 0.
  ENDIF.

  ls_blpn_doc-y = ls_blpn_doc-x.
  ls_blpn_doc-updkz = abap_true.
  CLEAR ls_blpn_doc-x.

  LOOP AT ls_rtbclnmcs_doc-y-clnmcs ASSIGNING FIELD-SYMBOL(<lwa_rtbclnmcs>).
    <lwa_rtbclnmcs>-updkz = gc_updkz_delete.
  ENDLOOP.

  LOOP AT ls_blpn_doc-y-blpln ASSIGNING FIELD-SYMBOL(<lwa_blpln>).
    <lwa_blpln>-updkz = gc_updkz_delete.
  ENDLOOP.

  CALL FUNCTION '/CGDC/RTB_CONTRACT_SAVE'
    EXPORTING
      i_set_update_task = abap_true
      i_commit_work     = space
      is_rtbclnmcs_doc  = ls_rtbclnmcs_doc.
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION '/CGDC/BLP_SAVE'
    EXPORTING
      i_set_update_task = abap_true
      i_commit_work     = space
      is_blp_doc        = ls_blpn_doc
    EXCEPTIONS
      no_change         = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
  ENDIF.

  FREE : ls_rtbclnmcs_doc,ls_blpn_doc.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form determine_caf_ind
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LWA_CALC_REQ_ITEMS_FCAT
*&---------------------------------------------------------------------*
FORM determine_caf_ind  USING ls_fcat       TYPE /cgdc/s_clrqit_fcat
                              lt_clrq_error TYPE t_clrq_err
                              lt_bilitty    TYPE tt_bilitty
                              e_ucomm       TYPE sy-ucomm
                        CHANGING lwa_calc_req_items_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA: ls_clrqit      TYPE /cgdc/s_clrqit,
        ls_clrqit_new  TYPE /cgdc/s_clrqit,
        ls_clrqit_fcat TYPE /cgdc/s_clrqit_fcat,
        ls_clrqit_tmp  TYPE /cgdc/s_clrqit,
        lt_clrqit      TYPE /cgdc/tt_clrqit,
        lt_clrq_msgs   TYPE /cgdc/tt_cafd_clrqit_messages,
        lt_mult_data   TYPE /cgdc/tt_cafd_clrqit_mult,
        ls_clrq_error  TYPE /cgdc/t_clrq_err,
        ls_mult_data   TYPE /cgdc/s_cafd_clrqit_mult,
        lt_cafd_mult   TYPE STANDARD TABLE OF t_cafd_mult,
        ls_cafd_mult   TYPE t_cafd_mult,
        lv_amount      TYPE /cgdc/cafd_funda,
        lt_crcon       TYPE /cgdc/tt_clrqcn,
        ls_crcon       TYPE /cgdc/s_clrqcn,
        lt_cscon       TYPE /cgdc/tt_clrqcscn,
        ls_cscon       TYPE /cgdc/s_clrqcscn,
        lv_error       TYPE flag,
        lt_komv        TYPE komv_tab.

  DATA: ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
        ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
        ls_clrhdt_brf  TYPE /cgdc/s_clrqhd_brf,
        ls_clrqcost    TYPE /cgdc/s_clrqcost,
        lv_bitype      TYPE /cgdc/bitype,
        ls_bilitty     TYPE /cgdc/t_bilitty,
        ls_bill_item   TYPE /cgdc/s_clrqbi,
        lv_pop_st      TYPE datum,
        lv_pop_end     TYPE datum,
        ls_clrqbi      TYPE /cgdc/s_clrqbi,
        lv_flag        TYPE flag,
        ls_item        TYPE /cgdc/s_clrqit,
        lv_bilmatnr    TYPE /cgdc/bilmatnr.

  FIELD-SYMBOLS: <lfs_clrqit>    TYPE /cgdc/s_clrqit,
                 <lfs_cafd_mult> TYPE t_cafd_mult,
                 <lfs_crcon>     TYPE /cgdc/s_clrqcn,
                 <lfs_cscon>     TYPE /cgdc/s_clrqcscn.

  IF e_ucomm EQ gc_fcode-cal_billing_item.
    CLEAR: ls_clrqit_brf, ls_clrcost_brf,
           ls_clrhdt_brf,
           lv_flag.

    MOVE-CORRESPONDING lwa_calc_req_items_fcat TO ls_clrqit_brf.
    MOVE-CORRESPONDING lwa_calc_req_items_fcat TO ls_clrcost_brf.
    MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrhdt_brf.

    CLEAR lv_bitype.
    CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
      EXPORTING
        is_clrqhd   = ls_clrhdt_brf
        is_clrqit   = ls_clrqit_brf
        is_clrqcost = ls_clrcost_brf
      IMPORTING
        ev_bi_type  = lv_bitype.
    IF sy-subrc <> 0.
    ENDIF.
    IF lv_bitype IS NOT INITIAL.
      CLEAR ls_bilitty.
      READ TABLE lt_bilitty INTO ls_bilitty
      WITH KEY bilitmtyp = lv_bitype.
      IF sy-subrc EQ 0.
        IF ( ls_bilitty-bilcreate_type EQ gc_bilcrttyp-manu
        OR ls_bilitty-bilcreate_type EQ gc_bilcrttyp-auma ).

          CLEAR ls_item.
          MOVE-CORRESPONDING ls_fcat TO ls_item.

          CLEAR ls_bill_item.
          ls_bill_item-bitype     = lv_bitype.
          ls_bill_item-vgbel      = lwa_calc_req_items_fcat-vgbel.
          ls_bill_item-vgpos      = lwa_calc_req_items_fcat-vgpos.
          ls_bill_item-ps_psp_pnr = lwa_calc_req_items_fcat-ps_psp_pnr.

          CLEAR ls_clrqcost.
          ls_clrqcost-cbelnr  = lwa_calc_req_items_fcat-belnr.
          ls_clrqcost-cbuzei  = lwa_calc_req_items_fcat-buzei.
          ls_clrqcost-cgjahr  = lwa_calc_req_items_fcat-gjahr.
          ls_clrqcost-crbukrs = lwa_calc_req_items_fcat-rbukrs.
          PERFORM get_performance_dates USING ls_bill_item
                                              ls_item
                                        CHANGING lv_pop_st
                                                 lv_pop_end.
          CLEAR ls_clrqbi.

          IF NOT ls_bilitty-bilmatnr IS INITIAL.
            lv_bilmatnr = ls_bilitty-bilmatnr.
          ELSE.
            lv_bilmatnr = ls_item-matnr.
          ENDIF.

          LOOP AT gs_clrqdoc_infocus-x-crbinr
          INTO ls_clrqbi WHERE clrno     = lwa_calc_req_items_fcat-clrno
                         AND bitype      = lv_bitype
                         AND bilmatnr    = lv_bilmatnr "ls_bilitty-bilmatnr
                         AND ps_psp_pnr  = lwa_calc_req_items_fcat-ps_psp_pnr
                         AND bstat       = space
                         AND pop_stdt    <= lv_pop_st
                         AND pop_enddt   >= lv_pop_end
                         AND /cgdc/cline = lwa_calc_req_items_fcat-/cgdc/cline.
            lv_flag = abap_true.
            EXIT.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
    CHECK lv_flag EQ abap_true.
  ENDIF.



  CLEAR ls_clrqit.
  ls_clrqit = CORRESPONDING #( lwa_calc_req_items_fcat ).

  CLEAR: lt_clrq_msgs, lt_mult_data.
  CALL FUNCTION '/CGDC/CAFD_CLRQIT'
    EXPORTING
      iv_call_from     = gc_cal_request
    IMPORTING
      et_clrq_messages = lt_clrq_msgs
      et_mult_data     = lt_mult_data
    CHANGING
      cs_clrqit        = ls_clrqit.
  IF sy-subrc <> 0.
  ENDIF.

  lwa_calc_req_items_fcat-/cgdc/cline = ls_clrqit-/cgdc/cline.
  lwa_calc_req_items_fcat-/cgdc/acrns = ls_clrqit-/cgdc/acrns.
  lwa_calc_req_items_fcat-/cgdc/fmsck = ls_clrqit-/cgdc/fmsck.
  lwa_calc_req_items_fcat-cslin       = ls_clrqit-cslin.
  IF NOT lt_clrq_msgs IS INITIAL.
    READ TABLE lt_clrq_msgs TRANSPORTING NO FIELDS
                 WITH KEY msgty = gc_message_type-error.
    IF sy-subrc EQ 0.
      CLEAR lv_error.
      lv_error = abap_true.
      CLEAR ls_clrq_error.
      READ TABLE lt_clrq_error INTO ls_clrq_error
      WITH KEY msgclass = gc_cafd_msg_cls
               msgid    = gc_msg_cls_msgnr-174.
      IF sy-subrc EQ 0.
        IF sy-subrc EQ 0.
          CLEAR lwa_calc_req_items_fcat-msg_code.
          lwa_calc_req_items_fcat-msg_code = lwa_calc_req_items_fcat-msg_code && ls_clrq_error-msg_code.
          CONDENSE lwa_calc_req_items_fcat-msg_code NO-GAPS.
          lwa_calc_req_items_fcat-msg_icon = icon_red_light .

          IF <lfs_clrqit> IS ASSIGNED.
            UNASSIGN <lfs_clrqit>.
          ENDIF.
          LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lfs_clrqit>
            WHERE clrno EQ lwa_calc_req_items_fcat-clrno
            AND   clrit EQ lwa_calc_req_items_fcat-clrit
            AND   ( clrsit EQ gc_clrsit_low
            OR      clrsit EQ lwa_calc_req_items_fcat-clrsit ).

            CLEAR <lfs_clrqit>-msg_code.
            <lfs_clrqit>-msg_code = <lfs_clrqit>-msg_code && ls_clrq_error-msg_code.
            CONDENSE <lfs_clrqit>-msg_code NO-GAPS.
            <lfs_clrqit>-msg_icon = icon_red_light .
            <lfs_clrqit>-updkz    = gc_updkz_update.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ELSE.
      IF NOT lt_mult_data IS INITIAL.
        CLEAR: ls_mult_data, lv_amount.

        LOOP AT lt_mult_data INTO ls_mult_data.
          CLEAR ls_cafd_mult.
          MOVE-CORRESPONDING ls_mult_data TO ls_cafd_mult.
          APPEND ls_cafd_mult TO lt_cafd_mult.

          lv_amount = lv_amount + ls_mult_data-amount.
        ENDLOOP.

        IF <lfs_cafd_mult> IS ASSIGNED.
          UNASSIGN <lfs_cafd_mult>.
        ENDIF.
        LOOP AT lt_cafd_mult ASSIGNING <lfs_cafd_mult>.
          <lfs_cafd_mult>-ratio = CONV wertv8( <lfs_cafd_mult>-amount / lv_amount ).
        ENDLOOP.
      ENDIF.
    ENDIF.
  ELSE.
    IF NOT lt_mult_data IS INITIAL.
      CLEAR: ls_mult_data, lv_amount.

      LOOP AT lt_mult_data INTO ls_mult_data.
        CLEAR ls_cafd_mult.
        MOVE-CORRESPONDING ls_mult_data TO ls_cafd_mult.
        APPEND ls_cafd_mult TO lt_cafd_mult.

        lv_amount = lv_amount + ls_mult_data-amount.
      ENDLOOP.

      IF <lfs_cafd_mult> IS ASSIGNED.
        UNASSIGN <lfs_cafd_mult>.
      ENDIF.
      LOOP AT lt_cafd_mult ASSIGNING <lfs_cafd_mult>.
        <lfs_cafd_mult>-ratio = CONV wertv8( <lfs_cafd_mult>-amount / lv_amount ).
      ENDLOOP.
    ENDIF.
  ENDIF.

  IF NOT lt_cafd_mult IS INITIAL.
    CLEAR: ls_cafd_mult, ls_clrqit_tmp,
           ls_crcon.
    REFRESH : lt_crcon.

    LOOP AT gs_clrqdoc_infocus-x-crcon
    INTO ls_crcon WHERE clrno = lwa_calc_req_items_fcat-clrno
                  AND   clrit = lwa_calc_req_items_fcat-clrit.

      APPEND ls_crcon TO lt_crcon.
      CLEAR ls_crcon.
    ENDLOOP.


    " DCLM-4280 - RTB: Costing Sheet Tab in Request Item
    LOOP AT gs_clrqdoc_infocus-x-cscon
    INTO ls_cscon WHERE clrno = lwa_calc_req_items_fcat-clrno
                  AND   clrit = lwa_calc_req_items_fcat-clrit.

      APPEND ls_cscon TO lt_cscon.
      CLEAR ls_cscon.
    ENDLOOP.

    DELETE gs_clrqdoc_infocus-x-crcon WHERE clrno = lwa_calc_req_items_fcat-clrno
                                      AND   clrit = lwa_calc_req_items_fcat-clrit.

    lt_clrqit[] = gs_clrqdoc_infocus-x-critm.

    DELETE gs_clrqdoc_infocus-x-critm WHERE clrno = lwa_calc_req_items_fcat-clrno
                                      AND   clrit = lwa_calc_req_items_fcat-clrit.

    CLEAR ls_clrqit_new.
    READ TABLE lt_clrqit INTO ls_clrqit_new
                         WITH KEY clrno = lwa_calc_req_items_fcat-clrno
                                  clrit = lwa_calc_req_items_fcat-clrit
                                  clrsit = gc_clrsit_low.
    IF sy-subrc EQ 0.
      ls_clrqit_new-/cgdc/cline = ls_clrqit-/cgdc/cline.
      ls_clrqit_new-/cgdc/acrns = ls_clrqit-/cgdc/acrns.
      ls_clrqit_new-/cgdc/fmsck = ls_clrqit-/cgdc/fmsck.
      ls_clrqit_new-cslin       = ls_clrqit-cslin.
      ls_clrqit_new-updkz       = gc_updkz_update.

      IF lv_error EQ abap_true.
        CLEAR ls_clrq_error.
        READ TABLE lt_clrq_error INTO ls_clrq_error
                                WITH KEY msgclass = gc_cafd_msg_cls
                                         msgid    = gc_msg_cls_msgnr-174.
        IF sy-subrc EQ 0.
          CLEAR ls_clrqit_new-msg_code.
          ls_clrqit_new-msg_code = ls_clrqit_new-msg_code && ls_clrq_error-msg_code.
          CONDENSE ls_clrqit_new-msg_code NO-GAPS.
          ls_clrqit_new-msg_icon = icon_red_light .
        ENDIF.
      ENDIF.
      APPEND ls_clrqit_new TO  gs_clrqdoc_infocus-x-critm.
    ENDIF.

    CLEAR ls_clrqit_new-clrsit.
    ls_clrqit_new-clrsit = gc_clrsit_one.

    CLEAR ls_clrqit_tmp.
    ls_clrqit_tmp = ls_clrqit_new.

    CLEAR ls_cafd_mult.
    LOOP AT lt_cafd_mult INTO ls_cafd_mult.

      IF gs_variables-temp_last_posnr EQ 999999.
        CLEAR gs_variables-temp_last_posnr.
        gs_variables-temp_last_vbeln = gs_variables-temp_last_vbeln + 1.
      ENDIF.

      IF gs_variables-temp_last_vbeln IS INITIAL.
        gs_variables-temp_last_vbeln = 1.
      ENDIF.

      ls_clrqit_new-tmpit = gs_variables-temp_last_posnr = gs_variables-temp_last_posnr + 1.
      ls_clrqit_new-tmphd = gs_variables-temp_last_vbeln.
      gs_variables-last_posnr = ls_clrqit_new-clrit.

      CLEAR: ls_clrqit_new-wavwr, ls_clrqit_new-netwr,
             ls_clrqit_new-kzwi1, ls_clrqit_new-kzwi2,
             ls_clrqit_new-kzwi3, ls_clrqit_new-kzwi4,
             ls_clrqit_new-kzwi5, ls_clrqit_new-kzwi6.

      ls_clrqit_new-kbetr1 = ls_cafd_mult-amount.

      ls_clrqit_fcat = CORRESPONDING #( ls_clrqit_new ).
      ls_clrqit_fcat-belnr = ls_fcat-belnr.
      ls_clrqit_fcat-buzei = ls_fcat-buzei.


      REFRESH: lt_komv.
      PERFORM pricing USING space CHANGING ls_clrqit_fcat
                                           ls_clrqit_new
                                           lt_komv.

      ls_clrqit_fcat-netwr = ls_clrqit_new-netwr.
      ls_clrqit_fcat-wavwr = ls_clrqit_new-wavwr.
      ls_clrqit_fcat-kzwi1 = ls_clrqit_new-kzwi1.
      ls_clrqit_fcat-kzwi2 = ls_clrqit_new-kzwi2.
      ls_clrqit_fcat-kzwi3 = ls_clrqit_new-kzwi3.
      ls_clrqit_fcat-kzwi4 = ls_clrqit_new-kzwi4.
      ls_clrqit_fcat-kzwi5 = ls_clrqit_new-kzwi5.
      ls_clrqit_fcat-kzwi6 = ls_clrqit_new-kzwi6.
      "++SOC- Decimal Precision fields
      ls_clrqit_fcat-netwr24 = ls_clrqit_new-netwr24.
      ls_clrqit_fcat-kzwi1_24 = ls_clrqit_new-kzwi1_24.
      ls_clrqit_fcat-kzwi2_24 = ls_clrqit_new-kzwi2_24.
      ls_clrqit_fcat-kzwi3_24 = ls_clrqit_new-kzwi3_24.
      ls_clrqit_fcat-kzwi4_24 = ls_clrqit_new-kzwi4_24.
      ls_clrqit_fcat-kzwi5_24 = ls_clrqit_new-kzwi5_24.
      ls_clrqit_fcat-kzwi6_24 = ls_clrqit_new-kzwi6_24.
      "++EOC- Decimal Precision fields
      LOOP AT gs_clrqdoc_infocus-x-crcon
      ASSIGNING <lfs_crcon> WHERE clrno = lwa_calc_req_items_fcat-clrno
                            AND   clrit = lwa_calc_req_items_fcat-clrit.
        READ TABLE lt_crcon TRANSPORTING NO FIELDS
        WITH KEY clrno  = <lfs_crcon>-clrno
                 clrit  = <lfs_crcon>-clrit
                 clrsit = <lfs_crcon>-clrsit.
        IF sy-subrc EQ 0.
          <lfs_crcon>-updkz = gc_updkz_update.
        ENDIF.
      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-x-cscon
      ASSIGNING <lfs_cscon> WHERE clrno = lwa_calc_req_items_fcat-clrno
                            AND   clrit = lwa_calc_req_items_fcat-clrit.
        READ TABLE lt_crcon TRANSPORTING NO FIELDS
        WITH KEY clrno  = <lfs_cscon>-clrno
                 clrit  = <lfs_cscon>-clrit
                 clrsit = <lfs_cscon>-clrsit.
        IF sy-subrc EQ 0.
          <lfs_cscon>-updkz = gc_updkz_update.
        ENDIF.
      ENDLOOP.

      "Create a subitem for every combination of CLIN-ACRNS-FMS-SLIN
      ls_clrqit_new-/cgdc/cline = ls_cafd_mult-clin.
      ls_clrqit_new-/cgdc/acrns = ls_cafd_mult-acrns.
      ls_clrqit_new-/cgdc/fmsck = ls_cafd_mult-fmsck.
      ls_clrqit_new-cslin       = ls_cafd_mult-cslin.
      ls_clrqit_new-kzwi1       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi1.
      ls_clrqit_new-kzwi2       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi2.
      ls_clrqit_new-kzwi3       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi3.
      ls_clrqit_new-kzwi4       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi4.
      ls_clrqit_new-kzwi5       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi5.
      ls_clrqit_new-kzwi6       = ls_cafd_mult-ratio * ls_clrqit_tmp-kzwi6.
      ls_clrqit_new-postp_amt   = ls_cafd_mult-ratio * ls_clrqit_tmp-postp_amt.
      ls_clrqit_new-rej_amt     = ls_cafd_mult-ratio * ls_clrqit_tmp-rej_amt.
      ls_clrqit_new-billed_amt  = ls_cafd_mult-ratio * ls_clrqit_tmp-billed_amt.
      ls_clrqit_new-total_netwr = ls_cafd_mult-ratio * ls_clrqit_tmp-total_netwr.

      IF lv_error EQ abap_true.
        CLEAR ls_clrq_error.
        READ TABLE lt_clrq_error INTO ls_clrq_error
                                WITH KEY msgclass = gc_cafd_msg_cls
                                         msgid    = gc_msg_cls_msgnr-174.
        IF sy-subrc EQ 0.
          CLEAR ls_clrqit_new-msg_code.
          ls_clrqit_new-msg_code = ls_clrqit_new-msg_code && ls_clrq_error-msg_code.
          CONDENSE ls_clrqit_new-msg_code NO-GAPS.
          ls_clrqit_new-msg_icon = icon_red_light .
        ENDIF.
      ENDIF.

      READ TABLE lt_clrqit TRANSPORTING NO FIELDS
                             WITH KEY clrno  = ls_clrqit_new-clrno
                                      clrit  = ls_clrqit_new-clrit
                                      clrsit = ls_clrqit_new-clrsit.
      IF sy-subrc EQ 0.
        ls_clrqit_new-updkz = gc_updkz_update.
      ELSE.
        ls_clrqit_new-updkz = gc_updkz_new.
      ENDIF.

      APPEND ls_clrqit_new TO gs_clrqdoc_infocus-x-critm.

      CLEAR: ls_clrqit_new, ls_cafd_mult.

      ls_clrqit_tmp-clrsit = ls_clrqit_tmp-clrsit + 1.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = ls_clrqit_tmp-clrsit
        IMPORTING
          output = ls_clrqit_tmp-clrsit.
      IF sy-subrc <> 0.
      ENDIF.

      ls_clrqit_new = ls_clrqit_tmp.
    ENDLOOP.


  ELSEIF lt_cafd_mult IS INITIAL AND lv_error EQ abap_false.
    IF <lfs_clrqit> IS ASSIGNED.
      UNASSIGN <lfs_clrqit> .
    ENDIF.
    LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lfs_clrqit>
                                       WHERE clrno EQ lwa_calc_req_items_fcat-clrno
                                       AND   clrit EQ lwa_calc_req_items_fcat-clrit.
      <lfs_clrqit>-/cgdc/cline = ls_clrqit-/cgdc/cline.
      <lfs_clrqit>-/cgdc/acrns = ls_clrqit-/cgdc/acrns.
      <lfs_clrqit>-/cgdc/fmsck = ls_clrqit-/cgdc/fmsck.
      <lfs_clrqit>-cslin       = ls_clrqit-cslin.
      <lfs_clrqit>-updkz       = gc_updkz_update.
    ENDLOOP.

  ENDIF.

  gs_clrqdoc_infocus-updkz = abap_true.
  gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.

ENDFORM.

FORM display_controls_0198.


  IF go_grid_disp_cafs IS BOUND.
    go_grid_disp_cafs->free( ).
    FREE go_grid_disp_cafs.
  ENDIF.

  IF go_display_alv_cafs IS BOUND.
    go_display_alv_cafs->free( ).
    FREE go_display_alv_cafs.
  ENDIF.

  CREATE OBJECT go_display_alv_cafs
    EXPORTING
      container_name              = gc_custom_area-disp_cafs
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.


  PERFORM build_cafs_grid_items.

ENDFORM.

FORM display_controls_0206.
  DATA: lt_bilittyt TYPE STANDARD TABLE OF /cgdc/t_bilittyt,
        ls_bilittyt TYPE /cgdc/t_bilittyt,
        lt_bilitty  TYPE STANDARD TABLE OF /cgdc/t_bilitty,
        ls_bilitty  TYPE /cgdc/t_bilitty,
        lt_values   TYPE vrm_values,
        lwa_value   TYPE vrm_value.
  DATA : lt_vbap  TYPE TABLE OF vbap,
         lwa_vbap TYPE vbap.
  DATA : lt_values_vbap TYPE vrm_values,
         lwa_value_vbap TYPE vrm_value.


****creating dropdown for billing item type
  SELECT * FROM /cgdc/t_bilitty
           INTO TABLE lt_bilitty
           WHERE bilcreate_type = 'MANU'
      OR bilcreate_type = 'BPMA'
      OR bilcreate_type = 'AUMA'.


  IF lt_bilitty  IS NOT INITIAL.
    SELECT * FROM /cgdc/t_bilittyt
             FOR ALL ENTRIES IN @lt_bilitty
             WHERE bilitmtyp = @lt_bilitty-bilitmtyp
             INTO TABLE @lt_bilittyt.
  ENDIF.
  IF sy-subrc EQ 0 .
    CLEAR lwa_value.
    REFRESH: lt_values.
    LOOP AT lt_bilittyt INTO ls_bilittyt.
      lwa_value-key  = ls_bilittyt-bilitmtyp.
      lwa_value-text = ls_bilittyt-descr.
      APPEND lwa_value TO lt_values.
      CLEAR lwa_value.
    ENDLOOP.

    CALL FUNCTION 'VRM_SET_VALUES'
      EXPORTING
        id              = gc_billitm_type "'/CGDC/S_CLRQBI-BITYPE'
        values          = lt_values
      EXCEPTIONS
        id_illegal_name = 1
        OTHERS          = 2.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.

  IF NOT /cgdc/s_clrqbi_scrnfld-rcode IS INITIAL.
    SELECT SINGLE descr FROM /cgdc/t_rtbrpart
                        INTO /cgdc/t_rtbrpart-descr
                        WHERE spras EQ sy-langu
                        AND   rsncd = /cgdc/s_clrqbi_scrnfld-rcode.
  ENDIF.

*******creating dropdown for billing wbs paramter


  SELECT *
    FROM vbap
    WHERE vbeln = @gs_clrqdoc_infocus-x-crhdr-vgbel
    INTO TABLE @lt_vbap.


  LOOP AT lt_vbap INTO lwa_vbap.
    CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
      EXPORTING
        input  = lwa_vbap-ps_psp_pnr
      IMPORTING
        output = lwa_value_vbap-key.
    lwa_value_vbap-text = lwa_vbap-matnr.
    APPEND lwa_value_vbap TO lt_values_vbap.
    CLEAR lwa_value.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = gc_ps_psp_pnr "'/CGDC/S_CLRQBI-BITYPE'
      values          = lt_values_vbap
    EXCEPTIONS
      id_illegal_name = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
  ENDIF.

*bilmatnr
  CLEAR ls_bilitty.
  SELECT SINGLE *
     FROM /cgdc/t_bilitty
            INTO ls_bilitty
            WHERE bilitmtyp = /cgdc/s_clrqbi_scrnfld-bitype.

  IF NOT ls_bilitty-bilmatnr IS INITIAL.
    /cgdc/s_clrqbi_scrnfld-bilmatnr = ls_bilitty-bilmatnr.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form determine_billing_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_CLRQ_ITM
*&      <-- LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM determine_billing_item USING    lv_bill_sched     TYPE flag
                                     lv_bill_sched_new TYPE flag
                            CHANGING ls_clrq_itm       TYPE /cgdc/s_clrqit_fcat
                                     ls_clrq_itm_new   TYPE /cgdc/s_clrqit
                                     lv_call_bit_ex    TYPE flag.


  DATA: lv_bill_typ       TYPE /cgdc/bitype,
        ls_clrqhd_brf     TYPE /cgdc/s_clrqhd_brf,
        ls_clrqit_brf     TYPE /cgdc/s_clrqit_brf,
        ls_clrcost_brf    TYPE /cgdc/s_clrqcost_brf,
        ls_bill_typ       TYPE /cgdc/t_bilitty,
        lt_clrq_err       TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
        ls_clrq_err       TYPE /cgdc/t_clrq_err,
        lv_msg_typ        TYPE symsgty,
        ls_bilitty        TYPE /cgdc/t_bilitty,
        ls_bill_item      TYPE /cgdc/s_clrqbi,
        ls_clrqcost       TYPE /cgdc/s_clrqcost,
        lv_pop_st         TYPE datum,
        lv_pop_end        TYPE datum,
        lt_sum_char       TYPE STANDARD TABLE OF /cgdc/t_rtbbic,
        lwa_sum_char      TYPE /cgdc/t_clrqbic,
        lv_line           TYPE string,
        ls_bill_item_temp TYPE /cgdc/s_clrqbi,
        lv_where          TYPE string,
        lv_updkz          TYPE updkz,
        ls_bill_num_open  TYPE /cgdc/_clrqbi,
        ls_bill_num       TYPE /cgdc/s_clrqbi,
        lv_bilmatnr       TYPE /cgdc/bilmatnr,
        ls_message        TYPE /cgdc/s_message.

  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.


  CLEAR : lv_bill_typ,   ls_clrqhd_brf,
          ls_clrqit_brf, ls_clrcost_brf.

  "Derive the billing item type
  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.
  MOVE-CORRESPONDING ls_clrq_itm_new            TO ls_clrqit_brf.
  MOVE-CORRESPONDING ls_clrq_itm_new            TO ls_clrcost_brf.
  ls_clrqit_brf-/cgdc/cegroup = ls_clrq_itm_new-cegroup.

  CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
    EXPORTING
      is_clrqhd   = ls_clrqhd_brf
      is_clrqit   = ls_clrqit_brf
      is_clrqcost = ls_clrcost_brf
    IMPORTING
      ev_bi_type  = lv_bill_typ.
  IF sy-subrc <> 0.
  ENDIF.


  IF ls_clrq_itm-bityp IS NOT INITIAL AND ls_clrq_itm-itmty = gc_clrq_itmty-bill_plan_line. "'1'. "Billing Plan Line
    lv_bill_typ = ls_clrq_itm-bityp.
  ENDIF.

  IF NOT lv_bill_typ IS INITIAL.
    CLEAR ls_bill_typ.
    SELECT SINGLE * FROM /cgdc/t_bilitty
                      INTO ls_bill_typ
                      WHERE bilitmtyp EQ lv_bill_typ.
  ENDIF.
  IF  ls_clrq_itm-bill_usage IS INITIAL.
    ls_clrq_itm-bill_usage = ls_bill_typ-bill_usage.
  ENDIF.

  SELECT * FROM /cgdc/t_clrq_err
          INTO TABLE lt_clrq_err.

  IF gt_bilitty IS INITIAL.
    SELECT * FROM /cgdc/t_bilitty
             INTO TABLE gt_bilitty.
  ENDIF.

  "Only process this code when a new item is being added
  " in real time to the calculation request.
  IF gs_variables-bit_num_gen EQ abap_true AND ls_clrq_itm_new-pstyv IS NOT INITIAL. "dont create billing item if item catefory is missing.
    "If the message code from material determination is of type
    " error then do not assign billing item number
    IF NOT ls_clrq_itm_new-msg_code IS INITIAL.
      CLEAR: lv_msg_typ, ls_clrq_err.
      READ TABLE lt_clrq_err INTO ls_clrq_err
      WITH KEY msg_code = ls_clrq_itm_new-msg_code.
      lv_msg_typ = ls_clrq_err-msgty.
    ENDIF.

    IF ls_clrq_itm_new-msg_code IS INITIAL OR
     ( ls_clrq_itm_new-msg_code IS NOT INITIAL AND lv_msg_typ NE gc_message_type-error ).

      IF NOT lv_bill_typ IS INITIAL.
        CLEAR ls_bilitty.
        READ TABLE gt_bilitty INTO ls_bilitty
                              WITH KEY bilitmtyp = lv_bill_typ.
        IF sy-subrc EQ 0.
          CASE ls_bilitty-pop_src_date.
            WHEN gc_pop_src_date-docu.
              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
              ls_clrq_itm-srvc_date     = ls_clrq_itm_new-bldat.
            WHEN gc_pop_src_date-post.
              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-budat.
              ls_clrq_itm-srvc_date     = ls_clrq_itm_new-budat.
            WHEN OTHERS.
              ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
              ls_clrq_itm-srvc_date     = ls_clrq_itm_new-bldat.
          ENDCASE.
        ENDIF.

        ls_clrq_itm_new-bityp = lv_bill_typ.
        IF NOT ls_bill_typ IS INITIAL.
          CLEAR ls_bill_item.
          ls_bill_item-bitype     = lv_bill_typ.
          ls_bill_item-vgbel      = ls_clrq_itm_new-vgbel.
          ls_bill_item-vgpos      = ls_clrq_itm_new-vgpos.
          ls_bill_item-ps_psp_pnr = ls_clrq_itm_new-ps_psp_pnr.

          PERFORM get_performance_dates USING ls_bill_item
                                              ls_clrq_itm_new
                                        CHANGING lv_pop_st
                                                 lv_pop_end.

          IF <lwa_clrqbi> IS ASSIGNED.
            UNASSIGN <lwa_clrqbi>.
          ENDIF.

          IF NOT ls_bill_typ-bilmatnr IS INITIAL.
            lv_bilmatnr = ls_bill_typ-bilmatnr.
          ELSE.
            lv_bilmatnr = ls_clrq_itm_new-matnr.
          ENDIF.

          PERFORM prep_bi_where_cls  USING  ls_clrq_itm_new
                                            lv_bill_typ
                                            lv_bilmatnr
                                   CHANGING lv_where.

          LOOP AT gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_clrqbi> WHERE (lv_where).
            EXIT.
          ENDLOOP.

          IF <lwa_clrqbi> IS ASSIGNED.
            MOVE-CORRESPONDING <lwa_clrqbi> TO ls_bill_num_open.
            "Update the table
            PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                 ls_bill_typ
                                                 gc_call-1
                                           CHANGING ls_clrq_itm_new
                                                    ls_clrq_itm.
            CLEAR lv_updkz.
            lv_updkz     = <lwa_clrqbi>-updkz.
            <lwa_clrqbi> = CORRESPONDING #( ls_bill_num_open ).
            <lwa_clrqbi>-vgbel = ls_clrq_itm_new-vgbel.
            <lwa_clrqbi>-vgpos = ls_clrq_itm_new-vgpos.
            <lwa_clrqbi>-updkz = lv_updkz.
            IF <lwa_clrqbi>-updkz IS INITIAL.
              <lwa_clrqbi>-updkz = gc_updkz_update.
            ENDIF.
            lv_call_bit_ex = abap_true.
            "Update the FCAT

            PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                 ls_bill_typ
                                                 space
                                           CHANGING ls_clrq_itm_new
                                                    ls_clrq_itm.

          ELSE.
            lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC C

            SELECT SINGLE *
            FROM /cgdc/_clrqbi
            WHERE (lv_where)
            INTO @ls_bill_num_open.
            IF sy-subrc EQ 0.
              "Update DB table

              PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                     ls_bill_typ
                                                     gc_call-1
                                               CHANGING ls_clrq_itm_new
                                                        ls_clrq_itm.

              CLEAR ls_bill_num.
              ls_bill_num       = CORRESPONDING #( ls_bill_num_open ).
              ls_bill_num-vgbel = ls_clrq_itm_new-vgbel.
              ls_bill_num-vgpos = ls_clrq_itm_new-vgpos.
              IF ls_bill_num-updkz IS INITIAL.
                ls_bill_num-updkz = gc_updkz_update.
              ENDIF.

              APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.

              lv_call_bit_ex = abap_true.
              "Update FCAT

              PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                   ls_bill_typ
                                                   space
                                           CHANGING ls_clrq_itm_new
                                                 ls_clrq_itm.

              CLEAR ls_message.
              ls_message-msgid = gc_clrq_msg_cls.
              ls_message-msgnr = gc_msg_cls_msgnr-114.
              ls_message-msgty = gc_message_type-warning.
              ls_message-fieldname = gc_clrqit_field-rtbbinr.
              APPEND ls_message TO gt_messages.

              CLEAR ls_clrq_err.
              READ TABLE lt_clrq_err INTO ls_clrq_err
              WITH KEY msgclass = gc_clrq_msg_cls
                       msgid = gc_msg_cls_msgnr-114.
              IF sy-subrc EQ 0.
                ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
                CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
              ENDIF.
            ELSEIF gs_variables-bg_prl_run IS INITIAL."no new bill item should get create Parallel Or BG
              CASE ls_bill_typ-bilcreate_type.
                WHEN gc_bilcrttyp-auto OR gc_bilcrttyp-auma OR gc_bilcrttyp-scit.
                  IF /cgdc/cl_clrq_process=>gv_no_new_bill_item IS INITIAL.
                    "Assign/Create billing item number to the calc req item
                    PERFORM generate_billing_item_number  USING ls_bill_typ
                                                                ls_clrq_itm
*                                                              lv_src_date
                                                          CHANGING ls_clrq_itm_new.
                  ELSE.
                    CLEAR ls_message.
                    ls_message-msgid = gc_clrq_msg_cls.
                    ls_message-msgnr = gc_msg_cls_msgnr-114.
                    ls_message-msgty = gc_message_type-warning.
                    ls_message-fieldname = gc_clrqit_field-rtbbinr.
                    APPEND ls_message TO gt_messages.

                    CLEAR ls_clrq_err.
                    READ TABLE lt_clrq_err INTO ls_clrq_err
                    WITH KEY msgclass = gc_clrq_msg_cls
                             msgid = gc_msg_cls_msgnr-114.
                    IF sy-subrc EQ 0.
                      ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
                      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
                    ENDIF.
                  ENDIF.
                WHEN OTHERS.
                  "Do not assign bill item number
                  CLEAR ls_message.
                  ls_message-msgid = gc_clrq_msg_cls.
                  ls_message-msgnr = gc_msg_cls_msgnr-056.
                  ls_message-msgty = gc_message_type-warning.
                  ls_message-msgv1 = lv_bill_typ.
                  ls_message-fieldname = gc_clrqit_field-rtbbinr.
                  APPEND ls_message TO gt_messages.

                  CLEAR ls_clrq_err.
                  READ TABLE lt_clrq_err INTO ls_clrq_err
                  WITH KEY msgclass = gc_clrq_msg_cls
                           msgid = gc_msg_cls_msgnr-056.
                  IF sy-subrc EQ 0.
                    ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
                    CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
                    IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
                      ls_clrq_itm_new-msg_icon =  icon_yellow_light.
                    ELSE.
                      ls_clrq_itm_new-msg_icon = icon_green_light.
                    ENDIF.
                  ELSE.
                    ls_clrq_itm_new-msg_icon =  icon_yellow_light.
                  ENDIF.
              ENDCASE.
            ENDIF.
          ENDIF.
          IF ( ls_clrq_itm_new-rtbbinr IS INITIAL AND
             ( ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-auto
            OR ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-auma
            OR ls_bill_typ-bilcreate_type EQ gc_bilcrttyp-scit )  ).
            CLEAR ls_message.
            ls_message-msgid = gc_clrq_msg_cls.
            ls_message-msgnr = gc_msg_cls_msgnr-055.
            ls_message-msgty = gc_message_type-error.
            ls_message-msgv1 = lv_bill_typ.
            ls_message-fieldname = gc_clrqit_field-rtbbinr.
            APPEND ls_message TO gt_messages.

            CLEAR ls_clrq_err.
            READ TABLE lt_clrq_err INTO ls_clrq_err
            WITH KEY msgclass = gc_clrq_msg_cls
                     msgid = gc_msg_cls_msgnr-055.
            IF sy-subrc EQ 0.
              ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
              CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
              IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
                ls_clrq_itm_new-msg_icon = icon_red_light.
              ELSE.
                ls_clrq_itm_new-msg_icon = icon_green_light.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSE.
          "Config for bill item type is missing
          CLEAR ls_message.
          ls_message-msgid = gc_clrq_msg_cls.
          ls_message-msgnr = gc_msg_cls_msgnr-042.
          ls_message-msgty = gc_message_type-error.
          ls_message-msgv1 = lv_bill_typ.
          ls_message-fieldname = gc_clrqit_field-rtbbinr.
          APPEND ls_message TO gt_messages.

          CLEAR ls_clrq_err.
          READ TABLE lt_clrq_err INTO ls_clrq_err
          WITH KEY msgclass = gc_clrq_msg_cls
                   msgid = gc_msg_cls_msgnr-042.
          IF sy-subrc EQ 0.
            ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
            CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
            IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
              ls_clrq_itm_new-msg_icon = icon_red_light.
            ELSE.
              ls_clrq_itm_new-msg_icon = icon_green_light.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        "No bill item type found.
        CLEAR ls_message.
        ls_message-msgid = gc_clrq_msg_cls.
        ls_message-msgnr = gc_msg_cls_msgnr-037.
        ls_message-msgty = gc_message_type-error.
        ls_message-msgv1 = ls_clrq_itm_new-clrno.
        ls_message-msgv2 = ls_clrq_itm_new-clrit.
        ls_message-fieldname = gc_clrqit_field-rtbbinr.
        APPEND ls_message TO gt_messages.

        CLEAR ls_clrq_err.
        READ TABLE lt_clrq_err INTO ls_clrq_err
        WITH KEY msgclass = gc_clrq_msg_cls
                 msgid = gc_msg_cls_msgnr-037.
        IF sy-subrc EQ 0.
          ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
          CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
          IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
            ls_clrq_itm_new-msg_icon = icon_red_light.
          ELSE.
            ls_clrq_itm_new-msg_icon = icon_green_light.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      "Message that BIL ITEM will not be generated due to mat determination error.
      CLEAR ls_message.
      ls_message-msgid = gc_clrq_msg_cls.
      ls_message-msgnr = gc_msg_cls_msgnr-048.
      ls_message-msgty = gc_message_type-error.
      ls_message-msgv1 = ls_clrq_itm_new-clrno.
      ls_message-msgv2 = ls_clrq_itm_new-clrit.
      ls_message-fieldname = gc_clrqit_field-rtbbinr.
      APPEND ls_message TO gt_messages.
    ENDIF.
  ELSEIF gs_variables-bit_num_gen = abap_false AND
        ( lv_bill_sched EQ abap_true OR lv_bill_sched_new EQ abap_true ).

    "++AMISHARMA no bill item error for postponed or rejected lines
  ELSEIF gs_variables-bit_num_gen = abap_false AND
        ( gs_clrit_org-istat = 'P' OR gs_clrit_org-istat = 'R' ).

  ELSE.
    "When parallel processing, billing item number is not determined.
    "populate error.
    CLEAR ls_clrq_err.
    READ TABLE lt_clrq_err INTO ls_clrq_err
    WITH KEY msgclass = gc_clrq_msg_cls
             msgid    = gc_msg_cls_msgnr-061.
    IF sy-subrc EQ 0.
      CLEAR ls_clrq_itm_new-msg_code.
      ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
      ls_clrq_itm_new-msg_icon = icon_red_light.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form determine_scheduler
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM determine_scheduler USING ls_pre_data TYPE /cgdc/s_clrqbi_fcat
                         CHANGING lv_skip TYPE char1.
*- local delcarations
  TYPES: BEGIN OF ls_dtgrp,
           dtgrp TYPE /cgdc/dtgrp,
         END OF ls_dtgrp,
         BEGIN OF ls_cptgrp,
           cptgrp TYPE /cgdc/cptgrp,
         END OF ls_cptgrp,

         BEGIN OF ls_distance,
           index          TYPE sy-tabix,
           distance       TYPE i,
           no_of_defaults TYPE i,
           priority       TYPE i,
         END OF ls_distance.
  TYPES: BEGIN OF ls_final_items,
           vbeln TYPE vbeln_va,
           sgrpn TYPE /cgdc/rtbs_group,
           cline TYPE /cgdc/cline,
           posnr TYPE /cgdc/tt_posnr,
         END OF ls_final_items.

  DATA: BEGIN OF ls_message,
          mtype TYPE sy-msgty,
          msgid TYPE sy-msgid,
          msgno TYPE sy-msgno,
          msgv1 TYPE sy-msgv1,
          msgv2 TYPE sy-msgv2,
          msgv3 TYPE sy-msgv3,
          msgv4 TYPE sy-msgv4,
        END OF ls_message.
  DATA: lt_dtgrp                  TYPE TABLE OF ls_dtgrp,
        lt_cptgrp                 TYPE TABLE OF ls_cptgrp,
        lt_distance               TYPE TABLE OF ls_distance,
        lt_dfies                  TYPE dfies_tab,
        ls_dfies                  LIKE LINE OF lt_dfies,
        ls_char_and_freq_tmp      TYPE /cgdc/t_rtbsc,
        ls_distance               TYPE ls_distance,
        lv_distance               TYPE i,
        lv_final_distance         TYPE i,
        ls_chars_priority         TYPE /cgdc/t_rtbscp,
        lv_tabix                  TYPE sy-tabix,
        ls_ogroup_char_and_freq   TYPE /cgdc/_rtbsogc,
        ls_final_items            TYPE ls_final_items,
        lt_final_items            TYPE TABLE OF ls_final_items,
        lv_subrc                  TYPE sy-subrc,
        ls_posnr                  TYPE /cgdc/s_posnr,
        lv_item_subrc             TYPE sy-subrc,
        lv_mult_clin_subrc        TYPE sy-subrc,
        lv_item_tabix             TYPE sy-tabix,
        ls_mogrp_based_final_itms TYPE gs_mogrp_based_final_itms,
        ls_group_clin_log         TYPE /cgdc/_rtbsgcl,
        lv_where                  TYPE string,
        lv_update_log_n_exit,
        lv_clin_asg_subrc         TYPE sy-subrc,
        lv_clin_asg_tabix         TYPE sy-tabix,
        lv_msg_type               TYPE bdc_mart,
        lv_first_posnr            TYPE posnr_va,
        lv_fieldname              TYPE string,
        lv_field_value            TYPE string,
        lv_counter                TYPE i,
        lv_mult_clin_tabix        TYPE sy-tabix,
        lv_message_counter        TYPE i,
        lv_date_external          TYPE char10,
        lv_error_occurred,
        lv_timestamp              TYPE timestampl,
        lv_threshold_error,
        lt_posnr                  TYPE vpkti_tt_posnr,
        lt_group_clin_log_old     TYPE TABLE OF /cgdc/_rtbsgcl,
        lt_group_clin_log_del     TYPE TABLE OF /cgdc/_rtbsgcl,
        ls_group_clin_log_old     TYPE /cgdc/_rtbsgcl,
        lt_group_log              TYPE TABLE OF /cgdc/_rtbsgl,
        ls_group_log              TYPE /cgdc/_rtbsgl,
        lv_continue,
        lv_converted_amount       TYPE netwr,
        lv_total_billed_amount    TYPE netwr,
        lv_valid_ogroup_found,
        lv_skip_threshold_check,
        lv_dummy_period           TYPE dlydy,           " Dummy
        lv_operator               TYPE /cgdc/toperator,
        lv_threshold_amnt         TYPE /cgdc/threshold_amt,
        lv_threshold_currency     TYPE waerk,
        lv_next_date              TYPE /cgdc/rrbs_ldate,
        lv_last_date              TYPE /cgdc/rrbs_ldate.

  DATA: lr_msg_type TYPE RANGE OF bdc_mart,
        ls_msg_type LIKE LINE OF lr_msg_type.
  FIELD-SYMBOLS: <ls_final_items>            TYPE ls_final_items,
                 <ls_mogrp_based_final_itms> TYPE gs_mogrp_based_final_itms.
*- Select contract line item from billing line item
  IF ls_pre_data-ps_psp_pnr IS NOT INITIAL.

    SELECT SINGLE *
           FROM vbap
           INTO @DATA(ls_vbap)
           WHERE vbeln = @gs_vbak-vbeln AND ps_psp_pnr = @ls_pre_data-ps_psp_pnr.
*- Fetch CF data
    SELECT *
    FROM /cgdc/cf_sd_it
    INTO TABLE @gt_contract_itm_cf_data
    WHERE vbeln EQ @gs_vbak-vbeln.
    IF sy-subrc EQ 0.
      SORT gt_contract_itm_cf_data BY vbeln posnr.
    ENDIF.
*- Get if auto schduler assigned to the line item
    SELECT SINGLE scheduling
           FROM  /cgdc/_blnplnh
            INTO @DATA(lv_sch)
            WHERE vbeln = @gs_vbak-vbeln AND posnr = @ls_vbap-posnr.
    IF lv_sch IS INITIAL.
      READ TABLE gt_contract_itm_cf_data
          WITH KEY vbeln = gs_vbak-vbeln
                   posnr = ls_vbap-posnr
          BINARY SEARCH
          INTO DATA(ls_cfd_data).
*- get fields
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = gc_rtb_sch_grp_tabname "'/CGDC/T_RTBSC'
          langu          = sy-langu
          all_types      = abap_true
        TABLES
          dfies_tab      = lt_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
*- get document mapping
      LOOP AT gt_doc_type_grp_mapping INTO DATA(ls_doc_type_grp_mapping) WHERE auart EQ gs_vbak-auart.
        APPEND ls_doc_type_grp_mapping-dtgrp TO lt_dtgrp.
      ENDLOOP.
      LOOP AT gt_cp_type_grp_mapping INTO DATA(ls_cp_type_grp_mapping) WHERE ctype EQ ls_cfd_data-/cgdc/ctype.
        APPEND ls_cp_type_grp_mapping-cptgrp TO lt_cptgrp.
      ENDLOOP.

      DATA(lt_char_and_freq) = gt_char_and_freq.
      SORT lt_char_and_freq BY vkorg vkbur dtgrp ktonr cptgrp fmsck mcont.

      LOOP AT lt_char_and_freq INTO DATA(ls_char_and_freq).

        CLEAR: ls_char_and_freq_tmp, ls_distance, lv_distance, lv_final_distance.
        ls_distance-index = sy-tabix.
        ls_char_and_freq_tmp = ls_char_and_freq.

        IF NOT gs_vbak-vkorg IS INITIAL
          AND ls_char_and_freq-vkorg IS INITIAL.

          ls_char_and_freq_tmp-vkorg = gs_vbak-vkorg.
          ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
          READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-vkorg INTO ls_chars_priority.

          IF sy-subrc EQ 0.
            ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
          ELSE.
            ls_distance-priority = ls_distance-priority + 2.
          ENDIF.

        ENDIF.

        IF NOT gs_vbak-vkbur IS INITIAL
          AND ls_char_and_freq-vkbur IS INITIAL.

          ls_char_and_freq_tmp-vkbur = gs_vbak-vkbur.
          ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
          READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-vkbur INTO ls_chars_priority.

          IF sy-subrc EQ 0.
            ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
          ELSE.
            ls_distance-priority = ls_distance-priority + 3.
          ENDIF.

        ENDIF.

        IF NOT gs_vbak-kunnr IS INITIAL
          AND ls_char_and_freq-ktonr IS INITIAL.

          ls_char_and_freq_tmp-ktonr = gs_vbak-kunnr.
          ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
          READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-ktonr INTO ls_chars_priority.

          IF sy-subrc EQ 0.
            ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
          ELSE.
            ls_distance-priority = ls_distance-priority + 4.
          ENDIF.

        ENDIF.

        IF NOT ls_cfd_data-/cgdc/fmsck IS INITIAL
          AND ls_char_and_freq-fmsck IS INITIAL.

          ls_char_and_freq_tmp-fmsck = ls_cfd_data-/cgdc/fmsck.
          ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
          READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-fmsck INTO ls_chars_priority.

          IF sy-subrc EQ 0.
            ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
          ELSE.
            ls_distance-priority = ls_distance-priority + 7.
          ENDIF.

        ENDIF.

        IF NOT gs_vbak-vbeln_grp IS INITIAL
          AND ls_char_and_freq-mcont IS INITIAL.

          ls_char_and_freq_tmp-mcont = gs_vbak-vbeln_grp.
          ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
          READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-mcont INTO ls_chars_priority.

          IF sy-subrc EQ 0.
            ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
          ELSE.
            ls_distance-priority = ls_distance-priority + 5.
          ENDIF.

        ENDIF.

        IF ls_char_and_freq_tmp-vkorg NE gs_vbak-vkorg.
          CLEAR ls_dfies.
          READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-vkorg INTO ls_dfies.
          ls_distance-distance = ls_distance-distance + ls_dfies-leng.
        ENDIF.

        IF ls_char_and_freq_tmp-vkbur NE gs_vbak-vkbur.
          CLEAR ls_dfies.
          READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-vkbur INTO ls_dfies.
          ls_distance-distance = ls_distance-distance + ls_dfies-leng.
        ENDIF.

        IF ls_char_and_freq_tmp-ktonr NE gs_vbak-kunnr.
          CLEAR ls_dfies.
          READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-ktonr INTO ls_dfies.
          ls_distance-distance = ls_distance-distance + ls_dfies-leng.
        ENDIF.

        IF ls_char_and_freq_tmp-fmsck NE ls_cfd_data-/cgdc/fmsck.
          CLEAR ls_dfies.
          READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-fmsck  INTO ls_dfies.
          ls_distance-distance = ls_distance-distance + ls_dfies-leng.
        ENDIF.

        IF ls_char_and_freq_tmp-mcont NE gs_vbak-vbeln_grp.
          CLEAR ls_dfies.
          READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-mcont INTO ls_dfies.
          ls_distance-distance = ls_distance-distance + ls_dfies-leng.
        ENDIF.

        IF NOT lt_dtgrp IS INITIAL.

          LOOP AT lt_dtgrp INTO DATA(ls_dtgrp).

            lv_tabix = sy-tabix.
            CLEAR lv_distance.

            IF NOT ls_dtgrp-dtgrp IS INITIAL
              AND ls_char_and_freq-dtgrp IS INITIAL.

              ls_char_and_freq_tmp-dtgrp = ls_dtgrp-dtgrp.
              ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
              READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-dtgrp  INTO ls_chars_priority.

              IF sy-subrc EQ 0.
                ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
              ELSE.
                ls_distance-priority = ls_distance-priority + 1.
              ENDIF.

            ENDIF.

            IF ls_char_and_freq_tmp-dtgrp NE ls_dtgrp-dtgrp.
              CLEAR ls_dfies.
              READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-dtgrp INTO ls_dfies.
              lv_distance = ls_dfies-leng.
            ENDIF.

            IF lv_distance < lv_final_distance
              OR lv_tabix EQ 1.
              lv_final_distance = lv_distance.
            ENDIF.

          ENDLOOP.

        ELSE.

          IF NOT ls_char_and_freq_tmp-dtgrp IS INITIAL.
            CLEAR ls_dfies.
            READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-dtgrp INTO ls_dfies.
            lv_final_distance = ls_dfies-leng.
          ENDIF.

        ENDIF.

        ls_distance-distance = ls_distance-distance + lv_final_distance.
        CLEAR: lv_distance, lv_final_distance.

        IF NOT lt_cptgrp IS INITIAL.

          LOOP AT lt_cptgrp INTO DATA(ls_cptgrp).

            lv_tabix = sy-tabix.
            CLEAR lv_distance.

            IF NOT ls_cptgrp-cptgrp IS INITIAL
              AND ls_char_and_freq-cptgrp IS INITIAL.

              ls_char_and_freq_tmp-cptgrp = ls_cptgrp-cptgrp.
              ls_distance-no_of_defaults = ls_distance-no_of_defaults + 1.
              READ TABLE gt_chars_priority WITH KEY fname = gc_fieldname-cptgrp INTO ls_chars_priority.

              IF sy-subrc EQ 0.
                ls_distance-priority = ls_distance-priority + ls_chars_priority-priority.
              ELSE.
                ls_distance-priority = ls_distance-priority + 6.
              ENDIF.

            ENDIF.

            IF ls_char_and_freq_tmp-cptgrp NE ls_cptgrp-cptgrp.
              CLEAR ls_dfies.
              READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-cptgrp INTO ls_dfies.
              lv_distance = ls_dfies-leng.
            ENDIF.

            IF lv_distance < lv_final_distance
              OR lv_tabix EQ 1.
              lv_final_distance = lv_distance.
            ENDIF.

          ENDLOOP.

        ELSE.

          IF NOT ls_char_and_freq_tmp-cptgrp IS INITIAL.
            CLEAR ls_dfies.
            READ TABLE lt_dfies WITH KEY tabname = gc_rtb_sch_grp_tabname fieldname = gc_fieldname-cptgrp INTO ls_dfies.
            lv_final_distance = ls_dfies-leng.
          ENDIF.

        ENDIF.

        ls_distance-distance = ls_distance-distance + lv_final_distance.
        APPEND ls_distance TO lt_distance.

      ENDLOOP.

      SORT lt_distance BY distance no_of_defaults ASCENDING priority DESCENDING.
      READ TABLE lt_distance INTO ls_distance INDEX 1.

      IF sy-subrc EQ 0 AND ls_distance-distance EQ 0.

        READ TABLE lt_char_and_freq INTO ls_char_and_freq INDEX ls_distance-index.

        IF sy-subrc EQ 0.

          CLEAR ls_ogroup_char_and_freq.
          PERFORM validate_frequency USING gc_call-1 ls_char_and_freq ls_ogroup_char_and_freq CHANGING lv_continue.
          READ TABLE gt_final_items
          WITH KEY vbeln = gs_vbak-vbeln
                   sgrpn = ls_char_and_freq-sgrpn
          BINARY SEARCH
          ASSIGNING <ls_final_items>.

          lv_subrc = sy-subrc.
          lv_tabix = sy-tabix.
          CLEAR ls_final_items.

          IF lv_subrc NE 0.

            ls_final_items-vbeln = gs_vbak-vbeln.
            MOVE-CORRESPONDING ls_char_and_freq TO ls_final_items.
            ls_final_items-cline = ls_cfd_data-/cgdc/cline.
            ls_posnr-posnr = ls_vbap-posnr.

            IF lv_continue IS INITIAL.
              ls_posnr-skip = abap_true.
              lv_skip = abap_true.
            ENDIF.

            APPEND ls_posnr TO ls_final_items-posnr.

            IF lv_subrc EQ 4.
              INSERT ls_final_items INTO gt_final_items INDEX lv_tabix.
            ELSE.
              APPEND ls_final_items TO gt_final_items.
            ENDIF.

          ELSE.

            READ TABLE <ls_final_items>-posnr
            WITH KEY posnr = ls_vbap-posnr
            BINARY SEARCH
            TRANSPORTING NO FIELDS.
            lv_item_subrc = sy-subrc.
            lv_item_tabix = sy-tabix.
            ls_posnr-posnr = ls_vbap-posnr.

            IF lv_continue IS INITIAL.
              ls_posnr-skip = abap_true.
              lv_skip = abap_true.
            ENDIF.

            IF lv_item_subrc EQ 4.
              INSERT ls_posnr INTO <ls_final_items>-posnr INDEX lv_item_tabix.
            ELSEIF lv_item_subrc EQ 8.
              APPEND ls_posnr TO <ls_final_items>-posnr.
            ENDIF.

          ENDIF.

        ENDIF.

      ENDIF.
      CLEAR ls_cfd_data.
      READ TABLE gt_contract_itm_cf_data
      WITH KEY vbeln = gs_vbak-vbeln
               posnr = ls_vbap-posnr
      BINARY SEARCH
      INTO ls_cfd_data.

      CLEAR ls_char_and_freq.
      READ TABLE gt_ogroup_char_and_freq
      WITH KEY vbeln = gs_vbak-vbeln
               cogrp = lv_sch
      BINARY SEARCH
      INTO ls_ogroup_char_and_freq.

      IF sy-subrc EQ 0.

        PERFORM validate_frequency USING gc_call-2 ls_char_and_freq ls_ogroup_char_and_freq CHANGING lv_continue.


        READ TABLE gt_mogrp_based_final_itms
        WITH KEY vbeln = gs_vbak-vbeln
                 cogrp = lv_sch
        BINARY SEARCH
        ASSIGNING <ls_mogrp_based_final_itms>.


        lv_subrc = sy-subrc.
        lv_tabix = sy-tabix.
        CLEAR ls_mogrp_based_final_itms.

        IF lv_subrc NE 0.

          ls_mogrp_based_final_itms-vbeln = gs_vbak-vbeln.
          ls_mogrp_based_final_itms-cogrp = lv_sch.
          ls_mogrp_based_final_itms-cline = ls_cfd_data-/cgdc/cline.
          ls_posnr-posnr = ls_vbap-posnr.

          IF lv_continue IS INITIAL.
            ls_posnr-skip = abap_true.
            lv_skip = abap_true.
          ENDIF.

          APPEND ls_posnr TO ls_mogrp_based_final_itms-posnr.

          IF lv_subrc EQ 4.
            INSERT ls_mogrp_based_final_itms INTO gt_mogrp_based_final_itms INDEX lv_tabix.
          ELSE.
            APPEND ls_mogrp_based_final_itms TO gt_mogrp_based_final_itms.
          ENDIF.

        ELSE.

          READ TABLE <ls_mogrp_based_final_itms>-posnr
          WITH KEY posnr = ls_vbap-posnr
          BINARY SEARCH
          TRANSPORTING NO FIELDS.
          lv_item_subrc = sy-subrc.
          lv_item_tabix = sy-tabix.
          ls_posnr-posnr = ls_vbap-posnr.

          IF lv_continue IS INITIAL.
            ls_posnr-skip = abap_true.
            lv_skip = abap_true.
          ENDIF.

          IF lv_item_subrc EQ 4.
            INSERT ls_posnr INTO <ls_mogrp_based_final_itms>-posnr INDEX lv_item_tabix.
          ELSEIF lv_item_subrc EQ 8.
            APPEND ls_posnr TO <ls_mogrp_based_final_itms>-posnr.
          ENDIF.

        ENDIF.

      ENDIF.

    ENDIF.

    IF NOT gt_final_items[] IS INITIAL OR NOT gt_mogrp_based_final_itms[] IS INITIAL.

      LOOP AT gt_final_items INTO ls_final_items.

        CLEAR: gt_messages[], gt_group_clin_log[], lv_first_posnr, lv_where, lt_posnr[], lv_threshold_error,
               lv_error_occurred, ls_message, lv_message_counter, lv_update_log_n_exit,
               lv_timestamp, lr_msg_type[].

        GET TIME STAMP FIELD lv_timestamp.

        LOOP AT ls_final_items-posnr INTO ls_posnr WHERE skip IS INITIAL.
          APPEND ls_posnr-posnr TO lt_posnr.
        ENDLOOP.

        READ TABLE gt_char_and_freq
        INTO ls_char_and_freq
        WITH KEY sgrpn = ls_final_items-sgrpn
        BINARY SEARCH.

        IF sy-subrc EQ 0.

          IF NOT lt_posnr IS INITIAL.


            IF lv_update_log_n_exit IS INITIAL.
*- check for thresholds
              CONVERT TIME STAMP lv_timestamp TIME ZONE sy-zonlo INTO DATE lv_last_date.
              IF NOT ls_char_and_freq-tbprd IS INITIAL.

                CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
                  EXPORTING
                    date      = lv_last_date
                    days      = ls_char_and_freq-tbprd
                    months    = lv_dummy_period
                    years     = lv_dummy_period
                  IMPORTING
                    calc_date = lv_next_date.

                IF sy-datum GE lv_next_date.
                  lv_skip_threshold_check = abap_true.
                  lv_skip = abap_true.
                ENDIF.
              ENDIF.

              IF lv_skip_threshold_check IS INITIAL.
                lv_operator = ls_char_and_freq-operator.
                lv_threshold_amnt = ls_char_and_freq-tamnt.
                lv_threshold_currency = ls_char_and_freq-tcuky.
              ENDIF.

              IF NOT lv_operator IS INITIAL
                   AND NOT lv_threshold_amnt IS INITIAL
                   AND NOT lv_threshold_currency IS INITIAL.

                CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
                  EXPORTING
                    date             = sy-datlo
                    foreign_amount   = ls_pre_data-netwr
                    foreign_currency = ls_pre_data-waerk
                    local_currency   = lv_threshold_currency
                  IMPORTING
                    local_amount     = lv_converted_amount
                  EXCEPTIONS
                    OTHERS           = 4.

                IF lv_operator EQ gc_operator-le_sign.

                  IF lv_converted_amount GT lv_threshold_amnt.
                    lv_threshold_error = abap_true.
                  ENDIF.

                ELSE.

                  IF lv_converted_amount LT lv_threshold_amnt.
                    lv_threshold_error = abap_true.
                  ENDIF.

                ENDIF.
              ENDIF.
*- error logging
              IF lv_threshold_error IS INITIAL.

                ls_message-mtype =  gc_message_type-succes.
                ls_message-msgid = gc_rtb_sch_grp_tabname.
                ls_message-msgno = gc_msg_cls_msgnr-056 .

                IF NOT ls_char_and_freq-logsm IS INITIAL.
                  CLEAR ls_msg_type.
                  ls_msg_type-sign = gc_range_tbl_sign-include .
                  ls_msg_type-option = gc_operator-equal .
                  ls_msg_type-low = gc_message_type-succes .
                  APPEND ls_msg_type TO lr_msg_type.
                ENDIF.

                IF NOT ls_char_and_freq-logem IS INITIAL.
                  CLEAR ls_msg_type.
                  ls_msg_type-sign = gc_range_tbl_sign-include.
                  ls_msg_type-option = gc_operator-equal.
                  ls_msg_type-low = gc_message_type-error.
                  APPEND ls_msg_type TO lr_msg_type.
                ENDIF.

                IF NOT ls_char_and_freq-logim IS INITIAL.
                  CLEAR ls_msg_type.
                  ls_msg_type-sign = gc_range_tbl_sign-include.
                  ls_msg_type-option = gc_operator-equal.
                  ls_msg_type-low = gc_message_type-information .
                  APPEND ls_msg_type TO lr_msg_type.
                ENDIF.

                IF ls_message-mtype IN lr_msg_type[].
*                  GET TIME STAMP FIELD lv_timestamp.

                  PERFORM prepare_group_clin_log USING space ls_final_items ls_mogrp_based_final_itms ls_message-mtype ls_message-msgid ls_message-msgno ls_message-msgv1
                                                       ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                              CHANGING ls_group_clin_log.

                  LOOP AT ls_final_items-posnr INTO ls_posnr WHERE skip IS INITIAL.

                    IF lv_error_occurred IS INITIAL.
                      ls_group_clin_log-msgv1 = ls_pre_data-bill_item.
                    ENDIF.

                    ls_group_clin_log-posnr = ls_posnr-posnr.
                    APPEND ls_group_clin_log TO gt_group_clin_log.

                  ENDLOOP.

                ENDIF.

              ELSE.
                lv_skip = abap_true.
                IF NOT ls_char_and_freq-logem IS INITIAL.
*                  GET TIME STAMP FIELD lv_timestamp.
                  PERFORM prepare_group_clin_log USING space ls_final_items ls_mogrp_based_final_itms 'E' '/CGDC/RRBS' '057' ls_message-msgv1
                                                       ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                              CHANGING ls_group_clin_log.

                  LOOP AT ls_final_items-posnr INTO ls_posnr WHERE skip IS INITIAL.
                    ls_group_clin_log-posnr = ls_posnr-posnr.
                    APPEND ls_group_clin_log TO gt_group_clin_log.
                  ENDLOOP.

                ENDIF.

              ENDIF.

            ENDIF.

          ENDIF.

          IF NOT ls_char_and_freq-logim IS INITIAL.

            LOOP AT ls_final_items-posnr INTO ls_posnr WHERE NOT skip IS INITIAL.
*              GET TIME STAMP FIELD lv_timestamp.
              PERFORM prepare_group_clin_log USING space ls_final_items ls_mogrp_based_final_itms gc_message_type-information gc_rrbs_msg_cls gc_msg_cls_msgnr-058 ls_message-msgv1
                                                   ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                          CHANGING ls_group_clin_log.

              ls_group_clin_log-posnr = ls_posnr-posnr.
              APPEND ls_group_clin_log TO gt_group_clin_log.

            ENDLOOP.

          ENDIF.
          CLEAR: lv_counter, lt_group_clin_log_old[], lt_group_clin_log_del[], lt_group_log[], ls_group_log.
*          GET TIME STAMP FIELD lv_timestamp.
          PERFORM prepare_group_log USING space ls_final_items ls_mogrp_based_final_itms ls_char_and_freq ls_ogroup_char_and_freq lv_timestamp CHANGING ls_group_log.
          APPEND ls_group_log TO lt_group_log.

          LOOP AT ls_final_items-posnr INTO ls_posnr.

            READ TABLE gt_group_clin_log_old
            WITH KEY sgrpn = ls_final_items-sgrpn
                     cogrp = space
                     vbeln = ls_final_items-vbeln
                     posnr = ls_posnr-posnr
            BINARY SEARCH
            TRANSPORTING NO FIELDS.
            CLEAR lv_counter.
            lv_subrc = sy-subrc.
            lv_tabix = sy-tabix.

            IF lv_subrc EQ 0.

              LOOP AT gt_group_clin_log_old INTO ls_group_clin_log_old FROM lv_tabix.

                IF ls_group_clin_log_old-sgrpn NE ls_final_items-sgrpn
                  OR ls_group_clin_log_old-cogrp NE space
                  OR ls_group_clin_log_old-vbeln NE ls_final_items-vbeln
                  OR ls_group_clin_log_old-posnr NE ls_posnr-posnr.
                  EXIT.
                ENDIF.

                lv_counter = lv_counter + 1.

                IF lv_counter > 4.
                  APPEND ls_group_clin_log_old TO lt_group_clin_log_del.
                ENDIF.

              ENDLOOP.

            ENDIF.

          ENDLOOP.
          CALL FUNCTION '/CGDC/RTBS_PRC_LOG_UPDATE'
            EXPORTING
              i_commit_work  = space
              it_ins_rtbsgl  = lt_group_log
              it_ins_rtbsgcl = gt_group_clin_log
              it_del_rtbsgcl = lt_group_clin_log_del.

        ENDIF.

      ENDLOOP.
*- assigned automatic scheduling grp
      LOOP AT gt_mogrp_based_final_itms INTO ls_mogrp_based_final_itms.

        CLEAR: gt_messages[], gt_group_clin_log[], lv_first_posnr,  lv_where,  lt_posnr[], lv_threshold_error,
               lv_error_occurred, ls_message, lv_message_counter, lv_update_log_n_exit,
               lv_timestamp, lr_msg_type[].

        GET TIME STAMP FIELD lv_timestamp.

        LOOP AT ls_mogrp_based_final_itms-posnr INTO ls_posnr WHERE skip IS INITIAL.
          APPEND ls_posnr-posnr TO lt_posnr.
        ENDLOOP.


        READ TABLE gt_ogroup_char_and_freq
        WITH KEY vbeln = ls_mogrp_based_final_itms-vbeln
                 cogrp = ls_mogrp_based_final_itms-cogrp
        BINARY SEARCH
        INTO ls_ogroup_char_and_freq.

        IF sy-subrc EQ 0.

          IF NOT lt_posnr IS INITIAL.


          ENDIF.

          IF lv_update_log_n_exit IS INITIAL.
*- check threshold

*- check for thresholds
            CONVERT TIME STAMP lv_timestamp TIME ZONE sy-zonlo INTO DATE lv_last_date.
            IF NOT ls_char_and_freq-tbprd IS INITIAL.

              CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
                EXPORTING
                  date      = lv_last_date
                  days      = ls_ogroup_char_and_freq-tbprd
                  months    = lv_dummy_period
                  years     = lv_dummy_period
                IMPORTING
                  calc_date = lv_next_date.

              IF sy-datum GE lv_next_date.
                lv_skip_threshold_check = abap_true.
                lv_skip = abap_true.
              ENDIF.
            ENDIF.

            IF lv_skip_threshold_check IS INITIAL.
              lv_operator = ls_ogroup_char_and_freq-operator.
              lv_threshold_amnt = ls_ogroup_char_and_freq-tamnt.
              lv_threshold_currency = ls_ogroup_char_and_freq-tcuky.
            ENDIF.

            IF NOT lv_operator IS INITIAL
                 AND NOT lv_threshold_amnt IS INITIAL
                 AND NOT lv_threshold_currency IS INITIAL.

              CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
                EXPORTING
                  date             = sy-datlo
                  foreign_amount   = ls_pre_data-netwr
                  foreign_currency = ls_pre_data-waerk
                  local_currency   = lv_threshold_currency
                IMPORTING
                  local_amount     = lv_converted_amount
                EXCEPTIONS
                  OTHERS           = 4.

              IF lv_operator EQ gc_operator-le_sign .

                IF lv_converted_amount GT lv_threshold_amnt.
                  lv_threshold_error = abap_true.
                ENDIF.

              ELSE.

                IF lv_converted_amount LT lv_threshold_amnt.
                  lv_threshold_error = abap_true.
                ENDIF.

              ENDIF.
            ENDIF.
            IF lv_threshold_error IS INITIAL.

              ls_message-mtype = gc_message_type-succes.
              ls_message-msgid = gc_rrbs_msg_cls.
              ls_message-msgno = gc_msg_cls_msgnr-056 .

              IF NOT ls_ogroup_char_and_freq-logsm IS INITIAL.
                CLEAR ls_msg_type.
                ls_msg_type-sign = gc_range_tbl_sign-include .
                ls_msg_type-option = gc_operator-equal.
                ls_msg_type-low = gc_message_type-succes.
                APPEND ls_msg_type TO lr_msg_type.
              ENDIF.

              IF NOT ls_ogroup_char_and_freq-logem IS INITIAL.
***
                CLEAR ls_msg_type.
                ls_msg_type-sign = gc_range_tbl_sign-include.
                ls_msg_type-option = gc_operator-equal.
                ls_msg_type-low = gc_message_type-error.
                APPEND ls_msg_type TO lr_msg_type.
              ENDIF.

              IF NOT ls_ogroup_char_and_freq-logim IS INITIAL.
***
                CLEAR ls_msg_type.
                ls_msg_type-sign = gc_range_tbl_sign-include.
                ls_msg_type-option = gc_operator-equal.
                ls_msg_type-low = gc_message_type-information.
                APPEND ls_msg_type TO lr_msg_type.
              ENDIF.

              IF ls_message-mtype IN lr_msg_type[].

                PERFORM prepare_group_clin_log USING gc_call-1 ls_final_items ls_mogrp_based_final_itms ls_message-mtype ls_message-msgid ls_message-msgno ls_message-msgv1
                                                     ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                            CHANGING ls_group_clin_log.

                LOOP AT ls_mogrp_based_final_itms-posnr INTO ls_posnr WHERE skip IS INITIAL.

                  IF lv_error_occurred IS INITIAL.
                    ls_group_clin_log-msgv1 = ls_pre_data-bill_item.
                  ENDIF.

                  ls_group_clin_log-posnr = ls_posnr-posnr.
                  APPEND ls_group_clin_log TO gt_group_clin_log.

                ENDLOOP.

              ENDIF.

            ELSE.
              lv_skip = abap_true.
              IF NOT ls_ogroup_char_and_freq-logem IS INITIAL.
***
                PERFORM prepare_group_clin_log USING gc_call-1 ls_final_items ls_mogrp_based_final_itms gc_message_type-error gc_rrbs_msg_cls gc_msg_cls_msgnr-057  ls_message-msgv1
                                                     ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                            CHANGING ls_group_clin_log.

                LOOP AT ls_mogrp_based_final_itms-posnr INTO ls_posnr WHERE skip IS INITIAL.
                  ls_group_clin_log-posnr = ls_posnr-posnr.
                  APPEND ls_group_clin_log TO gt_group_clin_log.
                ENDLOOP.

              ENDIF.

            ENDIF.

          ENDIF.

        ENDIF.

        IF NOT ls_ogroup_char_and_freq-logim IS INITIAL.
***
          LOOP AT ls_mogrp_based_final_itms-posnr INTO ls_posnr WHERE NOT skip IS INITIAL.

            PERFORM prepare_group_clin_log USING gc_call-1 ls_final_items ls_mogrp_based_final_itms gc_message_type-information gc_rrbs_msg_cls gc_msg_cls_msgnr-058 ls_message-msgv1
                                                 ls_message-msgv2 ls_message-msgv3 ls_message-msgv4 lv_timestamp
                                        CHANGING ls_group_clin_log.

            ls_group_clin_log-posnr = ls_posnr-posnr.
            APPEND ls_group_clin_log TO gt_group_clin_log.

          ENDLOOP.

        ENDIF.
***
        CLEAR: lt_group_log[], ls_group_log, lv_counter, lt_group_clin_log_old[], lt_group_clin_log_del[].
        PERFORM prepare_group_log USING gc_call-1 ls_final_items ls_mogrp_based_final_itms ls_char_and_freq ls_ogroup_char_and_freq lv_timestamp CHANGING ls_group_log.
        APPEND ls_group_log TO lt_group_log.

        LOOP AT ls_mogrp_based_final_itms-posnr INTO ls_posnr.

          READ TABLE gt_group_clin_log_old
          WITH KEY sgrpn = space
                   cogrp = ls_mogrp_based_final_itms-cogrp
                   vbeln = ls_mogrp_based_final_itms-vbeln
                   posnr = ls_posnr-posnr
          BINARY SEARCH
          TRANSPORTING NO FIELDS.
          CLEAR lv_counter.
          lv_subrc = sy-subrc.
          lv_tabix = sy-tabix.

          IF lv_subrc EQ 0.

            LOOP AT gt_group_clin_log_old INTO ls_group_clin_log_old FROM lv_tabix.

              IF ls_group_clin_log_old-sgrpn NE space
                OR ls_group_clin_log_old-cogrp NE ls_mogrp_based_final_itms-cogrp
                OR ls_group_clin_log_old-vbeln NE ls_mogrp_based_final_itms-vbeln
                OR ls_group_clin_log_old-posnr NE ls_posnr-posnr.
                EXIT.
              ENDIF.

              lv_counter = lv_counter + 1.

              IF lv_counter > 4.
                APPEND ls_group_clin_log_old TO lt_group_clin_log_del.
              ENDIF.

            ENDLOOP.

          ENDIF.

        ENDLOOP.

        CALL FUNCTION '/CGDC/RTBS_PRC_LOG_UPDATE'
          EXPORTING
            i_commit_work  = space
            it_ins_rrbsgl  = lt_group_log
            it_ins_rrbsgcl = gt_group_clin_log
            it_del_rrbsgcl = lt_group_clin_log_del.

      ENDLOOP.

      COMMIT WORK.

    ENDIF.
  ELSE.
    lv_skip = abap_true.
  ENDIF.

ENDFORM.
FORM crt_bg_job_repricing USING  ls_parallel_process TYPE /cgdc/s_parallel_process
                                 lv_vbeln            TYPE vbeln
                                 lv_rv_flag          TYPE flag.

  DATA:
    lv_no_attempt          TYPE num4,
    lv_max_attempts        TYPE num4,
    lv_max_attempt_failure TYPE c,
    lv_row_count           TYPE sy-tabix,
    lv_job_name            TYPE btcjob,
    lv_job_number          TYPE btcjobcnt,
    lv_memory_id           TYPE char22,
    lv_blk                 TYPE sy-tabix,
    lwa_bgwp_list          LIKE LINE OF gt_bgwp_list,
    lt_wpinfo              TYPE TABLE OF wpinfo,
    lt_final_proc          TYPE TABLE OF wpinfo,
    lt_clrq_indx           TYPE TABLE OF /cgdc/_clrq_indx,
    lt_objnr_db            TYPE TABLE OF /cgdc/_clrq_objr.


****DELETE VARIABLE

  DATA : lt_clritkey      TYPE TABLE OF /cgdc/s_clrqit_key,
         lt_clritkey_t    TYPE TABLE OF /cgdc/s_clrqit_key,
         lt_clritkey_temp TYPE TABLE OF /cgdc/s_clrqit_key,
         lwa_clritkey     TYPE /cgdc/s_clrqit_key.
  DATA : lwa_clrqhd TYPE /cgdc/s_clrqhd.
  DATA: lwa_clrq_itm_new TYPE /cgdc/s_clrqit_fcat.
  DATA: lwa_clrq_itm_new2 TYPE /cgdc/s_clrqit_fcat.
  DATA: lt_clrqit TYPE TABLE OF /cgdc/s_clrqit.
  DATA: lt_clrqit_last_billed TYPE TABLE OF /cgdc/s_clrqit.

  DATA: lt_clrqit_it TYPE TABLE OF /cgdc/s_clrqit.
  DATA: lwa_clrqit TYPE /cgdc/s_clrqit.
  DATA: lwa_critm2 TYPE /cgdc/s_clrqit.
  DATA: lt_rtbppc_swap TYPE TABLE OF /cgdc/t_rtbppc.
  DATA: lwa_clrqpit TYPE /cgdc/s_clrqpit,
        lt_clrqpit  TYPE TABLE OF /cgdc/s_clrqpit.

  DATA: lt_clrqcost TYPE TABLE OF /cgdc/s_clrqcost.
  DATA: lt_crptr TYPE TABLE OF /cgdc/s_clrqpt.
  DATA: lwa_item_old TYPE /cgdc/s_clrqit.

  DATA: lt_dd03l_it TYPE TABLE OF dd03l,
        lt_dd03l_cn TYPE TABLE OF dd03l,
        lwa_dd03l   TYPE dd03l.
  DATA: lt_crcon TYPE TABLE OF /cgdc/_clrqcn.
  DATA: lwa_crcon       TYPE  /cgdc/_clrqcn,
        lwa_crcon_delta TYPE  /cgdc/_clrqcn,
        lwa_crcon_new   TYPE  /cgdc/_clrqcn,
        lwa_crcon_new_t TYPE  /cgdc/_clrqcn,
        lt_coep_ori     TYPE  /cgdc/tt_coep_ori,
        ls_coep_ori     TYPE  /cgdc/s_coep_ori,
        ls_clrqit       TYPE  /cgdc/s_clrqit,
        ls_clrqbi       TYPE  /cgdc/s_clrqbi,
        ls_clrqdoc      TYPE  /cgdc/s_clrq_doc.

  FIELD-SYMBOLS : <lwa_wa1> TYPE any,
                  <lwa_wa2> TYPE any,
                  <lv_val1> TYPE any,
                  <lv_val2> TYPE any,
                  <lv_val3> TYPE any.


  FIELD-SYMBOLS : <lwa_clrit_sub>          TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrit_item>         TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrit_delta>        TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrcn_old>          TYPE /cgdc/s_clrqcn.
  FIELD-SYMBOLS : <lwa_clrcn_delta>        TYPE /cgdc/s_clrqcn.
  FIELD-SYMBOLS : <lwa_crcon_copied>       TYPE /cgdc/s_clrqcn.
  FIELD-SYMBOLS : <lwa_critm_copied>       TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrqit_last_copied> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrqbi>             TYPE /cgdc/s_clrqbi.
  DATA: lwa_clrqpcn TYPE  /cgdc/_clrqpcn.
  DATA: lt_clrno TYPE TABLE OF /cgdc/s_clrqno.
  DATA: lwa_clrno TYPE /cgdc/s_clrqno.
  DATA: lwa_return TYPE /cgdc/s_message."bapiret2.
  DATA: lv_lock TYPE sysubrc.
  DATA: lt_clrqdoc TYPE TABLE OF /cgdc/s_clrq_doc.
  DATA lwa_rtbp TYPE /cgdc/t_rtbp.
  DATA: lv_one_qty_amt TYPE netwr_ap.
  DATA: lv_copied_item_line    TYPE i.
  DATA: lt_crcon_copied   TYPE /cgdc/tt_clrqcn,
        lt_crcon_copied_t TYPE /cgdc/tt_clrqcn.
  DATA: lwa_last_billed TYPE /cgdc/s_clrqit.
  DATA: lwa_crbinr TYPE /cgdc/s_clrqbi.
  DATA: lv_invalid TYPE flag.
  DATA : lt_clrqpit_key TYPE TABLE OF /cgdc/_clrqpit.
  DATA : lt_clrqpit_temp TYPE TABLE OF /cgdc/_clrqpit.
  DATA : lwa_clrqpit_key TYPE /cgdc/_clrqpit.
  DATA: lwa_clnmcs  TYPE /cgdc/s_rtbclnmcs.
  DATA: lv_action_cd TYPE /cgdc/rtb_rprc_actn_code.
  DATA: lt_prps    TYPE TABLE OF prps,
        lwa_prps   TYPE prps,
        lwa_wbsmcs TYPE /cgdc/s_wbsmcs.
*******************************************************DELETE VARIABLE


*- get maximum available servers at a given point of time
  SELECT DISTINCT applserver
                  FROM rzllitab
                  INTO TABLE @DATA(lt_server)
                  WHERE classname =  @ls_parallel_process-server_group.
*- get number of background processess available
  LOOP AT lt_server INTO DATA(ls_server).
    CLEAR lt_wpinfo[].
    CALL FUNCTION 'TH_GET_WPINFO'
      EXPORTING
        srvname    = ls_server-applserver
      TABLES
        wplist     = lt_wpinfo
      EXCEPTIONS
        send_error = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.
*- get all work processes in the server
    APPEND LINES OF lt_wpinfo TO lt_final_proc.
  ENDLOOP.

*- get open work processes
  IF ls_parallel_process-background_job EQ abap_true.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-149 .
    DELETE lt_final_proc WHERE wp_status NE TEXT-150.
  ELSE.
    DELETE lt_final_proc WHERE wp_typ NE TEXT-151 AND wp_status NE TEXT-150.
  ENDIF.
  DESCRIBE TABLE lt_final_proc LINES DATA(lv_times).
*- get optimal block size
  DESCRIBE TABLE gt_clrqsrc LINES DATA(lv_data).


  IF lv_times IS NOT INITIAL   .
    lv_blk = ceil( lv_data DIV lv_times ).
  ENDIF.

  IF lv_blk EQ gc_zero.
    lv_blk = 1.
  ENDIF.

  IF lv_blk LT gs_variables-cmfrq.
    gs_variables-cmfrq = lv_blk.
  ENDIF.

  SELECT clrno
      FROM /cgdc/_clrqhd
      INTO TABLE lt_clrno
      WHERE vgbel = lv_vbeln.
  IF sy-subrc = 0.
    SELECT * FROM
           coep AS c INNER JOIN /cgdc/_clrqcost AS s
           ON    c~belnr = s~cbelnr
           AND   c~buzei = s~cbuzei
           AND   c~gjahr = s~cgjahr
           AND   c~bukrs = s~crbukrs
           INTO CORRESPONDING FIELDS OF TABLE gt_coep
           FOR ALL ENTRIES IN lt_clrno
           WHERE s~clrno = lt_clrno-clrno.
    IF  sy-subrc = 0.
      SORT gt_coep.
    ENDIF.

  ENDIF.

  IF lv_rv_flag IS NOT INITIAL.
    SELECT *
      FROM /cgdc/_clrqit
      INTO CORRESPONDING FIELDS OF TABLE lt_clrqpit_key
      FOR ALL ENTRIES IN lt_clrno
      WHERE clrno = lt_clrno-clrno.
  ELSE.
    SELECT *
      FROM /cgdc/_clrqpit
      INTO TABLE lt_clrqpit_key
      FOR ALL ENTRIES IN lt_clrno
      WHERE clrno = lt_clrno-clrno.
    IF sy-subrc = 0 OR gt_clrqpit[] IS NOT INITIAL.
      IF lt_clrqpit_key[] IS INITIAL.
        lt_clrqpit_key[] = CORRESPONDING #( gt_clrqpit[] ).
        CLEAR ls_clrqdoc.
        ls_clrqdoc = gs_clrqdoc_infocus.
      ELSE.
        REFRESH gt_clrqpit[].
      ENDIF.
    ENDIF.
  ENDIF.

  LOOP AT lt_clrno INTO lwa_clrno.
    CLEAR : gs_clrqdoc_infocus,
            lt_clritkey_t.
    LOOP AT lt_clrqpit_key INTO lwa_clrqpit_key WHERE clrno = lwa_clrno-clrno.
      MOVE-CORRESPONDING lwa_clrqpit_key TO lwa_clritkey.
      APPEND lwa_clritkey TO lt_clritkey_t.
    ENDLOOP.
    PERFORM set_calc_req_item_doc_infocus USING lt_clritkey_t
                                         CHANGING lv_lock.
    PERFORM select_realtime_billprf_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.

    SELECT SINGLE *
     FROM /cgdc/_clrqpcn
      INTO  lwa_clrqpcn
       WHERE vbeln = gs_clrqdoc_infocus-x-crhdr-vgbel.
    IF sy-subrc <> 0 OR gs_rtbp-pnptb IS INITIAL.

      gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
      PERFORM read_contract_details USING gs_clrqdoc_infocus-x-crhdr-vgbel.
      PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                       gs_clrqdoc_infocus-x-crhdr-vkorg
                       gs_clrqdoc_infocus-x-crhdr-vtweg
                       gs_clrqdoc_infocus-x-crhdr-spart
                       gc_auth_actv-reprice_all
                       space
                 CHANGING lv_invalid.
      IF lv_invalid IS NOT INITIAL .
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-090.
        gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
        gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
        gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
        gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
        CLEAR gs_messages.
        PERFORM initialize_document_data .
        EXIT.
      ENDIF.

      SORT gs_clrqdoc_infocus-x-crcon BY clrdit DESCENDING.
      DELETE lt_clritkey_t WHERE clrsit = gc_clrsit_low.
      DELETE lt_clrqpit_key WHERE clrsit = gc_clrsit_low.

      "PARALLEL PROCESSING
      DO.
        gs_parallel_porcess-total_session_count = gs_parallel_porcess-total_session_count + 1.
        CLEAR lv_no_attempt.
        IF lt_clrqpit_key IS INITIAL.
          EXIT.
        ENDIF.

        CLEAR lv_row_count.
        LOOP AT lt_clrqpit_key INTO lwa_clrqpit_key.
          lv_row_count = lv_row_count + 1.
          IF lv_row_count  GT gs_variables-cmfrq .
            EXIT.
          ENDIF.

          APPEND lwa_clrqpit_key TO lt_clrqpit_temp.
          DELETE lt_clrqpit_key.
        ENDLOOP.

        CONCATENATE gc_job_name1 lv_vbeln TEXT-152 gs_parallel_porcess-total_session_count INTO lv_job_name.
        CONDENSE lv_job_name NO-GAPS.

        CALL FUNCTION 'JOB_OPEN'
          EXPORTING
            jobname          = lv_job_name
          IMPORTING
            jobcount         = lv_job_number
          EXCEPTIONS
            cant_create_job  = 1
            invalid_job_data = 2
            jobname_missing  = 3
            OTHERS           = 4.
        IF sy-subrc NE 0.
          EXIT.
        ENDIF.

        "MEM.ID And Pass Data

        "replace with guid
        TRY.
            cl_system_uuid=>if_system_uuid_static~create_uuid_c22( RECEIVING uuid = DATA(lv_guid) ).
          CATCH cx_uuid_error.
        ENDTRY.

        lv_memory_id = lv_guid.
        EXPORT lt_clrqpit_temp TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id.

        IF lv_rv_flag IS NOT INITIAL.
          SUBMIT (gc_clrq_process_program) USING SELECTION-SCREEN gc_screen-clrq_process_scrn
            WITH p_memid   = lv_memory_id
            WITH r_crt  = abap_false
            WITH r_repfl  = abap_true
            WITH p_parall = abap_true
            WITH p_bcg = abap_true
            WITH p_noprc = gs_variables-no_pricing
            WITH so_vbeln  = lv_vbeln
            VIA JOB lv_job_name
            NUMBER lv_job_number
            AND RETURN.
        ELSE.
          SUBMIT (gc_clrq_process_program)  USING SELECTION-SCREEN gc_screen-clrq_process_scrn
        WITH p_memid   = lv_memory_id
        WITH r_crt  = abap_false
        WITH r_reprc  = abap_true
        WITH p_parall = abap_true
        WITH p_bcg = abap_true
        WITH p_noprc = gs_variables-no_pricing
        WITH so_vbeln  = lv_vbeln
        VIA JOB lv_job_name
        NUMBER lv_job_number
        AND RETURN.
        ENDIF.

        DO.
****Job CLOSE (Send the job to background processing system)
          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              jobcount             = lv_job_number
              jobname              = lv_job_name
              strtimmed            = abap_true
            EXCEPTIONS
              cant_start_immediate = 1
              invalid_startdate    = 2
              jobname_missing      = 3
              job_close_failed     = 4
              job_nosteps          = 5
              job_notex            = 6
              lock_failed          = 7
              invalid_target       = 8
              OTHERS               = 9.


          IF sy-subrc NE 0.
            lv_no_attempt = lv_no_attempt + 1.
            IF lv_no_attempt GE ls_parallel_process-retrie.
              lv_max_attempt_failure = abap_true.
              EXIT.
            ELSE.
              WAIT UP TO ls_parallel_process-max_wait SECONDS.
            ENDIF.

          ELSE.
            CLEAR lwa_bgwp_list.
            lwa_bgwp_list-task_name = lv_job_name.
            lwa_bgwp_list-task_number = lv_job_number.
            lwa_bgwp_list-mem_id = lv_memory_id.
            APPEND lwa_bgwp_list TO gt_bgwp_list.

            gs_parallel_porcess-active_session_count = gs_parallel_porcess-active_session_count + 1.
            EXIT.
          ENDIF.
        ENDDO.

        IF NOT lv_max_attempt_failure IS INITIAL.
          EXIT.
        ENDIF.
        IF gs_parallel_porcess-active_session_count GE lv_times. "T ls_parallel_process-max_process.
          PERFORM active_less_than_max_wait USING ls_parallel_process
                                                  lv_times
                                         CHANGING gs_parallel_porcess-active_session_count.
        ENDIF.
      ENDDO.
      IF gs_parallel_porcess-active_session_count GT 0.
        PERFORM active_less_than_max_wait USING ls_parallel_process
                                                0
                                         CHANGING gs_parallel_porcess-active_session_count.
      ENDIF.
    ENDIF.
  ENDLOOP.
  gs_variables-exit_loop = abap_true.
ENDFORM.
FORM updt_bg_repricing USING  lv_memory_id TYPE char22
                               lv_vbeln     TYPE vbeln
                               lv_rv_flag          TYPE flag.
  DATA: lt_objnr_temp    TYPE /cgdc/t_objnr,
        lv_subrc         TYPE sy-subrc,
        lt_clrqsrc       TYPE /cgdc/tt_clrq_cost_keys,
        lv_memory_id_1   TYPE char22,
        lv_memory_id_3   TYPE char22,
        lv_memory_id_4   TYPE char22,
        lv_memory_id_5   TYPE char22,
        lv_memory_id_2   TYPE char22,
        lv_tb_key_mem_id TYPE char22,

        lt_return        TYPE  /cgdc/t_message.
  DATA : lt_clrqpit_temp TYPE /cgdc/tt_clrqpit.
  DATA: lt_coep_ori     TYPE  /cgdc/tt_coep_ori.
  DATA gt_coep                     TYPE TABLE OF coep.
  WHILE 1 = 0.
  ENDWHILE.
  CONCATENATE lv_memory_id '_1' INTO lv_memory_id_1.
  CONCATENATE lv_memory_id '_2' INTO lv_memory_id_2.
  CONCATENATE lv_memory_id '_3' INTO lv_memory_id_3.
  CONCATENATE lv_memory_id '_4' INTO lv_memory_id_4.
  gs_variables-bg_prl_run = abap_true.
  IMPORT lt_clrqpit_temp FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_1.
  IMPORT lt_coep_ori FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_2.
  IMPORT gs_rtbp FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_3.
  IMPORT gt_coep FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_4.

  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_1.
  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_2.
  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_3.
  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_4.

  CALL FUNCTION '/CGDC/CLRQ_RTB_PRL_REPRICE'
    EXPORTING
      i_vbeln               = lv_vbeln
      it_clrqpitkey_t       = lt_clrqpit_temp
      it_coep_ori           = lt_coep_ori
      is_rtbp               = gs_rtbp
    IMPORTING
      et_return_tab         = lt_return
      et_item_key           = gt_bg_crt_keys
    EXCEPTIONS
      communication_failure = 1
      system_failure        = 2
      resource_failure      = 3
      OTHERS                = 4.

  EXPORT gt_bg_crt_keys TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id. "export recetly made Items
  CLEAR gt_bg_crt_keys.
  gs_variables-exit_loop = abap_true.
ENDFORM.
FORM updt_validate_bg USING  lv_memory_id TYPE char22
                               lv_vbeln     TYPE vbeln.
  DATA : ls_clrq_doc TYPE /cgdc/s_clrq_doc.
  DATA : lt_clrq_doc TYPE TABLE OF /cgdc/s_clrq_doc.
  DATA:
    lv_memory_id_1 TYPE char20,
    lv_memory_id_2 TYPE char20.
  DATA lt_clrit_key_t TYPE TABLE OF /cgdc/s_clrqit_key.

  CONCATENATE lv_memory_id '_1' INTO lv_memory_id_1.
  CONCATENATE lv_memory_id '_2' INTO lv_memory_id_2.

  IMPORT lt_clrit_key_t FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_1.
  IMPORT gs_variables FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id_2.

  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_1.
  DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id_2.

  CALL FUNCTION '/CGDC/RTB_VALIDATE_CLRQ'
    EXPORTING
      it_clritkey = lt_clrit_key_t
    IMPORTING
      es_clrq_doc = ls_clrq_doc.

  APPEND ls_clrq_doc TO lt_clrq_doc.
  CALL FUNCTION '/CGDC/CLRQ_SAVE'
    EXPORTING
      i_set_update_task = 'X'
      i_commit_work     = ' '
    CHANGING
      ct_clrq_doc       = lt_clrq_doc
    EXCEPTIONS
      no_change         = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
    "error handling
  ENDIF.

ENDFORM.
FORM display_controls_0200.
  IF go_calc_reqitm_ref_cont IS INITIAL.

    CREATE OBJECT go_calc_reqitm_ref_cont
      EXPORTING
        container_name              = gc_custom_area-itm_ref_doc
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

  ENDIF.

  PERFORM build_ref_itm_doc_alv.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form determine_kalsm
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_CRRQ_HDR_NEW_VKORG
*&      --> LS_CRRQ_HDR_NEW_VTWEG
*&      --> LS_CRRQ_HDR_NEW_SPART
*&      --> LS_CRRQ_HDR_NEW_KUNNR
*&      --> LS_CRRQ_HDR_NEW_CLRQT
*&---------------------------------------------------------------------*
FORM determine_kalsm  CHANGING ls_crrq_hdr_new TYPE /cgdc/s_clrqhd.

  DATA : lv_vtweg TYPE vtweg,
         lv_spart TYPE spart,
         lv_kalks TYPE kalks,
         lv_kalvg TYPE kalvg.

  SELECT SINGLE vtwko
    FROM tvkov
    WHERE vkorg = @ls_crrq_hdr_new-vkorg
    AND   vtweg = @ls_crrq_hdr_new-vtweg
    INTO @lv_vtweg.

  CHECK lv_vtweg IS NOT INITIAL.
  SELECT SINGLE spako
    FROM tvkos
    WHERE vkorg = @ls_crrq_hdr_new-vkorg
    AND   spart = @ls_crrq_hdr_new-spart
    INTO @lv_spart.

  CHECK lv_spart IS NOT INITIAL.
  SELECT SINGLE kalks
    FROM knvv
    WHERE kunnr = @ls_crrq_hdr_new-kunnr
    AND   vkorg = @ls_crrq_hdr_new-vkorg
    AND   vtweg = @lv_vtweg
    INTO @lv_kalks.

  CHECK lv_kalks IS NOT INITIAL.
  SELECT SINGLE kalvg
     FROM /cgdc/t_clrtype
     WHERE clrqt = @ls_crrq_hdr_new-clrqt
     INTO @lv_kalvg.


  IF NOT lv_vtweg IS INITIAL
    AND NOT lv_spart IS INITIAL
    AND NOT lv_kalks IS INITIAL
    AND NOT lv_kalvg IS INITIAL
    AND NOT ls_crrq_hdr_new-vkorg IS INITIAL  .

    SELECT SINGLE kalsm
      FROM t683v
      WHERE vkorg  = @ls_crrq_hdr_new-vkorg
      AND   vtweg = @lv_vtweg
      AND   spart = @lv_spart
      AND   kalks = @lv_kalks
      AND   kalvg = @lv_kalvg
      INTO  @ls_crrq_hdr_new-kalsm.

  ENDIF.


ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2022] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-211COINCGDC (CIS-AD S/4 Hana 2021)
*
* DESCRIPTION: /CGDC/LCLRQMF0E
**********************************************************

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0E.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form exclude_fcodes
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> SY_DYNNR
*&      <-- LT_FCODES_TO_EXCLUDE
*&---------------------------------------------------------------------*
FORM exclude_fcodes USING lv_screen            TYPE sy-dynnr
                 CHANGING lt_fcodes_to_exclude TYPE t_sy_ucomm.

  DATA: lv_tabix TYPE syst-tabix.

  CASE lv_screen.
    WHEN gc_screen-overview.

      IF gs_variables-document_mode EQ gc_mode_display.
        APPEND gc_fcode-save TO lt_fcodes_to_exclude.
        APPEND gc_fcode-create_billing_doc_req TO lt_fcodes_to_exclude.
      ENDIF.

      IF gs_clrqdoc_infocus IS INITIAL.
        APPEND: gc_fcode-save TO lt_fcodes_to_exclude,
                gc_fcode-cancel TO lt_fcodes_to_exclude,
                gc_fcode-back TO lt_fcodes_to_exclude,
                gc_fcode-refresh TO lt_fcodes_to_exclude,
                gc_fcode-create_billing_doc_req TO lt_fcodes_to_exclude,
                gc_fcode-upco TO lt_fcodes_to_exclude,
                gc_fcode-repr TO lt_fcodes_to_exclude.
      ELSE.

        IF gs_variables-max_on_dmd_excd NE gc_max_on_dmd_excd-r OR
           gs_variables-document_mode   NE gc_mode_change.
          APPEND gc_fcode-upco TO lt_fcodes_to_exclude.
        ENDIF.

        IF gs_variables-max_on_dmd_excd NE gc_max_on_dmd_excd-y AND gs_variables-partial_repr IS INITIAL.
          APPEND gc_fcode-repr TO lt_fcodes_to_exclude.
        ENDIF.

      ENDIF.

      IF NOT gs_variables-external_call IS INITIAL.
        APPEND: gc_fcode-cancel TO lt_fcodes_to_exclude,
                gc_fcode-dich TO lt_fcodes_to_exclude.
      ENDIF.

*-Change log buttons is required only when CLRQ document is given
      IF gs_clrqdoc_infocus-clrno IS INITIAL.
        APPEND :gc_fcode-chlog     TO lt_fcodes_to_exclude,
                gc_fcode-chlog_set TO lt_fcodes_to_exclude.
      ENDIF.

    WHEN gc_screen-item_subsequent_details.

      APPEND gc_fcode-continue TO lt_fcodes_to_exclude.
    WHEN gc_screen-calc_grp_cond_popup.
      IF gs_variables-clcgrp_indx_infocus = gc_one."'1'.
        APPEND gc_fcode-calcgrp_previtem TO lt_fcodes_to_exclude.
      ELSE.
        DESCRIBE TABLE <gt_calc_grp_data> LINES lv_tabix.
        IF lv_tabix EQ gs_variables-clcgrp_indx_infocus.
          APPEND gc_fcode-calcgrp_nextitem TO lt_fcodes_to_exclude.
        ENDIF.
      ENDIF.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form exclude_toolbar_buttons
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LT_TOOLBAR_EXCLUDE
*&---------------------------------------------------------------------*
FORM exclude_toolbar_buttons USING lv_call_for CHANGING lt_toolbar_excludes TYPE ui_functions.

  APPEND cl_gui_alv_grid=>mc_fc_info               TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_detail             TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_graph              TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_print              TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_views              TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_check              TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_refresh            TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_mb_paste              TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_append_row     TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy           TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row       TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_cut            TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row     TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row     TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_move_row       TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste          TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste_new_row  TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_loc_undo           TO lt_toolbar_excludes.
  APPEND cl_gui_alv_grid=>mc_fc_filter             TO lt_toolbar_excludes.

  IF lv_call_for NE gc_call-1. "'1'.
    APPEND cl_gui_alv_grid=>mc_mb_export             TO lt_toolbar_excludes.
  ENDIF.

  IF lv_call_for EQ gc_call-3 ."'3'.
    APPEND cl_gui_alv_grid=>mc_fc_sum                TO lt_toolbar_excludes.
    APPEND cl_gui_alv_grid=>mc_fc_subtot             TO lt_toolbar_excludes.
    APPEND cl_gui_alv_grid=>mc_mb_subtot             TO lt_toolbar_excludes.
    APPEND cl_gui_alv_grid=>mc_mb_sum                TO lt_toolbar_excludes.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form enqueue_calc_request
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS_X_CRHDR_VBE
*&      <-- LV_SUBRC
*&---------------------------------------------------------------------*
FORM enqueue_calc_request  USING lv_clrno   TYPE /cgdc/clrqno
                                 lv_enqmode TYPE enqmode
                        CHANGING lv_subrc   TYPE sy-subrc.
  DATA: lv_msgv1 TYPE symsg-msgv1.
  DATA : lv_invalid TYPE flag.
  DATA: lwa_message TYPE /cgdc/s_message.
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                               gs_clrqdoc_infocus-x-crhdr-vkorg
                               gs_clrqdoc_infocus-x-crhdr-vtweg
                               gs_clrqdoc_infocus-x-crhdr-spart
                               gc_auth_actv-change "'02'
                               space
                         CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL AND gs_variables-process_type <> gc_process_type-doc_view.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i090(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-090.
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    PERFORM initialize_document_data .
    RETURN.
  ELSEIF lv_invalid IS NOT INITIAL.
    gs_variables-document_mode = gs_variables-overview_mode = gc_mode_display.
    PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                             gs_clrqdoc_infocus-x-crhdr-vkorg
                             gs_clrqdoc_infocus-x-crhdr-vtweg
                             gs_clrqdoc_infocus-x-crhdr-spart
                             gc_auth_actv-change "'02'
                             space
                       CHANGING lv_invalid.
    IF lv_invalid IS NOT INITIAL .
      IF gs_variables-call_from_ui IS INITIAL.
        MESSAGE i089(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                              gs_clrqdoc_infocus-x-crhdr-vkorg
                                              gs_clrqdoc_infocus-x-crhdr-vtweg
                                              gs_clrqdoc_infocus-x-crhdr-spart.
      ELSE.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-089.
        gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
        gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
        gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
        gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
        CLEAR gs_messages.
      ENDIF.
      PERFORM initialize_document_data .
    ENDIF.
  ENDIF.


  IF lv_clrno IS NOT INITIAL.
    CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
      EXPORTING
        mode_/cgdc/_clrqhd = lv_enqmode
        mandt              = sy-mandt
        clrno              = lv_clrno
      EXCEPTIONS
        foreign_lock       = 1
        system_failure     = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
      lv_subrc = sy-subrc.
      IF gs_variables-collect_message IS INITIAL.
        lv_msgv1 = sy-msgv1.
        IF gs_variables-process_type <> gc_process_type-realtime. "don't trigger for realtime
          MESSAGE i009(/cgdc/clrq) WITH lv_clrno lv_msgv1.
        ENDIF.
        gs_variables-document_mode = gs_variables-overview_mode = gc_mode_display.
      ELSE.
        lwa_message-msgty = gc_message_type-error.
        lwa_message-msgid = gc_clrq_msg_cls. "'/CGDC/CLRQ'.
        lwa_message-msgnr = gc_msg_cls_msgnr-009.
        lwa_message-msgv1 = lv_clrno.
        lwa_message-msgv2 = sy-msgv1.
        APPEND lwa_message TO gt_messages.
      ENDIF.
*      RAISE calc_req_locked.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_xref_document_number
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_xref_document_number USING lv_numki
                                    lv_number_range_object
                           CHANGING lv_doc_no TYPE vbeln.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = lv_numki
      object                  = lv_number_range_object
    IMPORTING
      number                  = lv_doc_no
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMF0F
**********************************************************



*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMF0F
*&---------------------------------------------------------------------*
FORM fcode_min.

  CHECK gs_variables-worklist_is_visible EQ abap_true.

  CALL METHOD go_docking_container->set_extension
    EXPORTING
      extension  = gc_cont_min_ext
    EXCEPTIONS
      cntl_error = 1
      OTHERS     = 2.

ENDFORM.                    "fcode_min

FORM fcode_max.

  CHECK gs_variables-worklist_is_visible EQ abap_true.

  CALL METHOD go_docking_container->set_extension
    EXPORTING
      extension  = gc_cont_max_ext
    EXCEPTIONS
      cntl_error = 1
      OTHERS     = 2.

ENDFORM.

FORM fcode_dhn.

  IF gs_variables-worklist_is_visible EQ abap_true.
    CLEAR gs_variables-worklist_is_visible.
  ELSE.
    gs_variables-worklist_is_visible = abap_true.
  ENDIF.

  CALL METHOD go_docking_container->set_visible
    EXPORTING
      visible           = gs_variables-worklist_is_visible
    EXCEPTIONS
      cntl_error        = 1
      cntl_system_error = 2
      OTHERS            = 3.

ENDFORM.

FORM fcode_whclk.

  DATA: lv_answer.
  gs_variables-process_type = gc_process_type-doc_view.
  IF NOT gs_clrqdoc_infocus IS INITIAL.

    PERFORM confirm_changes USING lv_answer.

    IF lv_answer EQ gc_answer-canc." 'A'.

      IF ok_code = gc_fcode-save.
        PERFORM save_calc_req_doc_infocus USING space.
        CLEAR ok_code.
      ELSE.
        CLEAR: gs_variables-selected_vbeln.
        EXIT.
      ENDIF.

    ELSE.

      IF gs_variables-document_mode EQ gc_mode_change.
        PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-clrno
                                           gc_enq_mode-write.
      ELSEIF gs_variables-document_mode EQ gc_mode_create.
        PERFORM initialize_document_data.
      ENDIF.

    ENDIF.

  ENDIF.
  PERFORM set_calc_request_doc_infocus USING gs_variables-selected_vbeln.
  gs_variables-refersh_document = abap_true.
  gs_variables-refresh_calc_req_items_grid = abap_true.
ENDFORM.

FORM fcode_tab_gen.

  ts_hdr_details-activetab = gc_fcode-tab_general.

ENDFORM.

FORM fcode_tab_hptr.

  ts_hdr_details-activetab = gc_fcode-tab_hdr_partners.

ENDFORM.

FORM fcode_tab_hcond.

  ts_hdr_details-activetab = gc_fcode-tab_hdr_conditions.

ENDFORM.

FORM fcode_tab_iptr.

  ts_itm_details-activetab = gc_fcode-tab_itm_partners.

ENDFORM.
FORM fcode_tab_blhs.
  ts_hdr_details-activetab = gc_fcode-tab_billing_history.
ENDFORM.

FORM fcode_tab_icond.

  ts_itm_details-activetab = gc_fcode-tab_itm_conditions.

ENDFORM.

FORM fcode_tab_icost.

  ts_itm_details-activetab = gc_fcode-tab_itm_cost_sht.

ENDFORM.

FORM fcode_dich.

  DATA: lv_answer,
        lv_exit,
        lv_ans    TYPE c,
        lv_lock   TYPE flag.
*  DATA : ls_clrqbs_doc TYPE /cgdc/s_clrqbs_doc.

  CLEAR: lv_ans.
  gs_variables-process_type = gc_process_type-doc_view.
  IF gs_variables-overview_mode EQ gc_mode_change.
    IF gs_clrqdoc_infocus-clrno IS NOT INITIAL.
      IF NOT gs_variables-calc_changed IS INITIAL..

        PERFORM confirm_to_save.

        CLEAR lv_lock.
        WHILE lv_lock IS INITIAL.
          CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
            EXPORTING
              mode_/cgdc/_clrqhd = gc_lock_mode-conflict_x  "'U'
              mandt              = sy-mandt
              clrno              = gs_clrqdoc_infocus-x-crhdr-clrno
            EXCEPTIONS
              foreign_lock       = 1
              system_failure     = 2
              OTHERS             = 3.
          IF sy-subrc = 0.
            lv_lock = abap_true.
          ELSE.
            PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                           gc_enq_mode-write.
          ENDIF.
        ENDWHILE.
      ELSE.

        CLEAR lv_lock.
        WHILE lv_lock IS INITIAL.
          CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
            EXPORTING
              mode_/cgdc/_clrqhd = gc_lock_mode-conflict_x " 'U'
              mandt              = sy-mandt
              clrno              = gs_clrqdoc_infocus-x-crhdr-clrno
            EXCEPTIONS
              foreign_lock       = 1
              system_failure     = 2
              OTHERS             = 3.
          IF sy-subrc = 0.
            lv_lock = abap_true.
          ELSE.
            PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                               gc_enq_mode-write.
          ENDIF.
        ENDWHILE.
      ENDIF.
    ENDIF.
    gs_variables-overview_mode = gc_mode_display.
    gs_variables-document_mode = gc_mode_display.
* MISSING CODE - Will introduce after we make document editable
  ELSE.

    gs_variables-overview_mode = gc_mode_change.
    gs_variables-document_mode = gc_mode_change.
    IF gs_clrqdoc_infocus-clrno IS NOT INITIAL .
      PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-clrno.
      PERFORM fcode_upco.
      PERFORM redetermine_billing_item.
    ENDIF.

    "If items missing when clicked on change mode, same pop-ups
    "displayed as when UPCO button is clicked

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_pricing_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CRITM
*&      --> GS_CLRQDOC_INFOCUS
*&      <-- LS_KOMK
*&      <-- LWA_KOMP
*&---------------------------------------------------------------------*
FORM fill_pricing_data     USING lwa_critm TYPE /cgdc/s_clrqit
                                 lv_calculation_type
                                 ls_crdoc  TYPE /cgdc/s_clrq_doc
                        CHANGING ls_komk   TYPE komk
                                 lwa_komp  TYPE komp.



  DATA: lv_header_spart TYPE spart,
        ls_prodh        TYPE prodh,
        lwa_tvap        TYPE tvap,
        lwa_crptr       TYPE /cgdc/s_clrqpt.

  IF NOT lwa_critm IS INITIAL.
    IF lwa_critm-vgpos IS INITIAL.
      lwa_critm-vgpos = lwa_critm-/cgdc/orgi.
    ENDIF.

    READ TABLE gt_contract_itm INTO DATA(lwa_cont_item)
      WITH KEY vbeln = gs_contract_hdr-vbeln
               posnr = lwa_critm-vgpos.
    IF lwa_cont_item IS NOT INITIAL.
      MOVE-CORRESPONDING lwa_cont_item TO lwa_komp.
      lwa_komp-vgpos = lwa_komp-/cgdc/orgi.
    ENDIF.

    lwa_komp-vgbel = ls_crdoc-x-crhdr-vgbel.
    MOVE-CORRESPONDING gs_kurgv TO lwa_komp.
    MOVE-CORRESPONDING gs_kuwev TO lwa_komp.
    MOVE-CORRESPONDING gs_kuagv TO lwa_komp.
    lv_header_spart = ls_komk-spart.
    MOVE-CORRESPONDING ls_crdoc-x-crhdr TO: lwa_komp.
    MOVE-CORRESPONDING lwa_critm TO: ls_komk, lwa_komp.
    lwa_komp-/cgdc/lstar = lwa_critm-lstar.
    lwa_komp-activity_type = lwa_critm-lstar.
    ls_komk-spart = lv_header_spart.

    READ TABLE ls_crdoc-x-crptr
    INTO lwa_crptr
    WITH KEY clrit = lwa_critm-clrit
             parvw = gc_partner_func-ship_to_party
    BINARY SEARCH.

    IF sy-subrc EQ 0.
      ls_komk-kunwe = lwa_crptr-kunnr.
    ENDIF.

    READ TABLE ls_crdoc-x-crptr
    INTO lwa_crptr
    WITH KEY clrit = lwa_critm-clrno
             parvw = gc_partner_func-vendor
    BINARY SEARCH.

    IF sy-subrc EQ 0.
      ls_komk-lifnr = lwa_crptr-lifnr.
    ENDIF.

    IF NOT lwa_critm-vgpos IS INITIAL.
      lwa_komp-vgpos = lwa_critm-vgpos.
    ELSE.
      lwa_komp-vgpos = lwa_critm-clrit.
    ENDIF.

    lwa_komp-shkzg = space.
    IF lwa_critm-clrit IS INITIAL.
      PERFORM prepare_temp_hdr_itm_no CHANGING lwa_critm.
    ENDIF.
    lwa_komp-kposn = lwa_critm-clrit.
    lwa_komp-taxps = lwa_critm-clrit.
    lwa_komp-kposn = lwa_critm-tmpit.
    ls_komk-knumv = lwa_critm-tmphd.
    IF lwa_critm-pmatn IS INITIAL.
      lwa_komp-pmatn = lwa_critm-matnr.
    ELSE.
      lwa_komp-pmatn = lwa_critm-pmatn.
    ENDIF.

    IF NOT lwa_critm-matnr IS INITIAL.
      lwa_komp-lagme = lwa_critm-zieme.
    ENDIF.

    PERFORM select_tvap USING lwa_critm-pstyv CHANGING lwa_tvap.

    IF NOT lwa_critm-matnr IS INITIAL.

      lwa_komp-lagme = lwa_critm-zieme.
      lwa_komp-prsfd = lwa_tvap-prsfd.
      lwa_komp-evrwr = lwa_tvap-evrwr.
      lwa_komp-kowrr = lwa_tvap-kowrr.
      lwa_komp-vrkme = lwa_critm-zieme.            " DCLM 5764

      IF lwa_critm-zieme = lwa_komp-vrkme.
        lwa_komp-mglme = lwa_komp-mgame.
      ENDIF.

    ENDIF.

    IF lwa_critm-matnr IS INITIAL.
      CLEAR lwa_komp-vrkme.
    ELSE.
    ENDIF.

    CLEAR lwa_komp-shkzg.

    MOVE-CORRESPONDING lwa_critm TO ls_prodh.
    MOVE-CORRESPONDING ls_prodh TO lwa_komp.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_komv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CLRQ_ITM_NEW_KSCHL1
*&      --> LWA_CLRQ_ITM_NEW_KBETR1
*&      --> LWA_CLRQ_ITM_NEW_KWAER1
*&      --> LWA_CLRQ_ITM_NEW_KPEIN1
*&      <-- LT_KOMV
*&---------------------------------------------------------------------*
FORM fill_komv  USING lv_kschl TYPE komv-kschl
                      lv_kbetr TYPE komv-kbetr
                      lv_kwaer TYPE waers
                      lv_kstat TYPE kstat
                      ls_cgrcon TYPE komv
             CHANGING ls_komk TYPE komk
                      ls_komp TYPE komp
                      lt_komv  TYPE komv_tab.

  DATA: lwa_komv TYPE komv,
        lwa_konp TYPE konp,
        lv_cast  TYPE string,
        lv_kpein TYPE kpein.


  IF lv_kschl IS NOT INITIAL.
    CLEAR: lwa_komv.
    lwa_komv-kappl = 'V'.
    lwa_komv-kschl = lv_kschl.

*    SELECT SINGLE * FROM t685a INTO @DATA(ls_t685a) WHERE kschl = @lv_kschl.
*    IF ls_t685a-krech = 'A' AND ls_cgrcon IS NOT INITIAL.
*      lwa_komv-kbetr = ls_cgrcon-kbetr.
*      lwa_komv-waers = ls_cgrcon-waers.
*      lwa_komv-kmein = ls_cgrcon-kmein.
*      lwa_komv-kawrt = ls_cgrcon-kawrt.
*      lwa_komv-kwert = ls_cgrcon-kwert.
*    ELSE.
    lwa_komv-kbetr = lv_kbetr.
    lwa_komv-waers = lv_kwaer.
    lwa_komv-kpein = ls_komp-mgame.
    lwa_komv-kmein = ls_komp-vrkme.
*    ENDIF.
    lv_cast = ls_komp-mgame.
    lwa_komv-kpein = lv_cast+0(5).
    lwa_komv-kposn = ls_komp-kposn.
    lwa_komv-knumv = ls_komk-knumv.
*    Added for negative qunatity
    IF ls_komp-shkzg = abap_true.
      lwa_komv-kbetr = abs( lwa_komv-kbetr ).
    ENDIF.

    CALL FUNCTION 'PRICING_CHECK'
      EXPORTING
        comm_head_i = ls_komk
        comm_item_i = ls_komp
        komv_i      = lwa_komv
        preliminary = 'X'
      IMPORTING
        comm_head_e = ls_komk
        comm_item_e = ls_komp
        komv_e      = lwa_komv
        konp_e      = lwa_konp
      EXCEPTIONS
        condition   = 1
        OTHERS      = 2.
    IF sy-subrc <> 0.
    ENDIF.

    IF lv_kstat IS NOT INITIAL.
      lwa_komv-kstat = lv_kstat.
    ENDIF.
    APPEND lwa_komv TO lt_komv.

  ENDIF.
ENDFORM.

FORM fill_kurgv USING ls_crrq_hdr TYPE /cgdc/s_clrqhd.


  DATA: lv_bukrs  TYPE bukrs,
        lwa_vtcom TYPE vtcom,
        lwa_crptr TYPE /cgdc/s_clrqpt,
        lwa_knb1  TYPE knb1.

  CHECK NOT ls_crrq_hdr-kunnr IS INITIAL.
  MOVE-CORRESPONDING ls_crrq_hdr TO lwa_vtcom.
  lwa_vtcom-kunnr = ls_crrq_hdr-kunnr.
  CLEAR: lwa_crptr.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  INTO lwa_crptr
  WITH KEY clrit = gc_posnr
           parvw = gc_partner_func-payer.

  IF sy-subrc = 0.
    lwa_vtcom-kunnr = lwa_crptr-kunnr.
  ENDIF.

  CALL FUNCTION 'VIEW_KURGV'
    EXPORTING
      comwa      = lwa_vtcom
    IMPORTING
      rgwa       = gs_kurgv
    EXCEPTIONS
      no_kna1    = 1
      no_knkk    = 2
      no_knvv    = 3
      no_tvta    = 4
      no_tpakd   = 5
      no_address = 6
      OTHERS     = 7.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM fill_kuwev USING ls_crrq_hdr TYPE /cgdc/s_clrqhd.
  DATA: lv_bukrs  TYPE bukrs,
        lwa_vtcom LIKE vtcom,
        lwa_crptr TYPE /cgdc/s_clrqpt,
        lwa_knb1  LIKE knb1.

  CHECK NOT ls_crrq_hdr-kunnr IS INITIAL.
  MOVE-CORRESPONDING ls_crrq_hdr TO lwa_vtcom.
  lwa_vtcom-kunnr = ls_crrq_hdr-kunnr.
  CLEAR: lwa_crptr.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  INTO lwa_crptr
  WITH KEY clrit = gc_posnr
           parvw = gc_partner_func-ship_to_party.

  IF sy-subrc = 0.
    lwa_vtcom-kunnr = lwa_crptr-kunnr.
  ENDIF.

  CALL FUNCTION 'VIEW_KUWEV'
    EXPORTING
      comwa      = lwa_vtcom
    IMPORTING
      wewa       = gs_kuwev
    EXCEPTIONS
      no_kna1    = 1
      no_knva    = 2
      no_knvi    = 3
      no_knvs    = 4
      no_knvv    = 5
      no_tpakd   = 6
      no_address = 7
      OTHERS     = 8.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  kuagv_fill
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_kuagv USING ls_crrq_hdr TYPE /cgdc/s_clrqhd.


  DATA: lv_bukrs  TYPE bukrs,
        lwa_vtcom LIKE vtcom,
        lwa_crptr TYPE /cgdc/s_clrqpt,
        lwa_knb1  LIKE knb1.

  CHECK NOT ls_crrq_hdr-kunnr IS INITIAL.
  MOVE-CORRESPONDING ls_crrq_hdr TO lwa_vtcom.
  lwa_vtcom-kunnr = ls_crrq_hdr-kunnr.

  SELECT SINGLE *
    FROM knb1
    INTO CORRESPONDING FIELDS OF lwa_knb1
    WHERE kunnr EQ lwa_vtcom-kunnr
      AND bukrs EQ lv_bukrs.

  IF sy-subrc NE 0
    OR lwa_knb1-loevm EQ abap_true.
  ELSE.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-crptr INTO lwa_crptr
  WITH KEY clrit = gc_posnr
           parvw = gc_partner_func-sold_to_party.

  IF sy-subrc = 0.
    lwa_vtcom-kunnr = lwa_crptr-kunnr.
  ENDIF.

  CALL FUNCTION 'VIEW_KUAG2'
    EXPORTING
      comwa      = lwa_vtcom
    IMPORTING
      agwa       = gs_kuagv
    EXCEPTIONS
      no_kna1    = 1
      no_knvv    = 2
      no_tpakd   = 3
      no_address = 4
      OTHERS     = 5.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM fcode_nitm.

  DATA: lv_index           TYPE sy-tabix,
        lwa_critm_fcat     TYPE /cgdc/s_clrqit_fcat,
        lwa_critm_fcat_tmp TYPE /cgdc/s_clrqit_fcat.

  CHECK NOT gs_variables-item_infocus IS INITIAL.
  READ TABLE gt_calc_req_items_fcat
  WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
           clrit = gs_variables-item_infocus
  INTO lwa_critm_fcat.
  CHECK sy-subrc EQ 0.
  lv_index = sy-tabix + 1.
  READ TABLE gt_calc_req_items_fcat INTO lwa_critm_fcat_tmp INDEX lv_index.

  IF sy-subrc EQ 0.
    gs_variables-item_infocus = lwa_critm_fcat_tmp-clrit.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i003(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-003.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

ENDFORM.

FORM fcode_pitm.

  DATA: lv_index           TYPE sy-tabix,
        lwa_critm_fcat     TYPE /cgdc/s_clrqit_fcat,
        lt_critm_fcat      TYPE TABLE OF /cgdc/s_clrqit_fcat,
        lwa_critm_fcat_tmp TYPE /cgdc/s_clrqit_fcat.

  CHECK NOT gs_variables-item_infocus IS INITIAL.

  READ TABLE gt_calc_req_items_fcat
  WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
           clrit = gs_variables-item_infocus
  INTO lwa_critm_fcat.
  CHECK sy-subrc EQ 0.
  lv_index = sy-tabix - 1.
  READ TABLE gt_calc_req_items_fcat INTO lwa_critm_fcat_tmp INDEX lv_index.

  IF sy-subrc EQ 0.
    gs_variables-item_infocus = lwa_critm_fcat_tmp-clrit.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i004(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-004.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

ENDFORM.
FORM fcode_pitm152.
  DATA: lwa_crgrr               TYPE /cgdc/s_clrqgrr.

  FIELD-SYMBOLS: <lwa_calc_grp> TYPE data.

  gs_variables-clcgrp_indx_infocus = gs_variables-clcgrp_indx_infocus - 1.

  READ TABLE <gt_calc_grp_data> ASSIGNING <lwa_calc_grp>
  INDEX gs_variables-clcgrp_indx_infocus.

  IF sy-subrc = 0.
    MOVE-CORRESPONDING <lwa_calc_grp> TO lwa_crgrr.
    gs_variables-calc_grp_knumh = lwa_crgrr-clgrp_knumh.
  ELSE.
    gs_variables-clcgrp_indx_infocus = gs_variables-clcgrp_indx_infocus + 1.
  ENDIF.

ENDFORM.
FORM fcode_nitm152.
  DATA: lwa_crgrr               TYPE /cgdc/s_clrqgrr.

  FIELD-SYMBOLS: <lwa_calc_grp> TYPE data.

  gs_variables-clcgrp_indx_infocus = gs_variables-clcgrp_indx_infocus + 1.

  READ TABLE <gt_calc_grp_data> ASSIGNING <lwa_calc_grp>
  INDEX gs_variables-clcgrp_indx_infocus.
  IF sy-subrc = 0.
    MOVE-CORRESPONDING <lwa_calc_grp> TO lwa_crgrr.
    gs_variables-calc_grp_knumh = lwa_crgrr-clgrp_knumh.

  ELSE.
    gs_variables-clcgrp_indx_infocus = gs_variables-clcgrp_indx_infocus - 1.

  ENDIF.


ENDFORM.
FORM fcode_wl_search.
  PERFORM initialize_document_data.
  gs_variables-process_type = gc_process_type-doc_view.
  PERFORM search_worklist.

ENDFORM.

FORM fcode_back.
  DATA: lv_string TYPE string,
        lv_length TYPE i,
        lv_clrqno TYPE /cgdc/clrqno,
        lv_lock   TYPE flag.

  IF gs_clrqdoc_infocus IS NOT INITIAL.
    IF gs_variables-calc_changed IS NOT INITIAL.
      lv_string = TEXT-047.
      lv_length = strlen( lv_string ).
      IF lv_length < 50.
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string.
      ELSE.
        lv_length = lv_length - 1.
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string+0(49).
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string+49(lv_length).
      ENDIF.

*      AD:Start - Pop_to_confirm
      PERFORM confirm_to_save.
*      AD:End

    ENDIF.

    CLEAR lv_clrqno.
    lv_clrqno = gs_clrqdoc_infocus-x-crhdr-clrno.

    IF gs_variables-calc_changed_cancel IS INITIAL AND gs_variables-calc_changed IS INITIAL.
      CLEAR gs_clrqdoc_infocus.
    ENDIF.

    CLEAR lv_lock.
    WHILE lv_lock IS INITIAL.
      CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
        EXPORTING
          mode_/cgdc/_clrqhd = gc_lock_mode-conflict_x "'U'
          mandt              = sy-mandt
          clrno              = lv_clrqno
        EXCEPTIONS
          foreign_lock       = 1
          system_failure     = 2
          OTHERS             = 3.
      IF sy-subrc = 0.
        lv_lock = abap_true.
      ELSE.
        PERFORM dequeue_calc_request USING lv_clrqno
                                       gc_enq_mode-write.
      ENDIF.

    ENDWHILE.

  ELSE.

    CLEAR lv_lock.
    WHILE lv_lock IS INITIAL.
      CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
        EXPORTING
          mode_/cgdc/_clrqhd = gc_lock_mode-conflict_x "'U'
          mandt              = sy-mandt
          clrno              = gs_clrqdoc_infocus-x-crhdr-clrno
        EXCEPTIONS
          foreign_lock       = 1
          system_failure     = 2
          OTHERS             = 3.
      IF sy-subrc = 0.
        lv_lock = abap_true.
      ELSE.
        PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                           gc_enq_mode-write.
      ENDIF.
    ENDWHILE.

    LEAVE SCREEN.
  ENDIF.

ENDFORM.
FORM fcode_rfrsh.
  DATA: lv_string TYPE string,
        lv_length TYPE i.
  DATA : lv_invalid TYPE flag.
  "CHECK Authority Check for Billing
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                             gs_clrqdoc_infocus-x-crhdr-vkorg
                             gs_clrqdoc_infocus-x-crhdr-vtweg
                             gs_clrqdoc_infocus-x-crhdr-spart
                             gc_auth_actv-refresh_request_items
                             space
                       CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i092(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-092.
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    RETURN.
  ENDIF.

  IF gs_clrqdoc_infocus IS NOT INITIAL.
    IF gs_variables-calc_changed IS NOT INITIAL.
      lv_string = TEXT-047.
      lv_length = strlen( lv_string ).
      IF lv_length < 70.
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string.
      ELSE.
        lv_length = lv_length - 1.
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string+0(71).
        /cgdc/s_clrq_screenfields-save_textline1 = lv_string+72(lv_length).
      ENDIF.
*      AD: start
      PERFORM confirm_to_save.
*      AD: End
    ENDIF.
  ENDIF.
  IF gs_variables-calc_changed_cancel IS INITIAL AND gs_variables-calc_changed IS INITIAL.
    "++ SOC - AMISHARMA - Dequeue before refresh.
    " else leads to cumulative locks and locking error during repricing/update from CR screen.
    " CR is locked again with set_calc_request_doc_infocus.
    IF gs_clrqdoc_infocus-clrno IS NOT INITIAL.
      PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-clrno
                               gc_enq_mode-write.
    ENDIF.

    "++ EOC - AMISHARMA - Dequeue before refresh.

    PERFORM set_calc_request_doc_infocus USING gs_variables-selected_vbeln.
  ENDIF.
ENDFORM.
FORM fcode_imp_all.
  gs_variables-wl_imp_all = abap_true.

  PERFORM build_calc_request_worklist.
  CLEAR gs_variables-wl_imp_all.
ENDFORM.

FORM fcode_wl_search_more.
  gs_variables-wl_srch_more = abap_true.
  PERFORM initialize_document_data.
  gs_variables-process_type = gc_process_type-doc_view.
  PERFORM search_worklist.
  CLEAR gs_variables-wl_srch_more.
ENDFORM.
FORM fcode_expq.
  CLEAR gs_variables-colps_quick_info.
ENDFORM.
FORM fcode_exph.
  CLEAR gs_variables-colps_hdr_info.
ENDFORM.
FORM fcode_expi.
  CLEAR gs_variables-colps_itm_info.
ENDFORM.
FORM fcode_comi.
  gs_variables-colps_itm_info = abap_true.
ENDFORM.
FORM fcode_comq.
  gs_variables-colps_quick_info = abap_true.
ENDFORM.
FORM fcode_comh.
  gs_variables-colps_hdr_info = abap_true.
ENDFORM.
FORM fcode_tab_irefd.
  ts_itm_details-activetab = gc_fcode-tab_itm_ref_doc.
ENDFORM.
FORM fcode_pick.
  DATA: lv_cursor TYPE c LENGTH 50.
  DATA: lv_value TYPE c LENGTH 50.
  DATA: lt_belnr_r TYPE RANGE OF belnr_d.
  DATA: lv_belnr TYPE co_belnr.
  CLEAR fcode.
  GET CURSOR FIELD lv_cursor.
  CASE lv_cursor.
    WHEN gc_cursor-scrnfield_co_belnr.
      fcode = gc_fcode-cdoc.
    WHEN gc_cursor-scrnfield_belnr.
      fcode = gc_fcode-adoc.
    WHEN gc_cursor-clrqhd_vgbel.
      fcode = gc_fcode-cntno.
  ENDCASE.

  IF NOT fcode IS INITIAL.
    execute_fcode fcode (gc_program).
  ENDIF.

ENDFORM.
FORM fcode_cdoc.
  IF /cgdc/s_clrq_screenfields-co_belnr IS NOT INITIAL.
    SET PARAMETER ID :gc_param_id-co_bln FIELD /cgdc/s_clrq_screenfields-co_belnr,
                      gc_param_id-cac    FIELD gs_clrqdoc_infocus-x-crhdr-kokrs.
    CALL TRANSACTION gc_tcodes-ksb5 AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.
FORM fcode_adoc.
  IF /cgdc/s_clrq_screenfields-belnr IS NOT INITIAL.
    SET PARAMETER ID : gc_param_id-bln FIELD /cgdc/s_clrq_screenfields-belnr,
                       gc_param_id-buk FIELD gs_clrqdoc_infocus-x-crhdr-bukrs,
                       gc_param_id-gjr FIELD /cgdc/s_clrq_screenfields-gjahr.
    CALL TRANSACTION gc_tcodes-fb03 AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.
FORM fcode_tab_hagg.
  ts_hdr_details-activetab = gc_fcode-tab_hdr_aggregate.
ENDFORM.
FORM fcode_itm_all.
  FIELD-SYMBOLS : <lwa_bill_data> TYPE any,
                  <ls_clrq_data>  TYPE any,
                  <lwa_bill_hist> TYPE any,
                  <lwa_value>     TYPE any.
  CLEAR gs_variables-show_imp_all_btn.
  "clear yellow of current row
  IF gs_variables-bp_curr_sel_row IS NOT INITIAL.
    READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> INDEX gs_variables-bp_curr_sel_row.
    IF sy-subrc = 0.
      ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_data> TO <lwa_value>.
      IF <lwa_value> IS ASSIGNED.
        CLEAR <lwa_value>.
        UNASSIGN <lwa_value>.
      ENDIF.
    ENDIF.

  ENDIF.
  IF gs_variables-bh_prev_sel_row IS NOT INITIAL.
    READ TABLE gt_bill_hist_fcat ASSIGNING <lwa_bill_hist> INDEX gs_variables-bh_prev_sel_row.
    IF sy-subrc = 0.
      ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_hist> TO <lwa_value>.
      IF <lwa_value> IS ASSIGNED.
        CLEAR <lwa_value>.
        UNASSIGN <lwa_value>.
      ENDIF.
    ENDIF.
    gs_variables-refersh_bill_bp_grid = abap_true.
  ENDIF.

  IF gs_variables-cg_prev_sel_row IS NOT INITIAL.
    READ TABLE <gt_calc_grp_data> ASSIGNING <ls_clrq_data>
                                  INDEX gs_variables-cg_prev_sel_row.

    IF sy-subrc = 0.
      ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <ls_clrq_data> TO <lwa_value>.
      IF <lwa_value> IS ASSIGNED.
        CLEAR <lwa_value>.
        UNASSIGN <lwa_value>.
      ENDIF.
    ENDIF.
    CLEAR:gs_variables-cg_prev_sel_row.
  ENDIF.


  IF gs_variables-rtbfilter IS NOT INITIAL.
    CLEAR gs_variables-rtbfilter.
  ENDIF.

  gs_clrqdoc_infocus-x-critm_key = gt_clrq_key.
  CLEAR gt_clrq_key.
  gs_variables-refresh_calc_req_items_grid = abap_true.

  CLEAR gs_variables-itm_fltr_act.


ENDFORM.
FORM fcode_entr100.
  DATA : lv_cursor TYPE c LENGTH 50.
  DATA : lv_value TYPE c LENGTH 50.
  GET CURSOR FIELD lv_cursor VALUE lv_value.
  IF lv_cursor = gc_ref_doc_num_field  AND /cgdc/_clrqhd-vgbel IS NOT INITIAL.
    SET PARAMETER ID gc_param_id-ktn FIELD /cgdc/_clrqhd-vgbel.
    CALL TRANSACTION  gc_tcodes-va42
    WITHOUT AUTHORITY-CHECK
    AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.
FORM fcode_cntno.
  IF /cgdc/_clrqhd-vgbel IS NOT INITIAL.
    SET PARAMETER ID gc_param_id-ktn FIELD /cgdc/_clrqhd-vgbel.
    CALL TRANSACTION  gc_tcodes-va43
    WITHOUT AUTHORITY-CHECK
    AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.

FORM  fcode_cbdr.
  DATA:lt_ebdr_data TYPE bapiebdrrequest_t,
       lv_view_name TYPE string,
       lt_fcat      TYPE lvc_t_fcat,
       lv_sched     TYPE char1.
*- check if schduler needed or not
  DATA lv_ans TYPE c.
  CLEAR: lv_ans.
  IF gs_variables-calc_changed IS NOT INITIAL.
* AD:start
    PERFORM confirm_to_save.
*  AD: End
  ENDIF.
  CHECK gs_variables-calc_changed IS INITIAL.

*  IF sy-uname ='AMISHARMA' OR sy-uname = 'SRISHETTY'.
  PERFORM popup_to_confirm_for_on_demand  USING TEXT-002
                                       TEXT-211
                                       TEXT-065
                                       icon_checked
                                       TEXT-066
                                       icon_cancel
                                       abap_false
                                 CHANGING lv_ans.
  IF sy-subrc EQ 0 AND lv_ans EQ gc_answer-yes.
    PERFORM check_need_for_scheduler CHANGING lv_sched.
    IF lv_sched IS INITIAL.
      gs_variables-cgrr_itm_crt = abap_true.
      IF gs_variables-rel_constr_dt IS INITIAL.
        gs_variables-rel_constr_dt = sy-datum.
      ENDIF.
      PERFORM prep_calc_grp_row_data USING abap_false    "abap_true is changing to abap_false for so update_item01 wont trigger
                                  CHANGING lt_fcat   .   " to fetch calc grp data in infocus
      IF gs_clrqdoc_infocus-x-crgrr[] IS NOT INITIAL.
        CALL SCREEN gc_screen-constr_dt_popup STARTING AT 10 10 ENDING AT 50 12.
      ELSE.
        gs_variables-cont_constr_dt = abap_true.
      ENDIF.
      IF gs_variables-cont_constr_dt IS NOT INITIAL.
        PERFORM create_ebdr USING abap_true.
        IF gs_variables-call_from_ui IS INITIAL.
          CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
            EXPORTING
              it_messages = gt_messages.
          CLEAR gt_messages.
        ENDIF.
        PERFORM set_calc_request_doc_infocus  USING gs_clrqdoc_infocus-x-crhdr-clrno.
      ENDIF.

    ELSE.
      PERFORM set_calc_request_doc_infocus  USING gs_clrqdoc_infocus-x-crhdr-clrno.
      gs_variables-refersh_document = abap_true.
      gs_variables-refresh_calc_req_items_grid = abap_true.
    ENDIF.
  ENDIF.

*  ELSE.

*    PERFORM popup_to_confirm_for_on_demand  USING TEXT-002
*                                         TEXT-211
*                                         TEXT-065
*                                         icon_checked
*                                         TEXT-066
*                                         icon_cancel
*                                         abap_false
*                                   CHANGING lv_ans.
*    IF sy-subrc EQ 0 AND lv_ans EQ gc_answer-yes.
*      PERFORM check_need_for_scheduler CHANGING lv_sched.
*      IF lv_sched IS INITIAL.
*        PERFORM create_ebdr USING abap_true.
*        IF gs_variables-call_from_ui IS INITIAL.
*          CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
*            EXPORTING
*              it_messages = gt_messages.
*          CLEAR gt_messages.
*        ENDIF.
*        PERFORM set_calc_request_doc_infocus  USING gs_clrqdoc_infocus-x-crhdr-clrno.
*      ELSE.
*        PERFORM set_calc_request_doc_infocus  USING gs_clrqdoc_infocus-x-crhdr-clrno.
*        gs_variables-refersh_document = abap_true.
*        gs_variables-refresh_calc_req_items_grid = abap_true.
*      ENDIF.
*    ENDIF.


*  ENDIF.








ENDFORM.
FORM fcode_tab_scond.
  ts_subitem_dtl-activetab = gc_fcode-tab_subitm_conditions.
ENDFORM.

FORM fcode_tab_scost.
  ts_subitem_dtl-activetab = gc_fcode-tab_subitm_cost_sht.
ENDFORM.

FORM fcode_tab_spart.
  ts_subitem_dtl-activetab = gc_fcode-tab_subitm_partners.
ENDFORM.
FORM fcode_tab_itmd.
  ts_itm_details-activetab = gc_fcode-tab_itm_subitem.
ENDFORM.
FORM fcode_reprice.
  DATA: lt_vbmtv         TYPE TABLE OF vbmtv,
        lwa_vbmtv        TYPE vbmtv,
        ls_dynpro_fields TYPE rv45c,
        ls_message_vbfs  TYPE vbfs.
  DATA: lt_sel_rows TYPE lvc_t_row,
        lwa_sel_row TYPE lvc_s_row.
  DATA: lwa_calc_hd_reprice TYPE /cgdc/s_clrqhd.
  DATA : lt_clrqpit TYPE TABLE OF /cgdc/s_clrqpit.
  DATA : lwa_clrqpit TYPE /cgdc/s_clrqpit.
  DATA : lt_clrqpcn TYPE TABLE OF /cgdc/s_clrqpcn.
  DATA : lwa_clrqpcn TYPE  /cgdc/s_clrqpcn.
  FIELD-SYMBOLS : <lwa_clrqpit> TYPE /cgdc/s_clrqpit.
  DATA: lwa_message TYPE /cgdc/s_message.

  go_calc_req_upd_prc_grd->get_selected_rows( IMPORTING et_index_rows = lt_sel_rows ).
  LOOP AT lt_sel_rows INTO lwa_sel_row.
    READ TABLE gt_calc_hd_reprice INTO lwa_calc_hd_reprice INDEX lwa_sel_row-index.
    IF sy-subrc = 0.
      lwa_vbmtv-vbeln = lwa_calc_hd_reprice-vgbel.
      lwa_vbmtv-selkz = abap_true.
      APPEND lwa_vbmtv TO lt_vbmtv.
      CALL FUNCTION 'SD_BULK_CHANGE'
        EXPORTING
          function             = 'MPRX'
          dynpro_fields        = ls_dynpro_fields
          iv_suppress_messages = abap_false
        IMPORTING
          protokoll            = ls_message_vbfs
        TABLES
          documents            = lt_vbmtv.
      IF sy-subrc <> 0.
      ENDIF.

      IF ls_message_vbfs-msgty = gc_message_type-error.
        lwa_message-msgid = gc_clrq_msg_cls.
        lwa_message-msgty = gc_message_type-error.
        lwa_message-msgnr = gc_msg_cls_msgnr-014.
        lwa_message-msgv1 = lwa_calc_hd_reprice-vgbel.
        APPEND lwa_message TO gt_messages.
        CLEAR lwa_message.

        lwa_message-msgid = gc_clrq_msg_cls.
        lwa_message-msgty = gc_message_type-error.
        lwa_message-msgnr = gc_msg_cls_msgnr-014.
        lwa_message-msgv1 = lwa_calc_hd_reprice-vgbel.
        APPEND lwa_message TO gt_messages.
        CLEAR lwa_message.
      ENDIF.

      lwa_message-msgid = gc_clrq_msg_cls.
      lwa_message-msgty = gc_message_type-succes.
      lwa_message-msgnr = gc_msg_cls_msgnr-013.
      lwa_message-msgv1 = lwa_calc_hd_reprice-vgbel.
      APPEND lwa_message TO gt_messages.
      CLEAR lwa_message.
      lwa_clrqpcn-vbeln = lwa_calc_hd_reprice-vgbel.
      lwa_clrqpcn-updkz = gc_updkz_delete.
      APPEND lwa_clrqpcn TO lt_clrqpcn.

    ENDIF.
  ENDLOOP.

  IF NOT lt_clrqpcn IS INITIAL.
    CALL FUNCTION '/CGDC/CLRQ_CLRQPRS_UPDATE_DB' IN UPDATE TASK
      EXPORTING
        it_clrqpcn = lt_clrqpcn.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
    EXPORTING
      it_messages = gt_messages.
  IF sy-subrc <> 0.
  ENDIF.
  CLEAR gt_messages.

  CALL METHOD cl_gui_cfw=>set_new_ok_code
    EXPORTING
      new_code = gc_fcode-entr.
ENDFORM.
FORM fcode_cont301.
  TYPES: BEGIN OF lty_clrqit_budat,
           clrno TYPE /cgdc/clrqno,
           clrit TYPE /cgdc/clrq_itmno,
           budat TYPE budat,
         END OF lty_clrqit_budat.
  DATA: lt_clrqit_budat  TYPE TABLE OF lty_clrqit_budat,
        lwa_clrqit_budat TYPE lty_clrqit_budat.
  DATA: lwa_clrqdoc_infocs TYPE /cgdc/s_clrq_doc.
  DATA: lt_clrqdoc_infocs TYPE TABLE OF /cgdc/s_clrq_doc.
  DATA: lwa_clrit_fcat TYPE /cgdc/s_clrqit_fcat,
        lwa_clrit      TYPE /cgdc/s_clrqit.
  DATA : lv_where TYPE string.
  DATA: lv_value TYPE string.
  DATA : lwa_bill_prev_char TYPE s_bill_preview_char.
  DATA: lt_sel_rows TYPE lvc_t_row.
  DATA : lwa_sel_row TYPE lvc_s_row.
  DATA: lt_clrit_key TYPE TABLE OF /cgdc/s_clrqit_key,
        lt_clrqit    TYPE TABLE OF /cgdc/s_clrqit,
        lt_clrqit_t  TYPE TABLE OF /cgdc/s_clrqit,
        lwa_clrqit_t TYPE  /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrit_f> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrit_l> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_bill_data> TYPE any.
  FIELD-SYMBOLS: <lwa_value> TYPE any.
  DATA: lwa_message TYPE bapiret2.
  DATA: lwa_postpone_data TYPE /cgdc/s_clrq_postpone.
  DATA: lv_success TYPE flag.
  lwa_clrqdoc_infocs-x-crhdr = gs_clrqdoc_infocus-x-crhdr.
  lwa_clrqdoc_infocs-x-crhdr-updkz = gc_updkz_update.

  FIELD-SYMBOLS : <lwa_post_fcat> TYPE /cgdc/s_clrq_postpone.
  IF gs_variables-gv_rejpost_billing_pre IS INITIAL.

    IF gs_variables-itm_post_quan IS NOT INITIAL OR gs_variables-itm_rej_quan IS NOT INITIAL.
      APPEND INITIAL LINE TO gt_item_postponed_fcat ASSIGNING <lwa_post_fcat>.
      IF gs_variables-itm_post_quan IS NOT INITIAL.
        IF /cgdc/s_clrq_screenfields-post_quan < 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i080(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-080.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ENDIF.
        <lwa_post_fcat>-postp_qty = /cgdc/s_clrq_screenfields-post_quan.
        <lwa_post_fcat>-psdat = /cgdc/s_clrq_screenfields-post_date.
      ELSE.
        IF /cgdc/s_clrq_screenfields-rej_quan < 0.
          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE i082(/cgdc/clrq).
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = gc_msg_cls_msgnr-082.
            gs_messages-msgty = gc_message_type-information.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ENDIF.
        <lwa_post_fcat>-rej_qty = /cgdc/s_clrq_screenfields-rej_quan.
      ENDIF.
    ENDIF.

    PERFORM postpone_reject_data CHANGING lv_success.
    IF lv_success IS INITIAL.
      RETURN.
    ENDIF.
  ELSE.


  ENDIF.

  CLEAR : gs_variables-itm_post_amt,
          gs_variables-itm_post_quan,
          gs_variables-itm_rej_amt,
          gs_variables-itm_rej_quan,
          /cgdc/s_clrq_screenfields-post_date,
          /cgdc/s_clrq_screenfields-post_netwr,
          /cgdc/s_clrq_screenfields-post_quan,
          gs_variables-gv_rejpost_billing_pre,
          gs_variables-itm_post_amt_un,
          gs_variables-itm_post_quan_un,
          gt_item_postponed_fcat.
  IF go_postpone_grid IS BOUND.
    go_postpone_grid->free( ).
    CLEAR : go_postpone_grid.
  ENDIF.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_canc301.
  CLEAR :gs_variables-itm_post_amt,
          gs_variables-itm_post_quan,
          gs_variables-itm_rej_amt,
          gs_variables-itm_rej_quan,
          /cgdc/s_clrq_screenfields-post_date,
          /cgdc/s_clrq_screenfields-post_netwr,
          /cgdc/s_clrq_screenfields-post_quan,
          gs_variables-gv_rejpost_billing_pre,
          gs_variables-itm_post_amt_un,
          gs_variables-itm_post_quan_un,
          gt_item_postponed_fcat,
          gv_where,
          gv_bi_where.
  IF go_postpone_grid IS BOUND.
    go_postpone_grid->free( ).
    CLEAR : go_postpone_grid.
  ENDIF.

  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_canc302.
  CLEAR :gs_variables-itm_post_amt,
          gs_variables-itm_post_quan,
          gs_variables-itm_rej_amt,
          gs_variables-itm_rej_quan,
          /cgdc/s_clrq_screenfields-rej_netwr,
         /cgdc/s_clrq_screenfields-rej_quan,
         gs_variables-gv_rejpost_billing_pre,
          gs_variables-itm_post_amt_un,
          gs_variables-itm_post_quan_un,
          gt_item_postponed_fcat,
          gs_variables-lc_flag.
  IF go_postpone_grid IS BOUND.
    go_postpone_grid->free( ).
    CLEAR : go_postpone_grid.
  ENDIF.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_cont302.
  TYPES: BEGIN OF lty_clrqit_budat,
           clrno TYPE /cgdc/clrqno,
           clrit TYPE /cgdc/clrq_itmno,
           budat TYPE budat,
         END OF lty_clrqit_budat.
  DATA: lt_clrqit_budat  TYPE TABLE OF lty_clrqit_budat,
        lwa_clrqit_budat TYPE lty_clrqit_budat.

  DATA: lwa_clrqdoc_infocs LIKE gs_clrqdoc_infocus.
  DATA: lt_clrqdoc_infocs TYPE TABLE OF /cgdc/s_clrq_doc.
  DATA: lwa_clrit_fcat TYPE /cgdc/s_clrqit_fcat,
        lwa_clrit      TYPE /cgdc/s_clrqit.
  DATA : lv_where TYPE string.
  DATA: lv_value TYPE string.
  DATA : lwa_bill_prev_char TYPE s_bill_preview_char.
  DATA: lt_sel_rows TYPE lvc_t_row.
  DATA : lwa_sel_row TYPE lvc_s_row.
  DATA: lt_clrit_key  TYPE TABLE OF /cgdc/s_clrqit_key,
        lwa_clrit_key TYPE  /cgdc/s_clrqit_key,
        lt_clrqit     TYPE TABLE OF /cgdc/s_clrqit,
        lt_clrqit_t   TYPE TABLE OF /cgdc/s_clrqit,
        lwa_clrqit_t  TYPE  /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrit_f> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_clrit_l> TYPE /cgdc/s_clrqit.

  FIELD-SYMBOLS: <lwa_bill_data> TYPE any.
  FIELD-SYMBOLS: <lwa_value> TYPE any.
  DATA: lwa_message TYPE bapiret2.
  DATA: lwa_postpone_data TYPE /cgdc/s_clrq_postpone.
  DATA: lv_success TYPE flag.
  FIELD-SYMBOLS : <lwa_post_fcat> TYPE /cgdc/s_clrq_postpone.
  lwa_clrqdoc_infocs-x-crhdr = gs_clrqdoc_infocus-x-crhdr.
  lwa_clrqdoc_infocs-x-crhdr-updkz = gc_updkz_update.

  IF  gs_variables-itm_rej_amt IS NOT INITIAL AND /cgdc/s_clrq_screenfields-rej_netwr < 0.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i083(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-083.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
    EXIT.
  ELSEIF gs_variables-itm_post_amt IS NOT INITIAL AND /cgdc/s_clrq_screenfields-post_netwr < 0.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i081(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-081.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
    EXIT.
  ENDIF.

  IF gs_variables-gv_rejpost_billing_pre IS INITIAL.
    IF gs_variables-itm_post_amt IS NOT INITIAL OR gs_variables-itm_rej_amt IS NOT INITIAL.
      APPEND INITIAL LINE TO gt_item_postponed_fcat ASSIGNING <lwa_post_fcat>.
      <lwa_post_fcat>-clrit = gs_variables-item_infocus.
      IF gs_variables-itm_post_amt IS NOT INITIAL.

        <lwa_post_fcat>-postp_amt = /cgdc/s_clrq_screenfields-post_netwr.
        <lwa_post_fcat>-psdat = /cgdc/s_clrq_screenfields-post_date.
      ELSE.
        <lwa_post_fcat>-rej_amt = /cgdc/s_clrq_screenfields-rej_netwr.
      ENDIF.
    ENDIF.
    MESSAGE TEXT-163 TYPE gc_message_type-information.
    PERFORM postpone_reject_data CHANGING lv_success.
    IF lv_success IS INITIAL.
      RETURN.
    ENDIF.

  ELSE.

  ENDIF.

  CLEAR : gs_variables-itm_post_amt,
          gs_variables-itm_post_quan,
          gs_variables-itm_rej_amt,
          gs_variables-itm_rej_quan,
          /cgdc/s_clrq_screenfields-rej_netwr,
          /cgdc/s_clrq_screenfields-rej_quan,
          gs_variables-gv_rejpost_billing_pre,
          gs_variables-itm_post_amt_un,
          gs_variables-itm_post_quan_un,
          gt_item_postponed_fcat,
          gs_variables-lc_flag.
  IF go_postpone_grid IS BOUND.
    go_postpone_grid->free( ).
    CLEAR : go_postpone_grid.
  ENDIF.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_bck900.
  LEAVE TO SCREEN gc_screen-sel_scr_0010.
ENDFORM.
FORM fcode_can900.
  LEAVE PROGRAM.
ENDFORM.
FORM fill_pricing_comm_structure USING i_objnr      TYPE j_objnr
                                       i_ovrhd_date TYPE d
                                       i_budat      TYPE d
                                       i_val_perio  TYPE co_perio
                                       i_owaer      TYPE owaer
                                       is_coep      TYPE coep_ext
                                 CHANGING cs_komk   TYPE komk
                                          cs_komp   TYPE komp
                                          ct_coiob  TYPE t_coiob.

  DATA: ls_ionra       TYPE ionra,
        ls_periods     TYPE periods,
        lt_periods     TYPE t_periods,
        lr_master_data TYPE REF TO data,
        ls_coiob       TYPE coiob.

  FIELD-SYMBOLS <master_data> TYPE any.

* Initalize return structures:
  CLEAR: cs_komp,
         cs_komk.

* Fill period table:
  IF NOT i_ovrhd_date IS INITIAL.
    ls_periods-buper = i_val_perio.
    ls_periods-datab = i_ovrhd_date.
    ls_periods-datbi = i_ovrhd_date.
    APPEND ls_periods TO lt_periods.
  ENDIF.
  IF i_ovrhd_date <> i_budat.
    ls_periods-buper = i_val_perio.
    ls_periods-datab = i_budat.
    ls_periods-datbi = i_budat.
    APPEND ls_periods TO lt_periods.
  ENDIF.

* Decode object key:
  CALL FUNCTION 'OBJECT_KEY_GET'
    EXPORTING
      i_objnr = i_objnr
    IMPORTING
      e_ionra = ls_ionra.
  IF sy-subrc <> 0.
  ENDIF.

* Read master data by object type, and return a reference object with the
* appropriate master data record:
  PERFORM read_master_data USING i_objnr
                                 ls_ionra
                                 i_ovrhd_date
                        CHANGING ls_coiob
                                 lr_master_data
                                 ls_ionra-kokrs.

* If problems reading master data, the lr_master_data reference is empty:
  IF lr_master_data IS NOT BOUND.
    EXIT.
  ENDIF.


* Prepare COIOB for the object.  LS_COIOB is usually empty at this point except
* for SD orders it is already filled with some data from read_master_data:
  PERFORM fill_coiob    USING ls_ionra-kokrs
                              i_objnr
                              lt_periods
                              i_owaer
                     CHANGING ls_coiob
                              ct_coiob.

  cs_komk-auart   = ls_coiob-auart.
  cs_komk-autyp   = ls_coiob-autyp.
  cs_komk-bukrs   = ls_coiob-bukrs.
  cs_komk-gsber   = ls_coiob-gsber.
  cs_komp-werks   = ls_coiob-werks.
  cs_komk-kokrs   = ls_coiob-kokrs.

* Now add data from the master data record of the object:
  ASSIGN lr_master_data->* TO <master_data>.
  MOVE-CORRESPONDING <master_data> TO cs_komk.
  MOVE-CORRESPONDING <master_data> TO cs_komp.
***Modify Overhead Rates
  cs_komp-/cgdc/orgh = gs_clrit-/cgdc/orgh.
  cs_komp-/cgdc/orgi = gs_clrit-/cgdc/orgi.
  cs_komp-/cgdc/clrqt = gs_clrhd-clrqt.
***
  cs_komk-kalsm = gs_clrit-csheet.
  cs_komk-zschl = gs_clrit-zschl.
  cs_komk-prsdt = gs_clrit-prsdt.

  IF cs_komk-kappl IS INITIAL.
    cs_komk-kappl = gc_kappl-orders.
  ENDIF.

  IF cl_fins_rtohc_doc=>is_rtohc_costing_sheet( cs_komk-kalsm ) = abap_false.
  ENDIF.

ENDFORM.    " Fill_pricing_comm_structure
FORM  fill_coiob USING i_kokrs      TYPE kokrs
                       i_objnr      TYPE j_objnr
                       it_periods   TYPE t_periods
                       i_owaer      TYPE owaer
              CHANGING cs_coiob     TYPE coiob
                       ct_coiob     TYPE t_coiob.

  DATA l_message(80) TYPE c.

  CALL FUNCTION 'K_COIOB_READ_AND_FILL'
    EXPORTING
      i_kokrs          = i_kokrs
      i_objnr          = i_objnr
      i_budat          = it_periods[ 1 ]-datab
      i_read_only      = abap_false
    IMPORTING
      e_coiob          = cs_coiob
    TABLES
      t_coiob          = ct_coiob
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
    MESSAGE e030(kc) INTO l_message.
    PERFORM message_add.
  ENDIF.

ENDFORM.                    "fill_coiob
*&---------------------------------------------------------------------*
*&      Form  fill_cossa_cospa_table
*&---------------------------------------------------------------------*
*       To call the overhead function, we have to put the item data
*       into tables that show how it would look in the totals tables
*       COSS or COSP.
*----------------------------------------------------------------------*
FORM fill_cossa_cospa_table USING is_coep      TYPE coep_ext
                                  iv_vrgng     TYPE co_vorgang
                         CHANGING ct_cossa     TYPE t_cossa
                                  ct_cospa     TYPE t_cospa.

  DATA: lv_sumtb     TYPE tabname,
        ls_cossa     TYPE cossa,
        ls_cospa     TYPE cospa,
        ls_cokey2    TYPE cokey_dp2,
        ls_cokey     TYPE cokey_is,
        lv_fieldname TYPE fieldname.

  FIELD-SYMBOLS: <cosxa>      TYPE any,
                 <qty_or_amt> TYPE any.

* Which totals table for the business transaction:
  CALL FUNCTION 'K_TOTALS_TABLE_DETERMINE'
    EXPORTING
      eptab = gc_structure-coep                                        "#EC NOTEXT
      vrgng = iv_vrgng
    IMPORTING
      sumtb = lv_sumtb.
  IF sy-subrc <> 0.
  ENDIF.

* Assign appropriate work area:
  IF lv_sumtb = gc_structure-coss.                          "#EC NOTEXT
    ASSIGN ls_cossa TO <cosxa>.
  ELSE.
    ASSIGN ls_cospa TO <cosxa>.
  ENDIF.

* Most fields have same name:
  MOVE-CORRESPONDING is_coep TO <cosxa>.

* FlexGL fields if active:
  IF is_coep-hrkft IS INITIAL.
    CLEAR ls_cokey2.
  ELSE.
    CALL FUNCTION 'K_SUBKEY_INTERPRET'
      EXPORTING
        co_hrkft = is_coep-hrkft
      IMPORTING
        merkmale = ls_cokey
      EXCEPTIONS
        OTHERS   = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
              INTO DATA(lv_message).
      PERFORM message_add.
      EXIT.
    ENDIF.
    MOVE-CORRESPONDING ls_cokey TO ls_cokey2.
  ENDIF.
  MOVE-CORRESPONDING ls_cokey2 TO <cosxa>.

* Quantity/amount fields per period in totals table:
  CONCATENATE gc_cosxa_fld-wtg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wtgbtr.

  CONCATENATE gc_cosxa_fld-wog is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wogbtr.

  CONCATENATE gc_cosxa_fld-wkg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wkgbtr.

  CONCATENATE gc_cosxa_fld-wkf is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wkfbtr.

  CONCATENATE gc_cosxa_fld-pag is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-pagbtr.

  IF lv_sumtb = gc_structure-coss.                          "#EC NOTEXT
    CONCATENATE gc_cosxa_fld-paf is_coep-perio INTO lv_fieldname. "#EC NOTEXT
    ASSIGN (lv_fieldname) TO <qty_or_amt>.
    <qty_or_amt> = is_coep-pafbtr.
  ENDIF.

  CONCATENATE gc_cosxa_fld-meg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-megbtr.

  CONCATENATE gc_cosxa_fld-mef is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-mefbtr.

* Add additional currencies
  CONCATENATE gc_cosxa_fld-wag is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wagbtr.

  CONCATENATE gc_cosxa_fld-wvg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wvgbtr.

  CONCATENATE gc_cosxa_fld-wbg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wbgbtr.

  CONCATENATE gc_cosxa_fld-wcg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wcgbtr.

  CONCATENATE gc_cosxa_fld-wdg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wdgbtr.

  CONCATENATE gc_cosxa_fld-weg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wegbtr.

  CONCATENATE gc_cosxa_fld-wfg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wfgbtr.

  CONCATENATE gc_cosxa_fld-wgg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-wggbtr.

  CONCATENATE gc_cosxa_fld-whg is_coep-perio INTO lv_fieldname. "#EC NOTEXT
  ASSIGN (lv_fieldname) TO <qty_or_amt>.
  <qty_or_amt> = is_coep-whgbtr.

  IF lv_sumtb = gc_structure-coss.                          "#EC NOTEXT
    APPEND <cosxa> TO ct_cossa.
  ELSE.
    APPEND <cosxa> TO ct_cospa.
  ENDIF.

ENDFORM.                    "fill_cossa_cospa_table
FORM find_bukrs_of_werks USING i_werks TYPE werks_d
                      CHANGING c_bukrs TYPE bukrs.

  DATA: l_werks  TYPE werks_d,
        ls_t001w TYPE  t001w,
        ls_t001k TYPE t001k.

  l_werks = i_werks.

  CALL FUNCTION 'CO_TA_T001W_READ'
    EXPORTING
      t001w_werk = l_werks
    IMPORTING
      t001wwa    = ls_t001w.
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION 'CO_TA_T001K_READ'
    EXPORTING
      t001w_bwkey = ls_t001w-bwkey
    IMPORTING
      t001kwa     = ls_t001k.
  IF sy-subrc <> 0.
  ENDIF.

  c_bukrs = ls_t001k-bukrs.

ENDFORM.                               " find_bukrs_of_werks
FORM fcode_ok901.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_save.
*  DATA: ls_clrqbs_doc TYPE /cgdc/s_clrqbs_doc.
  PERFORM document_save USING   gs_clrqdoc_infocus
                                abap_true.
  CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
    EXPORTING
      it_messages = gt_messages.
  IF sy-subrc <> 0.
  ENDIF.
  CLEAR gt_messages.
  PERFORM set_calc_request_doc_infocus USING gs_variables-selected_vbeln.
ENDFORM.
FORM fcode_canc998.
  gs_variables-calc_changed_cancel = abap_true.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_save_yes.
  PERFORM fcode_save .
  CLEAR gs_variables-calc_changed.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_save_no.
  "Do Nothing
  CLEAR gs_variables-calc_changed.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_canc201.
  CLEAR : /cgdc/t_rtbmit,
          gs_variables-dis_man_itm_dd,
          gs_man_itm.
  gs_variables-man_itm_prog = gc_program.
  gs_variables-man_itm_scrn = gc_screen-dummy.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.

FORM fcode_man_itm_chnfg.
  TYPES : BEGIN OF lty_matnr,
            matnr TYPE matnr,
          END OF lty_matnr.
  DATA: lt_matnr TYPE TABLE OF lty_matnr.
  DATA : lv_invalid TYPE flag,
         lv_fnkey   TYPE /cgdc/rtb_authfnkey.
  CONCATENATE gc_fnkey-mi /cgdc/t_rtbmit-rtb_authkey INTO lv_fnkey.
  CONDENSE lv_fnkey NO-GAPS.
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                           gs_clrqdoc_infocus-x-crhdr-vkorg
                           gs_clrqdoc_infocus-x-crhdr-vtweg
                           gs_clrqdoc_infocus-x-crhdr-spart
                           gc_auth_actv-crt_man_req_itm "'Q4'
                           lv_fnkey
                     CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i102(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-102.
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    CLEAR /cgdc/t_rtbmit-mityp.
    RETURN.
  ENDIF.



  SELECT SINGLE *
  FROM /cgdc/t_rtbmit
  INTO /cgdc/t_rtbmit
  WHERE mityp = /cgdc/t_rtbmit-mityp.
  IF sy-subrc = 0.

    gs_variables-man_itm_scrn = gc_screen-man_itm_alv.
    gs_variables-man_itm_prog = gc_program.
    SELECT matnr                                       "#EC CI_NOFIELD.
      FROM mara
      INTO TABLE lt_matnr
      WHERE matkl = /cgdc/t_rtbmit-matgrp.
    IF sy-subrc = 0.
      SELECT matnr maktx
        FROM makt
        INTO TABLE gt_matnr_desc
        FOR ALL ENTRIES IN lt_matnr
        WHERE matnr = lt_matnr-matnr
        AND spras = sy-langu.
      IF sy-subrc = 0 AND lines( gt_matnr_desc ) = 1.
        gs_man_itm-matnr = gt_matnr_desc[ 1 ]-matnr.
      ENDIF.
    ENDIF.
  ELSE.
    gs_variables-man_itm_scrn = gc_screen-dummy.
    gs_variables-man_itm_prog = gc_program.
  ENDIF.
  gs_variables-dis_man_itm_dd = abap_true.
ENDFORM.
FORM fcode_cont201.
  TYPES: BEGIN OF ty_data,
           matnr TYPE matnr,
         END OF ty_data,

         BEGIN OF ty_fields,
           field TYPE fieldname,
         END OF ty_fields.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  DATA: lt_data1  TYPE TABLE OF ty_data,
        lwa_data1 TYPE ty_data.
  DATA: lt_fieldss  TYPE TABLE OF ty_fields,
        lwa_fieldss TYPE ty_fields.

  lwa_fieldss-field = gc_fieldname-matnr.
  APPEND lwa_fieldss TO lt_fieldss.

  lwa_data1-matnr = gc_matnr_val-labor_a.
  APPEND lwa_data1 TO lt_data1.

  ASSIGN lt_data1 TO <gt_rel_itm_data>.
  ASSIGN lt_fieldss TO <gt_rel_itm_flds>.
*-----------------------------------------------------------------------------------*
  DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
  DATA: lt_prps  TYPE TABLE OF prps,
        lwa_prps TYPE prps.
  DATA: lv_src1     TYPE string,
        lv_src2     TYPE string,
        lv_src3     TYPE string,
        lv_src4     TYPE string,
        lv_src5     TYPE string,
        lwa_rtbmit  TYPE /cgdc/t_rtbmit,

        lwa_rel_itm TYPE /cgdc/s_rtb_rlease_mit_fcat.
  FIELD-SYMBOLS: <lwa_clrqit_fcat> TYPE /cgdc/s_clrqit_fcat.
  FIELD-SYMBOLS: <lv_value> TYPE any.
  FIELD-SYMBOLS: <lwa_field> TYPE any.
  FIELD-SYMBOLS: <lwa_data> TYPE any.
  FIELD-SYMBOLS: <lv_data_value> TYPE any.
  DATA: lv_where TYPE string.
  DATA: lwa_critm TYPE /cgdc/s_clrqit .
  DATA : lv_invalid TYPE flag.
*  ------------------------------------------------------------
  "CHECK Authority Check for Billing
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                                           gs_clrqdoc_infocus-x-crhdr-vkorg
                                           gs_clrqdoc_infocus-x-crhdr-vtweg
                                           gs_clrqdoc_infocus-x-crhdr-spart
                                           gc_auth_actv-crt_man_bl_itm "'B2'
                                           space
                                     CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i094(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-094 .
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    RETURN.
  ENDIF.

  gs_man_itm-mityp = /cgdc/t_rtbmit-mityp.
  IF gs_variables-man_itm_scr_avl IS INITIAL.
    SELECT *
      FROM prps
      INTO TABLE lt_prps
      WHERE pspnr = gs_man_itm-ps_psp_pnr.
    IF sy-subrc = 0.
      READ TABLE lt_prps INTO lwa_prps INDEX 1.
      gs_man_itm-ps_psp_pnr = lwa_prps-pspnr.
      gs_man_itm-objnr = lwa_prps-objnr.
    ENDIF.
  ELSE.

  ENDIF.

  IF gs_man_itm-matnr IS NOT INITIAL
    AND gs_man_itm-fkdat IS NOT INITIAL
    AND gs_man_itm-kwmeng IS NOT INITIAL
    AND gs_man_itm-rsncd IS NOT INITIAL
    AND gs_man_itm-vrkme IS NOT INITIAL
    AND gs_man_itm-waerk IS NOT  INITIAL
    AND gs_man_itm-ps_psp_pnr IS NOT INITIAL
    AND gs_man_itm-kbetr1 IS NOT INITIAL.

    gs_man_itm-itmty = gc_clrq_itmty-manual_line.
    gs_man_itm-budat = gs_man_itm-bldat = gs_man_itm-fkdat.

    SELECT SINGLE *
      FROM /cgdc/t_rtbmit
      INTO lwa_rtbmit
      WHERE mityp = gs_man_itm-mityp.
    gs_man_itm-rtbusage = lwa_rtbmit-vwpos.
    CLEAR gs_clrit_org.

    gs_variables-bit_num_gen = abap_true.
    PERFORM update_clrq_item01 USING space
                                  ls_link_data
                                  lwa_clrit_old
                                       CHANGING gs_man_itm.
    gs_variables-refresh_calc_req_items_grid = abap_true.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i026(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-026 .
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.


  CLEAR: /cgdc/t_rtbmit,
         gs_variables-dis_man_itm_dd,
         gs_man_itm,
         gs_variables-bit_num_gen.
  gs_variables-man_itm_prog = gc_program.
  gs_variables-man_itm_scrn = gc_screen-dummy.
  gs_variables-calc_changed = abap_true.
  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
FORM f4_matnr.
  TYPES: BEGIN OF lty_valuetab,
           value TYPE c LENGTH 40,
         END OF lty_valuetab.
  DATA: lt_valuetab TYPE TABLE OF lty_valuetab.
  DATA: lwa_value TYPE lty_valuetab.
  DATA: lt_help_fields  TYPE TABLE OF dfies.
  DATA: lwa_help_fields  TYPE  dfies.
  DATA: lwa_return TYPE ddshretval,
        lt_return  TYPE TABLE OF ddshretval.
  DATA: lwa_rtbmit     TYPE /cgdc/t_rtbmit,
        lwa_matnr_desc TYPE lty_matnr_desc.


  DATA: lt_dynvalue  TYPE TABLE OF dynpread,
        lwa_dynvalue TYPE dynpread.
  FIELD-SYMBOLS : <lwa_man_item> TYPE /cgdc/s_clrqit_fcat.
  DATA: lwa_stable TYPE lvc_s_stbl.

  lwa_stable-col = abap_true.
  lwa_stable-row = abap_true.

  LOOP AT gt_matnr_desc INTO lwa_matnr_desc.
    lwa_value-value = lwa_matnr_desc-matnr.
    APPEND lwa_value TO lt_valuetab.
    lwa_value-value = lwa_matnr_desc-maktx.
    APPEND lwa_value TO lt_valuetab.
  ENDLOOP.
  lwa_help_fields-tabname = gc_structure-makt.
  lwa_help_fields-fieldname = gc_makt_field-matnr.
  APPEND lwa_help_fields TO lt_help_fields.
  lwa_help_fields-fieldname = gc_makt_field-maktx.
  APPEND lwa_help_fields TO lt_help_fields.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = gc_makt_field-matnr
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
    TABLES
      value_tab       = lt_valuetab[]
      field_tab       = lt_help_fields[]
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc = 0.
    READ TABLE lt_return INTO lwa_return INDEX 1.
    IF sy-subrc = 0.
      gs_man_itm-matnr = lwa_return-fieldval.
      READ TABLE gt_matnr_desc INTO lwa_matnr_desc WITH KEY matnr = lwa_return-fieldval.
      IF sy-subrc = 0.
        lwa_dynvalue-fieldname = 'GS_MAN_ITM-MATWA'.
        lwa_dynvalue-fieldvalue = lwa_matnr_desc-maktx.
        CALL FUNCTION 'DYNP_VALUES_UPDATE'
          EXPORTING
            dyname               = gc_program
            dynumb               = gc_screen-man_itm_alv
          TABLES
            dynpfields           = lt_dynvalue
          EXCEPTIONS
            invalid_abapworkarea = 1
            invalid_dynprofield  = 2
            invalid_dynproname   = 3
            invalid_dynpronummer = 4
            invalid_request      = 5
            no_fielddescription  = 6
            undefind_error       = 7
            OTHERS               = 8.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
      ENDIF.
    ENDIF.
    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.
  ENDIF.
ENDFORM.
FORM f4_reason_code.
  TYPES : BEGIN OF lty_rtbrpart,
            rsncd TYPE /cgdc/rtb_rsncd,
            descr TYPE /cgdc/rtb_rsncd_desc,
          END OF lty_rtbrpart,
          BEGIN OF lty_valuetab,
            value TYPE c LENGTH 40,
          END OF lty_valuetab.
  DATA: lt_valuetab TYPE TABLE OF lty_valuetab.
  DATA: lwa_value TYPE lty_valuetab.

  DATA: lt_help_fields  TYPE TABLE OF dfies.
  DATA: lwa_help_fields  TYPE  dfies.
  DATA: lwa_return TYPE ddshretval,
        lt_return  TYPE TABLE OF ddshretval.
  DATA: lwa_rtbmit     TYPE /cgdc/t_rtbmit,
        lwa_matnr_desc TYPE lty_matnr_desc,
        lt_rtbrpar     TYPE TABLE OF /cgdc/t_rtbrpar,
        lt_rtbrpart    TYPE TABLE OF lty_rtbrpart,
        lwa_rtbrpart   TYPE lty_rtbrpart.
  DATA: lt_dynvalue  TYPE TABLE OF dynpread,
        lwa_dynvalue TYPE dynpread.
  SELECT SINGLE *
    FROM /cgdc/t_rtbmit
    INTO lwa_rtbmit
    WHERE mityp = /cgdc/t_rtbmit-mityp.
  IF sy-subrc = 0.
    SELECT *
      FROM /cgdc/t_rtbrpar
      INTO TABLE lt_rtbrpar
      WHERE rsn_func = gc_rsn_func-manual_itm "'M'
      AND rsnpf = lwa_rtbmit-rsnprf.
    IF sy-subrc = 0.
      SELECT rsncd descr
        FROM /cgdc/t_rtbrpart
        INTO TABLE lt_rtbrpart
        FOR ALL ENTRIES IN lt_rtbrpar
        WHERE rsn_func = gc_rsn_func-manual_itm "'M'
        AND rsnpf = lwa_rtbmit-rsnprf
        AND rsncd = lt_rtbrpar-rsncd
        AND spras = sy-langu.
      IF sy-subrc  = 0.
        LOOP AT lt_rtbrpart INTO lwa_rtbrpart.
          lwa_value-value = lwa_rtbrpart-rsncd.
          APPEND lwa_value TO lt_valuetab.
          lwa_value-value = lwa_rtbrpart-descr.
          APPEND lwa_value TO lt_valuetab.
        ENDLOOP.
        lwa_help_fields-tabname = gc_rsn_code_text_tabname. "'/CGDC/T_RTBRPART'.
        lwa_help_fields-fieldname = gc_rtbrpart_field-rsncd."  'RSNCD'.
        APPEND lwa_help_fields TO lt_help_fields.
        lwa_help_fields-fieldname = gc_rtbrpart_field-descr." 'DESCR'.
        APPEND lwa_help_fields TO lt_help_fields.
        CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
          EXPORTING
            retfield        = gc_rtbrpart_field-rsncd "'RSNCD' "lv_fname'
            dynpprog        = sy-cprog
            dynpnr          = sy-dynnr
            value_org       = gc_val_org-cell "'C'
          TABLES
            value_tab       = lt_valuetab[]
            field_tab       = lt_help_fields[]
            return_tab      = lt_return
          EXCEPTIONS
            parameter_error = 1
            no_values_found = 2
            OTHERS          = 3.
        IF sy-subrc = 0.
          READ TABLE lt_return INTO lwa_return INDEX 1.
          IF sy-subrc = 0.
            gs_man_itm-rsncd = lwa_return-fieldval.
            READ TABLE lt_rtbrpart INTO lwa_rtbrpart WITH KEY rsncd = lwa_return-fieldval.
            IF sy-subrc = 0.
              gs_man_itm-rsncd_desc = lwa_rtbrpart-descr.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

FORM fcode_upco.
  IF gt_billitem IS INITIAL.

    IF sy-ucomm EQ gc_fcode-dich.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i060(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-060.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ELSE.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e060(/cgdc/clrq) DISPLAY LIKE gc_message_type-information.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-060.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ELSE.
    PERFORM get_missing_lines_count.
    CASE gs_variables-max_on_dmd_excd .
      WHEN gc_max_on_dmd_excd-r.
        PERFORM update_items_on_clrq.
      WHEN OTHERS.
        "Do Nothing.
    ENDCASE.
  ENDIF.
ENDFORM.
FORM f4_wbs.
  TYPES : BEGIN OF lty_f4_wbs,
            posid TYPE ps_posid,
            pspnr TYPE ps_pspnr,
            post1 TYPE ps_post1,
          END OF lty_f4_wbs,
          BEGIN OF lty_valuetab,
            value TYPE c LENGTH 40,
          END OF lty_valuetab.
  DATA: lt_valuetab TYPE TABLE OF lty_valuetab.
  DATA: lwa_value TYPE lty_valuetab.
  DATA: lt_help_fields  TYPE TABLE OF dfies.
  DATA: lwa_help_fields  TYPE  dfies.
  DATA: lwa_return TYPE ddshretval,
        lt_return  TYPE TABLE OF ddshretval.
  DATA : lt_f4_wbs  TYPE TABLE OF lty_f4_wbs,
         lwa_f4_wbs TYPE lty_f4_wbs.
  DATA: lt_prps TYPE TABLE OF s_prps.
  PERFORM select_prps CHANGING lt_prps.
  DELETE lt_prps WHERE fakkz IS INITIAL.
  MOVE-CORRESPONDING lt_prps TO lt_f4_wbs.
  LOOP AT lt_f4_wbs INTO lwa_f4_wbs.
    lwa_value-value = lwa_f4_wbs-pspnr.
    APPEND lwa_value TO lt_valuetab.
    lwa_value-value = lwa_f4_wbs-post1.
    APPEND lwa_value TO lt_valuetab.
  ENDLOOP.
  lwa_help_fields-tabname = gc_structure-prps."'PRPS'.
  lwa_help_fields-fieldname = gc_prps_field-pspnr. "'PSPNR'.
  APPEND lwa_help_fields TO lt_help_fields.

  lwa_help_fields-tabname = gc_structure-prps.
  lwa_help_fields-fieldname = gc_prps_field-post1."'POST1'.
  APPEND lwa_help_fields TO lt_help_fields.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = gc_prps_field-pspnr "'PSPNR' "lv_fname'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
    TABLES
      value_tab       = lt_valuetab
      field_tab       = lt_help_fields[]
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc = 0.
    READ TABLE lt_return INTO lwa_return INDEX 1.
    IF sy-subrc = 0.
      READ TABLE lt_f4_wbs INTO lwa_f4_wbs WITH KEY posid = lwa_return-fieldval.
      IF sy-subrc = 0.
        gs_man_itm-ps_psp_pnr = lwa_f4_wbs-pspnr.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM f4_fkdat.
  CALL FUNCTION 'F4_DATE'
    IMPORTING
      select_date = gs_man_itm-fkdat.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
FORM fcode_canc204.
  CLEAR : /cgdc/t_rtbmit,
          gs_variables-dis_man_itm_dd,
          gs_man_itm.
  gs_variables-man_itm_prog = gc_program.
  gs_variables-man_itm_scrn = gc_screen-dummy.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
FORM fcode_cont204.
  DATA: lwa_clrit_old TYPE /cgdc/s_clrqit.
  DATA: lt_prps    TYPE TABLE OF prps,
        lwa_prps   TYPE prps,
        lwa_rtbmit TYPE /cgdc/t_rtbmit.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  CLEAR lwa_rtbmit.

  gs_man_itm-mityp = /cgdc/t_rtbmit-mityp.
  IF gs_variables-man_itm_scr_avl IS INITIAL.
    SELECT *
      FROM prps
      INTO TABLE lt_prps
      WHERE pspnr = gs_man_itm-ps_psp_pnr.
    IF sy-subrc = 0.
      READ TABLE lt_prps INTO lwa_prps INDEX 1.
      gs_man_itm-ps_psp_pnr = lwa_prps-pspnr.
      gs_man_itm-objnr = lwa_prps-objnr.
    ENDIF.
  ELSE.

  ENDIF.

  IF gs_man_itm-matnr IS NOT INITIAL
    AND gs_man_itm-fkdat IS NOT INITIAL
    AND gs_man_itm-kwmeng IS NOT INITIAL
    AND gs_man_itm-rsncd IS NOT INITIAL
    AND gs_man_itm-vrkme IS NOT INITIAL
    AND gs_man_itm-waerk IS NOT  INITIAL
    AND gs_man_itm-ps_psp_pnr IS NOT INITIAL
    AND gs_man_itm-kbetr1 IS NOT INITIAL.

    gs_man_itm-itmty = gc_clrq_itmty-prepayment_item.
    gs_man_itm-budat = gs_man_itm-fkdat.

    SELECT SINGLE *
      FROM /cgdc/t_rtbmit
      INTO lwa_rtbmit
      WHERE mityp = gs_man_itm-mityp.
    gs_man_itm-rtbusage = lwa_rtbmit-vwpos.
    gs_variables-bit_num_gen = abap_true.

    PERFORM update_clrq_item01 USING space
                                    ls_link_data
                                    lwa_clrit_old
                                           CHANGING gs_man_itm.
    gs_variables-refresh_calc_req_items_grid = abap_true.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i026(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-026.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.


  CLEAR: /cgdc/t_rtbmit,
         gs_variables-dis_man_itm_dd,
         gs_man_itm.
  gs_variables-man_itm_prog = gc_program.
  gs_variables-man_itm_scrn = gc_screen-dummy.
  gs_variables-calc_changed = abap_true.
  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
FORM fcode_tab_calc_grps.
  DATA: lv_subrc  TYPE sy-subrc,
        lt_komv   TYPE komv_t,
        lt_fcat   TYPE lvc_t_fcat,
        ls_komp   TYPE komp,
        lwa_komv  TYPE komv,
        lwa_crgrr TYPE /cgdc/s_clrqgrr.
  FIELD-SYMBOLS: <lwa_crgrr> TYPE /cgdc/s_clrqgrr.

  ts_hdr_details-activetab = gc_fcode-tab_calc_grps.

ENDFORM.


FORM filter_on_item_cat USING lv_ucomm.
  DATA: lv_itmty TYPE /cgdc/clrq_item_type.

  CLEAR: lv_itmty.

  IF gt_clrq_key IS INITIAL.
    gt_clrq_key = gs_clrqdoc_infocus-x-critm_key.
  ENDIF.

  CLEAR gs_clrqdoc_infocus-x-critm_key.

  CASE lv_ucomm.
    WHEN gc_fcode-cos_items.
      SELECT clrno, clrit
      FROM /cgdc/_clrqit
      WHERE clrno  = @gs_clrqdoc_infocus-x-crhdr-clrno
      AND   clrsit = @gc_clrsit_low
      AND   itmty IS INITIAL
      INTO TABLE @gs_clrqdoc_infocus-x-critm_key.
    WHEN gc_fcode-bip_items.
      lv_itmty = gc_clrq_itmty-bill_plan_line.
    WHEN gc_fcode-man_items.
      lv_itmty = gc_clrq_itmty-manual_line.
    WHEN gc_fcode-pp_items.
      lv_itmty = gc_clrq_itmty-prepayment_item.
    WHEN gc_fcode-rel_items.
      lv_itmty = gc_clrq_itmty-release_item .
    WHEN gc_fcode-clrq_grp.
      lv_itmty = gc_clrq_itmty-calc_grp_itm.
    WHEN OTHERS.
      "No action
  ENDCASE.

  IF gs_clrqdoc_infocus-x-critm_key IS INITIAL.
    SELECT clrno, clrit
     FROM /cgdc/_clrqit
     WHERE clrno  = @gs_clrqdoc_infocus-x-crhdr-clrno
     AND   clrsit = @gc_clrsit_low
     AND   itmty  = @lv_itmty
     INTO TABLE @gs_clrqdoc_infocus-x-critm_key.
  ENDIF.
ENDFORM.
FORM fcode_calc_grp_cond.
  CALL SCREEN gc_screen-calc_grp_cond_popup STARTING AT 5 1.

ENDFORM.
FORM fcode_canc152.
  CLEAR : /cgdc/s_clrqgrr,
          gs_variables-calc_grp_knumh,
          gs_variables-clcgrp_indx_infocus,
          gs_man_itm.
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.

FORM fcode_cont152.

  CLEAR: /cgdc/s_clrqgrr, gs_variables-calc_grp_knumh, gs_man_itm, gs_variables-clcgrp_indx_infocus.
  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form fill_bill_pre_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_bill_pre_data USING lv_call_for TYPE char1.  " DCLM 7059
*** X: Display, SPACE: Billing, Y: Funding Checks From CLIN/ACRN Accounting
  DATA : lref_billprev_line_data TYPE REF TO data,
         lv_view_name_with_prm   TYPE string,
         lt_clrqbi               TYPE /cgdc/tt_clrqbi,
         lwa_clrqbi              TYPE /cgdc/s_clrqbi,
         lwa_clrqbi_upd          TYPE /cgdc/s_clrqbi_fcat,
*         lwa_clrq_gprf           TYPE /cgdc/s_clrqgrp,
         lv_where                TYPE string,
         lt_clrqit               TYPE /cgdc/tt_clrqit,
         lt_whitelist            TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line.
  DATA : lv_viewname TYPE string,
         lv_bstat    TYPE sy-ucomm,
         ls_bilityp  TYPE /cgdc/t_bilitty,
         lt_bilityp  TYPE TABLE OF  /cgdc/t_bilitty,
         ls_clrqbi   TYPE /cgdc/s_clrqbi,
         lwa_crgprf  TYPE /cgdc/s_clrqgrp.
  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi_fcat.

  FIELD-SYMBOLS: <lwa_clrq>   TYPE any,
                 <lv_clrno>   TYPE any,
                 <lv_rtbbinr> TYPE any,
                 <lv_data>    TYPE any.
  .
  FIELD-SYMBOLS: <lwa_line> TYPE data.
*  CONCATENATE gc_clrqbi_field-clrno gc_operator-eq_sign gs_clrqdoc_infocus-x-crhdr-clrno
*      INTO lv_where SEPARATED BY space.

  CLEAR gt_bill_pre_data.
  IF NOT gs_clrqdoc_infocus-x-crbinr  IS INITIAL.

    SELECT auart, fkara FROM tvak
      FOR ALL ENTRIES IN @gs_clrqdoc_infocus-x-crbinr
      WHERE auart = @gs_clrqdoc_infocus-x-crbinr-auart OR
            auart = @gs_rtbp-auart
      INTO TABLE @DATA(lt_fkara).


    IF  lv_call_for EQ abap_true.

      IF gv_bi_where IS NOT INITIAL.
        LOOP AT gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi WHERE (gv_bi_where).

          CLEAR lwa_clrqbi_upd.

          lwa_clrqbi_upd = CORRESPONDING #( lwa_clrqbi ).

          IF lwa_clrqbi_upd-auart  IS INITIAL AND lwa_clrqbi_upd-bdrty IS INITIAL .
            IF gs_rtbp-auart IS NOT INITIAL AND
               gs_rtbp-bdrty IS NOT INITIAL.
              lwa_clrqbi_upd-auart = gs_rtbp-auart.
              lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
              lwa_clrqbi_upd-cr_auart = gs_rtbp-cr_auart.
              lwa_clrqbi_upd-cr_bdrty = gs_rtbp-cr_bdrty.
            ELSE.
              " message that debit values were not maintained in either table
            ENDIF.
          ENDIF.

*          IF lwa_clrqbi_upd-auart IS INITIAL.
*            lwa_clrqbi_upd-auart = gs_rtbp-auart.
*          ENDIF.
*
*          IF lwa_clrqbi_upd-bdrty IS INITIAL .
*            lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
*          ENDIF.


          READ TABLE gs_clrqdoc_infocus-x-crgprf INTO lwa_crgprf WITH KEY
          clrno = lwa_clrqbi-clrno
          bill_item = lwa_clrqbi-bill_item.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-grpid = lwa_crgprf-grpid.
            lwa_clrqbi_upd-splt_id = lwa_crgprf-splt_id.
          ENDIF.

          READ TABLE lt_fkara INTO DATA(lwa_fkara) WITH KEY auart = lwa_clrqbi_upd-auart.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-fkara = lwa_fkara-fkara.
          ENDIF.

          IF lwa_clrqbi_upd-zmeng = 0.
            lwa_clrqbi_upd-zmeng = 1.
          ENDIF.

          lwa_clrqbi_upd-faksk = gs_contract_hdr-faksk.

          READ TABLE gt_contract_itm INTO DATA(lwa_vbap)
          WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                   posnr = lwa_clrqbi_upd-vgpos.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
          ELSE.
            READ TABLE gt_contract_subitm INTO lwa_vbap
          WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                   posnr = lwa_clrqbi_upd-vgpos.
            IF sy-subrc = 0.
              lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
            ENDIF.
          ENDIF.


          APPEND lwa_clrqbi_upd TO gt_bill_pre_data.

          CLEAR lwa_clrqbi.

        ENDLOOP.

      ELSE.
        LOOP AT gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi.

          CLEAR lwa_clrqbi_upd.

          lwa_clrqbi_upd = CORRESPONDING #( lwa_clrqbi ).

          IF lwa_clrqbi_upd-auart  IS INITIAL AND lwa_clrqbi_upd-bdrty IS INITIAL .
            IF gs_rtbp-auart IS NOT INITIAL AND
               gs_rtbp-bdrty IS NOT INITIAL.
              lwa_clrqbi_upd-auart = gs_rtbp-auart.
              lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
              lwa_clrqbi_upd-cr_auart = gs_rtbp-cr_auart.
              lwa_clrqbi_upd-cr_bdrty = gs_rtbp-cr_bdrty.
            ELSE.
              " message that debit values were not maintained in either table
            ENDIF.
          ENDIF.

*
*          IF lwa_clrqbi_upd-auart IS INITIAL.
*            lwa_clrqbi_upd-auart = gs_rtbp-auart.
*          ENDIF.
*
*          IF lwa_clrqbi_upd-bdrty IS INITIAL .
*            lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
*          ENDIF.

          READ TABLE gs_clrqdoc_infocus-x-crgprf INTO lwa_crgprf WITH KEY
          clrno = lwa_clrqbi-clrno
          bill_item = lwa_clrqbi-bill_item.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-grpid = lwa_crgprf-grpid.
            lwa_clrqbi_upd-splt_id = lwa_crgprf-splt_id.
          ENDIF.

          READ TABLE lt_fkara INTO lwa_fkara WITH KEY auart = lwa_clrqbi_upd-auart.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-fkara = lwa_fkara-fkara.
          ENDIF.

          IF lwa_clrqbi_upd-zmeng = 0.
            lwa_clrqbi_upd-zmeng = 1.
          ENDIF.

          lwa_clrqbi_upd-faksk = gs_contract_hdr-faksk.

          READ TABLE gt_contract_itm INTO lwa_vbap
          WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                   posnr = lwa_clrqbi_upd-vgpos.
          IF sy-subrc = 0.
            lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
          ELSE.
            READ TABLE gt_contract_subitm INTO lwa_vbap
          WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                   posnr = lwa_clrqbi_upd-vgpos.
            IF sy-subrc = 0.
              lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
            ENDIF.
          ENDIF.


          APPEND lwa_clrqbi_upd TO gt_bill_pre_data.

          CLEAR lwa_clrqbi.
        ENDLOOP.

      ENDIF.

      IF gs_variables-bstat_filter IS INITIAL.
        lv_bstat = gc_fcode-open_item.
      ELSE.
        lv_bstat = gs_variables-bstat_filter.
      ENDIF.

      PERFORM filter_billing_items USING lv_bstat.



    ELSEIF lv_call_for EQ abap_false OR lv_call_for EQ 'Y'.      " DCLM 7059

      SELECT DISTINCT clrno rtbbinr
           FROM /cgdc/_clrqit
           INTO CORRESPONDING FIELDS OF TABLE lt_clrqit
           FOR ALL ENTRIES IN gs_clrqdoc_infocus-x-crbinr
           WHERE clrno = gs_clrqdoc_infocus-x-crbinr-clrno
           AND rtbbinr = gs_clrqdoc_infocus-x-crbinr-bill_item
           AND clrsit NE gc_sub_main.                                          " DCLM 5764
***DCLM 7059
      IF lv_call_for EQ 'Y'.
        lv_where = 'BSTAT = space OR FSCHED IS NOT INITIAL'.
      ELSE.
        lv_where = 'BSTAT = space'.
      ENDIF.
***
      SELECT  *
             FROM /cgdc/t_bilitty
             INTO TABLE @lt_bilityp.

      CLEAR lwa_clrqbi.
      LOOP AT gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi WHERE (lv_where).

        CLEAR lwa_clrqbi_upd.
        IF  lwa_clrqbi-faksp = space AND lwa_clrqbi-bldat <= sy-datum .
          READ TABLE lt_clrqit TRANSPORTING NO FIELDS
                               WITH KEY clrno   = lwa_clrqbi-clrno
                                        rtbbinr = lwa_clrqbi-bill_item.
          IF sy-subrc = 0.


            READ TABLE lt_bilityp INTO ls_bilityp WITH KEY bilitmtyp = lwa_clrqbi-bitype.
            IF sy-subrc =  0.

              IF ls_bilityp-allow_0 = abap_false AND lwa_clrqbi-netwr = 0.
                CONTINUE.
              ENDIF.

              IF ls_bilityp-allow_neg = abap_false AND lwa_clrqbi-netwr < 0.
                CONTINUE.
              ENDIF.

              lwa_clrqbi_upd = CORRESPONDING #( lwa_clrqbi ).

              IF lwa_clrqbi_upd-auart  IS INITIAL AND lwa_clrqbi_upd-bdrty IS INITIAL .
                IF gs_rtbp-auart IS NOT INITIAL AND
               gs_rtbp-bdrty IS NOT INITIAL.
                  lwa_clrqbi_upd-auart = gs_rtbp-auart.
                  lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
                  lwa_clrqbi_upd-cr_auart = gs_rtbp-cr_auart.
                  lwa_clrqbi_upd-cr_bdrty = gs_rtbp-cr_bdrty.
                ELSE.
                  " message that debit values were not maintained in either table
                ENDIF.
              ENDIF.


*              IF lwa_clrqbi_upd-auart IS INITIAL.
*                lwa_clrqbi_upd-auart = gs_rtbp-auart.
*              ENDIF.
*
*              IF lwa_clrqbi_upd-bdrty IS INITIAL .
*                lwa_clrqbi_upd-bdrty = gs_rtbp-bdrty.
*              ENDIF.

              READ TABLE gs_clrqdoc_infocus-x-crgprf INTO lwa_crgprf WITH KEY
                clrno = lwa_clrqbi-clrno
                bill_item = lwa_clrqbi-bill_item.
              IF sy-subrc = 0.
                lwa_clrqbi_upd-grpid = lwa_crgprf-grpid.
                lwa_clrqbi_upd-splt_id = lwa_crgprf-splt_id.
              ENDIF.

              READ TABLE lt_fkara INTO lwa_fkara WITH KEY auart = lwa_clrqbi_upd-auart.
              IF sy-subrc = 0.
                lwa_clrqbi_upd-fkara = lwa_fkara-fkara.
              ENDIF.

              IF lwa_clrqbi_upd-zmeng = 0.
                lwa_clrqbi_upd-zmeng = 1.
              ENDIF.

              lwa_clrqbi_upd-faksk = gs_contract_hdr-faksk.

              READ TABLE gt_contract_itm INTO lwa_vbap
              WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                       posnr = lwa_clrqbi_upd-vgpos.
              IF sy-subrc = 0.
                lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
              ELSE.
                READ TABLE gt_contract_subitm INTO lwa_vbap
              WITH KEY vbeln = lwa_clrqbi_upd-vgbel
                       posnr = lwa_clrqbi_upd-vgpos.
                IF sy-subrc = 0.
                  lwa_clrqbi_upd-faksp_itm = lwa_vbap-faksp.
                ENDIF.
              ENDIF.

              APPEND lwa_clrqbi_upd TO gt_bill_pre_data.

            ENDIF.
          ENDIF.
        ENDIF.
        CLEAR lwa_clrqbi.
      ENDLOOP.
    ENDIF.

    IF  NOT gs_clrqdoc_infocus-x-crgprf IS INITIAL.
      MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crgprf TO gt_grpid.
    ENDIF.

  ENDIF.

ENDFORM.

FORM fcode_repr.
  DATA: lv_maxod     TYPE /cgdc/maxod,
        lt_clrit_key TYPE /cgdc/tt_clrqit_key,
        lv_lines     TYPE sy-tabix,
        lv_ans       TYPE c.
*        ls_clrqbs_doc TYPE /cgdc/s_clrqbs_doc.

  CLEAR: lv_maxod, lv_lines,
         lt_clrit_key, lv_ans.
*         ls_clrqbs_doc.

  lt_clrit_key[] = gs_clrqdoc_infocus-x-critm_key[].

  DELETE lt_clrit_key[] WHERE clrsit = gc_clrsit_low.
  SORT lt_clrit_key[] BY clrno clrit.
  DELETE ADJACENT DUPLICATES FROM lt_clrit_key[] COMPARING clrno clrit.

  IF NOT lt_clrit_key[] IS INITIAL.
    lv_lines = lines( lt_clrit_key ).

    SELECT SINGLE maxod FROM /cgdc/t_rtbp
    INTO lv_maxod
    WHERE rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn.

    IF lv_lines LE lv_maxod.
      "Call transaction
      IF NOT gs_variables-calc_changed IS INITIAL.
        PERFORM popup_to_confirm_for_on_demand  USING TEXT-054
                                                 TEXT-055
                                                 TEXT-065
                                                 icon_checked
                                                 TEXT-066
                                                 icon_cancel
                                                 abap_true
                                           CHANGING lv_ans.
        IF sy-subrc EQ 0 AND lv_ans EQ gc_answer-yes.
          CLEAR: lv_ans.
          PERFORM document_save USING gs_clrqdoc_infocus
                                      abap_true.

          PERFORM reprice_calc_req_fore.
        ELSEIF sy-subrc EQ 0 AND lv_ans EQ gc_answer-no.
          PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                             gc_enq_mode-write.

          PERFORM reprice_calc_req_fore.
        ELSE.
          "No action required.
        ENDIF.
      ELSE.
        "++ SOC - AMISHARMA - Dequeue before reprice. DCLM5843
        " else leads to cumulative locks and locking error during repricing/update from CR screen.
        IF gs_clrqdoc_infocus-x-crhdr-clrno IS NOT INITIAL.
          PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                   gc_enq_mode-write.
        ENDIF.
        "++ EOC - AMISHARMA - Dequeue before refresh.

        PERFORM reprice_calc_req_fore.
      ENDIF.
    ELSE.
      "Call background.
      IF NOT gs_variables-calc_changed IS INITIAL.
        PERFORM popup_to_confirm_for_on_demand  USING TEXT-054
                                                 TEXT-055
                                                 TEXT-065
                                                 icon_checked
                                                 TEXT-066
                                                 icon_cancel
                                                 abap_true
                                           CHANGING lv_ans.
        IF sy-subrc EQ 0 AND lv_ans EQ gc_answer-yes.
          CLEAR: lv_ans.
          PERFORM document_save USING gs_clrqdoc_infocus
                                      abap_true.

          PERFORM reprice_calc_req_back USING abap_false.
        ELSEIF sy-subrc EQ 0 AND lv_ans EQ gc_answer-no.
          PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                             gc_enq_mode-write.

          PERFORM reprice_calc_req_back USING abap_false.
        ELSE.
          "No action required.
        ENDIF.
      ELSE.
        PERFORM reprice_calc_req_back USING abap_false.
      ENDIF.
    ENDIF.
  ENDIF.

  PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-x-crhdr-clrno.
ENDFORM.
FORM fcode_ts.
  DATA: lt_msg TYPE /cgdc/t_message,
        ls_msg TYPE /cgdc/s_message.
  SELECT *
         FROM /cgdc/t_clrq_erh
         INTO TABLE @DATA(lt_errh).

  CASE gs_variables-max_on_dmd_excd.
    WHEN gc_max_on_dmd_excd-r.
      READ TABLE lt_errh INTO DATA(ls_errh) WITH KEY msg_code = gc_msg_code-i.
    WHEN gc_max_on_dmd_excd-y.
      READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = gc_msg_code-p.
    WHEN gc_max_on_dmd_excd-g.
      READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = gc_msg_code-f.
    WHEN OTHERS.
  ENDCASE.
  ls_msg-msgid = ls_errh-msgclass.
  ls_msg-msgnr = ls_errh-msgid.
  ls_msg-msgty = ls_errh-msgty.
  APPEND ls_msg TO gt_messages_header.
  CLEAR ls_msg.

*- add message for blcok *-
  CALL METHOD /cgdc/cl_be_helper=>get_blocks_on_contract
    EXPORTING
      iv_vbeln  = gs_clrqdoc_infocus-x-crhdr-vgbel
    IMPORTING
      et_blocks = DATA(lt_blocks).
  IF lt_blocks IS NOT INITIAL.
    ls_msg-msgid = gc_clrq_msg_cls.
    ls_msg-msgnr = gc_msg_cls_msgnr-165.
    ls_msg-msgty = gc_message_type-error.
    APPEND ls_msg TO gt_messages_header.
    CLEAR ls_msg.
  ENDIF.
*- add message for blcok *-

*- get header messages
  DATA(lv_len) = strlen( gs_variables-header_messages ).
  IF lv_len GT 0.
    DATA(lv_n) = 0.
    DO lv_len TIMES.
      READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = gs_variables-header_messages+lv_n(1).
      IF sy-subrc EQ 0.
        ls_msg-msgid = ls_errh-msgclass.
        ls_msg-msgnr = ls_errh-msgid.
        ls_msg-msgty = ls_errh-msgty.
        IF ls_msg-msgnr EQ gc_msg_cls_msgnr-058.
          ls_msg-msgv1 = gs_variables-pbd_number.
        ENDIF.
        APPEND ls_msg TO gt_messages_header.
        CLEAR ls_msg.
      ENDIF.
      lv_n = lv_n + 1.
    ENDDO.
  ENDIF.
  SORT gt_messages_header BY msgty.
  READ TABLE gt_messages_header INTO DATA(ls_msgh) WITH KEY msgty = gc_message_type-error.
  IF sy-subrc EQ 0.
    gs_variables-header_light = icon_red_light.
  ELSE.
    READ TABLE gt_messages_header INTO ls_msgh WITH KEY msgty = gc_message_type-warning.
    IF sy-subrc EQ 0 AND gv_light NE icon_red_light.
      gs_variables-header_light = icon_yellow_light.
    ELSE.
      READ TABLE gt_messages_header INTO ls_msgh WITH KEY msgty = gc_message_type-information.
      IF sy-subrc EQ 0 AND ( gv_light NE icon_red_light AND  gv_light NE icon_yellow_light ).
        gs_variables-header_light = icon_green_light.
      ENDIF.
    ENDIF.
  ENDIF.
  DELETE ADJACENT DUPLICATES FROM gt_messages_header.
  IF gt_messages_header IS NOT INITIAL.
    CALL FUNCTION '/CGDC/CLRQ_SHOW_MESSAGES'
      EXPORTING
        it_messages = gt_messages_header.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form filter_billing_items
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM filter_billing_items  USING lv_ucomm.

  DATA: lt_bill_pre_data TYPE TABLE OF /cgdc/s_clrqbi_fcat.
  FIELD-SYMBOLS: <ls_data>   TYPE any,
                 <lv_bstat>  TYPE any,
                 <lv_popend> TYPE any.

  lt_bill_pre_data = gt_bill_pre_data.

  CLEAR gt_bill_pre_data.

  IF <ls_data> IS ASSIGNED.
    UNASSIGN <ls_data>.
  ENDIF.

  IF <lv_bstat> IS ASSIGNED.
    UNASSIGN <lv_bstat>.
  ENDIF.

  IF <lv_popend> IS ASSIGNED.
    UNASSIGN <lv_popend>.
  ENDIF.

  CASE lv_ucomm.
    WHEN gc_fcode-bill_item.
*      LOOP AT gt_bill_pre_data_all ASSIGNING <ls_data>.
      LOOP AT lt_bill_pre_data ASSIGNING <ls_data>.
        ASSIGN COMPONENT gc_clrqbi_field-bstat OF STRUCTURE <ls_data> TO <lv_bstat>.
        IF (  <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-invoice_posted
           OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-invoice_cleared ).
          APPEND <ls_data> TO gt_bill_pre_data.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    WHEN gc_fcode-open_item.
*      LOOP AT gt_bill_pre_data_all ASSIGNING <ls_data>.
      LOOP AT lt_bill_pre_data ASSIGNING <ls_data>.
        ASSIGN COMPONENT gc_clrqbi_field-bstat     OF STRUCTURE <ls_data> TO <lv_bstat>.
        ASSIGN COMPONENT gc_clrqbi_field-pop_enddt OF STRUCTURE <ls_data> TO <lv_popend>.
        IF ( <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-open ).
          APPEND <ls_data> TO gt_bill_pre_data.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    WHEN gc_fcode-past_due.
*      LOOP AT gt_bill_pre_data_all ASSIGNING <ls_data>.
      LOOP AT lt_bill_pre_data ASSIGNING <ls_data>.
        ASSIGN COMPONENT gc_clrqbi_field-pop_enddt OF STRUCTURE <ls_data> TO <lv_popend>.
        ASSIGN COMPONENT gc_clrqbi_field-bstat     OF STRUCTURE <ls_data> TO <lv_bstat>.
        IF ( <lv_popend> < sy-datum
           AND <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-open ).
          APPEND <ls_data> TO gt_bill_pre_data.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    WHEN gc_fcode-in_prog.
*      LOOP AT gt_bill_pre_data_all ASSIGNING <ls_data>.
      LOOP AT lt_bill_pre_data ASSIGNING <ls_data>.
        ASSIGN COMPONENT gc_clrqbi_field-bstat OF STRUCTURE <ls_data> TO <lv_bstat>.
        IF ( <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-billing_req
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-pbd_created
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-pbd_finalized
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-pbd_in_rework
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-pbd_approved
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-invoice_created
          OR <lv_bstat> = /cgdc/cl_clrq_process=>gc_itm_bill_status-erroneous_invoice ).
          APPEND <ls_data> TO gt_bill_pre_data.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    WHEN OTHERS.
*      gt_bill_pre_data = gt_bill_pre_data_all.
      gt_bill_pre_data = lt_bill_pre_data.
  ENDCASE.

  gs_variables-refersh_bill_bp_grid = abap_true.
  CALL METHOD cl_gui_cfw=>set_new_ok_code
    EXPORTING
      new_code = gc_fcode-entr.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form fast_change
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM fast_change  USING lv_ucomm TYPE sy-ucomm.

  CASE lv_ucomm.
    WHEN gc_fcode-bill_dt.
      gs_variables-dyn_selscr_ucomm = gc_fcode-bill_dt.
    WHEN gc_fcode-bill_blk.
      gs_variables-dyn_selscr_ucomm = gc_fcode-bill_blk.
    WHEN OTHERS.
  ENDCASE.

  IF gs_variables-dyn_selscr_ucomm IS NOT INITIAL.
    CALL SCREEN gc_screen-fast_chg_popup STARTING AT 10 10 .
  ENDIF.

  IF gs_variables-refersh_bill_bp_grid = abap_true.
    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = gc_fcode-entr.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_canc172
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_canc172 .
  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_cont172
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_cont172 .

  PERFORM update_fast_chg.

  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_canc173
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_canc173 .
  gs_variables-cont_constr_dt = abap_false.
  IF gs_variables-rel_constr_dt IS INITIAL.
    gs_variables-rel_constr_dt = sy-datum.
  ENDIF.
  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_cont173
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_cont173 .
*  PERFORM.
  gs_variables-cont_constr_dt = abap_true.
*  IF sy-dynnr = gc_screen-set_constr_dt_popup.
  gs_variables-refresh_calc_grp_grid = abap_true.

*  ENDIF.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form f4_reason_code_clrtyp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f4_reason_code_clrtyp .
  TYPES : BEGIN OF lty_rtbrpart,
            rsncd TYPE /cgdc/rtb_rsncd,
            descr TYPE /cgdc/rtb_rsncd_desc,
          END OF lty_rtbrpart,
          BEGIN OF lty_valuetab,
            value TYPE c LENGTH 40,
          END OF lty_valuetab.
  DATA: lt_valuetab TYPE TABLE OF lty_valuetab.
  DATA: lwa_value TYPE lty_valuetab.

  DATA: lt_help_fields  TYPE TABLE OF dfies.
  DATA: lwa_help_fields  TYPE  dfies.
  DATA: lwa_return TYPE ddshretval,
        lt_return  TYPE TABLE OF ddshretval.
  DATA: lwa_clrtype    TYPE /cgdc/t_clrtype,
        lwa_matnr_desc TYPE lty_matnr_desc,
        lt_rtbrpar     TYPE TABLE OF /cgdc/t_rtbrpar,
        lt_rtbrpart    TYPE TABLE OF lty_rtbrpart,
        lwa_rtbrpart   TYPE lty_rtbrpart.
  DATA: lt_dynvalue  TYPE TABLE OF dynpread,
        lwa_dynvalue TYPE dynpread.
  SELECT SINGLE *
    FROM /cgdc/t_clrtype
    INTO @lwa_clrtype
    WHERE clrqt = @gs_clrqdoc_infocus-x-crhdr-clrqt.
  IF sy-subrc = 0.
    IF gs_variables-itm_post_amt IS NOT INITIAL OR
     gs_variables-itm_post_amt_un IS NOT INITIAL OR
     gs_variables-itm_post_quan IS NOT INITIAL OR
     gs_variables-itm_post_quan_un IS NOT INITIAL. "postpone screen
      SELECT *
        FROM /cgdc/t_rtbrpar
        INTO TABLE lt_rtbrpar
        WHERE rsn_func EQ gc_rsn_func-postpone "'P'
        AND rsnpf = lwa_clrtype-rsnprf_p.
      IF sy-subrc = 0.
        SELECT rsncd descr
          FROM /cgdc/t_rtbrpart
          INTO TABLE lt_rtbrpart
          FOR ALL ENTRIES IN lt_rtbrpar
          WHERE rsn_func EQ gc_rsn_func-postpone "'P'
          AND rsnpf = lwa_clrtype-rsnprf_p
          AND rsncd = lt_rtbrpar-rsncd
          AND spras = sy-langu.
      ENDIF.
    ELSEIF gs_variables-itm_rej_amt IS NOT INITIAL OR
      gs_variables-itm_rej_quan IS NOT INITIAL. "Rejection screen
      SELECT *
       FROM /cgdc/t_rtbrpar
       INTO TABLE lt_rtbrpar
       WHERE rsn_func EQ gc_rsn_func-reject "'R'
       AND rsnpf = lwa_clrtype-rsnprf_r.
      IF sy-subrc = 0.
        SELECT rsncd descr
          FROM /cgdc/t_rtbrpart
          INTO TABLE lt_rtbrpart
          FOR ALL ENTRIES IN lt_rtbrpar
          WHERE rsn_func EQ gc_rsn_func-reject "'R'
          AND rsnpf = lwa_clrtype-rsnprf_r
          AND rsncd = lt_rtbrpar-rsncd
          AND spras = sy-langu.
      ENDIF.
    ENDIF.
    IF lt_rtbrpart[] IS NOT INITIAL.
      LOOP AT lt_rtbrpart INTO lwa_rtbrpart.
        lwa_value-value = lwa_rtbrpart-rsncd.
        APPEND lwa_value TO lt_valuetab.
        lwa_value-value = lwa_rtbrpart-descr.
        APPEND lwa_value TO lt_valuetab.
      ENDLOOP.
      lwa_help_fields-tabname = gc_rsn_code_text_tabname ."'/CGDC/T_RTBRPART'.
      lwa_help_fields-fieldname = gc_rtbrpart_field-rsncd.
      APPEND lwa_help_fields TO lt_help_fields.
      lwa_help_fields-fieldname = gc_rtbrpart_field-descr.
      APPEND lwa_help_fields TO lt_help_fields.
      CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
        EXPORTING
          retfield        = gc_rtbrpart_field-rsncd "'RSNCD'
          dynpprog        = sy-cprog
          dynpnr          = sy-dynnr
          value_org       = gc_val_org-cell "'C'
        TABLES
          value_tab       = lt_valuetab[]
          field_tab       = lt_help_fields[]
          return_tab      = lt_return
        EXCEPTIONS
          parameter_error = 1
          no_values_found = 2
          OTHERS          = 3.
      IF sy-subrc = 0.
        READ TABLE lt_return INTO lwa_return INDEX 1.
        IF sy-subrc = 0.
          /cgdc/s_clrq_screenfields-rsncd = lwa_return-fieldval.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

FORM fcode_cont206.
  DATA: ls_clrq_doc TYPE /cgdc/s_clrq_doc,
        lt_clrq_doc TYPE /cgdc/tt_clrq_doc,
        ls_clrqbi   TYPE /cgdc/s_clrqbi,
        ls_bilitty  TYPE /cgdc/t_bilitty,
        lt_bilitty  TYPE tt_bilitty.
  DATA: lv_invalid  TYPE flag,
        lv_fnkey    TYPE /cgdc/rtb_authfnkey,
        lr_data     TYPE REF TO data,
        lv_bilmatnr TYPE /cgdc/bilmatnr.

  FIELD-SYMBOLS: <ls_clrq> TYPE any.
  READ TABLE gt_bilitty INTO ls_bilitty
                            WITH KEY bilitmtyp = /cgdc/s_clrqbi_scrnfld-bitype.
  CONCATENATE gc_fnkey-bc ls_bilitty-rtb_authkey INTO lv_fnkey.
  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                              gs_clrqdoc_infocus-x-crhdr-vkorg
                              gs_clrqdoc_infocus-x-crhdr-vtweg
                              gs_clrqdoc_infocus-x-crhdr-spart
                              gc_auth_actv-crt_man_bl_itm
                              lv_fnkey
                        CHANGING lv_invalid.
  IF lv_invalid IS NOT INITIAL.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i095(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-095.
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    RETURN.
  ENDIF.
  gs_clrqdoc_infocus-updkz = abap_true.

  gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.

  CLEAR ls_clrqbi.
  ls_clrqbi-updkz     = gc_updkz_new.
  ls_clrqbi-clrno     = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_clrqbi-waerk     = gs_clrqdoc_infocus-x-crhdr-waerk.
  ls_clrqbi-bitype    = /cgdc/s_clrqbi_scrnfld-bitype.
  ls_clrqbi-pop_stdt  = /cgdc/s_clrqbi_scrnfld-pop_stdt.
  ls_clrqbi-pop_enddt = /cgdc/s_clrqbi_scrnfld-pop_enddt.
  ls_clrqbi-ps_psp_pnr = /cgdc/s_clrqbi_scrnfld-ps_psp_pnr.
  ls_clrqbi-bldat     = /cgdc/s_clrqbi_scrnfld-bldat.
  ls_clrqbi-rcode     = /cgdc/s_clrqbi_scrnfld-rcode.
  ls_clrqbi-bill_usage =  ls_bilitty-bill_usage.
  ls_clrqbi-bstat     = space.

  TRY.
      cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
    RECEIVING
      uuid = ls_clrqbi-bill_item ).
    CATCH cx_uuid_error.

  ENDTRY.


  IF NOT gt_bilitty IS INITIAL.
    CLEAR ls_bilitty.
    READ TABLE gt_bilitty INTO ls_bilitty
                          WITH KEY bilitmtyp = /cgdc/s_clrqbi_scrnfld-bitype.
    IF sy-subrc EQ 0.
      IF NOT ls_bilitty-bilmatnr IS INITIAL.
        lv_bilmatnr = ls_bilitty-bilmatnr.
      ELSE.
        lv_bilmatnr = /cgdc/s_clrqbi_scrnfld-bilmatnr.
      ENDIF.
      ls_clrqbi-bilmatnr = lv_bilmatnr.
*      ls_clrqbi-bilmatnr = ls_bilitty-bilmatnr.
      ls_clrqbi-fkrel    = ls_bilitty-fkrel.
    ENDIF.
  ELSE.
    SELECT * FROM /cgdc/t_bilitty
             INTO TABLE lt_bilitty.
    IF sy-subrc EQ 0.
      CLEAR ls_bilitty.
      READ TABLE lt_bilitty INTO ls_bilitty
                            WITH KEY bilitmtyp = /cgdc/s_clrqbi_scrnfld-bitype.
      IF sy-subrc EQ 0.
        IF NOT ls_bilitty-bilmatnr IS INITIAL.
          lv_bilmatnr = ls_bilitty-bilmatnr.
        ELSE.
          lv_bilmatnr = /cgdc/s_clrqbi_scrnfld-bilmatnr.
        ENDIF.
        ls_clrqbi-bilmatnr = lv_bilmatnr.

*        ls_clrqbi-bilmatnr = ls_bilitty-bilmatnr.
        ls_clrqbi-fkrel    = ls_bilitty-fkrel.
      ENDIF.
    ENDIF.
  ENDIF.

  APPEND ls_clrqbi  TO gs_clrqdoc_infocus-x-crbinr.

  gs_variables-calc_changed = abap_true.

  gs_variables-refersh_bill_bp_grid = abap_true.


  CLEAR: /cgdc/s_clrqbi_scrnfld-bitype,    /cgdc/s_clrqbi_scrnfld-rcode,
         /cgdc/s_clrqbi_scrnfld-descr,   /cgdc/s_clrqbi_scrnfld-pop_stdt,
         /cgdc/s_clrqbi_scrnfld-pop_enddt, /cgdc/s_clrqbi_scrnfld-bldat.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_UNDO_REJ
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_undo_rej.
  DATA: lwa_rejitm       LIKE LINE OF gt_rejitms,
        lv_count(3)      TYPE c VALUE 0,
        lv_net_value     TYPE netwr_ap,
        lv_net_value1    TYPE char20,
        lv_text_question TYPE char220,
        lv_answer.
  DATA : lv_invalid TYPE flag.
  FIELD-SYMBOLS: <lwa_critm>     TYPE /cgdc/s_clrqit,
                 <lwa_itm_value> TYPE s_item_val,
                 <ls_critm>      TYPE /cgdc/s_clrqit,
                 <lv_rtbbinr>    TYPE /cgdc/billitem_guid,
                 <lv_srvc_dt>    TYPE /cgdc/srvc_date,
                 <lv_lclrsit>    TYPE /cgdc/clrq_sitmno.


  PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
             gs_clrqdoc_infocus-x-crhdr-vkorg
             gs_clrqdoc_infocus-x-crhdr-vtweg
             gs_clrqdoc_infocus-x-crhdr-spart
             gc_auth_actv-rev_rej_item
             space
       CHANGING lv_invalid.

  IF lv_invalid IS NOT INITIAL.
    IF gs_variables-call_from_ui IS INITIAL.
      MESSAGE i098(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                            gs_clrqdoc_infocus-x-crhdr-vkorg
                                            gs_clrqdoc_infocus-x-crhdr-vtweg
                                            gs_clrqdoc_infocus-x-crhdr-spart.
    ELSE.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-098.
      gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
      gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
      gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
      gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
      gs_messages-msgty = gc_message_type-information.
      APPEND gs_messages TO gt_messages.
      CLEAR gs_messages.
    ENDIF.
    SET SCREEN 0.
    LEAVE SCREEN.
  ENDIF.

  CHECK gs_variables-manual_changes_rej_itm EQ abap_true.
  CLEAR gs_variables-manual_changes_rej_itm.

  LOOP AT gt_rejitms INTO lwa_rejitm WHERE check = abap_true.
    lv_count = lv_count + 1.   "no.of selected items
    lv_net_value = lv_net_value + lwa_rejitm-netwr. "total value of selected items
  ENDLOOP.

  SHIFT lv_count LEFT DELETING LEADING gc_zero.
  SPLIT TEXT-122 AT gc_operator-and_sign INTO DATA(lv_msg1)
                             DATA(lv_msg2)
                             DATA(lv_msg3).

  lv_net_value1 = CONV #( lv_net_value ).
  CONDENSE lv_net_value1.
  CONCATENATE lv_msg1 lv_count lv_msg2 lv_net_value1
    INTO lv_text_question SEPARATED BY space.

  CONCATENATE lv_text_question lv_msg3 INTO lv_text_question.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = TEXT-002
      text_question         = lv_text_question
      display_cancel_button = abap_true
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF lv_answer = gc_answer-yes.
    LOOP AT gt_rejitms INTO lwa_rejitm WHERE check = abap_true.
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm>
      WITH KEY clrno  = lwa_rejitm-clrno
               clrit  = lwa_rejitm-clrit
               clrsit = lwa_rejitm-clrsit
               clrdit = lwa_rejitm-clrdit.

      <lwa_critm>-istat = gc_ibill_stat-open.
      gs_variables-bit_num_gen = abap_true.


      READ TABLE gt_item_values ASSIGNING <lwa_itm_value>
      WITH KEY clrit = lwa_rejitm-clrit.

      IF sy-subrc = 0 .
        <lwa_itm_value>-open_quan = <lwa_itm_value>-open_quan + lwa_rejitm-zmeng.
        <lwa_itm_value>-rej_quan  = <lwa_itm_value>-rej_quan  - lwa_rejitm-zmeng.

        CLEAR <lwa_itm_value>-rej_amt.
        <lwa_itm_value>-open_amt = <lwa_itm_value>-tot_amt.

      ENDIF.

      PERFORM create_billing_item CHANGING <lwa_critm>.
      CLEAR gs_variables-bit_num_gen.
      IF <lwa_critm>-updkz <> gc_updkz_new.
        <lwa_critm>-updkz = gc_updkz_update.
      ENDIF.

    ENDLOOP.

    IF  <lwa_critm>-updkz = gc_updkz_update OR <lwa_critm>-updkz = gc_updkz_new.
      gs_variables-refresh_calc_req_items_grid = gs_variables-refersh_bill_bp_grid = abap_true.
      gs_variables-calc_changed = abap_true.

    ENDIF.

    SET SCREEN 0.
    LEAVE SCREEN.

  ELSE.
    LOOP AT gt_rejitms INTO lwa_rejitm WHERE check = abap_true.
      lwa_rejitm-check = abap_false.
    ENDLOOP.

  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_canc197
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_canc197 .
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FCODE_CONT506
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_cont506 .
  DATA : lv_count             TYPE i,
         lv_lines             TYPE i,
         lt_selected_rows     TYPE lvc_t_row,
         lwa_selected_row     TYPE lvc_s_row,
         lwa_reassign_bi_data TYPE /cgdc/s_clrqbi.

  CLEAR: lv_lines,
         lwa_selected_row,
         lwa_reassign_bi_data.

  CLEAR gt_selcted_rows_bi_reassign.
  CALL METHOD go_grid_reassign_bi->get_selected_rows
    IMPORTING
      et_index_rows = lt_selected_rows[].

  DESCRIBE TABLE lt_selected_rows LINES lv_lines.
  IF lv_lines = 1.
    READ TABLE lt_selected_rows INTO lwa_selected_row INDEX 1.
    READ TABLE gt_reassign_bi_data "gt_bill_pre_data_page
    INDEX lwa_selected_row-index
    INTO lwa_reassign_bi_data.
    APPEND lwa_reassign_bi_data TO gt_selcted_rows_bi_reassign.
    gv_cont506_flag = abap_true.
    SET SCREEN 0.
    LEAVE SCREEN.
  ELSE.
    MESSAGE e132(/cgdc/clrq).
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_canc506
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fcode_canc506 .
  SET SCREEN 0.
  LEAVE SCREEN.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form fcode_blk_auth_chk
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*

FORM fcode_blk_auth_chk.
  LOOP AT gt_blk_bill_pre_mod_rows ASSIGNING FIELD-SYMBOL(<lfs_bill_pre_mod_rows>).
    DATA: lv_blkid        TYPE /cgdc/blkid,
          lv_blkcd        TYPE char2,
          lv_action       TYPE char1,
          lv_manual_old   TYPE xfeld,
          lv_auth_old     TYPE abap_bool,
          lv_auth_new     TYPE abap_bool,
          lv_blk_desc_old TYPE vtext,
          lv_blkid_old    TYPE /cgdc/blkid.

    IF <lfs_bill_pre_mod_rows>-fieldname EQ gc_clrqbi_field-faksp."'FAKSP'.
      MOVE  <lfs_bill_pre_mod_rows>-value TO lv_blkcd.

      CALL METHOD /cgdc/cl_be_helper=>get_blkobj_by_blkcd
        EXPORTING
          im_blkcd  = lv_blkcd
        IMPORTING
          re_blkobj = lv_blkid.
*
      CALL METHOD /cgdc/cl_be_helper=>get_instance
        EXPORTING
          iv_blkid  = lv_blkid
          iv_blktyp = /cgdc/cl_be_helper=>gc_block_type-billing_block
        RECEIVING
          ro_blkobj = DATA(lo_blkobj).

      lo_blkobj->get_block_info(
        IMPORTING
          es_blkobjhdr  = DATA(ls_blkobjhdr)                  " CIS-AD: Block Object
      ).
      READ TABLE gt_bill_pre_data INTO DATA(ls_blk_auth_pre_data) INDEX <lfs_bill_pre_mod_rows>-row_id.
      IF sy-subrc = 0.
        ""check auth for old block for manual and override
        IF ls_blk_auth_pre_data-faksp = ' '.
          lv_auth_old = abap_true.
        ELSE.
          PERFORM check_old_blk_auth USING ls_blk_auth_pre_data-faksp
                                           ls_blk_auth_pre_data-bill_item
                                  CHANGING lv_auth_old
                                           lv_manual_old
                                           lv_blk_desc_old
                                           lv_blkid_old.

        ENDIF.
        IF lv_auth_old <> abap_true.
          ""error message here.
          MESSAGE i115(/cgdc/blk) WITH  ls_blk_auth_pre_data-bill_item
                                   ls_blk_auth_pre_data-faksp
                                   lv_blk_desc_old.
        ELSE.
          IF lv_blkcd = space.
            lv_auth_new = abap_true.
            CALL METHOD /cgdc/cl_be_helper=>skip_eval_register
              EXPORTING
                iv_billit = ls_blk_auth_pre_data-bill_item. " CIS-AD: Billing Item GUID
            READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING FIELD-SYMBOL(<gs_clrqdoc_infocus>)
                                                   WITH KEY bill_item = ls_blk_auth_pre_data-bill_item.
            IF sy-subrc = 0.
              <gs_clrqdoc_infocus>-faksp = lv_blkcd.
              MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crbinr TO gt_bill_pre_data.
            ENDIF.

          ELSE.
            ""check curr block auth for manual override
            IF ls_blkobjhdr-manual <> abap_true.
              "" error message for manual new block
              MESSAGE i115(/cgdc/blk) WITH  ls_blk_auth_pre_data-bill_item
                                        lv_blkcd
                                        ls_blkobjhdr-blkcd_descr.
            ELSE.
              ""if manual override allowed check the curr and prev block not equal and check auth
              IF ls_blk_auth_pre_data-faksp NE lv_blkcd.

                CALL METHOD lo_blkobj->check_auth
                  EXPORTING
                    xvbpa_hdr     = gt_x_vbpa
                    im_action     = gc_auth_action-apply " ""set case
                  RECEIVING
                    rv_authorised = lv_auth_new.
                IF lv_auth_new <> abap_true.
                  MESSAGE i115(/cgdc/blk) WITH  ls_blk_auth_pre_data-bill_item
                                        lv_blkcd
                                        ls_blkobjhdr-blkcd_descr.
                ELSE.
                  CALL METHOD /cgdc/cl_be_helper=>skip_eval_register
                    EXPORTING
                      iv_billit = ls_blk_auth_pre_data-bill_item. " CIS-AD: Billing Item GUID
                  READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <gs_clrqdoc_infocus> WITH KEY bill_item = ls_blk_auth_pre_data-bill_item.
                  IF sy-subrc = 0.
                    <gs_clrqdoc_infocus>-faksp = lv_blkcd.
                    MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crbinr TO gt_bill_pre_data.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_komv_pbp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LWA_KOMV
*&---------------------------------------------------------------------*
FORM fill_komv_pbp CHANGING lwa_crgrr TYPE /cgdc/s_clrqgrr
                            lwa_komv  TYPE komv.

  DATA: lv_subrc              TYPE sy-subrc,
        lv_tabix              TYPE sy-tabix,
        lv_base_cond_amnt_pbp TYPE netwr_ap,
        lt_crbinr             TYPE /cgdc/tt_clrqbi,
        lt_rtbbinr            TYPE RANGE OF /cgdc/billitem_guid,
        lwa_rtbbinr           LIKE LINE OF lt_rtbbinr,
        lwa_pbp_eligible_rqit LIKE LINE OF gt_pbp_eligible_rqit.

  LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE fsched IS NOT INITIAL AND bldat LE sy-datum AND faksp IS INITIAL.
    lwa_rtbbinr-option = 'EQ'.
    lwa_rtbbinr-sign = 'I'.
    lwa_rtbbinr-low = lwa_crbinr-bill_item.
    APPEND lwa_rtbbinr TO lt_rtbbinr.
  ENDLOOP.

  IF lt_rtbbinr IS NOT INITIAL.

    SELECT SUM( netwr )
      FROM /cgdc/_clrqit
      INTO lv_base_cond_amnt_pbp
      WHERE rtbbinr IN lt_rtbbinr
        AND clrsit NE gc_sub_main.

    IF sy-subrc EQ 0.
      lwa_komv-kwert = lwa_komv-kbetr = lv_base_cond_amnt_pbp.
      lwa_crgrr-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
    ENDIF.

  ENDIF.

*  PERFORM read_contract_header USING gs_clrqdoc_infocus-x-crhdr-vgbel.
*
*  IF gs_vbak-/cgdc/pbplq EQ 'H'.
*
*    READ TABLE gt_pbp_eligible_rqit
*    WITH KEY faksp = space
*             /cgdc/orgh = gs_clrqdoc_infocus-x-crhdr-vgbel
*    BINARY SEARCH
*    TRANSPORTING NO FIELDS.
*    lv_subrc = sy-subrc.
*    lv_tabix = sy-tabix.
*
*    IF lv_subrc EQ 0.
*
*      LOOP AT gt_pbp_eligible_rqit INTO lwa_pbp_eligible_rqit FROM lv_tabix.
*
*        IF lwa_pbp_eligible_rqit-faksp NE space
*          OR lwa_pbp_eligible_rqit-/cgdc/orgh NE gs_clrqdoc_infocus-x-crhdr-vgbel.
*          EXIT.
*        ENDIF.
*
*        lwa_komv-kbetr = lwa_komv-kbetr + lwa_pbp_eligible_rqit-netwr.
*        lwa_komv-kwert = lwa_komv-kbetr.
*
*      ENDLOOP.
*
*    ENDIF.
*
*  ELSEIF gs_vbak-/cgdc/pbplq EQ 'I'.
*
*    READ TABLE gt_pbp_eligible_rqit
*    WITH KEY faksp = space
*             /cgdc/orgh = gs_clrqdoc_infocus-x-crhdr-vgbel
*             /cgdc/orgi = lwa_crgrr-rowid
*    BINARY SEARCH
*    TRANSPORTING NO FIELDS.
*    lv_subrc = sy-subrc.
*    lv_tabix = sy-tabix.
*
*    IF lv_subrc EQ 0.
*
*      LOOP AT gt_pbp_eligible_rqit INTO lwa_pbp_eligible_rqit FROM lv_tabix.
*
*        IF lwa_pbp_eligible_rqit-faksp NE space
*          OR lwa_pbp_eligible_rqit-/cgdc/orgh NE gs_clrqdoc_infocus-x-crhdr-vgbel
*          OR lwa_pbp_eligible_rqit-/cgdc/orgi NE lwa_crgrr-rowid.
*          EXIT.
*        ENDIF.
*
*        lwa_komv-kbetr = lwa_komv-kbetr + lwa_pbp_eligible_rqit-netwr.
*        lwa_komv-kwert = lwa_komv-kbetr.
*
*      ENDLOOP.
*
*    ENDIF.
*
*  ENDIF.

ENDFORM.

FORM find_doc_st_ed_no USING lt_komv TYPE komv_tab
                        CHANGING lv_knumv_s TYPE knumv
                                 lv_knumv_e TYPE knumv
                                 lv_kposn_s TYPE kposn
                                 lv_kposn_e TYPE kposn.
  DATA(lt_komv_temp) = lt_komv.
  DATA : lwa_komv TYPE komv.
  SORT lt_komv_temp BY knumv.
  READ TABLE lt_komv_temp INTO lwa_komv INDEX 1.
  lv_knumv_s = lwa_komv-knumv.

  SORT lt_komv_temp BY knumv DESCENDING.
  READ TABLE lt_komv_temp INTO lwa_komv INDEX 1.
  lv_knumv_e = lwa_komv-knumv.

  SORT lt_komv_temp BY kposn.
  READ TABLE lt_komv_temp INTO lwa_komv INDEX 1.
  lv_kposn_s = lwa_komv-kposn.

  SORT lt_komv_temp BY kposn DESCENDING.
  READ TABLE lt_komv_temp INTO lwa_komv INDEX 1.
  lv_kposn_s = lwa_komv-kposn.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_CREATE_STRIP_TEXTS_WITH_ICON
*&---------------------------------------------------------------------*
FORM f_create_strip_texts_with_icon .
  DATA: lv_button TYPE c LENGTH 40,
        lv_empty  TYPE char1.

*-Giving name with Icon to change log tabstrip buttons
  LOOP AT SCREEN.
    CLEAR:lv_button,lv_empty.

    CASE screen-name.
      WHEN 'GS_TITLE_STRIP-HEADER'.
        IF gt_hdr_log IS NOT INITIAL.
          lv_empty = space.
        ELSE.
          lv_empty = gc_x.
        ENDIF.

        PERFORM f_create_icon USING lv_empty TEXT-208 CHANGING lv_button.
        gs_title_strip-header = lv_button.

      WHEN 'GS_TITLE_STRIP-BILL_ITEM'.
        IF gt_bi_log IS NOT INITIAL.
          lv_empty = space.
        ELSE.
          lv_empty = gc_x.
        ENDIF.

        PERFORM f_create_icon USING lv_empty TEXT-209 CHANGING lv_button.
        gs_title_strip-bill_item = lv_button.

      WHEN 'GS_TITLE_STRIP-PT'.
        IF gt_pt_log IS NOT INITIAL.
          lv_empty = space.
        ELSE.
          lv_empty = gc_x.
        ENDIF.

        PERFORM f_create_icon USING lv_empty TEXT-210 CHANGING lv_button.
        gs_title_strip-pt = lv_button.

      WHEN 'GS_TITLE_STRIP-IT'.
        IF gt_it_log IS NOT INITIAL.
          lv_empty = space.
        ELSE.
          lv_empty = gc_x.
        ENDIF.

        PERFORM f_create_icon USING lv_empty TEXT-212 CHANGING lv_button.
        gs_title_strip-it = lv_button.

      WHEN 'GS_TITLE_STRIP-IC'.
        IF gt_ic_log IS NOT INITIAL.
          lv_empty = space.
        ELSE.
          lv_empty = gc_x.
        ENDIF.

        PERFORM f_create_icon USING lv_empty TEXT-213 CHANGING lv_button.
        gs_title_strip-ic = lv_button.

      WHEN OTHERS.

    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_CREATE_ICON
*&---------------------------------------------------------------------*
FORM f_create_icon  USING    iv_empty TYPE char1
                             iv_text  TYPE any
                    CHANGING cv_but   TYPE char40.

  DATA lv_icon TYPE iconname.

  CONSTANTS: lc_red   TYPE iconname VALUE 'ICON_LED_RED',
             lc_green TYPE iconname VALUE 'ICON_LED_GREEN'.

  CLEAR cv_but.

*-Creating name with Icon for tabstrip button

  IF iv_empty EQ gc_x.
    lv_icon = lc_red.
  ELSE.
    lv_icon = lc_green.
  ENDIF.

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name                  = lv_icon
      text                  = iv_text
      info                  = ''
      add_stdinf            = ''
    IMPORTING
      result                = cv_but
    EXCEPTIONS
      icon_not_found        = 1
      outputfield_too_short = 2
      OTHERS                = 3.
  IF sy-subrc <> 0.
    cv_but = iv_text.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_INIT_CHLOG_HEADER_TAB
*&---------------------------------------------------------------------*
FORM f_init_chlog_header_tab .
  DATA :lv_cont_name(30) TYPE c,
        ls_lout          TYPE lvc_s_layo,
        ls_variant       TYPE disvariant,
        lt_excl          TYPE ui_functions.

  lv_cont_name = 'CC_903'.

*-create container object for change log header ALV
  IF go_ch_hdr_cont IS NOT BOUND.
    CREATE OBJECT go_ch_hdr_cont
      EXPORTING
        container_name              = lv_cont_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

*-create change log header ALV object
  IF go_ch_hdr_alv IS NOT BOUND.
    CREATE OBJECT go_ch_hdr_alv
      EXPORTING
        i_parent          = go_ch_hdr_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  ls_variant-report  = sy-repid.
  ls_lout-zebra      = gc_x.
  ls_lout-col_opt    = gc_x.
  ls_lout-cwidth_opt = gc_x.
  ls_lout-ctab_fname = 'COLOR'.   "field name for colors


  IF gt_fcat_hdr_log IS INITIAL.
    PERFORM f_prepare_fcat USING gc_chlog-t1 CHANGING gt_fcat_hdr_log . "prepare fieldcat table
  ENDIF.

  PERFORM f_prepare_excl_butons_list CHANGING lt_excl.  "Prepare buttons list to hide from ALV toolbar

  CALL METHOD go_ch_hdr_alv->set_table_for_first_display
    EXPORTING
      is_variant                    = ls_variant
      is_layout                     = ls_lout
      it_toolbar_excluding          = lt_excl
    CHANGING
      it_outtab                     = gt_hdr_log
      it_fieldcatalog               = gt_fcat_hdr_log
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_PREPARE_FCAT
*&---------------------------------------------------------------------*
FORM f_prepare_fcat  USING    iv_ind_flag TYPE char2
                     CHANGING ct_fcat TYPE lvc_t_fcat.

  CONSTANTS : lc_hdr_log_tab TYPE lvc_tname VALUE 'GT_HDR_LOG',
              lc_bi_log_tab  TYPE lvc_tname VALUE 'GT_BI_LOG',
              lc_pt_log_tab  TYPE lvc_tname VALUE 'GT_PT_LOG',
              lc_it_log_tab  TYPE lvc_tname VALUE 'GT_IT_LOG',
              lc_ic_log_tab  TYPE lvc_tname VALUE 'GT_IC_LOG'.

  CONSTANTS : BEGIN OF lc_flds,
                username  TYPE lvc_fname VALUE 'USERNAME',
                udate     TYPE lvc_fname VALUE 'UDATE',
                utime     TYPE lvc_fname VALUE 'UTIME',
                tcode     TYPE lvc_fname VALUE 'TCODE',
                icon      TYPE lvc_fname VALUE 'ICON',
                fieldtext TYPE lvc_fname VALUE 'FIELDTEXT',
                fname     TYPE lvc_fname VALUE 'FNAME',
                chngind   TYPE lvc_fname VALUE 'CHNGIND',
                value_new TYPE lvc_fname VALUE 'VALUE_NEW',
                value_old TYPE lvc_fname VALUE 'VALUE_OLD',
                bill_item TYPE lvc_fname VALUE 'BILL_ITEM',
                bitype    TYPE lvc_fname VALUE 'BITYPE',
                clrit     TYPE lvc_fname VALUE 'CLRIT',
                clrsit    TYPE lvc_fname VALUE 'CLRSIT',
                clrdit    TYPE lvc_fname VALUE 'CLRDIT',
                parvw     TYPE lvc_fname VALUE 'PARVW',
                tabname   TYPE lvc_fname VALUE 'TABNAME',
              END OF lc_flds.

*-Prepare fieldcat table for ALV tables
  CLEAR ct_fcat.

  CASE iv_ind_flag.
    WHEN gc_chlog-t1.
      PERFORM f_build_fcat USING : lc_flds-icon       TEXT-f14 lc_hdr_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-fieldtext  TEXT-f15 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_old  TEXT-f07 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_new  TEXT-f06 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-username   TEXT-f03 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tcode      TEXT-f04 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-udate      TEXT-f01 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-utime      TEXT-f02 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tabname    TEXT-f16 lc_hdr_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-fname      TEXT-f05 lc_hdr_log_tab abap_false CHANGING ct_fcat.

    WHEN gc_chlog-t2.
      PERFORM f_build_fcat USING : lc_flds-bill_item  TEXT-f08 lc_bi_log_tab  abap_true  CHANGING ct_fcat,
                                   lc_flds-bitype     TEXT-f09 lc_bi_log_tab  abap_true  CHANGING ct_fcat,
                                   lc_flds-icon       TEXT-f14 lc_bi_log_tab  abap_true  CHANGING ct_fcat,
                                   lc_flds-fieldtext  TEXT-f15 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-value_old  TEXT-f07 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-value_new  TEXT-f06 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-username   TEXT-f03 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-tcode      TEXT-f04 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-udate      TEXT-f01 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-utime      TEXT-f02 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-tabname    TEXT-f16 lc_bi_log_tab  abap_false CHANGING ct_fcat,
                                   lc_flds-fname      TEXT-f05 lc_bi_log_tab  abap_false CHANGING ct_fcat.

    WHEN gc_chlog-t3.
      PERFORM f_build_fcat USING : lc_flds-clrit      TEXT-f10 lc_pt_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-clrsit     TEXT-f11 lc_pt_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-parvw      TEXT-f12 lc_pt_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-icon       TEXT-f14 lc_pt_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-fieldtext  TEXT-f15 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_old  TEXT-f07 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_new  TEXT-f06 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-username   TEXT-f03 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tcode      TEXT-f04 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-udate      TEXT-f01 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-utime      TEXT-f02 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tabname    TEXT-f16 lc_pt_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-fname      TEXT-f05 lc_pt_log_tab abap_false CHANGING ct_fcat.

    WHEN gc_chlog-t4 OR gc_chlog-t5.
      PERFORM f_build_fcat USING : lc_flds-clrit      TEXT-f10 lc_it_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-clrsit     TEXT-f11 lc_it_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-clrdit     TEXT-f13 lc_it_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-icon       TEXT-f14 lc_it_log_tab abap_true  CHANGING ct_fcat,
                                   lc_flds-fieldtext  TEXT-f15 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_old  TEXT-f07 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-value_new  TEXT-f06 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-username   TEXT-f03 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tcode      TEXT-f04 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-udate      TEXT-f01 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-utime      TEXT-f02 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-tabname    TEXT-f16 lc_it_log_tab abap_false CHANGING ct_fcat,
                                   lc_flds-fname      TEXT-f05 lc_it_log_tab abap_false CHANGING ct_fcat.

  ENDCASE.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_PREPARE_EXCL_BUTONS_LIST
*&---------------------------------------------------------------------*
FORM f_prepare_excl_butons_list  CHANGING ct_excl TYPE ui_functions.
  DATA ls_func TYPE ui_func.

*-Preparing ALV standard buttons list to hide from ALV toolbar

  CLEAR ct_excl.
  ls_func = '&CHECK'.               APPEND ls_func TO ct_excl.
  ls_func = '&REFRESH'.             APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&CUT'.           APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&COPY'.          APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&PASTE'.         APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&UNDO'.          APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&APPEND'.        APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&PASTE_NEW_ROW'. APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&INSERT_ROW'.    APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&DELETE_ROW'.    APPEND ls_func TO ct_excl.
  ls_func = '&LOCAL&COPY_ROW'.      APPEND ls_func TO ct_excl.
  ls_func = '&MB_SUM'.              APPEND ls_func TO ct_excl.
  ls_func = '&MB_SUBTOT'.           APPEND ls_func TO ct_excl.
  ls_func = '&INFO'.                APPEND ls_func TO ct_excl.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_INIT_CHLOG_BI_TAB
*&---------------------------------------------------------------------*
FORM f_init_chlog_bi_tab.
  DATA :lv_cont_name(30) TYPE c,
        ls_lout          TYPE lvc_s_layo,
        ls_variant       TYPE disvariant,
        lt_excl          TYPE ui_functions.

  lv_cont_name = 'CC_904'.

*-create container object for change log Billing items ALV
  IF go_ch_bi_cont IS NOT BOUND.
    CREATE OBJECT go_ch_bi_cont
      EXPORTING
        container_name              = lv_cont_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

*-create change log Billing items ALV object
  IF go_ch_bi_alv IS NOT BOUND.
    CREATE OBJECT go_ch_bi_alv
      EXPORTING
        i_parent          = go_ch_bi_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  ls_variant-report  = sy-repid.
  ls_lout-zebra      = gc_x.
  ls_lout-col_opt    = gc_x.
  ls_lout-cwidth_opt = gc_x.
  ls_lout-ctab_fname = 'COLOR'.   "field name for colors

  IF gt_fcat_bi_log IS INITIAL.
    PERFORM f_prepare_fcat USING gc_chlog-t2 CHANGING gt_fcat_bi_log . "prepare fieldcat table
  ENDIF.

  PERFORM f_prepare_excl_butons_list CHANGING lt_excl.  "Prepare buttons list to hide from ALV toolbar

  CALL METHOD go_ch_bi_alv->set_table_for_first_display
    EXPORTING
      is_variant                    = ls_variant
      is_layout                     = ls_lout
      it_toolbar_excluding          = lt_excl
    CHANGING
      it_outtab                     = gt_bi_log
      it_fieldcatalog               = gt_fcat_bi_log
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_INIT_CHLOG_PT_TAB
*&---------------------------------------------------------------------*
FORM f_init_chlog_pt_tab .
  DATA :lv_cont_name(30) TYPE c,
        ls_lout          TYPE lvc_s_layo,
        ls_variant       TYPE disvariant,
        lt_excl          TYPE ui_functions.

  lv_cont_name = 'CC_905'.

*-create container object for change log Partners ALV
  IF go_ch_pt_cont IS NOT BOUND.
    CREATE OBJECT go_ch_pt_cont
      EXPORTING
        container_name              = lv_cont_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

*-create change log Partners ALV object
  IF go_ch_pt_alv  IS NOT BOUND.
    CREATE OBJECT go_ch_pt_alv
      EXPORTING
        i_parent          = go_ch_pt_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  ls_variant-report  = sy-repid.
  ls_lout-zebra      = gc_x.
  ls_lout-col_opt    = gc_x.
  ls_lout-cwidth_opt = gc_x.
  ls_lout-ctab_fname = 'COLOR'.   "field name for colors

  IF gt_fcat_pt_log IS INITIAL.
    PERFORM f_prepare_fcat USING gc_chlog-t3 CHANGING gt_fcat_pt_log . "prepare fieldcat table
  ENDIF.

  PERFORM f_prepare_excl_butons_list CHANGING lt_excl.  "Prepare buttons list to hide from ALV toolbar

  CALL METHOD go_ch_pt_alv->set_table_for_first_display
    EXPORTING
      is_variant                    = ls_variant
      is_layout                     = ls_lout
      it_toolbar_excluding          = lt_excl
    CHANGING
      it_outtab                     = gt_pt_log
      it_fieldcatalog               = gt_fcat_pt_log
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_BUILD_FCAT
*&---------------------------------------------------------------------*
FORM f_build_fcat  USING    iv_fname    TYPE lvc_fname
                            iv_fdesc    TYPE scrtext_l
                            iv_tabname  TYPE lvc_tname
                            iv_keyfield TYPE any
                   CHANGING ct_fcat     TYPE lvc_t_fcat.

  DATA ls_fcat TYPE lvc_s_fcat.

  CONSTANTS :lc_icon   TYPE lvc_tname VALUE 'ICON',
             lc_bitype TYPE lvc_fname VALUE 'BITYPE',
             lc_clrsit TYPE lvc_fname VALUE 'CLRSIT',
             lc_clrdit TYPE lvc_fname VALUE 'CLRDIT'.


  ls_fcat-fieldname = iv_fname.
  ls_fcat-scrtext_l = iv_fdesc.
  ls_fcat-scrtext_m = iv_fdesc.
  ls_fcat-scrtext_s = iv_fdesc.
  ls_fcat-tabname   = iv_tabname.
  ls_fcat-key       = iv_keyfield. "For key fields blue color

  IF ls_fcat-fieldname = lc_bitype.
    ls_fcat-scrtext_s = TEXT-f19.
    ls_fcat-scrtext_m = TEXT-f19.
  ELSEIF ls_fcat-fieldname = lc_clrsit.
    ls_fcat-scrtext_s = TEXT-f17.
    ls_fcat-scrtext_m = TEXT-f17.
  ELSEIF ls_fcat-fieldname = lc_clrdit.
    ls_fcat-scrtext_s = TEXT-f18.
    ls_fcat-scrtext_m = TEXT-f18.
  ENDIF.

  IF iv_fname = lc_icon.
    ls_fcat-icon = abap_true.
  ENDIF.

  APPEND ls_fcat TO ct_fcat.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form FCODE_CHLOG
*&---------------------------------------------------------------------*
FORM fcode_chlog.
  IF gt_hdr_log IS INITIAL AND gt_bi_log IS INITIAL AND
     gt_pt_log IS INITIAL  AND gt_it_log IS INITIAL AND
     gt_ic_log IS INITIAL.

    PERFORM f_prepare_chlog_data.

  ENDIF.

  CALL SCREEN gc_chlog-log_scr STARTING AT 4 1.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form FCODE_CHLOGSET
*&---------------------------------------------------------------------*
FORM fcode_chlogset.
  CALL FUNCTION '/CGDC/OPEN_CLOG_MAIN_SCRN'.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_PREPARE_CHLOG_DATA
*&---------------------------------------------------------------------*
FORM f_prepare_chlog_data .
  CONSTANTS : lc_clrqlog TYPE cdobjectcl VALUE '/CGDC/CLRQ',
              lc_theader TYPE ddobjname  VALUE '/CGDC/_CLRQHD',
              lc_tbi     TYPE ddobjname  VALUE '/CGDC/_CLRQBI',
              lc_tpt     TYPE ddobjname  VALUE '/CGDC/_CLRQPT',
              lc_tit     TYPE ddobjname  VALUE '/CGDC/_CLRQIT',
              lc_tic     TYPE ddobjname  VALUE '/CGDC/_CLRQIC',
              lc_create  TYPE icon_d     VALUE '@0Y@',
              lc_change  TYPE icon_d     VALUE '@0Z@',
              lc_delete  TYPE icon_d     VALUE '@11@',
              lc_i       TYPE char1      VALUE 'I',
              lc_u       TYPE char1      VALUE 'U',
              lc_d       TYPE char1      VALUE 'D'.


  DATA :lv_objid    TYPE cdobjectv,
        ls_chdoc_h  TYPE gty_chdoc_h,
        ls_chdoc_bi TYPE gty_chdoc_bi,
        ls_chdoc_pt TYPE gty_chdoc_pt,
        ls_chdoc_it TYPE gty_chdoc_it,
        ls_chdoc_ic TYPE gty_chdoc_it,
        lt_dfies_h  TYPE gty_tt_dfies,
        lt_dfies_bi TYPE gty_tt_dfies,
        lt_dfies_pt TYPE gty_tt_dfies,
        lt_dfies_it TYPE gty_tt_dfies,
        lt_dfies_ic TYPE gty_tt_dfies.


  lv_objid = gs_header_0110-clrno.

*-Fetch change log details for all CLRQ tables

  SELECT p~objectclas,
         p~objectid,
         p~changenr,
         p~tabname,
         p~tabkey,
         p~fname,
         p~chngind,
         p~value_new,
         p~value_old,
         h~username,
         h~udate,
         h~utime,
         h~tcode,
         h~change_ind
    FROM cdpos AS p
    INNER JOIN cdhdr AS h
      ON p~objectid = h~objectid
      AND p~objectid = h~objectid
      AND p~changenr = h~changenr
    INTO TABLE @DATA(lt_chdoc)
  WHERE p~objectclas = @lc_clrqlog
     AND p~objectid  = @lv_objid
    ORDER BY udate,utime,username.
  IF sy-subrc EQ 0.
    SORT lt_chdoc BY udate DESCENDING utime DESCENDING username DESCENDING. "latest on top
  ENDIF.

*-Read table fields attributes
  IF lt_chdoc IS NOT INITIAL.
    PERFORM f_read_tab_fields_attr USING : lc_theader CHANGING lt_dfies_h,
                                           lc_tbi     CHANGING lt_dfies_bi,
                                           lc_tpt     CHANGING lt_dfies_pt,
                                           lc_tit     CHANGING lt_dfies_it,
                                           lc_tic     CHANGING lt_dfies_ic.
  ENDIF.


*-Separate the change log details for each table based on table name
  LOOP AT lt_chdoc INTO DATA(ls_chdoc).
    CASE ls_chdoc-tabname.
      WHEN lc_theader.
        CLEAR ls_chdoc_h.
        MOVE-CORRESPONDING ls_chdoc TO ls_chdoc_h.

*-Color based on action
        CASE ls_chdoc-chngind.
          WHEN lc_i.
            ls_chdoc_h-icon      = lc_create.
            ls_chdoc_h-fieldtext = TEXT-215.
            ls_chdoc_h-color     = VALUE #( ( color-col = col_total ) ).

          WHEN lc_u.
            ls_chdoc_h-icon  = lc_change.
            DATA(ls_dfies_h) = VALUE dfies( lt_dfies_h[ fieldname = ls_chdoc-fname ] OPTIONAL ).

            ls_chdoc_h-fieldtext = |{ ls_dfies_h-fieldtext }| && | | && |{ TEXT-217 }|.
            ls_chdoc_h-color     = VALUE #( ( color-col = col_positive ) ).

          WHEN lc_d.
            ls_chdoc_h-icon      = lc_delete.
            ls_chdoc_h-fieldtext = TEXT-216.
            ls_chdoc_h-color     = VALUE #( ( color-col = col_negative ) ).
        ENDCASE.

        APPEND ls_chdoc_h TO gt_hdr_log.

      WHEN lc_tbi.
        CLEAR ls_chdoc_bi.
        MOVE-CORRESPONDING ls_chdoc TO ls_chdoc_bi.
        ls_chdoc_bi-bill_item = ls_chdoc-tabkey+13(22).
        ls_chdoc_bi-bitype    = ls_chdoc-tabkey+35(6).

*-Color based on action
        CASE ls_chdoc-chngind.
          WHEN lc_i.
            ls_chdoc_bi-icon      = lc_create.
            ls_chdoc_bi-fieldtext = TEXT-215.
            ls_chdoc_bi-color     = VALUE #( ( color-col = col_total ) ).

          WHEN lc_u.
            ls_chdoc_bi-icon  = lc_change.
            DATA(ls_dfies_bi) = VALUE dfies( lt_dfies_bi[ fieldname = ls_chdoc-fname ] OPTIONAL ).

            ls_chdoc_bi-fieldtext = |{ ls_dfies_bi-fieldtext }| && | | && |{ TEXT-217 }|.
            ls_chdoc_bi-color     = VALUE #( ( color-col = col_positive ) ).

          WHEN lc_d.
            ls_chdoc_bi-icon      = lc_delete.
            ls_chdoc_bi-fieldtext = TEXT-216.
            ls_chdoc_bi-color     = VALUE #( ( color-col = col_negative ) ).
        ENDCASE.

        APPEND ls_chdoc_bi TO gt_bi_log.

      WHEN lc_tpt.
        CLEAR ls_chdoc_pt.
        MOVE-CORRESPONDING ls_chdoc TO ls_chdoc_pt.
        ls_chdoc_pt-clrit  = ls_chdoc-tabkey+13(22). "Table key have key fields data, based on lenght of field separate
        ls_chdoc_pt-clrsit = ls_chdoc-tabkey+35(6).
        ls_chdoc_pt-parvw  = ls_chdoc-tabkey+41(2).

*-Color based on action
        CASE ls_chdoc-chngind.
          WHEN lc_i.
            ls_chdoc_pt-icon      = lc_create.
            ls_chdoc_pt-fieldtext = TEXT-215.
            ls_chdoc_pt-color     = VALUE #( ( color-col = col_total ) ).

          WHEN lc_u.
            ls_chdoc_pt-icon  = lc_change.
            DATA(ls_dfies_pt) = VALUE dfies( lt_dfies_pt[ fieldname = ls_chdoc-fname ] OPTIONAL ).

            ls_chdoc_pt-fieldtext = |{ ls_dfies_pt-fieldtext }| && | | && |{ TEXT-217 }|.
            ls_chdoc_pt-color     = VALUE #( ( color-col = col_positive ) ).

          WHEN lc_d.
            ls_chdoc_pt-icon      = lc_delete.
            ls_chdoc_pt-fieldtext = TEXT-216.
            ls_chdoc_pt-color     = VALUE #( ( color-col = col_negative ) ).
        ENDCASE.

        APPEND ls_chdoc_pt TO gt_pt_log.

      WHEN lc_tit OR lc_tic.
        CLEAR ls_chdoc_it.
        MOVE-CORRESPONDING ls_chdoc TO ls_chdoc_it.
        ls_chdoc_it-clrit  = ls_chdoc-tabkey+13(22). "Table key have key fields data, based on lenght of field separate
        ls_chdoc_it-clrsit = ls_chdoc-tabkey+35(6).
        ls_chdoc_it-clrdit = ls_chdoc-tabkey+41(6).

*-Color based on action
        CASE ls_chdoc-chngind.
          WHEN lc_i.
            ls_chdoc_it-icon      = lc_create.
            ls_chdoc_it-fieldtext = TEXT-215.
            ls_chdoc_it-color     = VALUE #( ( color-col = col_total ) ).

          WHEN lc_u.
            ls_chdoc_it-icon = lc_change.

            IF ls_chdoc-tabname = lc_tit.
              DATA(ls_dfies_it)     = VALUE dfies( lt_dfies_it[ fieldname = ls_chdoc-fname ] OPTIONAL ).
              ls_chdoc_it-fieldtext = |{ ls_dfies_it-fieldtext }| && | | && |{ TEXT-217 }|.
            ELSE.
              DATA(ls_dfies_ic)     = VALUE dfies( lt_dfies_ic[ fieldname = ls_chdoc-fname ] OPTIONAL ).
              ls_chdoc_it-fieldtext = |{ ls_dfies_ic-fieldtext }| && | | && |{ TEXT-217 }|.
            ENDIF.

            ls_chdoc_it-color     = VALUE #( ( color-col = col_positive ) ).

          WHEN lc_d.
            ls_chdoc_it-icon      = lc_delete.
            ls_chdoc_it-fieldtext = TEXT-216.
            ls_chdoc_it-color     = VALUE #( ( color-col = col_negative ) ).
        ENDCASE.


        APPEND ls_chdoc_it TO gt_it_log.

      WHEN OTHERS.

    ENDCASE.

    CLEAR :ls_chdoc,ls_dfies_h,ls_dfies_bi,ls_dfies_pt,ls_dfies_it,ls_dfies_ic.
  ENDLOOP.


  IF gt_it_log IS NOT INITIAL.
    SORT gt_it_log BY clrit clrsit clrdit fname
                      chngind value_new value_old
                      username udate utime.

    DELETE ADJACENT DUPLICATES FROM gt_it_log COMPARING ALL FIELDS.

    SORT gt_it_log BY udate DESCENDING utime DESCENDING.
  ENDIF.

  IF gt_hdr_log IS NOT INITIAL.
    SORT gt_hdr_log BY udate DESCENDING utime DESCENDING.
  ENDIF.

  IF gt_bi_log IS NOT INITIAL.
    SORT gt_bi_log BY udate DESCENDING utime DESCENDING.
  ENDIF.

  IF gt_pt_log IS NOT INITIAL.
    SORT gt_pt_log BY udate DESCENDING utime DESCENDING.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_INIT_CHLOG_IT_TAB
*&---------------------------------------------------------------------*
FORM f_init_chlog_it_tab .
  DATA :lv_cont_name(30) TYPE c,
        ls_lout          TYPE lvc_s_layo,
        ls_variant       TYPE disvariant,
        lt_excl          TYPE ui_functions.

  lv_cont_name = 'CC_906'.

*-Create container object for change log Items ALV
  IF go_ch_it_cont IS NOT BOUND.
    CREATE OBJECT go_ch_it_cont
      EXPORTING
        container_name              = lv_cont_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

*-Create change log Items ALV object
  IF go_ch_it_alv IS NOT BOUND.
    CREATE OBJECT go_ch_it_alv
      EXPORTING
        i_parent          = go_ch_it_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  ls_variant-report  = sy-repid.
  ls_lout-zebra      = gc_x.
  ls_lout-col_opt    = gc_x.
  ls_lout-cwidth_opt = gc_x.
  ls_lout-ctab_fname = 'COLOR'.   "field name for colors

  IF gt_fcat_it_log IS INITIAL.
    PERFORM f_prepare_fcat USING gc_chlog-t4 CHANGING gt_fcat_it_log. "prepare fieldcat table
  ENDIF.

  PERFORM f_prepare_excl_butons_list CHANGING lt_excl.  "Prepare buttons list to hide from ALV toolbar

  CALL METHOD go_ch_it_alv->set_table_for_first_display
    EXPORTING
      is_variant                    = ls_variant
      is_layout                     = ls_lout
      it_toolbar_excluding          = lt_excl
    CHANGING
      it_outtab                     = gt_it_log
      it_fieldcatalog               = gt_fcat_it_log
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form F_INIT_CHLOG_IC_TAB
*&---------------------------------------------------------------------*
FORM f_init_chlog_ic_tab .
  DATA :lv_cont_name(30) TYPE c,
        ls_lout          TYPE lvc_s_layo,
        ls_variant       TYPE disvariant,
        lt_excl          TYPE ui_functions.

  lv_cont_name = 'CC_907'.

*-Create container object for change log Items characterstics ALV
  IF go_ch_ic_cont IS NOT BOUND.
    CREATE OBJECT go_ch_ic_cont
      EXPORTING
        container_name              = lv_cont_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

*-Create change log Items characterstics ALV object
  IF go_ch_ic_alv IS NOT BOUND.
    CREATE OBJECT go_ch_ic_alv
      EXPORTING
        i_parent          = go_ch_ic_cont
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0 AND sy-msgty <> ''.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  ls_variant-report  = sy-repid.
  ls_lout-zebra      = gc_x.
  ls_lout-col_opt    = gc_x.
  ls_lout-cwidth_opt = gc_x.

  IF gt_fcat_ic_log IS INITIAL.
    PERFORM f_prepare_fcat USING gc_chlog-t5 CHANGING gt_fcat_ic_log . "prepare fieldcat table
  ENDIF.

  PERFORM f_prepare_excl_butons_list CHANGING lt_excl.  "Prepare buttons list to hide from ALV toolbar

  CALL METHOD go_ch_ic_alv->set_table_for_first_display
    EXPORTING
      is_variant                    = ls_variant
      is_layout                     = ls_lout
      it_toolbar_excluding          = lt_excl
    CHANGING
      it_outtab                     = gt_ic_log
      it_fieldcatalog               = gt_fcat_ic_log
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form f4_constr_dt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f4_constr_dt .

  TYPES: BEGIN OF ls_value,
           bldat TYPE /cgdc/clrq_bldat,
         END OF ls_value.

  DATA: lt_value_tab TYPE TABLE OF ls_value,
        lt_rettab    TYPE TABLE OF ddshretval
        .
  FIELD-SYMBOLS: <ls_valuetab> TYPE ls_value.

  LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE
    bstat = space AND
    bldat LE sy-datum.
    IF gs_clrqdoc_infocus-x-crhdr-rel_calc_dt IS NOT INITIAL AND
      lwa_crbinr-bldat GE gs_clrqdoc_infocus-x-crhdr-rel_calc_dt.
      UNASSIGN <ls_valuetab>.
      APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
      <ls_valuetab>-bldat = lwa_crbinr-bldat.
    ELSEIF gs_clrqdoc_infocus-x-crhdr-rel_calc_dt IS INITIAL.
      UNASSIGN <ls_valuetab>.
      APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
      <ls_valuetab>-bldat = lwa_crbinr-bldat.
    ENDIF.

  ENDLOOP.

  SORT lt_value_tab BY bldat DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_value_tab COMPARING bldat.

  IF lt_value_tab IS INITIAL.
    APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
    <ls_valuetab>-bldat = sy-datum.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BLDAT'
      dynpprog        = sy-repid
      dynpnr          = sy-dynnr
      value_org       = 'S'
    TABLES
      value_tab       = lt_value_tab[]
      return_tab      = lt_rettab
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc <> 0 AND sy-msgty <> ''.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH
          sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  READ TABLE lt_rettab INTO DATA(lwa_rettab) INDEX 1.
  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
      EXPORTING
        date_external            = lwa_rettab-fieldval
      IMPORTING
        date_internal            = gs_variables-rel_constr_dt
      EXCEPTIONS
        date_external_is_invalid = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

*    gs_variables-rel_constr_dt = lwa_rettab-fieldval.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form f_read_tab_fields_attr
*&---------------------------------------------------------------------*
FORM f_read_tab_fields_attr  USING    iv_tabname TYPE ddobjname
                             CHANGING ct_dfies   TYPE gty_tt_dfies.

*-Read fields description
  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = iv_tabname
    TABLES
      dfies_tab      = ct_dfies
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    CLEAR ct_dfies.
  ENDIF.

ENDFORM.


**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMF0G
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0G.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form get_new_number
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CALC_REQ_TYPE_NUMKI
*&      --> GC_NUMBER_RANGE_OBJECT
*&      --> LS_CLRQ_DOC_X_CRHDR_CLRQT
*&      <-- LS_CLRQ_DOC_X_CRHDR_VBELN
*&---------------------------------------------------------------------*
FORM get_new_number USING lv_numki
                          lv_number_range_object
                          lv_calc_req_type      TYPE /cgdc/clrqt
                 CHANGING lv_new_number
                          rv_subrc TYPE sy-subrc.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = lv_numki
      object                  = lv_number_range_object
    IMPORTING
      number                  = lv_new_number
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  IF sy-subrc <> 0.
    rv_subrc = sy-subrc.
  ENDIF.

  IF sy-subrc EQ 1.
    IF lv_numki IS INITIAL.
      IF gs_variables-call_from_ui EQ abap_false.
        IF gs_variables-process_type <> gc_process_type-calc_req_hdr_crt. "don't trigger for VA41/VA42
          MESSAGE e074(/cgdc/clrq) WITH lv_calc_req_type.
        ENDIF.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_cls_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-060.
        gs_messages-msgty = gc_message_type-error.
        gs_messages-msgv1 = lv_calc_req_type.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ELSE.
      IF gs_variables-call_from_ui EQ abap_false.
        IF gs_variables-process_type <> gc_process_type-calc_req_hdr_crt. "don't trigger for VA41/VA42
          MESSAGE e062(/cgdc/cls) WITH lv_numki.
        ENDIF.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_cls_msg_cls.
        gs_messages-msgnr = gc_msg_cls_msgnr-062.
        gs_messages-msgty = gc_message_type-error.
        gs_messages-msgv1 = lv_numki.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
    EXIT.
  ELSEIF sy-subrc <> 0
    AND NOT sy-msgid IS INITIAL
    AND NOT sy-msgty IS INITIAL
    AND NOT sy-msgno IS INITIAL.
    IF gs_variables-call_from_ui EQ abap_false.
      IF gs_variables-process_type <> gc_process_type-calc_req_hdr_crt. "don't trigger for VA41/VA42
        MESSAGE ID sy-msgid TYPE sy-msgty
                            NUMBER sy-msgno
                            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = sy-msgid.
      gs_messages-msgnr = sy-msgno.
      gs_messages-msgty = sy-msgty.
      gs_messages-msgv1 = sy-msgv1.
      gs_messages-msgv2 = sy-msgv2.
      gs_messages-msgv3 = sy-msgv3.
      gs_messages-msgv4 = sy-msgv4.
      APPEND gs_messages TO gt_messages.
    ENDIF.
    EXIT.
  ENDIF.

  UNPACK lv_new_number TO lv_new_number.

ENDFORM.

FORM get_komk_key_offset CHANGING lv_offset.

  DATA: ls_dfies      TYPE dfies,
        lv_lfieldname TYPE fnam_____4.

  STATICS: lv_key_offset TYPE dfies-offset.

  IF lv_key_offset IS INITIAL.

    lv_lfieldname = gc_komk_field-supos.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = gc_structure-komk
        fieldname      = gc_komk_field-supos
        lfieldname     = lv_lfieldname
      IMPORTING
        dfies_wa       = ls_dfies
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.

    CHECK sy-subrc EQ 0.
    lv_key_offset = ls_dfies-offset.

  ENDIF.

  lv_offset = lv_key_offset.

ENDFORM.

FORM generate_item_no CHANGING ls_clrq_itm_new TYPE /cgdc/s_clrqit.
  IF gs_clrit_org IS INITIAL.
    TRY.
        cl_system_uuid=>if_system_uuid_static~create_uuid_c22( RECEIVING uuid = ls_clrq_itm_new-clrit ).
      CATCH cx_uuid_error.
    ENDTRY.


    ls_clrq_itm_new-clrsit = gc_clrsit_one.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = ls_clrq_itm_new-clrsit
      IMPORTING
        output = ls_clrq_itm_new-clrsit.
    IF sy-subrc <> 0.
    ENDIF.

    ls_clrq_itm_new-lclrsit = gc_clrsit_one.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = ls_clrq_itm_new-lclrsit
      IMPORTING
        output = ls_clrq_itm_new-lclrsit.
    IF sy-subrc <> 0.
    ENDIF.

    ls_clrq_itm_new-clrdit = gc_clrdit_low.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = ls_clrq_itm_new-clrdit
      IMPORTING
        output = ls_clrq_itm_new-clrdit.
    IF sy-subrc <> 0.
    ENDIF.

    ls_clrq_itm_new-ldetla = ls_clrq_itm_new-clrdit.
  ELSE.
    ls_clrq_itm_new-clrno = gs_clrit_org-clrno.
    ls_clrq_itm_new-clrit = gs_clrit_org-clrit.
    ls_clrq_itm_new-clrsit = gs_clrit_org-clrsit.
    ls_clrq_itm_new-clrdit = gs_clrit_org-item_delta.
  ENDIF.


  PERFORM prepare_temp_hdr_itm_no CHANGING ls_clrq_itm_new.

ENDFORM.

FORM get_all_wbs_from_cont USING lt_objnr TYPE /cgdc/t_objnr.

  SELECT objnr FROM prps
  INTO CORRESPONDING FIELDS OF TABLE lt_objnr
  FOR ALL ENTRIES IN gt_billitem
  WHERE pspnr = gt_billitem-pspnr.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_calc_grp_row_amount
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM get_calc_grp_row_amount USING ls_clrq_itm_new TYPE /cgdc/s_clrqit.
  DATA: lwa_crgrrf TYPE /cgdc/s_clrqgrrf,
        lv_where   TYPE string,
        lv_select  TYPE string.
  IF gs_clrqdoc_infocus-x-crhdr-updkz NE gc_updkz_new.
    CONCATENATE TEXT-166 gs_clrqdoc_infocus-x-crhdr-clrno gc_operator-quotes INTO lv_where.
    CONCATENATE lv_where TEXT-167 INTO lv_where.
    CONCATENATE lv_where TEXT-168 INTO lv_where.


    LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf
      WHERE clgrp_knumh = ls_clrq_itm_new-clgrp_knumh
      .
      CONCATENATE lv_where gc_operator-and INTO lv_where SEPARATED BY space.
      CONCATENATE lv_where TEXT-169 lwa_crgrrf-fvalue gc_operator-quotes INTO lv_where.

    ENDLOOP.
** perform to select grps and group functions and function conditions
** Select fields sum of source condition type
** from condition inner join on item and condition
** put alias on select field and where clause
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form get_missing_lines_count
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM get_missing_lines_count .
  DATA: ls_objnr        TYPE /cgdc/s_objnr,
        lv_count        TYPE i,
        lv_maxod        TYPE /cgdc/maxod,
        lv_lines        TYPE sy-tabix,
        lv_msg          TYPE string,
        lv_where_clause TYPE string,
        lv_valid,
        lv_perc         TYPE sy-tabix.


  CLEAR: ls_objnr, lv_count,
         lv_maxod, lv_lines,
         lv_perc.

  CALL METHOD /cgdc/cl_rtb_source_util=>missing_cost_lines
    EXPORTING
      iv_rtbpn         = gs_contract_hdr-/cgdc/rtbpn
      iv_clrno         = gs_clrqdoc_infocus-x-crhdr-clrno
      iv_vbeln         = gs_contract_hdr-vbeln
      iv_bukrs         = gs_contract_hdr-bukrs_vf
      iv_kokrs         = gs_contract_hdr-kokrs
      iv_count         = abap_true
      it_item          = gt_contract_itm
    IMPORTING
      iv_mis_itm_count = gs_variables-mis_itm_count.


  SELECT SINGLE maxod FROM /cgdc/t_rtbp
  INTO lv_maxod
  WHERE rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn.
  IF gs_variables-mis_itm_count GT 0.
    CLEAR gs_variables-trfc_lght.
    IF gs_variables-mis_itm_count LE lv_maxod.
      gs_variables-trfc_lght = gc_trfc_lght-y .
    ELSEIF gs_variables-mis_itm_count GT lv_maxod.
      gs_variables-trfc_lght = gc_trfc_lght-o.
    ENDIF.
    gs_variables-max_on_dmd_excd = gc_max_on_dmd_excd-r.
  ELSE.
    gs_variables-max_on_dmd_excd = gc_max_on_dmd_excd-g .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form generate_billing_item_number
*&---------------------------------------------------------------------*
*& This subroutine will generate a new bill item number and assign to
*& the calculation req item in case no existing open bill item number
*& was found.
*&---------------------------------------------------------------------*
*&      <--LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM generate_billing_item_number USING ls_bill_typ        TYPE /cgdc/t_bilitty
                                        ls_clrq_itm        TYPE /cgdc/s_clrqit_fcat
                                  CHANGING ls_clrq_itm_new TYPE /cgdc/s_clrqit.

  DATA: ls_bill_item  TYPE /cgdc/s_clrqbi,
        ls_clrqbi_brf TYPE /cgdc/_clrqbi,
        ls_clrqgrp    TYPE /cgdc/s_clrqgrp,
        ls_clrq_cost  TYPE /cgdc/s_clrqcost,
        lt_rtbbpsc    TYPE STANDARD TABLE OF /cgdc/t_rtbbpsc,
        lx_fdt        TYPE REF TO cx_fdt.

  FIELD-SYMBOLS: <ls_fldval> TYPE any.

  "Create and assign a new billing item number to the calc
  "request item
  TRY.
      cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
        RECEIVING
          uuid = ls_clrq_itm_new-rtbbinr ).
    CATCH cx_uuid_error INTO DATA(lo_expn).
  ENDTRY.

  ls_clrq_itm_new-bityp    = ls_bill_typ-bilitmtyp.

  "Get more details to update the newly created Billing item
  "number in the table /CGDC/_CLRQBI
  CLEAR ls_clrq_cost.
  ls_clrq_cost-cbelnr  = ls_clrq_itm-belnr.
  ls_clrq_cost-cbuzei  = ls_clrq_itm-buzei.
  ls_clrq_cost-cgjahr  = ls_clrq_itm-gjahr.
  ls_clrq_cost-crbukrs = ls_clrq_itm-rbukrs.


  CLEAR: ls_bill_item, ls_clrqgrp.

  PERFORM get_additional_details_binr USING ls_clrq_itm_new
                                            ls_bill_typ
                                      CHANGING ls_bill_item.

  ls_bill_item-grp_prf = gs_contract_hdr-/cgdc/bill_prf.

  ls_clrqgrp-bill_item = ls_bill_item-bill_item.
**  ls_clrqgrp-bitype = ls_bill_item-bitype.
  ls_clrqgrp-clrno = ls_bill_item-clrno.
  ls_clrqgrp-grp_prf = gs_contract_hdr-/cgdc/bill_prf.

  MOVE-CORRESPONDING ls_bill_item TO ls_clrqbi_brf.
  CLEAR: gv_grpid, gv_spltid.

  TRY.
      CALL FUNCTION '/CGDC/_CLRQ_GET_GRPID'
        EXPORTING
          is_clrqbi = ls_clrqbi_brf
        IMPORTING
          ev_grpid  = gv_grpid.

    CATCH cx_fdt INTO lx_fdt.

  ENDTRY.

  IF ls_bill_item-pop_stdt IS INITIAL
    OR ls_bill_item-pop_enddt IS INITIAL
    OR ls_bill_item-bldat IS INITIAL
    OR ls_bill_item-bilmatnr IS INITIAL
    OR ls_bill_item-ps_psp_pnr IS INITIAL.
    CLEAR ls_clrq_itm_new-rtbbinr.
  ELSE.
    ls_clrq_itm_new-pop_stdt  = ls_bill_item-pop_stdt.
    ls_clrq_itm_new-pop_enddt = ls_bill_item-pop_enddt.
    ls_clrq_itm_new-bldat_bi  = ls_bill_item-bldat.
    ls_clrq_itm_new-fkrel     = ls_bill_item-fkrel.
    ls_clrq_itm_new-srvc_date = ls_clrq_itm-srvc_date.
    ls_clrq_itm_new-msg_icon  = icon_green_light.
    CLEAR ls_clrq_itm_new-msg_code.
    "Add it to the CR document structure for saving it on
    "/CGDC/_CLRQBI table
    ls_bill_item-bill_item  = ls_clrq_itm_new-rtbbinr.
    ls_bill_item-ps_psp_pnr = ls_clrq_itm_new-ps_psp_pnr.
    APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.


    SELECT * FROM /cgdc/t_rtbbpsc
    WHERE bill_prf = @gs_contract_hdr-/cgdc/bill_prf
    INTO TABLE @lt_rtbbpsc.

    IF sy-subrc = 0.
      SORT lt_rtbbpsc BY char_odr.
      LOOP AT lt_rtbbpsc INTO DATA(ls_rtbbpsc).
        DATA(lv_tabix) = sy-tabix.
        ASSIGN COMPONENT ls_rtbbpsc-char_fld OF STRUCTURE ls_bill_item TO <ls_fldval>.
        IF sy-subrc = 0.
          IF lv_tabix EQ 1.
            CONCATENATE gv_spltid <ls_fldval> INTO gv_spltid.
          ELSE.
            CONCATENATE gv_spltid <ls_fldval> INTO gv_spltid SEPARATED BY '/'.
          ENDIF.

        ENDIF.

      ENDLOOP.
    ENDIF.

    ls_clrqgrp-grpid = gv_grpid. "group id based on grouping profile added
    ls_clrqgrp-splt_id = gv_spltid. "split id based on grouping profile added
    ls_clrqgrp-updkz = gc_updkz_new.
    APPEND ls_clrqgrp TO gs_clrqdoc_infocus-x-crgprf.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_additional_details_binr
*&---------------------------------------------------------------------*
*& This subroutine will prepare the structure LS_BILL_ITEM
*& to insert the newly created billing item number in the table
*& /CGDC/_CLRQBI
*&---------------------------------------------------------------------*
*&      --> LS_CLRQ_ITM_NEW
*&      --> LV_BIT_TYPE
*&      --> LS_BILL_TYPE
*&      <-- LS_BILL_ITEM
*&---------------------------------------------------------------------*
FORM get_additional_details_binr  USING    ls_clrq_itm_new TYPE /cgdc/s_clrqit
                                           ls_bill_type    TYPE /cgdc/t_bilitty
                                  CHANGING ls_bill_item    TYPE /cgdc/s_clrqbi.

  FIELD-SYMBOLS : <lv_fieldname> TYPE any.
  DATA : lt_sum_char TYPE TABLE OF /cgdc/t_rtbbic.
  DATA: ls_clrqic   TYPE /cgdc/s_clrqic,
        ls_bilityp  TYPE /cgdc/t_bilitty,
        lv_bilmatnr TYPE /cgdc/bilmatnr.
  DATA : lv_faksp_zm    TYPE faksp_ap VALUE 'ZM',
         lwa_blpln_type TYPE /cgdc/t_bplnty.

  LOOP AT lt_sum_char INTO DATA(lwa_sum_char).
    ASSIGN COMPONENT lwa_sum_char-fieldname OF STRUCTURE ls_clrq_itm_new TO FIELD-SYMBOL(<lv_cr_item_value>).
    ASSIGN COMPONENT lwa_sum_char-fieldname OF STRUCTURE ls_bill_item TO FIELD-SYMBOL(<lv_bi_val>).
    IF <lv_bi_val> IS ASSIGNED AND <lv_cr_item_value> IS ASSIGNED.
      <lv_bi_val> = <lv_cr_item_value>.
    ENDIF.
  ENDLOOP.
  IF NOT ls_bill_type-bilmatnr IS INITIAL.
    lv_bilmatnr = ls_bill_type-bilmatnr.
  ELSE.
    lv_bilmatnr = ls_clrq_itm_new-matnr.
  ENDIF.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15
  READ TABLE gt_item_catg INTO DATA(ls_clrtic) WITH KEY pstyv = ls_clrq_itm_new-pstyv. "RTB24-15

  SELECT SINGLE *
    FROM /cgdc/t_bilitty
    WHERE bilitmtyp = @ls_bill_type-bilitmtyp
    INTO @ls_bilityp.

  ls_bill_item-mandt       = sy-mandt.
  ls_bill_item-clrno       = ls_clrq_itm_new-clrno.
  ls_bill_item-bill_item   = ls_clrq_itm_new-rtbbinr.
  ls_bill_item-bitype      = ls_bill_type-bilitmtyp.
  ls_bill_item-fkrel       = ls_bill_type-fkrel.
  ls_bill_item-bilmatnr    = lv_bilmatnr. "ls_bill_type-bilmatnr.
  IF ls_bilityp-qty_1 = abap_true.
    ls_bill_item-zmeng       = 1.
  ELSEIF ls_clrtic-blkcumul_qty = abap_false. ""RTB24-15
    ls_bill_item-zmeng       = ls_clrq_itm_new-zmeng.
  ENDIF.
  ls_bill_item-zieme       = ls_clrq_itm_new-zieme.
  ls_bill_item-faksp       = ls_clrq_itm_new-faksp.
  ls_bill_item-netwr       = ls_clrq_itm_new-netwr.
  ls_bill_item-netwr24       = ls_clrq_itm_new-netwr24.
  ls_bill_item-waerk       = ls_clrq_itm_new-waerk.
  ls_bill_item-vgbel       = ls_clrq_itm_new-vgbel.
  ls_bill_item-vgpos       = ls_clrq_itm_new-vgpos.
  ls_bill_item-prsok       = ls_clrq_itm_new-prsok.
  ls_bill_item-wavwr       = ls_clrq_itm_new-wavwr.
  ls_bill_item-kzwi1       = ls_clrq_itm_new-kzwi1.
  ls_bill_item-kzwi2       = ls_clrq_itm_new-kzwi2.
  ls_bill_item-kzwi3       = ls_clrq_itm_new-kzwi3.
  ls_bill_item-kzwi4       = ls_clrq_itm_new-kzwi4.
  ls_bill_item-kzwi5       = ls_clrq_itm_new-kzwi5.
  ls_bill_item-kzwi6       = ls_clrq_itm_new-kzwi6.
  ls_bill_item-mvgr1       = ls_clrq_itm_new-mvgr1.
  ls_bill_item-mvgr2       = ls_clrq_itm_new-mvgr2.
  ls_bill_item-mvgr3       = ls_clrq_itm_new-mvgr3.
  ls_bill_item-mvgr4       = ls_clrq_itm_new-mvgr4.
  ls_bill_item-mvgr5       = ls_clrq_itm_new-mvgr5.
  ls_bill_item-/cgdc/pbpgp      = ls_clrq_itm_new-/cgdc/pbpgp.
  ls_bill_item-bill_usage  = ls_clrq_itm_new-bill_usage.
  ls_bill_item-prsok       = abap_true.
  ls_bill_item-bstat       = space.
  ls_bill_item-rcode       = ls_clrq_itm_new-rcode.
  ls_bill_item-/cgdc/eline = ls_clrq_itm_new-/cgdc/eline.
  MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrqic.
  MOVE-CORRESPONDING ls_clrqic TO ls_bill_item.
  ls_bill_item-updkz       = gc_updkz_new.

  "Get the billing material group & description from tables
  SELECT SINGLE a~matkl b~maktx
         FROM mara AS a INNER JOIN makt AS b
         ON a~matnr EQ b~matnr
         INTO ( ls_bill_item-matkl, ls_bill_item-arktx )
         WHERE a~matnr EQ ls_bill_item-bilmatnr
         AND   b~spras EQ sy-langu.

  "Get the period of performance start & end dates from the document date of the document
  "NITIN ADDED CODE "Billing date of the billing item
  gs_clrit = ls_clrq_itm_new.
  IF ls_clrq_itm_new-itmty NE gc_clrq_itmty-bill_plan_line.
    CALL METHOD /cgdc/cl_clrq_process=>get_performance_date
      EXPORTING
        is_clrqhdr             = gs_clrqdoc_infocus-x-crhdr
        is_clrqit              = ls_clrq_itm_new
        is_clrqbi              = ls_bill_item
        iv_objty               = gc_objty-b
        iv_date_ty             = gc_datety-billing_dt
      IMPORTING
        ev_date                = ls_bill_item-bldat
      EXCEPTIONS
        ex_item_not_passed     = 1
        ex_contract_not_passed = 2
        OTHERS                 = 3.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.

    CALL METHOD /cgdc/cl_clrq_process=>get_performance_date
      EXPORTING
        is_clrqhdr             = gs_clrqdoc_infocus-x-crhdr
        is_clrqit              = ls_clrq_itm_new
        is_clrqbi              = ls_bill_item
        iv_objty               = gc_objty-b
        iv_date_ty             = gc_datety-pop_stdt
      IMPORTING
        ev_date                = ls_bill_item-pop_stdt
      EXCEPTIONS
        ex_item_not_passed     = 1
        ex_contract_not_passed = 2
        OTHERS                 = 3.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.

    CALL METHOD /cgdc/cl_clrq_process=>get_performance_date
      EXPORTING
        is_clrqhdr             = gs_clrqdoc_infocus-x-crhdr
        is_clrqit              = ls_clrq_itm_new
        is_clrqbi              = ls_bill_item
        iv_objty               = gc_objty-b
        iv_date_ty             = gc_datety-pop_enddt
      IMPORTING
        ev_date                = ls_bill_item-pop_enddt
      EXCEPTIONS
        ex_item_not_passed     = 1
        ex_contract_not_passed = 2
        OTHERS                 = 3.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.

  ELSE.
*    IF ls_clrq_itm_new-pop_stdt IS INITIAL AND ls_clrq_itm_new-pop_enddt IS INITIAL AND ls_clrq_itm_new-bldat_bi IS INITIAL.
    IF gs_blp_doc IS  INITIAL.
      CALL FUNCTION '/CGDC/BLP_VIEW'
        EXPORTING
          i_vbeln    = gs_clrqdoc_infocus-x-crhdr-vgbel
        IMPORTING
          es_blp_doc = gs_blp_doc.
    ENDIF.
    READ TABLE gs_blp_doc-x-blpln INTO DATA(lwa_blpl) WITH KEY billitem = ls_clrq_itm_new-billitem.
    IF sy-subrc = 0.
      ls_bill_item-pop_stdt  = lwa_blpl-svcstart.
      ls_bill_item-pop_enddt = lwa_blpl-svcend.
      ls_bill_item-bldat = lwa_blpl-billdate.
      ls_bill_item-billscheditem = lwa_blpl-billitem.
      ls_bill_item-milestone = lwa_blpl-milestone.
      ls_bill_item-fkrel = abap_true.
      ls_bill_item-fsched = ls_clrq_itm_new-fsched .
*        IF lwa_blpl-milestone IS INITIAL.  "Bug Fix
      IF lwa_blpl-milestone IS NOT INITIAL.
        ls_bill_item-faksp = lv_faksp_zm.
      ENDIF.
      ls_bill_item-milestone_rule = lwa_blpl-fpfix.
      ls_bill_item-vgpos = lwa_blpl-posnr.
*      ENDIF.
    ELSE.
      ls_bill_item-pop_stdt  = ls_clrq_itm_new-pop_stdt.
      ls_bill_item-pop_enddt = ls_clrq_itm_new-pop_enddt   .
      ls_bill_item-bldat     = ls_clrq_itm_new-bldat_bi.
    ENDIF.
*    READ TABLE gs_blp_doc-x-blpln INTO lwa_blpl WITH KEY billitem = ls_clrq_itm_new-billitem.
*    IF sy-subrc = 0.
*      ls_bill_item-pop_stdt  = lwa_blpl-svcstart.
*      ls_bill_item-pop_enddt = lwa_blpl-svcend.
*      ls_bill_item-bldat = lwa_blpl-billdate.
*      ls_bill_item-billscheditem = lwa_blpl-billitem.
*      ls_bill_item-milestone = lwa_blpl-milestone.
*      ls_bill_item-fkrel = abap_true.
*      ls_bill_item-fsched = ls_clrq_itm_new-fsched .
*      IF lwa_blpl-milestone IS NOT INITIAL.
*        ls_bill_item-faksp = lv_faksp_zm.
*      ENDIF.
*      ls_bill_item-milestone_rule = lwa_blpl-fpfix.
*      ls_bill_item-vgpos = lwa_blpl-posnr.
*    ENDIF.

  ENDIF.
  IF NOT ( ls_clrq_itm_new-srvc_date >= ls_bill_item-pop_stdt
    AND ls_clrq_itm_new-srvc_date <= ls_bill_item-pop_enddt )
    OR ( ls_bill_item-pop_enddt >  ls_bill_item-bldat ).
    CLEAR : ls_bill_item-pop_stdt ,
            ls_bill_item-pop_enddt,
            ls_bill_item-bldat.
  ENDIF.
  CLEAR gs_clrit.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form get_performance_dates
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_BILL_ITEM
*&      <-- LV_POP_ST
*&      <-- LV_POP_END
*&---------------------------------------------------------------------*
FORM get_performance_dates  USING    ls_bill_item TYPE /cgdc/s_clrqbi
                                     ls_item      TYPE /cgdc/s_clrqit
                            CHANGING lv_pop_st    TYPE datum
                                     lv_pop_end   TYPE datum.

  CLEAR lv_pop_st.
  CALL METHOD /cgdc/cl_clrq_process=>get_performance_date
    EXPORTING
      is_clrqhdr             = gs_clrqdoc_infocus-x-crhdr
      is_clrqit              = ls_item
      is_clrqbi              = ls_bill_item
      iv_objty               = gc_objty-b
      iv_date_ty             = gc_datety-pop_stdt
    IMPORTING
      ev_date                = lv_pop_st
    EXCEPTIONS
      ex_item_not_passed     = 1
      ex_contract_not_passed = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR lv_pop_end.
  CALL METHOD /cgdc/cl_clrq_process=>get_performance_date
    EXPORTING
      is_clrqhdr             = gs_clrqdoc_infocus-x-crhdr
      is_clrqit              = ls_item
      is_clrqbi              = ls_bill_item
      iv_objty               = gc_objty-b
      iv_date_ty             = gc_datety-pop_enddt
    IMPORTING
      ev_date                = lv_pop_end
    EXCEPTIONS
      ex_item_not_passed     = 1
      ex_contract_not_passed = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_billing_relevance
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      <-- LV_BILLREL
*&---------------------------------------------------------------------*
FORM get_billing_relevance  USING    lv_usage   TYPE /cgdc/var_type
                            CHANGING lv_billrel TYPE rvari_val_255.

  DATA : lv_name TYPE rvari_vnam.
  CLEAR lv_name.
  CALL FUNCTION '/CGDC/VAR_SEARCH'
    EXPORTING
      iv_bukrs          = '*' "gc_operator-asterisk
      iv_usage          = lv_usage
      iv_clnt_dep       = abap_true
      iv_var_type       = gc_var_type-p
    IMPORTING
      ev_var_name       = lv_name
    EXCEPTIONS
      no_variable_found = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  IF lv_name IS NOT INITIAL.
    SELECT SINGLE low
         FROM tvarvc
          INTO lv_billrel
          WHERE name = lv_name.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_price_data_ui
*&---------------------------------------------------------------------*
*& Conditions/Pricing for UI
*&---------------------------------------------------------------------*
*&      --> IM_CLRQNO   - Calculation request
*&      --> IM_CLRIT    - Item#
*&      --> IM_CLRSIT   - Subitem#
*&      <-- LT_RESULTS  - Output results
*&---------------------------------------------------------------------*
FORM get_price_data_ui  USING    p_clrqno TYPE  /cgdc/clrqno       " Calc request
                                 p_clrit  TYPE /cgdc/clrq_itmno    " Item number
                                 p_clrsit TYPE /cgdc/clrq_sitmno   "Subitem number
                                 p_clrdit TYPE /cgdc/clrq_delta_item "delta
                        CHANGING lt_komv_ui TYPE komv_ui_t.         " Pricing data


  DATA: lt_komk_temp   TYPE /cgdc/tt_komk,
        lt_komv_temp   TYPE komv_t,
        ls_crcon       TYPE /cgdc/s_clrqcn,
        ls_komk        TYPE komk,
        ls_tvta        TYPE tvta,
        ls_tvko        TYPE tvko,
        lwa_komp       TYPE komp,
        lv_clrqno      TYPE  /cgdc/clrqno,
        lwa_crihd      TYPE /cgdc/s_clrqhd,
        lwa_critm      TYPE /cgdc/s_clrqit,
        lwa_crptr      TYPE /cgdc/s_clrqpt,
        lt_results     TYPE komv_ui_t,
        lv_crcon_tabix TYPE sy-tabix,
        lv_no_display  TYPE x,
        lv_jxcd_active TYPE xusvr_bkpf,
        lv_offset      TYPE i,
        lwa_crcon      TYPE /cgdc/s_clrqcn,
        lt_komv        TYPE komv OCCURS 0 WITH HEADER LINE.

  FIELD-SYMBOLS: <lwa_komk_key> TYPE any.

  lv_clrqno =  |{  p_clrqno   ALPHA = IN }|.

*  Fetch data from header table based on clrq no
  SELECT SINGLE * FROM /cgdc/_clrqhd INTO @DATA(ls_head) WHERE clrno = @lv_clrqno.
  IF sy-subrc IS INITIAL.
    MOVE-CORRESPONDING ls_head TO gs_clrqdoc_infocus-x-crhdr.
*  Fetch data from condition table
    SELECT * FROM /cgdc/_clrqcn INTO TABLE @DATA(lt_cond) WHERE clrno = @lv_clrqno AND clrit = @p_clrit.
    IF sy-subrc IS INITIAL.
      MOVE-CORRESPONDING lt_cond TO gs_clrqdoc_infocus-x-crcon.
      SORT  gs_clrqdoc_infocus-x-crcon.
    ENDIF.


  ENDIF.

  IF p_clrit IS NOT INITIAL.
    SELECT * FROM /cgdc/_clrqit INTO TABLE @DATA(lt_item) WHERE clrno = @lv_clrqno AND clrit = @p_clrit.
    IF sy-subrc IS INITIAL.
      MOVE-CORRESPONDING lt_item TO gs_clrqdoc_infocus-x-critm.
    ENDIF.
    MOVE p_clrit TO gs_variables-item_infocus.

    IF NOT gs_variables-item_infocus IS INITIAL.
      READ TABLE gs_clrqdoc_infocus-x-critm INTO lwa_critm
      WITH KEY clrit = gs_variables-item_infocus.
    ENDIF.
  ENDIF.

  IF p_clrsit IS NOT INITIAL AND  p_clrsit <> gc_clrsit_low.
    MOVE p_clrsit TO gs_variables-subitem_infocus.
  ENDIF.

  MOVE-CORRESPONDING ls_head TO gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kurgv USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuagv USING gs_clrqdoc_infocus-x-crhdr.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komk.
  ls_komk-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_komk-belnr = gs_clrqdoc_infocus-x-crhdr-clrno.

  IF ls_komk-fbuda IS INITIAL.
    ls_komk-fbuda = sy-datum.
  ENDIF.

  PERFORM read_tvko USING gs_clrqdoc_infocus-x-crhdr-vkorg
                 CHANGING gs_tvko.

  ls_komk-boavo = gs_tvko-boavo.

  IF gs_tvko-boavo NE space
    AND gs_kurgv-bokre NE space.
    ls_komk-borel = abap_true.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  WITH KEY clrit = gc_posnr
  TRANSPORTING NO FIELDS.

  IF sy-subrc EQ 0.

    LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr FROM sy-tabix.

      IF lwa_crptr-clrit NE gc_posnr.
        EXIT.
      ENDIF.

      IF lwa_crptr-parvw EQ gc_partner_func-bill_to_party.
        ls_komk-kunre = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-payer.
        ls_komk-knrze = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-sold_to_party.
        ls_komk-kunnr = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-ship_to_party.
        ls_komk-kunwe = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-sales_emp.
        ls_komk-vrtnr = lwa_crptr-pernr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-vendor.
        ls_komk-lifnr = lwa_crptr-lifnr.
      ENDIF.
    ENDLOOP.

  ENDIF.

  ls_komk-kappl = gc_kappl-sales.
  ls_komk-mandt = sy-mandt.
  ls_komk-vbklt = gc_operator-plus_sign.

  PERFORM read_tvta USING gs_clrqdoc_infocus-x-crhdr-vkorg
                          gs_clrqdoc_infocus-x-crhdr-vtweg
                          gs_clrqdoc_infocus-x-crhdr-spart
                 CHANGING ls_tvta
                          ls_tvko.

  IF NOT ls_tvta-vtwko IS INITIAL.
    ls_komk-vtweg = ls_tvta-vtwko.
  ENDIF.

  IF NOT ls_tvta-spako IS INITIAL.
    ls_komk-spart = ls_tvta-spako.
  ENDIF.

  PERFORM read_t001 USING gs_clrqdoc_infocus-x-crhdr-bukrs
                 CHANGING gs_t001.

  ls_komk-hwaer = gs_t001-waers.

  IF ls_komk-hwaer IS INITIAL.
    ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  IF ls_komk-txjcd IS INITIAL
      AND ls_komk-aland NE ls_komk-land1.

    CALL FUNCTION 'CHECK_JURISDICTION_ACTIVE'
      EXPORTING
        i_land     = gs_t001-land1
        i_bukrs    = gs_t001-bukrs
      IMPORTING
        e_isactive = lv_jxcd_active.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT lv_jxcd_active IS INITIAL.
      ls_komk-txjcd = gs_t001-txjcd.
    ENDIF.

  ENDIF.

  ls_komk-boavo = gs_tvko-boavo.
  ls_komk-bokre = gs_kurgv-bokre.
  PERFORM prepare_temp_hdr_itm_no CHANGING lwa_critm .

  PERFORM fill_pricing_data USING lwa_critm
                                  space
                                  gs_clrqdoc_infocus
                         CHANGING ls_komk
                                  lwa_komp.

  IF ls_komk-waerk IS INITIAL.
    ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.
  ASSIGN COMPONENT gc_komk_field-key_uc OF STRUCTURE ls_komk TO <lwa_komk_key>.

  IF sy-subrc EQ 0.

    READ TABLE gt_x_komk WITH KEY (gc_komk_field-key_uc) = <lwa_komk_key>.

  ELSE.

    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <lwa_komk_key>.

    IF <lwa_komk_key> IS ASSIGNED.
      READ TABLE gt_x_komk WITH KEY <lwa_komk_key>.
    ENDIF.

  ENDIF.

  IF sy-subrc NE 0.
    APPEND ls_komk TO gt_x_komk.
    gt_x_komk-ix_komk = sy-tabix.
    MODIFY gt_x_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL.
    lwa_komp-ix_komk = gt_x_komk-ix_komk.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL.
    SET BIT 1 OF lv_no_display TO 1.
    SET BIT 2 OF lv_no_display TO 1.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL AND gs_variables-subitem_infocus IS INITIAL.

    READ TABLE gs_clrqdoc_infocus-x-critm
      WITH KEY clrit = gs_variables-item_infocus
               clrsit = gc_clrsit_low
               clrdit = gc_clrdit_low
      INTO lwa_critm.

    lwa_critm-tmphd = ls_komk-knumv.
    lwa_critm-tmpit = lwa_komp-kposn.

    READ TABLE gs_clrqdoc_infocus-x-crcon
    WITH KEY clrit = gs_variables-item_infocus
    clrdit = lwa_critm-ldetla
    TRANSPORTING NO FIELDS
    BINARY SEARCH.

    IF sy-subrc EQ 0.

      lv_crcon_tabix = sy-tabix.

      LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM lv_crcon_tabix.

        READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
        IF sy-subrc <> 0.
          IF lwa_crcon-clrit NE gs_variables-item_infocus
            OR lwa_crcon-clrdit <> lwa_critm-ldetla.
            EXIT.
          ENDIF.

          CLEAR lt_komv.
          MOVE-CORRESPONDING lwa_crcon TO lt_komv.
          lt_komv-knumv = lwa_critm-tmphd.
          lt_komv-kposn = lwa_critm-tmpit.
          APPEND lt_komv.
        ENDIF.

      ENDLOOP.

    ENDIF.

  ELSEIF gs_variables-item_infocus IS INITIAL.

    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon.
      CLEAR lt_komv.
      MOVE-CORRESPONDING lwa_crcon TO lt_komv.
      lt_komv-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
      APPEND lt_komv.
    ENDLOOP.


  ENDIF.


  IF  gs_variables-subitem_infocus IS NOT INITIAL.
    gs_variables-delta_infocus = p_clrdit.
    PERFORM prep_calc_req_subitm_dta.
    LOOP AT gt_subitm_condn INTO lwa_crcon.
      CLEAR lt_komv.
      MOVE-CORRESPONDING lwa_crcon TO lt_komv.
      lt_komv-knumv = lwa_critm-tmphd.
      lt_komv-kposn = lwa_critm-tmpit.
      APPEND lt_komv.
    ENDLOOP.
  ENDIF.
  IF lt_komv[] IS INITIAL.
    CLEAR ls_komk-knumv.
  ENDIF.

  CALL FUNCTION 'PRICING_REFRESH'
    EXPORTING
      i_no_komv_refresh = abap_false
    TABLES
      tkomk             = lt_komk_temp[]
      tkomv             = lt_komv_temp[].
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION 'PRICING_SUBSCREEN_GET_UI_DATA'
    EXPORTING
      is_komk     = ls_komk
      it_tkomv    = lt_komv[]
    IMPORTING
      et_xkomv_ui = lt_results
    CHANGING
      cs_komp     = lwa_komp
    EXCEPTIONS
      error       = 1
      OTHERS      = 2.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR: gs_variables , gs_clrqdoc_infocus-x-crhdr , gs_clrqdoc_infocus-x-critm[] ,  gs_clrqdoc_infocus-x-crptr[] ,  gs_clrqdoc_infocus-x-crcon[].
  lt_komv_ui  = lt_results.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_bill_hist_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IM_CLRQNO
*&      <-- LT_BILL_HIST
*&---------------------------------------------------------------------*
FORM get_bill_hist_data  USING    p_clrqno TYPE /cgdc/clrqno       " Calc request
                         CHANGING lt_bill_hist TYPE /cgdc/tt_clrq_bill_hist_fcat.

  DATA:lv_clrqno      TYPE  /cgdc/clrqno.

  lv_clrqno =  |{  p_clrqno   ALPHA = IN }|.
  gs_clrqdoc_infocus-x-crhdr-clrno = lv_clrqno.
*  Get billing history
  PERFORM prep_bill_hist_data.

  lt_bill_hist  = gt_bill_hist_fcat.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_reason_code_pp_un
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_reason_code_pp_un .
  IF gt_reason_codes[] IS INITIAL.
    SELECT SINGLE *
                FROM /cgdc/t_clrtype
                INTO @DATA(lwa_clrtype)
                WHERE clrqt = @gs_clrqdoc_infocus-x-crhdr-clrqt.
    IF sy-subrc EQ 0.
      IF gs_variables-itm_post_amt_un IS NOT INITIAL OR
        gs_variables-itm_post_quan_un IS NOT INITIAL.
        SELECT *
          FROM /cgdc/t_rtbrpar
          INTO TABLE @gt_reason_codes
          WHERE rsn_func EQ @gc_rsn_func-postpone
          AND rsnpf = @lwa_clrtype-rsnprf_p.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMF0I
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0I.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form init_transaction
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM init_transaction.

  gs_variables-key_only = abap_true.

  IF gs_variables-overview_mode IS INITIAL.
    gs_variables-worklist_is_visible = abap_true.
    gs_variables-overview_mode = gc_mode_display.
    gs_variables-document_mode = gc_mode_display.
  ENDIF.

  IF gt_calc_req_type_text IS INITIAL.
    PERFORM select_calc_req_type_txt.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form initialize_document_data
*&---------------------------------------------------------------------*
FORM initialize_document_data.
  DATA: lt_komk TYPE TABLE OF komk,
        lt_komv TYPE TABLE OF komv.

  lt_komk = gt_komk[].
  lt_komv = gt_komv[].

  "SOC - DCLM 6261
  DATA(lv_vbeln) = gs_clrqdoc_infocus-x-crhdr-vgbel.
  "EOC - DCLM 6261

  CLEAR: gs_variables-calc_changed."data_changed.
  CLEAR: gt_cns_fcat,
         gs_cns_data,
         gt_cns_data,
         gs_sales_order_header,
         gt_sales_order_items,
         gt_sales_order_ptrs,
         gt_sales_order_cnds,
         gs_clrqdoc_infocus,
         gs_variables-last_dmr_posnr,
         gs_variables-last_posnr,
         gs_calc_req_type,
         gt_billitem,
         gt_komp,
         gt_komk,
         gt_komv,   "++DCLM6261
         gt_srcdata,
         gt_clrq_key,
         gs_variables-bp_curr_sel_row,
         gs_variables-bp_prev_sel_row,
         gs_variables-bh_prev_sel_row,
         gs_variables-cg_prev_sel_row,
         gs_variables-show_imp_all_btn,
         gs_variables-subitem_scrn_expnd,
         gs_variables-header_messages,
         gs_variables-header_light,
         gs_variables-bit_num_gen,
         gt_coiob_buffer,
         gt_coep_buffer,
         gt_br_cond_copy_control[],
         gt_bill_prev_char,
         gt_item_values,
         gs_variables-mis_itm_count,
          gs_variables-calc_changed,
         gs_variables-bstat_filter,
         gv_bi_where,
         gt_bill_preview_cond,
         gs_variables-pre_bill_to_tabix,
         gs_variables-pre_bill_from_tabix,
         gs_variables-calc_grp_to_tabix,
         gs_variables-calc_grp_from_tabix,
         gs_variables-page_number,
         gs_variables-page_number_bitm,
         gs_variables-page_number_calc_grp,
         gs_variables-dyn_selscr_ucomm,
         gt_messages_header,
         gv_index,
         gs_blp_doc,
         gs_be_crhdr_buffer,
         gt_critm_bestat,
         gt_crbi_bestat.

  IF go_grid_calc_req_bill_pre IS BOUND.
    go_grid_calc_req_bill_pre->free( ).
  ENDIF.

  IF go_bill_pre_container IS BOUND.
    go_bill_pre_container->free( ).
  ENDIF.

  FREE :  go_grid_calc_req_bill_pre,
          go_bill_pre_container.

  IF gt_bill_pre_data IS NOT INITIAL.
    REFRESH gt_bill_pre_data.
  ENDIF.

  IF go_calc_grp_grid IS BOUND.
    go_calc_grp_grid->free( ).
  ENDIF.

  IF go_calc_grp_cont IS BOUND.
    go_calc_grp_cont->free( ).
  ENDIF.

  FREE :  go_calc_grp_grid,
          go_calc_grp_cont.

  IF go_grid_calc_req_bill_pre IS BOUND.
    go_grid_calc_req_bill_pre->free( ).
  ENDIF.

  IF  go_bill_pre_container IS BOUND.
    go_bill_pre_container->free( ).
  ENDIF.

  IF <gt_calc_grp_data> IS ASSIGNED.
    REFRESH <gt_calc_grp_data>.
    UNASSIGN <gt_calc_grp_data>.
  ENDIF.


  IF go_calc_grp_grid IS BOUND.
    go_calc_grp_grid->free( ).
  ENDIF.

  FREE :  go_calc_grp_grid.

  CLEAR: gt_bill_hist_fcat,
         gt_bill_pre_fcat,
         gt_subitm_condn,
         gs_contract_hdr,
         gt_contract_business_data,
         gt_contract_itm,
         gt_subitm_part,
         gt_item_values,
         gt_item_postponed.

  CLEAR : gs_variables-process_type,
          gs_clrit_org.

  CASE sy-dynnr.
    WHEN gc_screen-overview.

      CLEAR: gs_clrqdoc_infocus,
             gs_posnr_mapping,
             gs_variables-page_number,
             gs_variables-item_to_tabix,
             gs_variables-item_from_tabix,
             gt_pages_key[].

      CLEAR: so_crtyp[],
             so_conno[],
             so_vbeln[].
      gs_variables-refresh_calc_req_items_grid = abap_true.
      gs_variables-refersh_bill_hist_grid      = abap_true.

  ENDCASE.

  "SOC - DCLM 6261
  IF lv_vbeln IS NOT INITIAL.
    CALL METHOD /cgdc/cl_prc_formula_functions=>refresh_cont_value
      EXPORTING
        iv_vbeln = lv_vbeln.
  ENDIF.
  "EOC - DCLM 6261

  CALL FUNCTION 'PRICING_REFRESH'
    TABLES
      tkomk = lt_komk
      tkomv = lt_komv.

*-Clear variables created for change log
  CLEAR : gs_title_strip,gv_okcode,gv_chlog_act_scr,
          gt_hdr_log,gt_bi_log,gt_pt_log,gt_it_log,gt_ic_log,
          gt_fcat_hdr_log,gt_fcat_bi_log,gt_fcat_pt_log,
          gt_fcat_it_log,gt_fcat_ic_log,
          gv_ucomm.

  IF go_ch_hdr_alv IS BOUND.
    CALL METHOD go_ch_hdr_alv->free.
  ENDIF.

  IF go_ch_hdr_cont IS BOUND.
    CALL METHOD go_ch_hdr_cont->free.
  ENDIF.

  IF go_ch_bi_alv IS BOUND.
    CALL METHOD go_ch_bi_alv->free.
  ENDIF.

  IF go_ch_bi_cont IS BOUND.
    CALL METHOD go_ch_bi_cont->free.
  ENDIF.

  IF go_ch_pt_alv IS BOUND.
    CALL METHOD go_ch_pt_alv->free.
  ENDIF.

  IF go_ch_pt_cont IS BOUND.
    CALL METHOD go_ch_pt_cont->free.
  ENDIF.

  IF go_ch_it_alv IS BOUND.
    CALL METHOD go_ch_it_alv->free.
  ENDIF.

  IF go_ch_it_cont IS BOUND.
    CALL METHOD go_ch_it_cont->free.
  ENDIF.

  IF go_ch_ic_alv IS BOUND.
    CALL METHOD go_ch_ic_alv->free.
  ENDIF.

  IF go_ch_ic_cont IS BOUND.
    CALL METHOD go_ch_ic_cont->free.
  ENDIF.

  CLEAR :go_ch_hdr_alv,go_ch_hdr_cont,
         go_ch_bi_alv,go_ch_bi_cont,
         go_ch_pt_alv,go_ch_pt_cont,
         go_ch_it_alv,go_ch_it_cont,
         go_ch_ic_alv,go_ch_ic_cont.

  IF tc_chlog_tstrip IS NOT INITIAL.
    CLEAR tc_chlog_tstrip.
  ENDIF.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2022] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-211COINCGDC (CIS-AD S/4 Hana 2021)
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0M.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form modify_screen
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM modify_screen.

  DATA: lv_perform(30) VALUE gc_modify_screen.

  CONCATENATE lv_perform sy-dynnr INTO lv_perform.

  LOOP AT SCREEN.
    PERFORM (lv_perform) IN PROGRAM (gc_program) IF FOUND.
    MODIFY SCREEN.
  ENDLOOP.

ENDFORM.

FORM modify_screen_0500.
  DATA lwa_calc_req_itm TYPE /cgdc/s_clrqit_fcat.
  IF   screen-name EQ gc_screenflds-clrqit_clrit
    OR screen-name EQ gc_screenflds-clrqit_zmeng
    OR screen-name EQ gc_screenflds-clrqit_vrkme
    OR screen-name EQ gc_screenflds-clrqit_netwr
    OR screen-name EQ gc_screenflds-clrqit_waerk
    OR screen-name EQ gc_screenflds-clrqit_pstyv
    OR screen-name EQ gc_screenflds-clrqit_matnr
    OR screen-name EQ gc_screenflds-clrqit_total_netwr .
    screen-input = 0.
  ENDIF.
  IF screen-name = gc_screenflds-tab_ref_docs.
    READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_itm WITH KEY  clrit = gs_variables-item_infocus.
    IF sy-subrc = 0.
      IF lwa_calc_req_itm-itmty = gc_clrq_itmty-manual_line OR lwa_calc_req_itm-itmty = gc_clrq_itmty-prepayment_item.
        screen-invisible = 1.
      ENDIF.
    ENDIF.
  ENDIF.
  IF screen-name = gc_screenflds-tab_costsht.

  ENDIF.
ENDFORM.

FORM modify_screen_0100.
  IF gs_clrqdoc_infocus IS NOT INITIAL.
    IF gs_variables-colps_hdr_info IS INITIAL
       AND ( screen-name = gc_screenflds-pb_expand_hdr_info
       OR screen-name = gc_screenflds-tf_hdr_details ) .
      screen-input = 0.
      screen-active = 0 .
    ENDIF.

    IF gs_variables-colps_quick_info IS INITIAL
      AND ( screen-name = gc_screenflds-pb_expand_quick_info
      OR screen-name = gc_screenflds-tf_quick_info ).
      screen-input = 0.
      screen-active = 0.
    ENDIF.

    IF gs_variables-colps_itm_info IS INITIAL
       AND ( screen-name = gc_screenflds-pb_expand_itm_info
       OR screen-name = gc_screenflds-tf_itm_details ) .
      screen-input = 0.
      screen-active = 0.
    ENDIF.
  ELSE.
    screen-input = 0.
    screen-active = 0.
  ENDIF.
ENDFORM.
FORM modify_screen_0200.

  IF 1 = 2.
    screen-input = 0.
    screen-active = 1.
  ENDIF.

ENDFORM.


FORM modify_screen_0196.
  IF screen-name = gc_screenflds-tab_cost.
    IF gs_rtbp-achin IS INITIAL.
      screen-invisible = 1.
    ENDIF.
  ENDIF.
ENDFORM.

FORM modify_screen_0301.

  IF screen-name = gc_screenflds-scrn_flds_post_quan OR screen-name = gc_screenflds-lbl_post_comm OR screen-name = gc_screenflds-lbl_star_p.
    IF gs_variables-itm_post_quan IS NOT INITIAL.
      screen-input = 1.
      IF screen-name = gc_screenflds-lbl_star_p.
        screen-color = 1.
      ENDIF.
    ELSE.
      screen-input = 0.
      screen-active = 0.
    ENDIF.
  ELSEIF  screen-name = gc_screenflds-scrn_flds_post_date.
    IF  1 = 0.
      screen-input = 1.
      screen-output = 0.
      screen-invisible = 0.
    ELSE.
      screen-input = 0.
      screen-output = 1.
      screen-invisible = 1.
    ENDIF.

  ELSEIF screen-name = gc_screenflds-scrn_flds_rej_quan OR screen-name = gc_screenflds-lbl_rej_cumm OR screen-name = gc_screenflds-lbl_star_r.
    IF gs_variables-itm_rej_quan IS NOT INITIAL.
      screen-input = 1.
      IF screen-name = gc_screenflds-lbl_star_r.
        screen-color = 1.
      ENDIF.
    ELSE.
      screen-input = 0.
      screen-active = 0.
    ENDIF.
  ELSEIF screen-name = gc_screenflds-scrn_flds_rsncd.
    IF gs_variables-itm_post_quan_un IS NOT INITIAL.
      screen-input = 0.
      screen-active = 0.
    ELSE.
      screen-input = 1.
    ENDIF.
  ENDIF.
ENDFORM.
FORM modify_screen_0302.

  IF screen-name = gc_screenflds-scrn_flds_post_netwr OR screen-name = gc_screenflds-lbl_post_comm OR screen-name = gc_screenflds-lbl_star_p.
    IF gs_variables-itm_post_amt IS NOT INITIAL.
      screen-input = 1.
      IF screen-name = gc_screenflds-lbl_star_p.
        screen-color = 1.
      ENDIF.
    ELSE.
      screen-input = 0.
      screen-active = 0.
    ENDIF.
  ELSEIF screen-name = gc_screenflds-scrn_flds_post_date.
    IF 1 = 0.
      screen-input = 1.
      screen-output = 0.
      screen-invisible = 0.
    ELSE.
      screen-input = 0.
      screen-output = 1.
      screen-invisible = 1.
    ENDIF.
  ELSEIF screen-name = gc_screenflds-scrn_flds_rej_netwr OR screen-name = gc_screenflds-lbl_rej_cumm OR screen-name = gc_screenflds-lbl_star_r.
    IF gs_variables-itm_rej_amt IS NOT INITIAL.
      screen-input = 1.
      IF screen-name = gc_screenflds-lbl_star_r.
        screen-color = 1.
      ENDIF.
    ELSE.
      screen-input = 0.
      screen-active = 0.
    ENDIF.
  ELSEIF screen-name = gc_screenflds-scrn_flds_rsncd.
    IF gs_variables-itm_post_amt_un IS NOT INITIAL.
      screen-input = 0.
      screen-active = 0.
    ELSE.
      screen-input = 1.
    ENDIF.
  ENDIF.
ENDFORM.
FORM message_add .

  CONSTANTS:
    con_msg_active     TYPE i VALUE 1,
    con_msg_not_active TYPE i VALUE 9.

  DATA:
    l_message_text(80) TYPE c,
    l_ident_objid      TYPE sy-msgv1,
    l_ident_txt20      TYPE tbo01-txt20,
    l_hold_msgty       TYPE symsgty,
    l_hold_msgid       TYPE symsgid,
    l_hold_msgno       TYPE symsgno,
    l_hold_msgv1       TYPE symsgv,
    l_hold_msgv2       TYPE symsgv,
    l_hold_msgv3       TYPE symsgv,
    l_hold_msgv4       TYPE symsgv.

  STATICS:
    s_messages_active       TYPE i.         " 0=not checked, 1=active, 2=not active

* The caller has issued a message, store that message info:
  l_hold_msgty = sy-msgty.
  l_hold_msgid = sy-msgid.
  l_hold_msgno = sy-msgno.
  l_hold_msgv1 = sy-msgv1.
  l_hold_msgv2 = sy-msgv2.
  l_hold_msgv3 = sy-msgv3.
  l_hold_msgv4 = sy-msgv4.

* Is message log active?
  IF s_messages_active IS INITIAL.
    CALL FUNCTION 'MESSAGES_ACTIVE'
      EXCEPTIONS
        not_active = 1
        OTHERS     = 2.
    IF sy-subrc = 0.
      s_messages_active = con_msg_active.
    ELSE.
      s_messages_active = con_msg_not_active.
    ENDIF.
  ENDIF.

* If not active, the message has been issued and is in SY-MSGxx variables.
* We just need to set global variable on max error severity:
  IF s_messages_active = con_msg_not_active.
    CASE sy-msgty.
      WHEN gc_message_type-abort.                           "#EC NOTEXT
        IF g_max_error_severity LT con_msg_severity-abort.
          g_max_error_severity = con_msg_severity-abort.
        ENDIF.
      WHEN gc_message_type-error.                           "#EC NOTEXT
        IF g_max_error_severity LT con_msg_severity-error.
          g_max_error_severity = con_msg_severity-error.
        ENDIF.
      WHEN gc_message_type-warning.                         "#EC NOTEXT
        IF g_max_error_severity LT con_msg_severity-warning.
          g_max_error_severity = con_msg_severity-warning.
        ENDIF.
      WHEN gc_message_type-information.                     "#EC NOTEXT
        IF g_max_error_severity LT con_msg_severity-info.
          g_max_error_severity = con_msg_severity-info.
        ENDIF.
      WHEN gc_message_type-succes.                          "#EC NOTEXT
        IF g_max_error_severity LT con_msg_severity-success.
          g_max_error_severity = con_msg_severity-success.
        ENDIF.
    ENDCASE.
    EXIT.
  ENDIF.

* If issuing an error or warning message, provide some context:
  IF ( l_hold_msgty = gc_message_type-abort OR l_hold_msgty = gc_message_type-error OR l_hold_msgty = gc_message_type-warning )
      AND g_msg_context_needed = con_on.

    CLEAR g_msg_context_needed.

    IF g_objnr_for_messages IS INITIAL.
      MESSAGE s003(k_rtohc) INTO l_message_text.
    ELSE.
      CALL FUNCTION 'OBJECT_IDENTIFICATION_GET'
        EXPORTING
          objnr       = g_objnr_for_messages
        IMPORTING
          ident_objid = l_ident_objid
          ident_txt20 = l_ident_txt20.
      IF sy-subrc <> 0.
      ENDIF.
      MESSAGE s002(k_rtohc) WITH l_ident_txt20 l_ident_objid INTO l_message_text.       " 'Messages from overhead processing for &1 &2'
    ENDIF.

    CALL FUNCTION 'MESSAGE_STORE'
      EXPORTING
        arbgb = sy-msgid
        msgty = sy-msgty
        msgv1 = sy-msgv1
        msgv2 = sy-msgv2
        msgv3 = sy-msgv3
        msgv4 = sy-msgv4
        txtnr = sy-msgno.
    IF sy-subrc <> 0.
    ENDIF.

  ENDIF.

* Store the message issued by the caller:
  CALL FUNCTION 'MESSAGE_STORE'
    EXPORTING
      arbgb                  = l_hold_msgid
      msgty                  = l_hold_msgty
      msgv1                  = l_hold_msgv1
      msgv2                  = l_hold_msgv2
      msgv3                  = l_hold_msgv3
      msgv4                  = l_hold_msgv4
      txtnr                  = l_hold_msgno
    IMPORTING
      max_severity           = g_max_error_severity
    EXCEPTIONS
      message_type_not_valid = 1
      not_active             = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
  ENDIF.

* Re-issue the message so the SY-MSG variables are restored:
  MESSAGE ID l_hold_msgid TYPE l_hold_msgty NUMBER l_hold_msgno
          WITH l_hold_msgv1 l_hold_msgv2 l_hold_msgv3 l_hold_msgv4
          INTO l_message_text.

ENDFORM.
FORM move_itm_to_itm_fcat USING lwa_clrqit TYPE /cgdc/s_clrqit
                           CHANGING lwa_clrqit_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA: lwa_clrqcost TYPE /cgdc/s_clrqcost.
  DATA: lv_actual_allocation TYPE kbetr VALUE 200000.
  DATA lv_subrc TYPE sysubrc.
  MOVE-CORRESPONDING lwa_clrqit TO lwa_clrqit_fcat.

  "Costline
  CASE lwa_clrqit_fcat-itmty.
    WHEN gc_clrq_itmty-costline.

    WHEN gc_clrq_itmty-bill_plan_line.
      READ TABLE gs_clrqdoc_infocus-x-crblpl INTO DATA(lwa_crblpl)
      WITH KEY clrno = lwa_clrqit_fcat-clrno
               clrit = lwa_clrqit_fcat-clrit.
      IF sy-subrc = 0.
        CONCATENATE lwa_crblpl-vbeln lwa_crblpl-posnr lwa_crblpl-billitem
        INTO lwa_clrqit_fcat-source SEPARATED BY gc_operator-fwd_slash.
        CLEAR lwa_crblpl.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.

  IF lwa_clrqit-objnr IS NOT INITIAL.
    READ TABLE gt_prps INTO DATA(ls_pspnr) WITH KEY objnr = lwa_clrqit-objnr.
    IF sy-subrc = 0.
      lwa_clrqit_fcat-pspnr = ls_pspnr-pspnr.
    ELSE.
      DATA ls_prps TYPE prps.
      CLEAR ls_prps.

      SELECT SINGLE *
        FROM prps
        WHERE objnr = @lwa_clrqit-objnr
        INTO CORRESPONDING FIELDS OF @ls_prps.
      IF sy-subrc = 0.
        APPEND ls_prps TO gt_prps.
        lwa_clrqit_fcat-pspnr = ls_prps-pspnr.
        CLEAR ls_prps.
      ENDIF.

    ENDIF.
  ENDIF.
  "Allocation Value.
  PERFORM select_clrqpit USING gs_clrqdoc_infocus-x-crhdr-clrno CHANGING lv_subrc.
  READ TABLE gt_clrqpit TRANSPORTING NO FIELDS WITH KEY clrit = lwa_clrqit_fcat-clrit.
  IF sy-subrc = 0.
    CONCATENATE lwa_clrqit_fcat-msg_code 'H' INTO lwa_clrqit_fcat-msg_code.
    IF lwa_clrqit_fcat-msg_icon IS INITIAL.
      lwa_clrqit_fcat-msg_icon = icon_yellow_light.
    ENDIF.
  ENDIF.
  lwa_clrqit_fcat-alloc_value = ( lv_actual_allocation / 100 ) * lwa_clrqit_fcat-wbs_allocation.

  PERFORM prep_calc_req_items_styles CHANGING lwa_clrqit_fcat.
ENDFORM.
FORM modify_screen_0201.
  IF gs_variables-dis_man_itm_dd IS NOT INITIAL.
    IF screen-name = gc_screenflds-rtbmit_mityp.
      screen-input = 0.
      screen-output = 1.
    ENDIF.
  ENDIF.
ENDFORM.
FORM modify_screen_0202.
  IF gs_variables-dis_man_itm_dd IS NOT INITIAL.
    DESCRIBE TABLE gt_matnr_desc LINES sy-tfill.
    IF sy-tfill = 1.
      IF screen-name = gc_screenflds-man_itm_matnr OR screen-name = gc_screenflds-man_itm_matwa.
        screen-input = 0.
        screen-output = 1.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM modify_screen_0204.
  IF gs_variables-dis_man_itm_dd IS NOT INITIAL.
    IF screen-name = gc_screenflds-rtbmit_mityp.
      screen-input = 0.
      screen-output = 1.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form modify_source_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM modify_source_data CHANGING lt_src_data TYPE table.
  DATA: lt_rtbpmdce TYPE TABLE OF /cgdc/t_rtbpmdce.
  DATA: lwa_rtbpmdce TYPE /cgdc/t_rtbpmdce,
        lv_where(70).
  FIELD-SYMBOLS:<lt_src_data> TYPE STANDARD TABLE.
  FIELD-SYMBOLS : <lv_racct>     TYPE racct,
                  <lv_matnr>     TYPE matnr,
                  <lwa_src_data> TYPE any.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form material_redetermine
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_CALC_REQ_ITEMS_FCAT
*&      <-- GT_CALC_REQ_ITEMS_FCAT
*&---------------------------------------------------------------------*
FORM material_redetermine CHANGING cs_clrqit TYPE /cgdc/s_clrqit_fcat .
  DATA: ls_clrqit     TYPE /cgdc/s_clrqit_brf,
        ls_clrqhd_brf TYPE /cgdc/s_clrqhd_brf.
  DATA: ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
        lv_msg_code    TYPE /cgdc/err_msg.
  MOVE-CORRESPONDING cs_clrqit TO ls_clrqit.
  MOVE-CORRESPONDING cs_clrqit TO ls_clrcost_brf.
  SELECT SINGLE * FROM /cgdc/_clrqhd INTO @DATA(ls_clrqhd)
     WHERE clrno = @ls_clrqit-clrno.

  MOVE-CORRESPONDING ls_clrqhd TO ls_clrqhd_brf.
  CALL FUNCTION '/CGDC/_CLRQ_DETERMINE_MATNR'
    EXPORTING
      is_clrqhd   = ls_clrqhd_brf
      is_clrqit   = ls_clrqit
      is_clrqcost = ls_clrcost_brf
    IMPORTING
      ev_cegrp    = cs_clrqit-cegroup
      ev_skfgrp   = cs_clrqit-skfgrp
      ev_atgrp    = cs_clrqit-atgrp
      ev_ccgrp    = cs_clrqit-ccgrp
      ev_matnr    = cs_clrqit-matnr
      ev_msg_code = lv_msg_code.
  IF sy-subrc <> 0.
  ENDIF.

  cs_clrqit-msg_code = cs_clrqit-msg_code && lv_msg_code.
  CONDENSE cs_clrqit-msg_code NO-GAPS.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form modify_screen_0172
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM modify_screen_0172 . "modify screen based on selected field
  CASE gs_variables-dyn_selscr_ucomm.
    WHEN gc_fcode-bill_dt.
      IF screen-name = gc_screenflds-clrqbi_faksp.
        screen-input = 0.
        screen-active = 0.
      ENDIF.
    WHEN gc_fcode-bill_blk.
      IF screen-name = gc_screenflds-clrqbi_bldat.
        screen-input = 0.
        screen-active = 0.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.


FORM modify_screen_0206.
  DATA : ls_bilitty TYPE /cgdc/t_bilitty.
  IF   screen-name EQ gc_screenflds-clrqbi_pop_stdt
    OR screen-name EQ gc_screenflds-clrqbi_pop_enddt
    OR screen-name EQ gc_screenflds-clrqbi_bldat.
    IF NOT /cgdc/s_clrqbi_scrnfld-bitype IS INITIAL.
      screen-required = 1.
    ENDIF.
  ENDIF.


  IF screen-name = '/CGDC/S_CLRQBI_SCRNFLD-BILMATNR'.
    IF /cgdc/s_clrqbi_scrnfld-bitype IS NOT INITIAL.
      SELECT SINGLE * FROM /cgdc/t_bilitty
                     INTO  ls_bilitty
                     WHERE  bilitmtyp = /cgdc/s_clrqbi_scrnfld-bitype.


      IF ls_bilitty-bilmatnr IS INITIAL.
        screen-input = 1.
        screen-output = 1.
        screen-required = 1.
      ELSE.
        screen-input = 0.
        screen-output = 1.

      ENDIF.
    ELSE.
      screen-input = 0.
      screen-output = 1.
    ENDIF.


  ENDIF.
ENDFORM.

FORM modify_screen_0140.

  IF screen-name EQ gc_screenflds-clrqhd_faksk.
    IF gs_variables-document_mode = gc_mode_display.
      screen-input = 0.
    ELSEIF gs_variables-document_mode = gc_mode_create
        OR gs_variables-document_mode = gc_mode_change.
      screen-input = 1.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form modify_service_start_end_date
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM modify_service_start_end_date.

  DATA: lv_item_cat                   TYPE pstyv,       " Dummy
        lv_first_start_date           TYPE /cgdc/blp_svcstart,
        lv_last_end_date              TYPE /cgdc/blp_svcend,
        lv_lines                      TYPE sy-tabix,
        ls_blpln_type                 TYPE /cgdc/t_bplnty,
        ls_start_end_date             LIKE LINE OF gt_pbp_bpit_per_posnr,
        lt_pbp_eligible_bpit          LIKE gt_pbp_eligible_bpit,
        lt_pbp_eligible_bprqit        TYPE TABLE OF s_pbp_eligible_rqit,
        lt_pbp_bpit_sdate             TYPE TABLE OF /cgdc/t_blnpln,
        lt_bpit_per_posnr_sdate_final LIKE gt_pbp_bpit_per_posnr,
        lt_pbp_bpit_edate             TYPE TABLE OF /cgdc/t_blnpln,
        lt_bpit_per_posnr_edate_final LIKE gt_pbp_bpit_per_posnr,
        lwa_pbp_eligible_bpit         LIKE LINE OF gt_pbp_eligible_bpit,
        lwa_pbp_eligible_bpit_tmp     LIKE LINE OF gt_pbp_eligible_bpit.

  FIELD-SYMBOLS: <lwa_pbp_bpit_per_vbeln> LIKE LINE OF gt_pbp_bpit_per_vbeln,
                 <lwa_pbp_bpit_per_posnr> LIKE LINE OF gt_pbp_bpit_per_posnr.

  IF gs_contract_hdr-/cgdc/pbplq EQ 'I'.

    gt_pbp_bpit_per_posnr[] = gt_pbp_eligible_bpit[].
    lt_pbp_bpit_sdate[] = gt_pbp_eligible_bpit[].
    lt_pbp_bpit_edate[] = gt_pbp_eligible_bpit[].
    SORT lt_pbp_bpit_sdate BY vbeln posnr svcstart.
    SORT lt_pbp_bpit_edate BY vbeln posnr ASCENDING svcend DESCENDING.

    LOOP AT lt_pbp_bpit_sdate INTO lwa_pbp_eligible_bpit.

      lwa_pbp_eligible_bpit_tmp = lwa_pbp_eligible_bpit.

      AT NEW posnr.
        APPEND lwa_pbp_eligible_bpit_tmp TO lt_bpit_per_posnr_sdate_final.
      ENDAT.

    ENDLOOP.

    LOOP AT lt_pbp_bpit_edate INTO lwa_pbp_eligible_bpit.

      lwa_pbp_eligible_bpit_tmp = lwa_pbp_eligible_bpit.

      AT END OF posnr.
        APPEND lwa_pbp_eligible_bpit_tmp TO lt_bpit_per_posnr_edate_final.
      ENDAT.

    ENDLOOP.

    SORT gt_pbp_bpit_per_posnr BY vbeln posnr.
    DELETE ADJACENT DUPLICATES FROM gt_pbp_bpit_per_posnr COMPARING vbeln posnr.

    LOOP AT gt_pbp_bpit_per_posnr ASSIGNING <lwa_pbp_bpit_per_posnr>.

      READ TABLE lt_bpit_per_posnr_sdate_final
      INTO lwa_pbp_eligible_bpit_tmp
      WITH KEY vbeln = <lwa_pbp_bpit_per_posnr>-vbeln
               posnr = <lwa_pbp_bpit_per_posnr>-posnr.

      IF sy-subrc EQ 0.
        <lwa_pbp_bpit_per_posnr>-svcstart = lwa_pbp_eligible_bpit_tmp-svcstart.
      ENDIF.

      READ TABLE lt_bpit_per_posnr_edate_final
      INTO lwa_pbp_eligible_bpit_tmp
      WITH KEY vbeln = <lwa_pbp_bpit_per_posnr>-vbeln
               posnr = <lwa_pbp_bpit_per_posnr>-posnr.

      IF sy-subrc EQ 0.
        <lwa_pbp_bpit_per_posnr>-svcend = lwa_pbp_eligible_bpit_tmp-svcend.
      ENDIF.

    ENDLOOP.

  ELSEIF gs_contract_hdr-/cgdc/pbplq EQ 'H'.

    gt_pbp_bpit_per_vbeln[] = gt_pbp_eligible_bpit[].
    lt_pbp_bpit_sdate[] = gt_pbp_eligible_bpit[].
    lt_pbp_bpit_edate[] = gt_pbp_eligible_bpit[].
    SORT lt_pbp_bpit_sdate BY vbeln svcstart.
    SORT lt_pbp_bpit_edate BY vbeln ASCENDING svcend DESCENDING.
    READ TABLE lt_pbp_bpit_sdate INTO lwa_pbp_eligible_bpit INDEX 1.

    IF sy-subrc EQ 0.
      lv_first_start_date = lwa_pbp_eligible_bpit-svcstart.
    ENDIF.

    READ TABLE lt_pbp_bpit_edate INTO lwa_pbp_eligible_bpit INDEX 1.

    IF sy-subrc EQ 0.
      lv_last_end_date = lwa_pbp_eligible_bpit-svcend.
    ENDIF.

    SORT gt_pbp_bpit_per_vbeln BY vbeln.
    DELETE ADJACENT DUPLICATES FROM gt_pbp_bpit_per_vbeln COMPARING vbeln.
    READ TABLE gt_pbp_bpit_per_vbeln ASSIGNING <lwa_pbp_bpit_per_vbeln> INDEX 1.
    CHECK sy-subrc EQ 0.
    <lwa_pbp_bpit_per_vbeln>-svcstart = lv_first_start_date.
    <lwa_pbp_bpit_per_vbeln>-svcend = lv_last_end_date.

  ENDIF.

ENDFORM.

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0O.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form open_postp_itms_for_next_bill
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM open_postp_itms_for_next_bill USING lv_commit_work.
***DCLM 7145
  DATA: lv_item_subrc   TYPE sy-subrc,
        lv_item_tabix   TYPE sy-tabix,
        lv_flag         TYPE flag,
        lwa_clrqit_fcat TYPE /cgdc/s_clrqit_fcat,
        lwa_critm_temp  TYPE /cgdc/s_clrqit,
        lwa_critm       TYPE /cgdc/s_clrqit,
        lt_critm_temp   TYPE TABLE OF /cgdc/s_clrqit.

  FIELD-SYMBOLS: <lwa_critm> TYPE /cgdc/s_clrqit.

  LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm_temp WHERE psdat IS INITIAL AND istat EQ gc_ibill_stat-postponed.
    APPEND lwa_critm_temp TO lt_critm_temp.
  ENDLOOP.

  IF lt_critm_temp IS NOT INITIAL.

    SORT lt_critm_temp BY clrno clrit clrsit clrdit.

    LOOP AT lt_critm_temp INTO lwa_critm.

      UNASSIGN: <lwa_critm>.
      READ TABLE gs_clrqdoc_infocus-x-critm
      ASSIGNING <lwa_critm>
      WITH KEY clrno = lwa_critm-clrno
               clrit = lwa_critm-clrit
               clrsit = lwa_critm-clrsit
               clrdit = lwa_critm-clrdit
      BINARY SEARCH.
      lv_item_subrc = sy-subrc.
      lv_item_tabix = sy-tabix.

      IF lv_item_subrc = 8.
        APPEND lwa_critm TO gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm>.
      ELSEIF lv_item_subrc = 4.
        INSERT lwa_critm  INTO gs_clrqdoc_infocus-x-critm INDEX sy-tabix ASSIGNING <lwa_critm>.
      ENDIF.

      READ TABLE gs_clrqdoc_infocus-y-critm
      INTO lwa_critm
      WITH KEY clrno = <lwa_critm>-clrno
               clrit = <lwa_critm>-clrit
               clrsit = <lwa_critm>-clrsit
               clrdit = <lwa_critm>-clrdit
      BINARY SEARCH.
      lv_item_subrc = sy-subrc.
      lv_item_tabix = sy-tabix.

      IF lv_item_subrc = 8.
        APPEND lwa_critm_temp TO gs_clrqdoc_infocus-y-critm.
      ELSEIF lv_item_subrc = 4.
        INSERT lwa_critm_temp INTO gs_clrqdoc_infocus-y-critm INDEX lv_item_tabix.
      ENDIF.

      IF <lwa_critm>-istat = gc_ibill_stat-postponed
        AND <lwa_critm>-psdat IS INITIAL.

        <lwa_critm>-istat = gc_ibill_stat-open.
        gs_variables-bit_num_gen = abap_true.
        PERFORM move_itm_to_itm_fcat USING <lwa_critm> CHANGING lwa_clrqit_fcat.

        PERFORM determine_billing_item USING '' ''
                                    CHANGING lwa_clrqit_fcat <lwa_critm> lv_flag.
* Add sub biiling item logic
        CLEAR gs_variables-bit_num_gen.
        <lwa_critm>-updkz = gc_updkz_update.

      ENDIF.

    ENDLOOP.

    PERFORM document_save USING gs_clrqdoc_infocus lv_commit_work.

  ENDIF.

ENDFORM.
**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: INCLUDE /CGDC/LCLRQMF0P.
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0P.
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Form prepare_field_catalog
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GC_STRUCTURE_CALC_REQ_WORKLIST
*&      <-- LT_FCAT
*&---------------------------------------------------------------------*
FORM prepare_field_catalog USING lv_structure
                        CHANGING lt_fcat       TYPE lvc_t_fcat.

  FIELD-SYMBOLS <lwa_fcat> TYPE lvc_s_fcat.
  DATA: lt_fcat_t TYPE lvc_t_fcat.
  DATA : lt_clrqbic  TYPE STANDARD TABLE OF /cgdc/t_clrqbic,
         lwa_clrqbic TYPE /cgdc/t_clrqbic.
  DATA : lv_cntr   TYPE i VALUE 13,
         lv_cnt    TYPE i,
         lv_colpos TYPE i.
  IF NOT lv_structure IS INITIAL.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = lv_structure
      CHANGING
        ct_fieldcat            = lt_fcat[]
      EXCEPTIONS
        ##fm_subrc_ok
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.

  ENDIF.

  CHECK lt_fcat[] IS NOT INITIAL.

  CASE lv_structure.
    WHEN gc_structure-calc_request_worklist.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        CASE <lwa_fcat>-fieldname.
          WHEN gc_clrqwl_field-mandt OR gc_clrqwl_field-rwclr OR gc_fieldname-bilmatnr.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
          WHEN gc_clrqwl_field-clrno.
            <lwa_fcat>-hotspot = abap_true.
          WHEN gc_clrqwl_field-cttxt.
            <lwa_fcat>-scrtext_s = <lwa_fcat>-scrtext_m = <lwa_fcat>-reptext = <lwa_fcat>-scrtext_l =
            <lwa_fcat>-coltext = TEXT-010.
          WHEN gc_fieldname-dmrno.
            <lwa_fcat>-scrtext_s = <lwa_fcat>-scrtext_m = <lwa_fcat>-reptext = <lwa_fcat>-scrtext_l =
            <lwa_fcat>-coltext = TEXT-012.
          WHEN gc_clrqwl_field-vgbel.
            <lwa_fcat>-scrtext_s = <lwa_fcat>-scrtext_m = <lwa_fcat>-reptext = <lwa_fcat>-scrtext_l =
            <lwa_fcat>-coltext = TEXT-011.
          WHEN gc_clrqwl_field-rtbpn.
            <lwa_fcat>-scrtext_s = <lwa_fcat>-scrtext_m = <lwa_fcat>-reptext = <lwa_fcat>-scrtext_l =
            <lwa_fcat>-coltext = TEXT-132.

        ENDCASE.
      ENDLOOP.

    WHEN gc_structure-calc_req_items.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        IF sy-dynnr = gc_screen-man_itm_alv.
          CASE <lwa_fcat>-fieldname.
            WHEN  gc_clrqit_field-reason_code OR gc_clrqit_field-matnr OR
                  gc_clrqit_field-matwa       OR gc_clrqit_field-zmeng OR
                  gc_clrqit_field-netwr_ap    OR gc_clrqit_field-fkdat OR
                  gc_clrqit_field-ps_psp_pnr.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-edit = abap_true.
              <lwa_fcat>-f4availabl = abap_true.
            WHEN gc_clrqit_field-clrit.
              <lwa_fcat>-no_out = abap_true.
            WHEN OTHERS.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
          ENDCASE.
        ELSE.
          CASE <lwa_fcat>-fieldname.
            WHEN gc_clrqit_field-mandt OR gc_fieldname-rwclr      OR gc_layout_style OR
                 gc_clrqit_field-clrno OR gc_clrqit_field-lclrsit OR gc_clrqit_field-itmty.

              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
            WHEN gc_clrqit_field-clrit .
              IF sy-dynnr <> gc_screen-subitm_alv.
                <lwa_fcat>-no_out = abap_true.
                <lwa_fcat>-tech = abap_false.
              ELSE.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
              ENDIF.

            WHEN gc_clrqit_field-subitem_icon.
              IF sy-dynnr <> gc_screen-subitm_alv.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
                <lwa_fcat>-col_pos = 2.
                <lwa_fcat>-icon = abap_true.
                <lwa_fcat>-scrtext_s = TEXT-187.
                <lwa_fcat>-scrtext_m = TEXT-187.
                <lwa_fcat>-scrtext_l = TEXT-187.
                <lwa_fcat>-coltext = TEXT-187.
                <lwa_fcat>-reptext = TEXT-187.
                <lwa_fcat>-intlen = 10.
              ENDIF.
            WHEN gc_clrqit_field-cgdc_cline.
*              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_true. "By Nitin 7.8.24
              <lwa_fcat>-col_pos   = 3.
              <lwa_fcat>-icon      = abap_false.
              <lwa_fcat>-dd_outlen = 5.
              <lwa_fcat>-hotspot   = abap_true.
            WHEN gc_clrqit_field-cgdc_acrns.
              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos   = 4.
              <lwa_fcat>-icon      = abap_false.
              <lwa_fcat>-dd_outlen = 5.
              <lwa_fcat>-hotspot   = abap_true.
            WHEN gc_clrqit_field-cgdc_fmsck.
              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos   = 5.
              <lwa_fcat>-icon      = abap_false.
              <lwa_fcat>-dd_outlen = 5.
              <lwa_fcat>-hotspot   = abap_true.
            WHEN gc_clrqit_field-cslin.
              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos   = 6.
              <lwa_fcat>-icon      = abap_false.
              <lwa_fcat>-dd_outlen = 5.
              <lwa_fcat>-hotspot   = abap_true.
            WHEN gc_clrqit_field-matnr.
              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos   = 9.
              <lwa_fcat>-icon      = abap_false.
            WHEN gc_clrqit_field-clrsit.
              IF sy-dynnr = gc_screen-subitm_alv.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
                <lwa_fcat>-col_pos = 1.
                <lwa_fcat>-hotspot = abap_true.
              ELSE.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
              ENDIF.
            WHEN gc_clrqit_field-clrdit.
              IF sy-dynnr = gc_screen-subitm_alv.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
                <lwa_fcat>-hotspot = abap_true.
              ELSE.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
              ENDIF.
            WHEN gc_clrqit_field-itmty_desc.
              <lwa_fcat>-drdn_alias = abap_true.
              <lwa_fcat>-drdn_hndl = gc_one.
              <lwa_fcat>-col_pos = 10.
              IF sy-dynnr = gc_screen-subitm_alv.
                <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
              ENDIF.
            WHEN gc_clrqit_field-ps_psp_pnr.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 7.

            WHEN gc_clrqit_field-netwr.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 8.
            WHEN gc_clrqit_field-csheet.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-zschl.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-prsdt.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-budat.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-cntit.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-prsok.
              <lwa_fcat>-tech = abap_false.
            WHEN gc_clrqit_field-rsncd.
              <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
              IF sy-dynnr = gc_screen-subitm_alv.
                <lwa_fcat>-col_pos   = 4.
              ELSE.
                <lwa_fcat>-hotspot   = abap_true.
              ENDIF.
              <lwa_fcat>-icon      = abap_false.
              <lwa_fcat>-reptext   = TEXT-193.
              <lwa_fcat>-dd_outlen = 5.
            WHEN gc_clrqit_field-istat.
              IF sy-dynnr = gc_screen-subitm_alv.
                <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
                <lwa_fcat>-col_pos   = 3.
              ENDIF.
            WHEN '/CGDC/ELINE'.
              <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-no_out = abap_false.
              <lwa_fcat>-hotspot = abap_false.
            WHEN '/CGDC/ACRNS'.
              <lwa_fcat>-hotspot = abap_false.
            WHEN '/CGDC/FMSCK'.
              <lwa_fcat>-hotspot = abap_false.
            WHEN 'ERDAT' OR 'ERNAM' OR 'ERZET' OR
                 'AEDAT' OR 'AENAM' OR 'AEZET' .
              <lwa_fcat>-no_out = abap_true.
          ENDCASE.
        ENDIF.
        IF <lwa_fcat>-fieldname = gc_layout_excp_fname.
          <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
          <lwa_fcat>-hotspot = abap_true.
          <lwa_fcat>-coltext = TEXT-194.
          <lwa_fcat>-outputlen = 7.
          <lwa_fcat>-col_opt = abap_true.
          <lwa_fcat>-col_pos = 1.
        ENDIF.
      ENDLOOP.
    WHEN gc_structure-bill_hist.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        CASE <lwa_fcat>-fieldname.
          WHEN gs_bill_hist_fcat_field-mandt OR gs_bill_hist_fcat_field-rwclr OR
               gs_bill_hist_fcat_field-style OR gs_bill_hist_fcat_field-clrno.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
          WHEN gs_bill_hist_fcat_field-sbdct.
            <lwa_fcat>-drdn_field = abap_true.
            <lwa_fcat>-drdn_hndl = 1.
            <lwa_fcat>-drdn_alias = abap_true.
          WHEN gs_bill_hist_fcat_field-sbqdc.
            <lwa_fcat>-hotspot = abap_true.
          WHEN gs_bill_hist_fcat_field-icon.
            <lwa_fcat>-coltext = TEXT-195.
            <lwa_fcat>-scrtext_l = TEXT-195.
            <lwa_fcat>-scrtext_m = TEXT-195.
            <lwa_fcat>-scrtext_s = TEXT-195.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-icon = abap_true.
            <lwa_fcat>-hotspot = abap_true.
        ENDCASE.

      ENDLOOP.
    WHEN gc_structure-calc_postpone.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
*        <lwa_fcat>-col_opt = abap_true.
        <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
        <lwa_fcat>-edit = abap_true.
        <lwa_fcat>-outputlen = 20.
        CASE  <lwa_fcat>-fieldname.
          WHEN  gc_clrq_postpone_field-clrit   OR gc_clrq_postpone_field-rej_qty OR
                gc_clrq_postpone_field-rej_amt OR gc_layout_style.
          WHEN  gc_clrq_postpone_field-postp_qty.
            IF gs_variables-itm_post_quan_un IS NOT INITIAL.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 2.
            ENDIF.
          WHEN gc_clrq_postpone_field-postp_amt.
            IF gs_variables-itm_post_amt_un IS NOT INITIAL.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 2.
            ENDIF.
          WHEN gc_clrq_postpone_field-psdat.
            IF gs_variables-itm_post_amt_un IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 1.
            ENDIF.
          WHEN gc_clrq_postpone_field-rsncd.
            IF gs_variables-itm_post_amt_un IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              <lwa_fcat>-col_pos = 3.
              <lwa_fcat>-f4availabl = abap_true.
            ENDIF.
          WHEN OTHERS.
        ENDCASE.

      ENDLOOP.
    WHEN gc_structure-release_itm.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        CASE <lwa_fcat>-fieldname.
          WHEN gc_release_itm_field-source.
            <lwa_fcat>-scrtext_l = TEXT-196.
            <lwa_fcat>-scrtext_m = TEXT-196.
            <lwa_fcat>-scrtext_s = TEXT-196.
            <lwa_fcat>-coltext = TEXT-196.
            <lwa_fcat>-outputlen = 50.
          WHEN gc_release_itm_field-rel_amt.
            <lwa_fcat>-scrtext_l = TEXT-197.
            <lwa_fcat>-scrtext_m = TEXT-197.
            <lwa_fcat>-scrtext_s = TEXT-198.
            <lwa_fcat>-coltext = TEXT-197.
          WHEN gc_release_itm_field-total_amt.
            <lwa_fcat>-scrtext_l = TEXT-199.
            <lwa_fcat>-scrtext_m = TEXT-199.
            <lwa_fcat>-scrtext_s = TEXT-200.
            <lwa_fcat>-coltext = TEXT-199.
          WHEN gc_release_itm_field-rem_amt.
            <lwa_fcat>-scrtext_l = TEXT-201.
            <lwa_fcat>-scrtext_m = TEXT-201.
            <lwa_fcat>-scrtext_s = TEXT-202.
            <lwa_fcat>-coltext = TEXT-201.
          WHEN gc_release_itm_field-new_rel.
            <lwa_fcat>-scrtext_l = TEXT-203.
            <lwa_fcat>-scrtext_m = TEXT-203.
            <lwa_fcat>-scrtext_s = TEXT-204.
            <lwa_fcat>-coltext = TEXT-203.
          WHEN gc_release_itm_field-waerk.
            <lwa_fcat>-scrtext_l = TEXT-205.
            <lwa_fcat>-scrtext_m = TEXT-205.
            <lwa_fcat>-scrtext_s = TEXT-205.
            <lwa_fcat>-coltext = TEXT-205.
          WHEN OTHERS.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
        ENDCASE.
      ENDLOOP.
    WHEN gc_structure-disp_cafs.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        CASE <lwa_fcat>-fieldname.
          WHEN  gc_fieldname-updkz.
            <lwa_fcat>-no_out = abap_true.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.
    WHEN gc_structure-rej_itm_lst.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.
        CASE <lwa_fcat>-fieldname.
          WHEN gc_rejitm_field-mandt OR gc_fieldname-rwclr      OR gc_layout_style OR
               gc_rejitm_field-clrno OR gc_rejitm_field-lclrsit OR gc_rejitm_field-itmty.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
          WHEN gc_rejitm_field-check.
            <lwa_fcat>-col_pos = 1.
            <lwa_fcat>-checkbox = abap_true.
            <lwa_fcat>-hotspot  = abap_true.
            <lwa_fcat>-edit = abap_true.
          WHEN gc_rejitm_field-clrsit.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 2.
          WHEN gc_rejitm_field-subitem_icon.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 3.
            <lwa_fcat>-icon = abap_true.
            <lwa_fcat>-scrtext_s = TEXT-187.
            <lwa_fcat>-scrtext_m = TEXT-187.
            <lwa_fcat>-scrtext_l = TEXT-187.
            <lwa_fcat>-coltext = TEXT-187.
            <lwa_fcat>-reptext = TEXT-187.
            <lwa_fcat>-intlen = 10.
          WHEN gc_rejitm_field-cgdc_cline.
            <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos   = 4.
            <lwa_fcat>-icon      = abap_false.
            <lwa_fcat>-dd_outlen = 6.
            <lwa_fcat>-hotspot   = abap_true.
          WHEN gc_rejitm_field-clrdit.
            <lwa_fcat>-col_pos   = 5.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-hotspot = abap_true.
          WHEN gc_rejitm_field-zmeng.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 6.
          WHEN gc_rejitm_field-zieme.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 7.
          WHEN gc_rejitm_field-netwr.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 8.
          WHEN gc_rejitm_field-cgdc_acrns.
            <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos   = 9.
            <lwa_fcat>-icon      = abap_false.
            <lwa_fcat>-scrtext_s = TEXT-189.
            <lwa_fcat>-scrtext_m = TEXT-189.
            <lwa_fcat>-scrtext_l = TEXT-189.
            <lwa_fcat>-coltext   = TEXT-189.
            <lwa_fcat>-reptext   = TEXT-189.
            <lwa_fcat>-dd_outlen = 5.
          WHEN gc_rejitm_field-cgdc_fmsck.
            <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos   = 10.
            <lwa_fcat>-icon      = abap_false.
            <lwa_fcat>-scrtext_s = TEXT-190.
            <lwa_fcat>-reptext   = TEXT-191.
            <lwa_fcat>-dd_outlen = 5.
          WHEN gc_rejitm_field-cslin.
            <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos   = 11.
            <lwa_fcat>-icon      = abap_false.
            <lwa_fcat>-reptext   = TEXT-192.
            <lwa_fcat>-dd_outlen = 5.
            <lwa_fcat>-hotspot   = abap_true.
          WHEN gc_rejitm_field-ps_psp_pnr.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 12.
          WHEN gc_rejitm_field-matnr.
            <lwa_fcat>-no_out    = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos   = 13.
            <lwa_fcat>-icon      = abap_false.
          WHEN gc_rejitm_field-itmty_desc.
            <lwa_fcat>-drdn_alias = abap_true.
            <lwa_fcat>-drdn_hndl = gc_one.
            <lwa_fcat>-col_pos = 14.
          WHEN gc_rejitm_field-matwa.
            <lwa_fcat>-col_pos = 15.
          WHEN gc_rejitm_field-csheet.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
          WHEN gc_rejitm_field-zschl.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
          WHEN gc_rejitm_field-prsdt.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-col_pos = 16.
          WHEN gc_rejitm_field-budat.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
          WHEN gc_rejitm_field-cntit.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
          WHEN gc_rejitm_field-prsok.
            <lwa_fcat>-tech = abap_false.
        ENDCASE.

      ENDLOOP.
    WHEN gc_structure-billing_items.
      IF gs_clrqdoc_infocus-x-crbinr IS NOT INITIAL.
        SELECT *
                 INTO TABLE lt_clrqbic
                 FROM /cgdc/t_clrqbic
                 FOR ALL ENTRIES IN gs_clrqdoc_infocus-x-crbinr
                 WHERE bilitmtyp = gs_clrqdoc_infocus-x-crbinr-bitype.
        DESCRIBE TABLE lt_clrqbic LINES lv_cnt.
        lv_cnt = lv_cntr + lv_cnt.
      ENDIF.
      LOOP AT lt_fcat ASSIGNING <lwa_fcat>.
        <lwa_fcat>-col_opt = abap_true.

        CASE <lwa_fcat>-fieldname.
          WHEN gc_clrqbi_field-mandt OR gc_fieldname-rwclr OR gc_layout_style OR
               gc_clrqbi_field-clrno OR gc_clrqbi_field-zieme OR gc_clrqbi_field-xrfdn OR
               gc_clrqbi_field-xrfin.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
          WHEN gc_clrqbi_field-srno.
            <lwa_fcat>-col_pos = 1.
            <lwa_fcat>-no_out = abap_false.
            <lwa_fcat>-hotspot = abap_true.
          WHEN 'BITYPE'.
            <lwa_fcat>-col_pos = 2.
            <lwa_fcat>-no_out = abap_false.
          WHEN 'BILL_ITEM'.
            <lwa_fcat>-col_pos = 3.
            <lwa_fcat>-no_out = abap_false.
          WHEN  'PS_PSP_PNR'.
            <lwa_fcat>-col_pos = 4.
            <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-no_out = abap_false.
          WHEN 'BILMATNR'.
            <lwa_fcat>-col_pos = 5.
            <lwa_fcat>-no_out = abap_false.
          WHEN  '/CGDC/CLINE'.
            <lwa_fcat>-col_pos = 6.
            <lwa_fcat>-tech = abap_false.
            <lwa_fcat>-no_out = abap_false.
          WHEN  'BSTAT'.
            <lwa_fcat>-col_pos = 7.
            <lwa_fcat>-no_out = abap_false.
          WHEN 'BILL_USAGE'.
            <lwa_fcat>-col_pos = 8.
            <lwa_fcat>-no_out = abap_false.
          WHEN 'POP_STDT'.
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                  edit = abap_true
                                  col_pos = 9 ).
          WHEN 'POP_ENDDT'.
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                  edit = abap_true
                                  col_pos = 10 ).
          WHEN 'BLDAT'.
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                  edit = abap_true
                                   col_pos = 11 ).
          WHEN 'EXDAT'.
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                  edit = abap_true
                                   col_pos = 12 ).
*          WHEN 'FAKSP'.
*            <lwa_fcat>-no_out = abap_true .
          WHEN 'FAKSP'. " 'BB_DESCR'. "
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                 col_pos = 13
                                  edit = abap_true
                                  drdn_alias = abap_true
                                  drdn_hndl = 1
                                  outputlen = 10 ) .

          WHEN 'NETWR'.
            <lwa_fcat>-scrtext_l = TEXT-021.
            <lwa_fcat>-scrtext_m = TEXT-021.
            <lwa_fcat>-scrtext_s = TEXT-021.
*            <lwa_fcat>-hotspot = abap_true.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.
            "++SOC - decimal precision field
          WHEN 'NETWR24'.
            <lwa_fcat>-scrtext_l = TEXT-207.
            <lwa_fcat>-scrtext_m = TEXT-207.
            <lwa_fcat>-scrtext_s = TEXT-207.
*            <lwa_fcat>-hotspot = abap_true.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.
            "++EOC - decimal precision field
          WHEN 'WAERK'.
            <lwa_fcat>-scrtext_l = TEXT-205.
            <lwa_fcat>-scrtext_m = TEXT-205.
            <lwa_fcat>-scrtext_s = TEXT-205.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'ZMENG'.
            <lwa_fcat>-scrtext_l = TEXT-042.
            <lwa_fcat>-scrtext_m = TEXT-042.
            <lwa_fcat>-scrtext_s = TEXT-042.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'FKREL'.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'POSTP_AMT'.
            <lwa_fcat>-scrtext_l = TEXT-026.
            <lwa_fcat>-scrtext_m = TEXT-026.
            <lwa_fcat>-scrtext_s = TEXT-026.
*            <lwa_fcat>-hotspot = abap_true.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'POSTP_QTY'.
            <lwa_fcat>-scrtext_l = TEXT-041.
            <lwa_fcat>-scrtext_m = TEXT-041.
            <lwa_fcat>-scrtext_s = TEXT-041.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'REJ_AMT'.
            <lwa_fcat>-scrtext_l = TEXT-024.
            <lwa_fcat>-scrtext_m = TEXT-024.
            <lwa_fcat>-scrtext_s = TEXT-024.
*            <lwa_fcat>-hotspot = abap_true.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'REJ_QTY'.
            <lwa_fcat>-scrtext_l = TEXT-040.
            <lwa_fcat>-scrtext_m = TEXT-040.
            <lwa_fcat>-scrtext_s = TEXT-040.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'BILLED_AMT'.
            <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.
*            <lwa_fcat>-scrtext_l = TEXT-039.
*            <lwa_fcat>-scrtext_m = TEXT-039.
*            <lwa_fcat>-scrtext_s = TEXT-039.
*            <lwa_fcat>-hotspot = abap_true.
*            lv_colpos = lv_cnt + 1 .
*            <lwa_fcat>-col_pos = lv_colpos.
*            lv_cnt = lv_cnt + 1.


          WHEN 'FKARA'.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.
          WHEN '/CGDC/ELINE'.
*            <lwa_fcat>-tech = abap_true.
*            <lwa_fcat>-no_out = abap_false.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.
          WHEN '/CGDC/DEFIN'.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.
          WHEN '/CGDC/PBPGP'.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat>-col_pos = lv_colpos.
            lv_cnt = lv_cnt + 1.

          WHEN 'FAKSK'.
            <lwa_fcat>-scrtext_l = TEXT-219.
            <lwa_fcat>-scrtext_m = TEXT-219.
            <lwa_fcat>-scrtext_s = TEXT-219.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                col_pos = lv_colpos
                                 drdn_alias = abap_true
                                 drdn_hndl = 1
                                 outputlen = 10 ).
            lv_cnt = lv_cnt + 1.

          WHEN 'FAKSP_ITM'.
            <lwa_fcat>-scrtext_l = TEXT-220.
            <lwa_fcat>-scrtext_m = TEXT-220.
            <lwa_fcat>-scrtext_s = TEXT-220.
            lv_colpos = lv_cnt + 1 .
            <lwa_fcat> = VALUE #( BASE <lwa_fcat>
                                col_pos = lv_colpos
                                 drdn_alias = abap_true
                                 drdn_hndl = 1
                                 outputlen = 10 ).
            lv_cnt = lv_cnt + 1.

          WHEN 'GRPID '.
            <lwa_fcat>-no_out = abap_true.
          WHEN 'SPLT_ID'.
            <lwa_fcat>-no_out = abap_true.
          WHEN 'AUART' OR 'BDRTY' OR 'CR_AUART' OR 'CR_BDRTY'.
            <lwa_fcat>-no_out = abap_true.
          WHEN 'ERDAT' OR 'ERNAM' OR 'ERZET' OR
               'AEDAT' OR 'AENAM' OR 'AEZET' .
            <lwa_fcat>-no_out = abap_true.
          WHEN OTHERS.
            READ TABLE lt_clrqbic
            WITH KEY fieldname = <lwa_fcat>-fieldname
            INTO lwa_clrqbic.
            IF sy-subrc = 0.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_false.
              lv_cntr = lv_cntr + 1.
              <lwa_fcat>-col_pos = lv_cntr.
            ELSE.
              <lwa_fcat>-no_out = <lwa_fcat>-tech = abap_true.

            ENDIF.
        ENDCASE.
      ENDLOOP.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form process_exit
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM process_exit.

  DATA: lv_answer.

  fcode = ok_code.
  CLEAR: ok_code.

  CASE sy-dynnr.
    WHEN gc_screen-overview.

      CLEAR: gs_variables-exit_after_save.
      PERFORM confirm_changes CHANGING lv_answer.

      IF lv_answer NE 'A'.

        IF gs_variables-document_mode NE gc_mode_display.
          PERFORM dequeue_calc_request USING gs_clrqdoc_infocus-clrno
                                             gc_enq_mode-write.
        ENDIF.

      ELSEIF ok_code EQ gc_fcode-save.

        IF fcode EQ gc_fcode-exit.
          gs_variables-exit_after_save = abap_true.
        ELSE.
          gs_variables-exit_after_save = 'C'.
        ENDIF.

        ok_code = gc_fcode-back.

      ENDIF.

      CHECK lv_answer NE 'A'.

      IF fcode EQ gc_fcode-exit.
        SET SCREEN 0.
        LEAVE SCREEN.
      ELSE.
        PERFORM initialize_document_data.
        SET SCREEN gc_screen-overview.
        LEAVE SCREEN.
      ENDIF.

    WHEN gc_screen-item_subsequent_details.

      CLEAR: gs_posnr_mapping,
      gs_variables-item_infocus,
      gs_variables-subitem_infocus.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN gc_screen-man_itm OR '0204' OR '0205'.
      CLEAR : /cgdc/t_rtbmit,
            gs_variables-dis_man_itm_dd,
            gs_man_itm.
      gs_variables-man_itm_prog = gc_program.
      gs_variables-man_itm_scrn = gc_screen-dummy.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN gc_screen-calc_grp_cond_popup    .
      CLEAR: gs_variables-calc_grp_knumh.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN gc_screen-calc_bill_cond_popup.
      CLEAR: gs_variables-calc_grp_knumh.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN gc_screen-disp_cafs_details.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN gc_screen-fast_chg_popup.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN gc_screen-crt_bil_itm.
      CLEAR: /cgdc/s_clrqbi_scrnfld-bitype,
             /cgdc/s_clrqbi_scrnfld-pop_stdt,
             /cgdc/s_clrqbi_scrnfld-pop_enddt,
             /cgdc/s_clrqbi_scrnfld-bldat,
             /cgdc/s_clrqbi_scrnfld-rcode,
             /cgdc/s_clrqbi_scrnfld-descr.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.

ENDFORM.

FORM process_fcode.

  fcode = ok_code.
  CLEAR ok_code.

  IF NOT fcode IS INITIAL.
    execute_fcode fcode (gc_program).
  ENDIF.

ENDFORM.

FORM popup_to_confirm USING lv_titlebar
                            lv_text_question
                            lv_display_cancel_button
                   CHANGING lv_answer.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = lv_titlebar
      text_question         = lv_text_question
      display_cancel_button = lv_display_cancel_button
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS ##fm_subrc_ok
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_calc_req_itms_grid_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM  prep_calc_req_itms_grid_data.

  DATA: lv_index        TYPE sy-tabix,
        ls_critm_fcat   TYPE /cgdc/s_clrqit_fcat,
        lwa_critm_x     TYPE /cgdc/s_clrqit,
        lwa_critm_db    TYPE /cgdc/s_clrqit,
        lt_critm_select TYPE /cgdc/tt_clrqit_key,
        lt_crptr_itm    TYPE /cgdc/tt_clrqpt,
        lt_crcon_itm    TYPE /cgdc/tt_clrqcn,
        lt_cscon_itm    TYPE /cgdc/tt_clrqcscn,
        lt_critm_drv    TYPE /cgdc/tt_clrqit,
        lwa_pages_key   TYPE /cgdc/s_clrqit_key,
        lwa_critm       TYPE /cgdc/s_clrqit,
        lwa_clrqbi      TYPE /cgdc/s_clrqbi,
        lwa_clrbi       TYPE /cgdc/s_clrqbi,
        lwa_crcon       TYPE /cgdc/s_clrqcn,
        lwa_clrqcost    TYPE /cgdc/_clrqcost,
        lwa_clrtype     TYPE /cgdc/t_clrtype,
        lv_lclrsit      TYPE /cgdc/clrq_sitmno,
        lv_err_light    TYPE boolean,
        lv_war_light    TYPE boolean,
        lv_succ_light   TYPE boolean,
        lt_msg_conf     TYPE /cgdc/tt_clrq_msg_conf,
        lt_msg_confh    TYPE   /cgdc/tt_clrq_msg_confh,
        lwa_blpln_type  TYPE /cgdc/t_bplnty,
        lt_clrbi        TYPE TABLE OF /cgdc/s_clrqbi.
  DATA lv_subrc TYPE sysubrc.
  FIELD-SYMBOLS : <lwa_postponed_data> TYPE /cgdc/s_clrq_postpone.

  DATA : lt_clrqit    TYPE TABLE OF /cgdc/s_clrqit.
  DATA: lwa_item_val TYPE s_item_val.
  DATA: lt_itm_typ_values TYPE TABLE OF dd07v,
        lwa_itm_typ_value TYPE dd07v.
  DATA lwa_style TYPE lvc_s_styl.
  DATA lv_delta TYPE /cgdc/clrq_delta_item.
  DATA ls_msg                  TYPE /cgdc/s_message.
  CLEAR gt_calc_req_items_fcat[].

  "Get the configuration for bill item types
  REFRESH gt_bilitty.
  SELECT * FROM /cgdc/t_bilitty
           INTO TABLE gt_bilitty.

*- Get items msg config
  SELECT *
       FROM /cgdc/t_clrq_err
       INTO TABLE lt_msg_conf.
  SELECT *
       FROM /cgdc/t_clrq_erh
       INTO TABLE lt_msg_confh.
  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      domname         = '/CGDC/CLRQ_ITEM_TYPE'
    TABLES
      values_tab      = lt_itm_typ_values[]
    EXCEPTIONS
      no_values_found = 1
      OTHERS          = 2.
  IF sy-subrc = 0.
    DELETE lt_itm_typ_values WHERE ddlanguage <> sy-langu.
    SORT lt_itm_typ_values BY domvalue_l.
  ENDIF.
  CASE gs_variables-key_only.
    WHEN space.

      LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm FROM gs_variables-item_from_tabix TO gs_variables-item_to_tabix.

        PERFORM move_itm_to_itm_fcat USING lwa_critm
                                     CHANGING ls_critm_fcat.
        READ TABLE lt_itm_typ_values INTO lwa_itm_typ_value WITH KEY domvalue_l = lwa_critm-itmty BINARY SEARCH.
        IF sy-subrc = 0.
          ls_critm_fcat-itmty_desc = lwa_itm_typ_value-ddtext.
        ENDIF.
        PERFORM set_msg_code USING lt_msg_conf lt_msg_confh
                              CHANGING ls_critm_fcat lv_err_light lv_war_light lv_succ_light.

        APPEND ls_critm_fcat TO gt_calc_req_items_fcat.

        READ TABLE gt_post_rej_item_buf TRANSPORTING NO FIELDS
                       WITH KEY clrit = lwa_critm-clrit
                                clrsit = lwa_critm-clrsit.
        IF sy-subrc <> 0.
          APPEND lwa_critm TO gt_post_rej_item_buf.
        ENDIF.
      ENDLOOP.

      SORT gt_calc_req_items_fcat BY clrno clrit.

    WHEN abap_true.
      IF gs_calc_req_type-psize > 0.
        LOOP AT gs_clrqdoc_infocus-x-critm_key INTO lwa_pages_key FROM gs_variables-item_from_tabix TO gs_variables-item_to_tabix.
          APPEND lwa_pages_key TO lt_critm_select.
        ENDLOOP.
      ELSE.
        LOOP AT gs_clrqdoc_infocus-x-critm_key INTO lwa_pages_key.
          APPEND lwa_pages_key TO lt_critm_select.
        ENDLOOP.
      ENDIF.
      IF lt_critm_select IS NOT INITIAL.

        DELETE gs_clrqdoc_infocus-x-crptr WHERE clrit NE gc_posnr.
        DELETE gs_clrqdoc_infocus-x-crcon WHERE clrit NE gc_posnr AND updkz NE gc_updkz_new.
        DELETE gs_clrqdoc_infocus-x-cscon WHERE clrit NE gc_posnr AND updkz NE gc_updkz_new.
        DELETE gs_clrqdoc_infocus-x-crbinr WHERE updkz NE gc_updkz_new AND updkz NE gc_updkz_update.

        CALL FUNCTION '/CGDC/CLRQ_ITM_READ'
          EXPORTING
            i_clrno                = gs_clrqdoc_infocus-x-crhdr-clrno
            it_clrit               = lt_critm_select
          IMPORTING
            et_critm               = lt_clrqit
            et_crptr               = lt_crptr_itm
            et_crcon               = lt_crcon_itm
            et_clrqcost            = gs_clrqdoc_infocus-x-crcost
            et_clrqbi              = lt_clrbi
            et_critm_drv           = lt_critm_drv
            et_cscon               = lt_cscon_itm
            et_clrqit_link         = gs_clrqdoc_infocus-x-clrit_link
          EXCEPTIONS
            reached_max_char_limit = 1.
        IF sy-subrc <> 0.
        ENDIF.

        APPEND LINES OF lt_crptr_itm TO gs_clrqdoc_infocus-x-crptr.
        APPEND LINES OF lt_crcon_itm TO gs_clrqdoc_infocus-x-crcon.
        APPEND LINES OF lt_cscon_itm TO gs_clrqdoc_infocus-x-cscon.
        LOOP AT lt_clrbi INTO lwa_clrbi.
          READ TABLE gs_clrqdoc_infocus-x-crbinr WITH KEY bill_item = lwa_clrbi-bill_item TRANSPORTING NO FIELDS.
          IF sy-subrc NE 0.
            APPEND lwa_clrbi TO gs_clrqdoc_infocus-x-crbinr.
          ENDIF.
        ENDLOOP.

*        APPEND LINES OF lt_clrbi TO gs_clrqdoc_infocus-x-crbinr.

        SORT lt_clrqit BY clrit clrsit clrdit.
        LOOP AT lt_critm_select INTO lwa_pages_key.

          READ TABLE gs_clrqdoc_infocus-x-critm INTO lwa_critm
                      WITH KEY clrit = lwa_pages_key-clrit
                               clrsit = '000000'.
          IF sy-subrc <> 0.

            LOOP AT lt_clrqit INTO lwa_critm WHERE clrit = lwa_pages_key-clrit.

              APPEND lwa_critm TO gs_clrqdoc_infocus-x-critm.

              CLEAR lwa_clrqbi.
              READ TABLE gs_clrqdoc_infocus-x-crbinr
              INTO lwa_clrqbi
              WITH KEY clrno     = lwa_critm-clrno
                       bill_item = lwa_critm-rtbbinr
                       bitype    = lwa_critm-bityp.

              IF lwa_critm-clrsit = '000000'.
                CLEAR ls_critm_fcat.
                CLEAR lwa_item_val.
                lv_delta = lwa_critm-ldetla.
                lwa_item_val-clrit = lwa_critm-clrit.
                lwa_item_val-temp_clrsit = 000.
                lwa_item_val-lclrsit = lwa_critm-lclrsit.

                IF lwa_critm-lclrsit = '000000'.
                  ls_critm_fcat-subitem_icon = '@1F@'.
                ELSE.
                  ls_critm_fcat-subitem_icon = '@1E@'.
                  lwa_style-fieldname = 'SUBITEM_ICON'.
                  lwa_style-style = cl_gui_alv_grid=>mc_style_hotspot.
                  APPEND lwa_style TO ls_critm_fcat-style.
                  CLEAR lwa_style.
                ENDIF.

                PERFORM move_itm_to_itm_fcat USING lwa_critm
                                     CHANGING ls_critm_fcat.

                ls_critm_fcat-bstat     = lwa_clrqbi-bstat.
                ls_critm_fcat-pop_stdt  = lwa_clrqbi-pop_stdt.
                ls_critm_fcat-pop_enddt = lwa_clrqbi-pop_enddt.
                ls_critm_fcat-bilmatnr  = lwa_clrqbi-bilmatnr.

                READ TABLE lt_itm_typ_values INTO lwa_itm_typ_value WITH KEY domvalue_l = lwa_critm-itmty BINARY SEARCH.
                IF sy-subrc = 0.
                  ls_critm_fcat-itmty_desc = lwa_itm_typ_value-ddtext.
                ENDIF.
                PERFORM prep_calc_req_items_styles CHANGING ls_critm_fcat.
                PERFORM set_msg_code USING lt_msg_conf lt_msg_confh
                                      CHANGING ls_critm_fcat lv_err_light lv_war_light lv_succ_light.
                PERFORM assign_billin_block CHANGING ls_critm_fcat.
                APPEND ls_critm_fcat TO gt_calc_req_items_fcat.
              ELSEIF lwa_critm-clrsit = '000001'.

                IF lwa_critm-itmty <> gc_clrq_itmty-bill_plan_line.
                  READ TABLE gs_clrqdoc_infocus-x-crcon INTO lwa_crcon
                                                        WITH KEY clrit = lwa_critm-clrit
                                                                 clrsit = lwa_critm-clrsit
                                                                 clrdit = '000000'
                                                                 kschl = gs_rtbp-ccond.
                  IF sy-subrc = 0.
                    lwa_item_val-cost_ratio = lwa_crcon-kbetr / lwa_critm-zmeng.
                  ENDIF.
                ELSE.
                  PERFORM read_blnpl_item_type_data USING lwa_critm-bpln_type
                                                           lwa_critm-pstyv
                                                  CHANGING lwa_blpln_type.
                  READ TABLE gs_clrqdoc_infocus-x-crcon INTO lwa_crcon
                                                                       WITH KEY clrit = lwa_critm-clrit
                                                                                clrsit = lwa_critm-clrsit
                                                                                clrdit = '000000'
                                                                                kschl = lwa_blpln_type-tkschl.
                  IF sy-subrc = 0.
                    lwa_item_val-cost_ratio = lwa_crcon-kbetr / lwa_critm-zmeng.
                  ENDIF.
                ENDIF.
              ENDIF.

              IF lwa_critm-clrsit <> '000000'.

                IF lwa_clrqbi-bstat IS NOT INITIAL AND lwa_critm-istat = gc_ibill_stat-open.
                  lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.
                  lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
                  lwa_item_val-bill_quan = lwa_item_val-bill_quan  + lwa_critm-zmeng.
                  lwa_item_val-bill_amt = lwa_item_val-bill_amt + lwa_critm-kbetr1.
                ELSEIF lwa_critm-istat = 'A'.
                  lwa_item_val-open_amt = lwa_item_val-open_amt + lwa_critm-kbetr1.
                  lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
                  lwa_item_val-open_quan = lwa_item_val-open_quan + lwa_critm-zmeng.
                  lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.

                ELSEIF lwa_critm-istat = gc_ibill_stat-postponed.
                  lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.
                  lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
                  IF lwa_critm-psdat IS NOT INITIAL.
                    lwa_item_val-post_amt_ut = lwa_item_val-post_amt_ut + lwa_critm-kbetr1.
                    lwa_item_val-post_quan_ut = lwa_item_val-post_quan_ut + lwa_critm-zmeng.
                  ELSE.
                    lwa_item_val-post_amt = lwa_item_val-post_amt + lwa_critm-kbetr1.
                    lwa_item_val-post_quan = lwa_item_val-post_quan + lwa_critm-zmeng.
                  ENDIF.

                  READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = lwa_critm-clrit
                                                                                       psdat = lwa_critm-psdat.
                  IF sy-subrc = 0.
                    <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + ( lwa_critm-zmeng * lwa_item_val-cost_ratio ).
                    <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lwa_critm-zmeng.
                  ELSE.
                    APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
                    <lwa_postponed_data>-clrit = lwa_critm-clrit.
                    <lwa_postponed_data>-psdat = lwa_critm-psdat.
                    <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + ( lwa_critm-kbetr1 ).
                    <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lwa_critm-zmeng.
                  ENDIF.
                ELSEIF lwa_critm-istat = gc_ibill_stat-rejected.
                  lwa_item_val-rej_amt = lwa_item_val-rej_amt +  lwa_critm-kbetr1.
                  lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
                  lwa_item_val-rej_quan = lwa_item_val-rej_quan + lwa_critm-zmeng.
                  lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.

                  READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = lwa_critm-clrit
                                                                                      psdat = lwa_critm-psdat.
                  IF sy-subrc = 0.
                    <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + ( lwa_critm-zmeng * lwa_item_val-cost_ratio ).
                    <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lwa_critm-zmeng.
                  ELSE.
                    APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
                    <lwa_postponed_data>-clrit = lwa_critm-clrit.
                    <lwa_postponed_data>-psdat = lwa_critm-psdat.
                    <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + ( lwa_critm-kbetr1 ).
                    <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lwa_critm-zmeng.
                  ENDIF.
                ENDIF.
              ENDIF.

              AT END OF clrit.
                APPEND lwa_item_val TO gt_item_values.
              ENDAT.
            ENDLOOP.
          ELSE.
            CLEAR ls_critm_fcat.
            CLEAR lwa_item_val.
            lwa_item_val-clrit = lwa_critm-clrit.
            lwa_item_val-temp_clrsit = 000.
            lwa_item_val-lclrsit = lwa_critm-lclrsit.

            IF lwa_critm-lclrsit = '000000'.
              ls_critm_fcat-subitem_icon = '@1F@'.
            ELSE.
              ls_critm_fcat-subitem_icon = '@1E@'.
              lwa_style-fieldname = 'SUBITEM_ICON'.
              lwa_style-style = cl_gui_alv_grid=>mc_style_hotspot.
              APPEND lwa_style TO ls_critm_fcat-style.
              CLEAR lwa_style.
            ENDIF.
            PERFORM move_itm_to_itm_fcat USING lwa_critm
                                     CHANGING ls_critm_fcat.

            CLEAR lwa_clrqbi.
            READ TABLE gs_clrqdoc_infocus-x-crbinr
            INTO lwa_clrqbi
            WITH KEY clrno     = lwa_critm-clrno
                     bill_item = lwa_critm-rtbbinr
                     bitype    = lwa_critm-bityp.

            ls_critm_fcat-bstat     = lwa_clrqbi-bstat.
            ls_critm_fcat-pop_stdt  = lwa_clrqbi-pop_stdt.
            ls_critm_fcat-pop_enddt = lwa_clrqbi-pop_enddt.
            ls_critm_fcat-bilmatnr  = lwa_clrqbi-bilmatnr.

            PERFORM prep_calc_req_items_styles CHANGING ls_critm_fcat.
            READ TABLE lt_itm_typ_values INTO lwa_itm_typ_value WITH KEY domvalue_l = lwa_critm-itmty BINARY SEARCH.
            IF sy-subrc = 0.
              ls_critm_fcat-itmty_desc = lwa_itm_typ_value-ddtext.
            ENDIF.
            PERFORM set_msg_code USING lt_msg_conf lt_msg_confh
                                  CHANGING ls_critm_fcat lv_err_light lv_war_light lv_succ_light.
            PERFORM assign_billin_block CHANGING ls_critm_fcat.
            APPEND ls_critm_fcat TO gt_calc_req_items_fcat.
          ENDIF.
        ENDLOOP.
      ENDIF.

      SORT gt_calc_req_items_fcat BY clrno clrit.

  ENDCASE.
  IF gs_calc_req_type-clrqt = gs_clrqdoc_infocus-x-crhdr-clrqt.
    gs_variables-page_size = gs_calc_req_type-psize.
  ELSE.
    PERFORM select_calc_req_typ USING gs_clrqdoc_infocus-x-crhdr-clrqt.
    gs_variables-page_size = gs_calc_req_type-psize.
  ENDIF.
*- set header traffic signal
  IF lv_err_light = abap_true.
    gv_light = icon_red_light.
  ELSEIF  lv_war_light = abap_true.
    gv_light = icon_yellow_light.
  ELSEIF  lv_succ_light = abap_true.
    gv_light = icon_green_light.
  ENDIF.
  PERFORM set_icon.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_calc_req_items_styles
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_CRITM_FCAT
*&---------------------------------------------------------------------*
FORM prep_calc_req_items_styles CHANGING ls_critm_fcat TYPE /cgdc/s_clrqit_fcat.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_partner_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&---------------------------------------------------------------------*
FORM prepare_partner_data USING lv_call_for.   " 1: Header, 2: Item

  DATA: lv_obj_key TYPE swo_typeid,
        lv_posnr   TYPE posnr,
        ls_vbpa    TYPE vbpav,
        ls_tpar    TYPE tpar,
        ls_orgdata TYPE sdorgdata,
        lwa_crptr  TYPE /cgdc/s_clrqpt.

  CLEAR: gt_x_vbpa[], gt_y_vbpa[].

  CASE lv_call_for.
    WHEN '1' OR '2'.

      LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr.

        IF lwa_crptr-clrit NE gc_posnr.
          EXIT.
        ENDIF.

        CLEAR ls_vbpa.
        MOVE-CORRESPONDING lwa_crptr TO ls_vbpa.

        IF ls_vbpa-nrart IS INITIAL.
          PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
          ls_vbpa-nrart = ls_tpar-nrart.
        ENDIF.

* MISSING CODE - Partner Address Get
        APPEND ls_vbpa TO gt_x_vbpa.

      ENDLOOP.

      LOOP AT gs_clrqdoc_infocus-y-crptr INTO lwa_crptr.

        IF lwa_crptr-clrit NE gc_posnr.
          EXIT.
        ENDIF.

        CLEAR ls_vbpa.
        MOVE-CORRESPONDING lwa_crptr TO ls_vbpa.

        IF ls_vbpa-nrart IS INITIAL.
          PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
          ls_vbpa-nrart = ls_tpar-nrart.
        ENDIF.

        APPEND ls_vbpa TO gt_y_vbpa.

      ENDLOOP.

      IF lv_call_for EQ '2'.

        CHECK gs_variables-item_infocus IS NOT INITIAL.
        gs_posnr_mapping-dummy_posnr = gs_posnr_mapping-dummy_posnr + 1.
        gs_posnr_mapping-posnr = gs_variables-item_infocus.

        READ TABLE gs_clrqdoc_infocus-x-crptr
        WITH KEY clrit = gs_variables-item_infocus
        TRANSPORTING NO FIELDS
        BINARY SEARCH.

        IF sy-subrc EQ 0.

          LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr FROM sy-tabix.

            IF lwa_crptr-clrit NE gs_variables-item_infocus.
              EXIT.
            ENDIF.

            CLEAR ls_vbpa.
            MOVE-CORRESPONDING lwa_crptr TO ls_vbpa.
            ls_vbpa-posnr = gs_posnr_mapping-dummy_posnr.

            IF ls_vbpa-nrart IS INITIAL.
              PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
              ls_vbpa-nrart = ls_tpar-nrart.
            ENDIF.

* MISSING CODE - Partner Address Get
            APPEND ls_vbpa TO gt_x_vbpa.

          ENDLOOP.

        ENDIF.

        READ TABLE gs_clrqdoc_infocus-y-crptr
        WITH KEY clrit = gs_variables-item_infocus
        TRANSPORTING NO FIELDS
        BINARY SEARCH.

        IF sy-subrc EQ 0.

          LOOP AT gs_clrqdoc_infocus-y-crptr INTO lwa_crptr FROM sy-tabix.

            IF lwa_crptr-clrit NE gs_variables-item_infocus.
              EXIT.
            ENDIF.

            CLEAR ls_vbpa.
            MOVE-CORRESPONDING lwa_crptr TO ls_vbpa.
            ls_vbpa-posnr = gs_posnr_mapping-dummy_posnr.

            IF ls_vbpa-nrart IS INITIAL.
              PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
              ls_vbpa-nrart = ls_tpar-nrart.
            ENDIF.

            APPEND ls_vbpa TO gt_y_vbpa.

          ENDLOOP.

        ENDIF.

      ENDIF.

  ENDCASE.

ENDFORM.

FORM prepare_pricing_data  USING ls_clrq_itm TYPE /cgdc/s_clrqit
                           CHANGING  ls_komk TYPE komk
                                    ls_komp TYPE komp.

  DATA: lv_header_spart TYPE spart,
        ls_tvap         TYPE tvap,
        lwa_crptr       TYPE /cgdc/s_clrqpt.

  READ TABLE gt_contract_itm INTO DATA(lwa_cont_item)
    WITH KEY vbeln = gs_contract_hdr-vbeln
             posnr = ls_clrq_itm-vgpos.
  IF lwa_cont_item IS NOT INITIAL.
    MOVE-CORRESPONDING lwa_cont_item TO ls_komp.
    ls_komp-vgpos = ls_komp-/cgdc/orgi.
  ENDIF.

  MOVE-CORRESPONDING gs_kurgv TO ls_komp.
  MOVE-CORRESPONDING gs_kuwev TO ls_komp.
  MOVE-CORRESPONDING gs_kuagv TO ls_komp.
  ls_komp-prsfd = 'X'.

  lv_header_spart = ls_komk-spart.
  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komp.
  MOVE-CORRESPONDING ls_clrq_itm TO: ls_komk, ls_komp.
  ls_komp-/cgdc/lstar = ls_clrq_itm-lstar.
  ls_komp-activity_type = ls_clrq_itm-lstar.

  ls_komp-kposn = ls_clrq_itm-tmpit.

  ls_komk-spart = lv_header_spart.
  READ TABLE gs_clrqdoc_infocus-x-crptr INTO lwa_crptr
                              WITH KEY clrit = ls_clrq_itm-clrit
                                       parvw = 'WE'
                              BINARY SEARCH.
  IF sy-subrc EQ 0.
    ls_komk-kunwe = lwa_crptr-kunnr.
  ENDIF.
  READ TABLE gs_clrqdoc_infocus-x-crptr INTO lwa_crptr
                              WITH KEY clrit = ls_clrq_itm-clrit
                                       parvw = 'LF'
                              BINARY SEARCH.
  IF sy-subrc EQ 0.
    ls_komk-lifnr = lwa_crptr-lifnr.
  ENDIF.
  IF ls_clrq_itm-pmatn IS INITIAL .
    ls_komp-pmatn = ls_clrq_itm-matnr.
  ELSE.
    ls_komp-pmatn = ls_clrq_itm-pmatn.
  ENDIF.

  IF NOT ls_clrq_itm-matnr IS INITIAL.
    ls_komp-lagme = ls_clrq_itm-zieme.
  ENDIF.

  PERFORM select_tvap USING ls_clrq_itm-pstyv
                   CHANGING ls_tvap.

  IF NOT ls_clrq_itm-matnr IS INITIAL.
    ls_komp-lagme = ls_clrq_itm-zieme.
    ls_komp-evrwr = ls_tvap-evrwr.
    ls_komp-kowrr = ls_tvap-kowrr.
    ls_komp-mgame = ls_clrq_itm-zmeng.
    ls_komp-vrkme = ls_clrq_itm-zieme.                 " DCLM 5764
*    Rounding Issues fix
    IF gs_clrit_org-istat = 'A'.
      ls_komp-mgame = ls_clrq_itm-zmeng + gs_rounding-zmeng.
    ELSE.
      ls_komp-mgame = ls_clrq_itm-zmeng - gs_rounding-zmeng.
      IF ls_komp-mgame < 1.
        ls_komp-mgame = 1.
      ENDIF.
    ENDIF.
    ls_komp-mgame =  trunc( ls_komp-mgame ).
    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = ls_komp-mgame
      IMPORTING
        output = ls_komp-mgame.
    IF sy-subrc <> 0.
    ENDIF.

    IF ls_komp-mgame < 0 .
      ls_komp-mgame = abs( ls_komp-mgame ).
      ls_komp-shkzg = abap_true.
    ENDIF.

    IF ls_clrq_itm-zieme =  ls_komp-vrkme.
      ls_komp-mglme   =  ls_komp-mgame.
    ENDIF.
  ENDIF.
  ls_komp-vgbel = gs_clrqdoc_infocus-x-crhdr-vgbel.
  ls_komp-/cgdc/orgh = gs_clrqdoc_infocus-x-crhdr-vgbel.
  ls_komp-vgpos = ls_clrq_itm-/cgdc/orgi.
  ls_komp-/cgdc/orgi = ls_clrq_itm-/cgdc/orgi.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form pricing_data_prepare
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM pricing USING lv_call_for     " SPACE: Regular Infocus Upd, X: Run Time Items
          CHANGING ls_clrq_itm_fcat TYPE /cgdc/s_clrqit_fcat
                   ls_clrq_itm      TYPE /cgdc/s_clrqit
                   lt_komv          TYPE komv_tab.

  DATA: ls_komk                TYPE komk,
        lv_offset              TYPE i,
        lv_kbetr               TYPE kbetr,
        ls_komk_temp           TYPE komk,
        lv_calculation_type(1) VALUE 'C',
        lwa_crcon              TYPE /cgdc/s_clrqcn,
        lwa_crcon_pricing      TYPE /cgdc/s_clrqcn,
        lwa_cscon              TYPE /cgdc/s_clrqcscn,
        ls_komp                TYPE komp,
        ls_kompax              TYPE kompax,
        lwa_konp               TYPE konp,
        lwa_cgrcon             TYPE komv,
        lwa_komv               TYPE komv,
        lwa_komv_old           TYPE komv,
        lwa_item_catg          TYPE /cgdc/t_rtbic,
        lwa_komv_new           TYPE komv,
        lt_komv_temp           TYPE komv_tab,
        lt_komv_old            TYPE komv_tab,
        lt_komv_old_t          TYPE komv_tab,
        lt_komv_cost           TYPE komv_tab,
        lt_komv_cost_add       TYPE /cgdc/tt_clrq_cs_con_data,
        lwa_komv_cost_add      TYPE /cgdc/s_clrq_cs_con_data,
        lwa_komv_cost          TYPE komv,
        lv_tabix               TYPE sy-tabix,
        lwa_clcgrp_func        TYPE /cgdc/t_rtbpcgf,
        lwa_clcgrp             TYPE /cgdc/t_rtbpcg,
        lwa_clrqbi             TYPE /cgdc/s_clrqbi,
        lv_exrate              TYPE kurrf,
        lt_rtbfm               TYPE /cgdc/tt_rtbfm,
        lv_count               TYPE i,
        lv_kstat               TYPE kstat,
        lv_num                 TYPE string,
        lv_field               TYPE string,
        lv_waerk               TYPE waerk,
        lv_kschl1              TYPE kschl,
        lv_kbetr1_round        TYPE kbetr,
        ls_tka01_temp          TYPE tka01.
  DATA lwa_return TYPE /cgdc/s_message.
  DATA: lwa_bplnty TYPE /cgdc/t_bplnty.
  DATA: lwa_critm_ic TYPE /cgdc/s_clrqit_ic.

  DATA : lv_knumv_st TYPE knumv,
         lv_knumv_ed TYPE knumv,
         lv_kposn_st TYPE kposn,
         lv_kposn_ed TYPE kposn.
  DATA : ex_overflow TYPE REF TO cx_sy_conversion_overflow.
  FIELD-SYMBOLS: <ls_komk_key> TYPE any,
                 <lwa_komv>    TYPE komv.
  FIELD-SYMBOLS : <lwa_main_item> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <fv_curr>  TYPE any,
                  <fv_curky> TYPE any,
                  <fv_field> TYPE any.

  "SOC - Decimal Precision
  DATA(lv_dprec) = /cgdc/cl_rtb_src_db=>read_rtbp_precision( iv_rtbpn = gs_clrqdoc_infocus-x-crhdr-rtbpn ).
  IF lv_dprec > 2.
    DATA(lv_prec_actv) = abap_true.
    DATA(lv_factor) = lv_dprec - 2.      "Decimal precision factor for adjustment.
  ENDIF.
*  ENDIF.

  IF lv_prec_actv = abap_true.
    DATA(lv_kbetr2_tmp) = ls_clrq_itm-kbetr1.
    TRY.
        ls_clrq_itm-kbetr1      = CONV #( ls_clrq_itm-kbetr1 * ( 10 ** lv_factor ) ).
        ls_clrq_itm_fcat-kbetr1 = CONV #( ls_clrq_itm_fcat-kbetr1 * ( 10 ** lv_factor ) ).
      CATCH cx_sy_conversion_overflow.
        "switch to default behaviour.
        lv_prec_actv = abap_false.
    ENDTRY.
  ENDIF.
  "EOC - Decimal Precision

  "++ SOC multi-payer: consider allocation%
  "if allocation % is non zero, adjust base amount to % amount for pricing.
  IF ls_clrq_itm-wbs_allocation > 0.
    DATA(lv_kbetr1_tmp) = ls_clrq_itm-kbetr1.
    "adjustments for possible rounding errors with WBS allocation
    PERFORM adj_rounding_error USING ls_clrq_itm-ps_psp_pnr
                                     ls_clrq_itm-cc_pspnr
                                     ls_clrq_itm-kbetr1
                               CHANGING lv_kbetr1_round.
    IF lv_kbetr1_round IS NOT INITIAL.
      "use adjusted amount
      ls_clrq_itm-kbetr1      = lv_kbetr1_round.
      ls_clrq_itm_fcat-kbetr1 = lv_kbetr1_round.
    ELSE.
      ls_clrq_itm-kbetr1      = CONV #( ls_clrq_itm-kbetr1 * ls_clrq_itm-wbs_allocation / 100 ).
      ls_clrq_itm_fcat-kbetr1 = CONV #( ls_clrq_itm_fcat-kbetr1 * ls_clrq_itm-wbs_allocation / 100 ).
    ENDIF.
*    ELSE.
*      ls_clrq_itm-kbetr1      = CONV #( ls_clrq_itm-kbetr1 * ls_clrq_itm-wbs_allocation / 100 ).
*      ls_clrq_itm_fcat-kbetr1 = CONV #( ls_clrq_itm_fcat-kbetr1 * ls_clrq_itm-wbs_allocation / 100 ).
*    ENDIF.
  ENDIF.
*  ENDIF.
  "++ EOC multi-payer: consider allocation%


  IF ls_clrq_itm-tmpit IS INITIAL.
    PERFORM prepare_temp_hdr_itm_no CHANGING ls_clrq_itm.
  ENDIF.
  PERFORM prepare_komk USING ls_clrq_itm
                    CHANGING ls_komk.

  PERFORM prepare_pricing_data USING ls_clrq_itm
                            CHANGING ls_komk
                                     ls_komp.
  ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ASSIGN COMPONENT 'KEY_UC' OF STRUCTURE ls_komk TO <ls_komk_key>.
  IF sy-subrc EQ 0.
    READ TABLE gt_komk INTO ls_komk_temp WITH KEY ('KEY_UC') = <ls_komk_key>.
  ELSE.
    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <ls_komk_key>.
    IF <ls_komk_key> IS ASSIGNED.
      READ TABLE gt_komk INTO ls_komk_temp  WITH KEY <ls_komk_key>.
    ENDIF.
  ENDIF.

  IF sy-subrc NE 0.
    CLEAR: ls_komk-ix_komt1_v, ls_komk-ix_komt1_b.

    APPEND ls_komk TO gt_komk.
    ls_komk-ix_komk = sy-tabix.
    MODIFY gt_komk FROM ls_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ELSE.
    ls_komk = ls_komk_temp.
  ENDIF.

  ls_komp-ix_komk = ls_komk-ix_komk.
  APPEND ls_komp TO gt_komp.

  CALL METHOD /cgdc/cl_rtb_src_db=>read_mapping
    EXPORTING
      iv_rtbpn      = gs_contract_hdr-/cgdc/rtbpn
      iv_rtbsrc     = ls_clrq_itm-rtb_source
    IMPORTING
      et_srcfld_map = lt_rtbfm.

  IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-calc_grp_itm.

    "high precision not needed. switch to default
    lv_prec_actv = abap_false.
    LOOP AT gt_cgrcon_final INTO lwa_cgrcon.
      IF lwa_cgrcon-kbetr < '1000000000'.
        TRY.
            lv_kbetr = CONV kbetr( lwa_cgrcon-kwert ).
          CATCH cx_sy_conversion_overflow INTO ex_overflow.
            lv_kbetr = 0.
        ENDTRY.
      ENDIF.
      PERFORM fill_komv USING lwa_cgrcon-kschl
                              lv_kbetr
                              gs_clrqdoc_infocus-x-crhdr-waerk
                              lv_kstat
                              lwa_cgrcon
                     CHANGING ls_komk
                              ls_komp
                              lt_komv.
    ENDLOOP.

  ELSE.
    IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-bill_plan_line.
      IF ls_clrq_itm_fcat-bpln_type IS INITIAL.
        READ TABLE gs_clrqdoc_infocus-x-critm_ic INTO lwa_critm_ic WITH KEY clrno = ls_clrq_itm_fcat-clrno
                                                                            clrit = ls_clrq_itm_fcat-clrit
                                                                            clrsit = ls_clrq_itm_fcat-cuepos
                                                                            clrdit = ls_clrq_itm_fcat-duepos.
        IF sy-subrc = 0.
          ls_clrq_itm_fcat-bpln_type = lwa_critm_ic-bpln_type.
        ENDIF.
      ENDIF.
      PERFORM read_blnpl_item_type_data USING ls_clrq_itm_fcat-bpln_type
                                              ls_clrq_itm-pstyv
                                         CHANGING lwa_bplnty.
      ls_clrq_itm_fcat-kschl1 = lwa_bplnty-tkschl.
    ELSE.
      ls_clrq_itm_fcat-kschl1 = gs_rtbp-ccond.
    ENDIF.
*    Rounding
    IF ls_clrq_itm_fcat-istat = 'A'.
      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 + gs_rounding-kbetr1.
    ELSE.
      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 - gs_rounding-kbetr1 .
    ENDIF.

    IF ls_clrq_itm_fcat-kwaer1 IS INITIAL.
      ls_clrq_itm_fcat-kwaer1 = ls_clrq_itm_fcat-waerk.
    ENDIF.

    LOOP AT lt_rtbfm INTO DATA(ls_rtbfm) WHERE tgtfld CP 'KBETR*'.
      lv_count = lv_count + 1.
      lv_num = lv_count.
      CONDENSE lv_num NO-GAPS.
      IF ls_rtbfm-tgtfld <> 'KBETR1'.
        ASSIGN ls_rtbfm-tgtfld TO <fv_curr>.
        lv_kschl1 = ls_rtbfm-tgtkschl.
      ELSEIF ls_rtbfm-tgtfld = 'KBETR1'.
        lv_kschl1 = ls_clrq_itm_fcat-kschl1.
      ENDIF.

      CONCATENATE 'KWAER' lv_num INTO lv_field.
      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE ls_clrq_itm_fcat TO FIELD-SYMBOL(<fv_value>).
      ASSIGN COMPONENT lv_field  OF STRUCTURE ls_clrq_itm_fcat TO FIELD-SYMBOL(<fv_value1>).
      IF <fv_value1> IS ASSIGNED AND <fv_value> IS ASSIGNED.
        IF <fv_value1> IS INITIAL.
          lv_waerk = ls_clrq_itm_fcat-waerk.
        ELSE.
          lv_waerk = <fv_value1>.
        ENDIF.
        IF lv_kschl1 IS NOT INITIAL.
          lv_kstat = ls_rtbfm-kstat.
          IF lv_kstat IS INITIAL.
            READ TABLE gt_item_catg INTO lwa_item_catg
            WITH KEY pstyv = ls_clrq_itm-pstyv.
            IF sy-subrc = 0 .
              IF lwa_item_catg-cost_stat IS NOT INITIAL.
                lv_kstat = abap_true.
              ENDIF.
            ENDIF.
          ENDIF.
          PERFORM fill_komv USING lv_kschl1
                                      <fv_value>
                                      lv_waerk
                                      lv_kstat
                                      lwa_cgrcon
                             CHANGING ls_komk
                                      ls_komp
                                      lt_komv.
        ENDIF.
      ENDIF.
      CLEAR lv_kstat.
    ENDLOOP.
    IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-bill_plan_line.
      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = ls_clrq_itm_fcat-kschl1.
      IF sy-subrc <> 0.

*      ls_clrq_itm_fcat-kbetr1 = lwa_komv-kbetr * ( ls_clrq_itm_fcat-kbetr1 / 100 ).

        CLEAR:lv_kstat.
        READ TABLE gt_item_catg INTO lwa_item_catg
        WITH KEY pstyv = ls_clrq_itm-pstyv.
        IF sy-subrc = 0 .
          IF lwa_item_catg-cost_stat IS NOT INITIAL.
            lv_kstat = abap_true.
          ENDIF.
        ENDIF.

        PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
                         ls_clrq_itm_fcat-kbetr1
                         ls_clrq_itm_fcat-kwaer1
                         lv_kstat
                         lwa_cgrcon
                CHANGING ls_komk
                         ls_komp
                         lt_komv.
        "CRGRR Cond Buffer
        PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
                         ls_clrq_itm_fcat-kbetr1
                         ls_clrq_itm_fcat-kwaer1
                         lv_kstat
                         lwa_cgrcon
                CHANGING ls_komk
                         ls_komp
                         gt_crgr_komv.

        CLEAR:lv_kstat.
      ENDIF.
    ENDIF.

    "++AMISHARMA - Pricing issue for Manual items
    IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-manual_line.
      "fill komv for Manual item base condition
      PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
                         ls_clrq_itm_fcat-kbetr1
                         ls_clrq_itm_fcat-kwaer1
                         space                      "KSTAT
                         lwa_cgrcon
                CHANGING ls_komk
                         ls_komp
                         lt_komv.
    ENDIF.

*    Rounding
    IF gs_rounding-kbetr1 IS NOT INITIAL.
      IF ls_clrq_itm_fcat-istat = 'A'.
        gs_rounding-kbetr1 = - ( gs_rounding-kbetr1 ).
      ENDIF.
      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 + gs_rounding-kbetr1 .
      PERFORM fill_komv USING gs_rounding-kschl1
                        gs_rounding-kbetr1
                        gs_rounding-kwaer1
                        lv_kstat
                        lwa_cgrcon
               CHANGING ls_komk
                        ls_komp
                        lt_komv.
    ENDIF.

    READ TABLE gt_item_catg INTO lwa_item_catg
    WITH KEY pstyv = ls_clrq_itm-pstyv.
    IF sy-subrc = 0 .
      IF lwa_item_catg-cost_stat IS NOT INITIAL.
        READ TABLE lt_komv ASSIGNING <lwa_komv>
        WITH KEY kschl = gs_rtbp-ccond.
        IF <lwa_komv> IS ASSIGNED.
          <lwa_komv>-kstat = abap_true.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
  gs_clrit = ls_clrq_itm.

  IF ls_clrq_itm-itmty <> gc_clrq_itmty-manual_line
    AND ls_clrq_itm-itmty <> gc_clrq_itmty-prepayment_item
    AND ls_clrq_itm-itmty <> gc_clrq_itmty-calc_grp_itm
    AND ls_clrq_itm-itmty <> gc_clrq_itmty-bill_plan_line.
    PERFORM update_costingsheet_conditions USING ls_clrq_itm_fcat
                                        CHANGING ls_clrq_itm
                                                 ls_komk
                                                 ls_komp
                                                 lt_komv
                                                 lt_komv_cost
                                                 lt_komv_cost_add.
    "SOC- Decimal Precision
    IF lv_prec_actv = abap_true.
      "copy values with higher decimal precision.
      DATA(lt_komv_cost_prec) = lt_komv_cost.

      "adjust calculated amounts back to decimal precision 2
      LOOP AT lt_komv_cost ASSIGNING FIELD-SYMBOL(<lfs_komv_cost>).
        IF <lfs_komv_cost>-krech = 'B'.          "Fixed amount
          <lfs_komv_cost>-kbetr = CONV #( <lfs_komv_cost>-kbetr / ( 10 ** lv_factor ) ).
        ENDIF.

        IF <lfs_komv_cost>-krech <> 'C'.
          <lfs_komv_cost>-kwert = CONV #( <lfs_komv_cost>-kwert / ( 10 ** lv_factor ) ).
          <lfs_komv_cost>-kawrt = CONV #( <lfs_komv_cost>-kawrt / ( 10 ** lv_factor ) ).
        ENDIF.

      ENDLOOP.
    ENDIF.
    "EOC - Decimal Precision
  ENDIF.
  IF gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new.
    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE clrdit = gs_clrit_org-item_delta.
      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
      lwa_komv-knumv = ls_clrq_itm-tmphd.
      lwa_komv-kposn = ls_clrq_itm-tmpit.
      APPEND lwa_komv TO lt_komv_old.
      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
      IF sy-subrc <> 0.
        IF ls_clrq_itm_fcat-kschl1 = lwa_komv-kschl.
          ls_clrq_itm_fcat-kbetr1 = lwa_komv-kbetr * ( ls_clrq_itm_fcat-kbetr1 / 100 ).
          PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
                           ls_clrq_itm_fcat-kbetr1
                           ls_clrq_itm_fcat-kwaer1
                           lv_kstat
                           lwa_cgrcon
                  CHANGING ls_komk
                           ls_komp
                           lt_komv.
        ELSE.
          APPEND lwa_komv TO lt_komv.
        ENDIF.
      ENDIF.

    ENDLOOP.
  ELSE.
    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE   clrit = gs_clrit_org-clrit
                                                            AND  clrsit = ls_clrq_itm-cuepos
                                                            AND clrdit = ls_clrq_itm-duepos.
      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
      lwa_komv-knumv = ls_clrq_itm-tmphd.
      lwa_komv-kposn = ls_clrq_itm-tmpit.
      APPEND lwa_komv TO lt_komv_old.
      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
      IF sy-subrc <> 0.
        READ TABLE gt_costingsheet_copy_contrl TRANSPORTING NO FIELDS WITH KEY clrcn = lwa_crcon-kschl.
        IF sy-subrc <> 0.
          IF ls_clrq_itm_fcat-kschl1 = lwa_komv-kschl.
            PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
                             ls_clrq_itm_fcat-kbetr1
                             ls_clrq_itm_fcat-kwaer1
                             lv_kstat
                             lwa_cgrcon
                    CHANGING ls_komk
                             ls_komp
                             lt_komv.
          ELSE.
            APPEND lwa_komv TO lt_komv.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  "When the currency of cost posting is different than SD Doc currency
  IF gs_contract_hdr-waerk <> ls_clrq_itm-waerk.
    CLEAR lv_exrate.
    DATA(lv_exdat) = COND #( WHEN ( ls_clrq_itm-exdat IS NOT INITIAL )
                                THEN ls_clrq_itm-exdat
                                ELSE ls_clrq_itm-budat ).
    CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
      EXPORTING
        date             = lv_exdat
        foreign_amount   = ls_clrq_itm-kbetr1
        foreign_currency = ls_clrq_itm-waerk
        local_currency   = gs_contract_hdr-waerk
      IMPORTING
        exchange_rate    = lv_exrate
      EXCEPTIONS
        no_rate_found    = 1
        overflow         = 2
        no_factors_found = 3
        no_spread_found  = 4
        derived_2_times  = 5
        OTHERS           = 6.
    IF sy-subrc <> 0.
    ENDIF.

    ls_komk-kurrf     = lv_exrate.
    ls_komk-kurrf_dat = ls_clrq_itm-exdat.

    IF <lwa_komv> IS ASSIGNED.
      UNASSIGN <lwa_komv>.
    ENDIF.
  ENDIF.

  SORT lt_komv BY knumv kposn stunr zaehk.
  CALL FUNCTION 'PRICING'
    EXPORTING
      calculation_type = lv_calculation_type
      comm_head_i      = ls_komk
      comm_item_i      = ls_komp
    IMPORTING
      comm_head_e      = ls_komk
      comm_item_e      = ls_komp
    TABLES
      tkomv            = lt_komv[].
  IF sy-subrc <> 0.
  ELSE.
    IF lv_prec_actv = abap_true.
      "copy results to structure for CR condition value update
      DATA(lt_komv_prec) = lt_komv[].
      DATA(ls_komp_prec) = ls_komp.

      "Revert all value fields based on precision factor
      LOOP AT lt_komv ASSIGNING FIELD-SYMBOL(<lfs_komv>).
        IF <lfs_komv>-krech = 'B'.          "Fixed amount
          <lfs_komv>-kbetr = CONV #( <lfs_komv>-kbetr / ( 10 ** lv_factor ) ).
        ENDIF.

        IF <lfs_komv>-krech <> 'C'.
          <lfs_komv>-kwert = CONV #( <lfs_komv>-kwert / ( 10 ** lv_factor ) ).
          <lfs_komv>-kawrt = CONV #( <lfs_komv>-kawrt / ( 10 ** lv_factor ) ).
        ENDIF.
      ENDLOOP.

      ls_komp-netwr = CONV #( ls_komp-netwr / ( 10 ** lv_factor ) ).
      ls_komp-kzwi1 = CONV #( ls_komp-kzwi1 / ( 10 ** lv_factor ) ).
      ls_komp-kzwi2 = CONV #( ls_komp-kzwi2 / ( 10 ** lv_factor ) ).
      ls_komp-kzwi3 = CONV #( ls_komp-kzwi3 / ( 10 ** lv_factor ) ).
      ls_komp-kzwi4 = CONV #( ls_komp-kzwi4 / ( 10 ** lv_factor ) ).
      ls_komp-kzwi5 = CONV #( ls_komp-kzwi5 / ( 10 ** lv_factor ) ).
      ls_komp-kzwi6 = CONV #( ls_komp-kzwi6 / ( 10 ** lv_factor ) ).
    ENDIF.
  ENDIF.

  CALL METHOD /cgdc/cl_clrq_process=>set_clrq_costsheet_conditions
    EXPORTING
      it_komv  = lt_komv_temp
      is_tka01 = ls_tka01_temp.

  IF ( ls_clrq_itm_fcat-csheet <> ls_clrq_itm-csheet OR ls_clrq_itm_fcat-zschl <> ls_clrq_itm-zschl OR ls_clrq_itm_fcat-csist <> ls_clrq_itm-csist )
    AND gs_clrit_org-istat IS INITIAL
    AND gs_clrit_org IS NOT INITIAL.
    gs_clrit_org-istat = gc_ibill_stat-open.
    READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_main_item> WITH KEY clrno = ls_clrq_itm-clrno
                                                                             clrit = ls_clrq_itm-clrit
                                                                             clrsit = '000000'
                                                                             clrdit = '000000'.
    IF <lwa_main_item> IS ASSIGNED.
      <lwa_main_item>-csheet = ls_clrq_itm-csheet.
      <lwa_main_item>-zschl = ls_clrq_itm-zschl.
      <lwa_main_item>-csist = ls_clrq_itm-csist.
      <lwa_main_item>-updkz = gc_updkz_update.
    ENDIF.
  ENDIF.

  IF ( gs_clrit_org IS NOT INITIAL AND gs_clrit_org-istat IS INITIAL ).

    IF lt_komv_old IS NOT INITIAL.
      lt_komv_old_t = lt_komv_old[].
      LOOP AT lt_komv INTO lwa_komv.
        READ TABLE lt_komv_old INTO lwa_komv_old WITH KEY kschl = lwa_komv-kschl.
        IF sy-subrc = 0.
          DELETE lt_komv_old_t WHERE kschl = lwa_komv_old-kschl.
          lwa_komv_new = lwa_komv.
          CLEAR : lwa_komv_new-knumv,
                  lwa_komv_new-kposn,
                  lwa_komv_new-stunr,
                  lwa_komv_new-zaehk,
                  lwa_komv_new-ix_komt1,
                  lwa_komv_new-drukz,
                  lwa_komv_new-kmeng,
                  lwa_komv_old-knumv,
                  lwa_komv_old-kposn,
                  lwa_komv_old-stunr,
                  lwa_komv_old-zaehk,
                  lwa_komv_old-ix_komt1,
                  lwa_komv_old-drukz,
                  lwa_komv_old-kmeng.
          IF NOT ( lwa_komv_old-kbetr = lwa_komv_new-kbetr AND lwa_komv_old-kawrt = lwa_komv_new-kawrt
            AND lwa_komv_old-kwert = lwa_komv_new-kwert AND lwa_komv_old-kstat = lwa_komv_new-kstat ).


            IF gs_variables-billed_item IS INITIAL.
              gs_clrit_org-istat = gc_ibill_stat-open.
            ELSE.
              gs_clrit_org-istat = ls_clrq_itm_fcat-istat.
            ENDIF.
          ENDIF.
        ELSE.
          IF gs_variables-billed_item IS INITIAL.
            gs_clrit_org-istat = gc_ibill_stat-open.
          ELSE.
            gs_clrit_org-istat = ls_clrq_itm_fcat-istat.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lt_komv_old_t IS NOT INITIAL.

        IF gs_variables-billed_item IS INITIAL.
          gs_clrit_org-istat = gc_ibill_stat-open.
        ELSE.
          gs_clrit_org-istat = ls_clrq_itm_fcat-istat.
        ENDIF.
      ENDIF.
    ELSE.
      gs_clrit_org-istat = gc_ibill_stat-open.
    ENDIF.

  ENDIF.

  IF gs_clrit_org IS INITIAL OR gs_clrit_org-istat IS NOT INITIAL.
    LOOP AT lt_komv INTO lwa_komv.

      MOVE-CORRESPONDING lwa_komv TO lwa_crcon.
      lwa_crcon-clrno = ls_clrq_itm-clrno.
      lwa_crcon-clrit = ls_clrq_itm-clrit.
      lwa_crcon-clrsit = ls_clrq_itm-clrsit.
      lwa_crcon-updkz = gc_updkz_new.
      lwa_crcon-clrdit = ls_clrq_itm-clrdit.

      "SOC - Decimal Precision
      IF lv_prec_actv = abap_true.
        DATA(ls_komv_prec) = VALUE #( lt_komv_prec[ knumv = lwa_komv-knumv kposn = lwa_komv-kposn
                                                    stunr = lwa_komv-stunr zaehk = lwa_komv-zaehk ]
                                     DEFAULT lwa_komv ).
        IF lwa_komv-krech = 'B'.        "Fixed amount
          lwa_crcon-kbetr24 = CONV #( ls_komv_prec-kbetr / ( 10 ** lv_factor ) ).
        ELSE.
          lwa_crcon-kbetr24 = CONV #( ls_komv_prec-kbetr ).
        ENDIF.

        IF  lwa_komv-krech <> 'C'.
          lwa_crcon-kwert24 = CONV #( ls_komv_prec-kwert / ( 10 ** lv_factor ) ).
          lwa_crcon-kawrt24 = CONV #( ls_komv_prec-kawrt / ( 10 ** lv_factor ) ).
        ELSE.
          lwa_crcon-kwert24 = CONV #( ls_komv_prec-kwert ).
          lwa_crcon-kawrt24 = CONV #( ls_komv_prec-kawrt ).
        ENDIF.

      ELSE.
        "default
        lwa_crcon-kwert24 = CONV #( lwa_komv-kwert ).
        lwa_crcon-kbetr24 = CONV #( lwa_komv-kbetr ).
        lwa_crcon-kawrt24 = CONV #( lwa_komv-kawrt ).
      ENDIF.
      "EOC - Decimal Precision

      IF lv_call_for IS INITIAL.

        APPEND lwa_crcon TO gs_clrqdoc_infocus-x-crcon.
        IF ls_clrq_itm-clgrp_kschl IS NOT INITIAL.

          APPEND lwa_crcon TO gt_clgrp_cnd_buffer.


        ENDIF.
      ELSE.

        APPEND lwa_crcon TO gt_clgrp_cnd_buffer.
      ENDIF.

    ENDLOOP.

    LOOP AT lt_komv_cost INTO lwa_komv_cost.
      lv_tabix = sy-tabix.
      CLEAR lwa_komv_cost_add.
      READ TABLE lt_komv_cost_add INTO lwa_komv_cost_add
      WITH KEY tabix = lv_tabix
               kvsl1 = lwa_komv_cost-kvsl1.

      MOVE-CORRESPONDING lwa_komv_cost TO lwa_cscon.
      lwa_cscon-kstar = lwa_komv_cost_add-kstar.
      lwa_cscon-clrno = ls_clrq_itm-clrno.
      lwa_cscon-clrit = ls_clrq_itm-clrit.
      lwa_cscon-clrsit = ls_clrq_itm-clrsit.
      lwa_cscon-updkz = gc_updkz_new.
      lwa_cscon-clrdit = ls_clrq_itm-clrdit.

      "SOC - Decimal Precision
      IF lv_prec_actv = abap_true.
        DATA(ls_komv_cost_prec) = VALUE #( lt_komv_cost_prec[ knumv = lwa_komv_cost-knumv kposn = lwa_komv_cost-kposn
                                                              stunr = lwa_komv_cost-stunr zaehk = lwa_komv_cost-zaehk ]
                                     DEFAULT lwa_komv_cost ).
        IF lwa_komv_cost-krech = 'B'.       "Fixed amount
          lwa_cscon-kbetr24 = CONV #( ls_komv_cost_prec-kbetr / ( 10 ** lv_factor ) ).
        ELSE.
          lwa_cscon-kbetr24 = CONV #( ls_komv_cost_prec-kbetr ).
        ENDIF.

        IF lwa_komv_cost-krech <> 'C'.
          lwa_cscon-kwert24 = CONV #( ls_komv_cost_prec-kwert / ( 10 ** lv_factor ) ).
          lwa_cscon-kawrt24 = CONV #( ls_komv_cost_prec-kawrt / ( 10 ** lv_factor ) ).
        ELSE.
          lwa_cscon-kwert24 = CONV #( ls_komv_cost_prec-kwert ).
          lwa_cscon-kawrt24 = CONV #( ls_komv_cost_prec-kawrt ).
        ENDIF.

      ELSE.
        "default
        lwa_cscon-kwert24 = CONV #( lwa_komv_cost-kwert ).
        lwa_cscon-kbetr24 = CONV #( lwa_komv_cost-kbetr ).
        lwa_cscon-kawrt24 = CONV #( lwa_komv_cost-kawrt ).
      ENDIF.
      "EOC - Decimal Precision

      APPEND lwa_cscon TO gs_clrqdoc_infocus-x-cscon.

    ENDLOOP.

  ENDIF.

  MOVE-CORRESPONDING ls_komp TO ls_kompax.
  MOVE-CORRESPONDING ls_kompax TO ls_clrq_itm.

  "SOC - Decimal Precision
  IF lv_prec_actv = abap_true.
    "add net value and subtotal fields as summation of precision fields
    ls_clrq_itm-netwr24  = CONV #( ls_komp_prec-netwr / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi1_24 = CONV #( ls_komp_prec-kzwi1 / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi2_24 = CONV #( ls_komp_prec-kzwi2 / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi3_24 = CONV #( ls_komp_prec-kzwi3 / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi4_24 = CONV #( ls_komp_prec-kzwi4 / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi5_24 = CONV #( ls_komp_prec-kzwi5 / ( 10 ** lv_factor ) ).
    ls_clrq_itm-kzwi6_24 = CONV #( ls_komp_prec-kzwi6 / ( 10 ** lv_factor ) ).
  ELSE.
    ls_clrq_itm-netwr24  = CONV #( ls_komp-netwr ).
    ls_clrq_itm-kzwi1_24 = CONV #( ls_komp-kzwi1 ).
    ls_clrq_itm-kzwi2_24 = CONV #( ls_komp-kzwi2 ).
    ls_clrq_itm-kzwi3_24 = CONV #( ls_komp-kzwi3 ).
    ls_clrq_itm-kzwi4_24 = CONV #( ls_komp-kzwi4 ).
    ls_clrq_itm-kzwi5_24 = CONV #( ls_komp-kzwi5 ).
    ls_clrq_itm-kzwi6_24 = CONV #( ls_komp-kzwi6 ).
  ENDIF.
  "EOC - Decimal Precision

  IF gs_clrit_org-istat = gc_ibill_stat-open OR gs_clrit_org-istat = gc_ibill_stat-postponed
     OR gs_clrit_org-istat = gc_ibill_stat-rejected.
    READ TABLE lt_komv INTO lwa_komv WITH KEY kschl = gs_rtbp-ccond.
    IF sy-subrc = 0.
      ls_clrq_itm-kbetr1 = lwa_komv-kbetr.
    ENDIF.

*    Added for rounding issues
    READ TABLE lt_komv INTO lwa_komv WITH KEY kschl = gs_rounding-kschl1.
    IF sy-subrc = 0.
      ls_clrq_itm-kbetr1 = ls_clrq_itm-kbetr1 + lwa_komv-kbetr.
    ENDIF.
  ENDIF.

  "If SD Doc currency is not the same as CO Doc currency,
  "always post item in SD Doc currency
  IF gs_contract_hdr-waerk <> ls_clrq_itm-waerk.
    ls_clrq_itm-waerk = gs_contract_hdr-waerk.
  ENDIF.

  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = ls_clrq_itm-pstyv.
  IF sy-subrc = 0 .
    IF lwa_item_catg-stat IS NOT INITIAL.
      CLEAR: ls_clrq_itm-netwr, ls_clrq_itm-netwr24,                              " DCLM 5764
             ls_kompax-netwr,
             ls_komp-netwr.
    ENDIF.
  ENDIF.

  "++ SOC multi-payer: consider allocation%
  "if allocation % is non zero, adjust base amount to % amount for pricing.
  IF lv_kbetr1_tmp IS NOT INITIAL.
    ls_clrq_itm-kbetr1 = lv_kbetr1_tmp.
    ls_clrq_itm_fcat-kbetr1 = lv_kbetr1_tmp.
  ENDIF.
  "++ EOC multi-payer: consider allocation%

  "SOC - Decimal precision
  IF lv_kbetr2_tmp IS NOT INITIAL.
    ls_clrq_itm-kbetr1 = lv_kbetr2_tmp.
    ls_clrq_itm_fcat-kbetr1 = lv_kbetr2_tmp.
  ENDIF.
  "EOC - decimal precision
ENDFORM.

FORM adj_rounding_error USING lv_cc_pspnr  TYPE /cgdc/clrq_cc_pspnr
                              lv_src_pspnr TYPE /cgdc/clrq_cc_pspnr
                              lv_kbetr1    TYPE kbetr
                        CHANGING lv_kbetr1_round TYPE kbetr.
  DATA: lv_amount TYPE kbetr,
        lv_total  TYPE kbetr,
        lv_delta  TYPE kbetr.

  TYPES: ltt_addcost_coll TYPE TABLE OF /cgdc/_cafdaddcc WITH EMPTY KEY.

  "get Master contract setup for WBS and sort by Target
  DATA(lt_srcwbs) = VALUE range_pspnr_in_t( ( sign = 'I' option = 'EQ' low = lv_src_pspnr ) ).
  CALL METHOD /cgdc/cl_mlpay_helper=>mlpay_read
    EXPORTING
      it_srcwbs        = lt_srcwbs
    IMPORTING
      et_source_target = DATA(lt_addcost_coll).

*  DATA(lt_addcost_coll) = VALUE ltt_addcost_coll( FOR ls_row IN gt_add_cost_collector
*                                                  WHERE ( vbeln =  gs_contract_hdr-vbeln AND
*                                                          multi_payer_ind = abap_true )
*                                                  ( ls_row ) ).
  SORT lt_addcost_coll BY tarwbs.

  "check if this is the last Target WBS as per the setup.
  DATA(lv_last_idx) = lines( lt_addcost_coll ).
  DATA(ls_pspnr) = VALUE #( lt_addcost_coll[ lv_last_idx ] OPTIONAL ).
  IF lv_cc_pspnr = ls_pspnr-tarwbs AND ls_pspnr-tarwbs IS NOT INITIAL.
    "allocate amt for each target and sum up the posting amount.
    LOOP AT lt_addcost_coll ASSIGNING FIELD-SYMBOL(<lfs_mpay>).
      lv_amount = CONV #( lv_kbetr1 * <lfs_mpay>-allocation / 100 ).
      lv_total += lv_amount.
    ENDLOOP.

    "if delta exists, adjust allocated amount for last target WBS with the delta.
    lv_delta = lv_kbetr1 - lv_total.
    IF lv_delta IS NOT INITIAL.
      lv_kbetr1_round = CONV #( lv_kbetr1 * ls_pspnr-allocation / 100 ).
      lv_kbetr1_round = lv_kbetr1_round + lv_delta.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form prepare_sales_order_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prepare_sales_order_data .
  DATA:lwa_cns_data         TYPE  s_cns_data,
       ls_sales_order_items TYPE bapisditm. "bapisditem.
  .
  FIELD-SYMBOLS: <lt_data> TYPE table.

  LOOP AT gt_cns_data INTO lwa_cns_data.
    PERFORM prepare_sales_order_item USING lwa_cns_data
                                  CHANGING ls_sales_order_items .

    APPEND ls_sales_order_items TO gt_sales_order_items.
    ASSIGN lwa_cns_data-dmr_con->* TO <lt_data> .
    APPEND LINES OF <lt_data> TO gt_sales_order_cnds.
  ENDLOOP.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form prepare_sales_order_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_CRITM
*&---------------------------------------------------------------------*
FORM prepare_sales_order_item  USING lwa_cns_data TYPE  s_cns_data
                            CHANGING ls_sales_order_items TYPE bapisditm." bapisditem.

  DATA: ls_critm TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lt_cns_data>  TYPE table,
                 <lwa_cns_data> TYPE data.

  MOVE-CORRESPONDING lwa_cns_data-item_data_tmplt TO ls_critm.
  ASSIGN lwa_cns_data-cns_data->* TO <lt_cns_data>.
  READ TABLE <lt_cns_data> ASSIGNING <lwa_cns_data> INDEX 1.
  MOVE-CORRESPONDING <lwa_cns_data> TO ls_critm.

  ls_sales_order_items-itm_number = lwa_cns_data-dmr_posnr.
  ls_sales_order_items-material_long = ls_critm-matnr.
  ls_sales_order_items-plant = ls_critm-werks.
  ls_sales_order_items-item_categ = ls_critm-pstyv.
  ls_sales_order_items-matl_group = ls_critm-matkl.
  ls_sales_order_items-sales_unit = ls_critm-zieme.
  ls_sales_order_items-fixed_quan = 1.
  ls_sales_order_items-target_qty = 1.
  ls_sales_order_items-ref_doc = ls_critm-/cgdc/orgh.
  ls_sales_order_items-ref_doc_it = ls_critm-/cgdc/orgi.
  ls_sales_order_items-ref_doc_ca = 'G'.

  CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
    EXPORTING
      input  = ls_critm-ps_psp_pnr
    IMPORTING
      output = ls_sales_order_items-wbs_elem.
  .
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM prepare_komk USING ls_clrq_itm TYPE /cgdc/s_clrqit
               CHANGING ls_komk TYPE komk.
  DATA: ls_tvta      TYPE tvta,
        ls_t001w     TYPE t001w,
        ls_tvko      TYPE tvko,
        lwa_calc_grp TYPE /cgdc/t_rtbpcg,
        lwa_crptr    TYPE /cgdc/s_clrqpt.

  MOVE-CORRESPONDING gs_kurgv TO ls_komk.
  MOVE-CORRESPONDING gs_kuwev TO ls_komk.
  MOVE-CORRESPONDING gs_kuagv TO ls_komk.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komk.
  ls_komk-bukrs = gs_clrqdoc_infocus-x-crhdr-bukrs_vf.


  ls_komk-kalsm = gs_clrqdoc_infocus-x-crhdr-kalsm.

  ls_komk-prsdt = ls_clrq_itm-prsdt.
  ls_komk-fkdat = ls_clrq_itm-fkdat.
  ls_komk-audat = ls_clrq_itm-bldat.
  ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.

  IF ls_komk-fbuda IS INITIAL.
    ls_komk-fbuda = sy-datum.
  ENDIF.

  PERFORM read_tvko USING gs_clrqdoc_infocus-x-crhdr-vkorg
                 CHANGING gs_tvko.

  ls_komk-boavo = gs_tvko-boavo.
  IF gs_tvko-boavo NE space
  AND gs_kurgv-bokre NE space.
    ls_komk-borel = abap_true.
  ENDIF.

  LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr WHERE clrit = gc_posnr .
    IF lwa_crptr-parvw EQ 'RE'.
      ls_komk-kunre = lwa_crptr-kunnr.
    ELSEIF lwa_crptr-parvw EQ 'RG'.
      ls_komk-knrze = lwa_crptr-kunnr.
    ELSEIF lwa_crptr-parvw EQ 'AG'.
      ls_komk-kunnr = lwa_crptr-kunnr.
    ELSEIF lwa_crptr-parvw EQ 'WE'.
      ls_komk-kunwe = lwa_crptr-kunnr.
    ELSEIF lwa_crptr-parvw EQ 'VE'.
      ls_komk-vrtnr = lwa_crptr-pernr.
    ELSEIF lwa_crptr-parvw EQ 'LF'.
      ls_komk-lifnr = lwa_crptr-lifnr.
    ENDIF.
  ENDLOOP.

  ls_komk-kappl = 'V'.
  ls_komk-mandt = sy-mandt.

  PERFORM read_tvta USING gs_clrqdoc_infocus-x-crhdr-vkorg
                          gs_clrqdoc_infocus-x-crhdr-vtweg
                          gs_clrqdoc_infocus-x-crhdr-spart
                 CHANGING ls_tvta
                          ls_tvko.

  IF NOT ls_tvta-vtwko IS INITIAL.
    ls_komk-vtweg = ls_tvta-vtwko.
  ENDIF.

  IF NOT ls_tvta-spako IS INITIAL.
    ls_komk-spart = ls_tvta-spako.
  ENDIF.

  PERFORM read_t001 USING gs_clrqdoc_infocus-x-crhdr-bukrs
                 CHANGING gs_t001.

  ls_komk-hwaer = gs_t001-waers.

  IF ls_komk-hwaer IS INITIAL.
    ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  PERFORM select_plant_data USING gs_kuwev-dwerk
                         CHANGING ls_t001w.

  ls_komk-aland_werk = ls_t001w-land1.
  ls_komk-boavo = gs_tvko-boavo.
  ls_komk-bokre = gs_kurgv-bokre.
  ls_komk-knumv = ls_clrq_itm-tmphd.

  ls_komk-belnr = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.

  "++ pricing to happen in doc currency
  ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.

ENDFORM.
FORM prepare_calc_req_item.

  DATA: lwa_clrq_itm_old TYPE /cgdc/s_clrqit,
        lwa_clrq_itm_new TYPE /cgdc/s_clrqit_fcat.
  DATA  lwa_clrq_itm_new1 TYPE /cgdc/s_clrqit_fcat.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  FIELD-SYMBOLS: <lwa_data> TYPE data,
                 <lt_data>  TYPE STANDARD TABLE.
  FIELD-SYMBOLS: <lwa_srcdata> TYPE s_srcdata,
                 <lv_data>     TYPE data.
  DATA: lwa_return LIKE LINE OF gt_messages.
  gs_variables-process_type = gc_process_typ_n.
  LOOP AT gt_srcdata ASSIGNING <lwa_srcdata>.
    ASSIGN <lwa_srcdata>-data->* TO <lt_data>.
    IF <lt_data> IS ASSIGNED.

      LOOP AT <lt_data> ASSIGNING <lwa_data>.
        CLEAR lwa_clrq_itm_new.
        TRY.
            MOVE-CORRESPONDING <lwa_data> TO lwa_clrq_itm_new.
            ASSIGN COMPONENT gc_fieldname-pernr OF STRUCTURE <lwa_data> TO <lv_data>.
            lwa_clrq_itm_new-/cgdc/pernr = <lv_data>.
          CATCH cx_sy_conversion_overflow.
            lwa_return-msgid = gc_clrq_msg_cls.
            lwa_return-msgnr = gc_msg_cls_msgnr-007.
            lwa_return-msgty = gc_message_type-error.
            APPEND lwa_return TO gt_messages.
            CLEAR lwa_return.
        ENDTRY.
        lwa_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

        lwa_clrq_itm_new-rtbusage   = gc_rtbusage_val-cost.
        PERFORM update_clrq_item01 USING space
                                        ls_link_data
                                        lwa_clrq_itm_old
                                        CHANGING lwa_clrq_itm_new.
        CLEAR gs_clrit_org.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  IF sy-batch EQ abap_false.
    IF gs_variables-loop_count IS INITIAL.
      gs_variables-loop_count = gs_variables-cmfrq.
    ELSE.
      gs_variables-loop_count = gs_variables-loop_count + gs_variables-cmfrq.
    ENDIF.

    IF gs_variables-loop_count GT gs_variables-total_count.
      gs_variables-loop_count = gs_variables-total_count.
    ENDIF.

    PERFORM display_progress_indicator USING gs_variables-loop_count
                                             gs_variables-total_count.
  ENDIF.


ENDFORM.
FORM prepare_calc_req_item_01.

  DATA: lwa_clrq_itm_old TYPE /cgdc/s_clrqit,
        lwa_clrq_itm_new TYPE /cgdc/s_clrqit_fcat.
  DATA: lwa_clrq_itm_new1 TYPE /cgdc/s_clrqit_fcat,
        lt_prps           TYPE TABLE OF s_prps.

  FIELD-SYMBOLS: <lwa_data> TYPE data,
                 <lt_data>  TYPE STANDARD TABLE.
  FIELD-SYMBOLS: <lwa_srcdata> TYPE ty_src_data,
                 <lv_data>     TYPE data.
  DATA: lwa_return LIKE LINE OF gt_messages.

  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  FIELD-SYMBOLS: <lfs_link> TYPE any.

  gs_variables-process_type = gc_process_typ_n.

  PERFORM select_prps CHANGING lt_prps.

  LOOP AT gt_src_dyn ASSIGNING <lwa_srcdata>.
    ASSIGN <lwa_srcdata>-data->* TO <lt_data>.
    IF <lt_data> IS ASSIGNED.

      LOOP AT <lt_data> ASSIGNING <lwa_data>.
        CLEAR lwa_clrq_itm_new.
        TRY.
            " map source data to CR item
            CALL METHOD /cgdc/cl_rtb_source_util=>map_source_data
              EXPORTING
                iv_rtbpn            = <lwa_srcdata>-/cgdc/rtbpn
                iv_rtb_source       = CONV #( <lwa_srcdata>-source )
                is_src_data         = <lwa_data>
              IMPORTING
                et_return           = DATA(lt_return)
              CHANGING
                /cgdc/s_clrqit_fcat = lwa_clrq_itm_new.
            IF lt_return IS NOT INITIAL.
              APPEND LINES OF lt_return TO gt_messages.
            ENDIF.

            ASSIGN COMPONENT gc_fieldname-pernr OF STRUCTURE <lwa_data> TO <lv_data>.
            IF <lv_data> IS ASSIGNED.
              lwa_clrq_itm_new-/cgdc/pernr = <lv_data>.
            ENDIF.
          CATCH cx_sy_conversion_overflow.
            lwa_return-msgid = gc_clrq_msg_cls.
            lwa_return-msgnr = gc_msg_cls_msgnr-007.
            lwa_return-msgty = gc_message_type-error.
            APPEND lwa_return TO gt_messages.
            CLEAR lwa_return.
        ENDTRY.
        lwa_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

        "read RTB Usage and Bill usage.
        DATA(ls_rtb_as) = /cgdc/cl_rtb_src_db=>read_rtbp_as(
                                      iv_rtbpn      = <lwa_srcdata>-/cgdc/rtbpn
                                      iv_rtb_source = CONV #( <lwa_srcdata>-source ) ).

        lwa_clrq_itm_new-rtbusage   = ls_rtb_as-item_usage.
        lwa_clrq_itm_new-bill_usage = ls_rtb_as-bill_usage.


        CALL METHOD /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc
          EXPORTING
            iv_rtbsrc = CONV #( <lwa_srcdata>-source )
          RECEIVING
            rs_view   = DATA(ls_view).

        "get link tab name
        /cgdc/cl_rtb_src_db=>find_linktab_by_table( EXPORTING
                                                      iv_table = ls_view-primtab
                                                    IMPORTING
                                                      ev_linktab   = DATA(lv_linktab)
                                                      ev_update_fm = DATA(lv_update_fm) ).
        CREATE DATA ls_link_data-crlink_tab TYPE (lv_linktab).
        ASSIGN ls_link_data-crlink_tab->* TO <lfs_link>.
        IF <lfs_link>   IS ASSIGNED AND
           lv_linktab   IS NOT INITIAL AND
           lv_update_fm IS NOT INITIAL.
          ls_link_data-source = <lwa_srcdata>-source.
          ls_link_data-prim_table = ls_view-primtab.
          ls_link_data-link_table    = lv_linktab.
          ls_link_data-lnktab_upd_fm = lv_update_fm.
          "key fields will be assigned.
          MOVE-CORRESPONDING <lwa_data> TO <lfs_link>.
          PERFORM update_clrq_item01 USING space ls_link_data lwa_clrq_itm_old
                                     CHANGING lwa_clrq_itm_new.
        ENDIF.


        CLEAR gs_clrit_org.
      ENDLOOP.
    ENDIF.

    "cleanup obsolete source lines in Link tab, if any
    IF gs_clrqdoc_infocus-x-crhdr-updkz <> gc_updkz_new.    "no need for new CRs
      PERFORM update_obsolete_lines_linktab USING <lwa_srcdata>.
    ENDIF.
*    ENDIF.
  ENDLOOP.
  IF sy-batch EQ abap_false.
    IF gs_variables-loop_count IS INITIAL.
      gs_variables-loop_count = gs_variables-cmfrq.
    ELSE.
      gs_variables-loop_count = gs_variables-loop_count + gs_variables-cmfrq.
    ENDIF.

    IF gs_variables-loop_count GT gs_variables-total_count.
      gs_variables-loop_count = gs_variables-total_count.
    ENDIF.

    PERFORM display_progress_indicator USING gs_variables-loop_count
                                             gs_variables-total_count.
  ENDIF.


ENDFORM.

FORM update_obsolete_lines_linktab USING lwa_source TYPE ty_src_data.

  FIELD-SYMBOLS: <lfs_lnk_new> TYPE table,
                 <lt_linktab>  TYPE table.

  IF gs_clrqdoc_infocus-x-crhdr-clrno IS NOT INITIAL.     "can't process w/o clrno
    CALL METHOD /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc
      EXPORTING
        iv_rtbsrc = CONV #( lwa_source-source )
      RECEIVING
        rs_view   = DATA(ls_view).

    "get link tab name
    /cgdc/cl_rtb_src_db=>find_linktab_by_table( EXPORTING
                                                  iv_table = ls_view-primtab
                                                IMPORTING
                                                  ev_linktab   = DATA(lv_linktab)
                                                  ev_update_fm = DATA(lv_lnktab_upd_fm) ).

    CALL METHOD /cgdc/cl_rtb_source_util=>prep_obs_line_upd_linktab
      EXPORTING
        iv_linktab     = lv_linktab
        iv_clrno       = gs_clrqdoc_infocus-x-crhdr-clrno
        it_source_data = lwa_source-data
      IMPORTING
        et_linktab     = DATA(lref_linktab).

    ASSIGN lref_linktab->* TO <lt_linktab>.
    IF <lt_linktab> IS ASSIGNED.
      IF <lt_linktab> IS NOT INITIAL.
        READ TABLE gs_clrqdoc_infocus-x-crlink ASSIGNING FIELD-SYMBOL(<lfs_crlink>)
                                          WITH KEY link_table = lv_linktab
                                                   updkz      = gc_updkz_update.
        IF sy-subrc = 0 AND <lfs_crlink> IS ASSIGNED.
          "if records exist for linktab, append to table.
          ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
          IF <lfs_lnk_new> IS ASSIGNED.
            APPEND LINES OF <lt_linktab> TO <lfs_lnk_new>.
            <lfs_crlink>-updkz = gc_updkz_update.
          ENDIF.
        ELSE.
          "else append New line for Link tab and data reference
          APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-crlink ASSIGNING <lfs_crlink>.
          <lfs_crlink>-link_table    = lv_linktab.
          <lfs_crlink>-lnktab_upd_fm = lv_lnktab_upd_fm.
          <lfs_crlink>-source        = lwa_source-source.
          <lfs_crlink>-prim_table    = ls_view-primtab.

          CREATE DATA <lfs_crlink>-crlink_tab TYPE TABLE OF (lv_linktab).
          ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
          IF <lfs_lnk_new> IS ASSIGNED.
            APPEND LINES OF <lt_linktab> TO <lfs_lnk_new>.
            <lfs_crlink>-updkz = gc_updkz_update.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM prepare_salasdocu_bapi_data USING    ls_crqhit TYPE /cgdc/_clrqit
                                 CHANGING lt_itm TYPE bapisditm_tt
                                          lt_itmx TYPE bapisditmx_tt.


  DATA: lwa_itm  TYPE bapisditm,
        lwa_itmx TYPE bapisditmx.


  lwa_itm-itm_number = ls_crqhit-clrit.
  lwa_itm-material_long = ls_crqhit-matnr.
  lwa_itm-item_categ = ls_crqhit-pstyv.
  lwa_itm-matl_group = ls_crqhit-matkl.
  lwa_itm-sales_unit = ls_crqhit-zieme.
  lwa_itm-fixed_quan = 1.
  lwa_itm-target_qty = 1.
  lwa_itm-ref_doc = ls_crqhit-/cgdc/orgh.
  lwa_itm-ref_doc_it = ls_crqhit-/cgdc/orgi.
  lwa_itm-ref_doc_ca = 'G'.

  APPEND lwa_itm TO lt_itm.
**---------------------------------------------------------------------------------
  IF lwa_itm-accnt_asgn IS NOT INITIAL.
    lwa_itmx-accnt_asgn =  abap_true.
  ENDIF.
  IF lwa_itm-add_val_dy IS NOT INITIAL.
    lwa_itmx-add_val_dy =  abap_true.
  ENDIF.
  IF lwa_itm-alt_to_itm IS NOT INITIAL.
    lwa_itmx-alt_to_itm =  abap_true.
  ENDIF.
  IF lwa_itm-assort_mod IS NOT INITIAL.
    lwa_itmx-assort_mod =  abap_true.
  ENDIF.
  IF lwa_itm-batch IS NOT INITIAL.
    lwa_itmx-batch =  abap_true.
  ENDIF.
  IF lwa_itm-begdem_per IS NOT INITIAL.
    lwa_itmx-begdem_per =  abap_true.
  ENDIF.
  IF lwa_itm-bill_block IS NOT INITIAL.
    lwa_itmx-bill_block =  abap_true.
  ENDIF.
  IF lwa_itm-bill_date IS NOT INITIAL.
    lwa_itmx-bill_date =  abap_true.
  ENDIF.
  IF lwa_itm-bill_sched IS NOT INITIAL.
    lwa_itmx-bill_sched =  abap_true.
  ENDIF.
  IF lwa_itm-bomexpl_no IS NOT INITIAL.
    lwa_itmx-bomexpl_no =  abap_true.
  ENDIF.
  IF lwa_itm-bus_transt IS NOT INITIAL.
    lwa_itmx-bus_transt =  abap_true.
  ENDIF.
  IF lwa_itm-cfop_code IS NOT INITIAL.
    lwa_itmx-cfop_code =  abap_true.
  ENDIF.
  IF lwa_itm-comp_quant IS NOT INITIAL.
    lwa_itmx-comp_quant =  abap_true.
  ENDIF.
  IF lwa_itm-cstg_sheet IS NOT INITIAL.
    lwa_itmx-cstg_sheet =  abap_true.
  ENDIF.
  IF lwa_itm-cust_group IS NOT INITIAL.
    lwa_itmx-cust_group =  abap_true.
  ENDIF.
  IF lwa_itm-cust_mat35 IS NOT INITIAL.
    lwa_itmx-cust_mat35 =  abap_true.
  ENDIF.
  IF lwa_itm-departm_no IS NOT INITIAL.
    lwa_itmx-departm_no =  abap_true.
  ENDIF.
  IF lwa_itm-deprec_per IS NOT INITIAL.
    lwa_itmx-deprec_per =  abap_true.
  ENDIF.
  IF lwa_itm-division IS NOT INITIAL.
    lwa_itmx-division =  abap_true.
  ENDIF.
  IF lwa_itm-dli_profil IS NOT INITIAL.
    lwa_itmx-dli_profil =  abap_true.
  ENDIF.
  IF lwa_itm-dlv_group IS NOT INITIAL.
    lwa_itmx-dlv_group =  abap_true.
  ENDIF.
  IF lwa_itm-dlv_prio IS NOT INITIAL.
    lwa_itmx-dlv_prio =  abap_true.
  ENDIF.
  IF lwa_itm-dlv_time IS NOT INITIAL.
    lwa_itmx-dlv_time =  abap_true.
  ENDIF.
  IF lwa_itm-doc_num_fi IS NOT INITIAL.
    lwa_itmx-doc_num_fi =  abap_true.
  ENDIF.
  IF lwa_itm-dunn_block IS NOT INITIAL.
    lwa_itmx-dunn_block =  abap_true.
  ENDIF.
  IF lwa_itm-dunn_key IS NOT INITIAL.
    lwa_itmx-dunn_key =  abap_true.
  ENDIF.
  IF lwa_itm-exchg_rate IS NOT INITIAL.
    lwa_itmx-exchg_rate =  abap_true.
  ENDIF.
  IF lwa_itm-ex_rate_fi IS NOT INITIAL.
    lwa_itmx-ex_rate_fi =  abap_true.
  ENDIF.
  IF lwa_itm-fixed_quan IS NOT INITIAL.
    lwa_itmx-fixed_quan =  abap_true.
  ENDIF.
  IF lwa_itm-fixdat_qty IS NOT INITIAL.
    lwa_itmx-fixdat_qty =  abap_true.
  ENDIF.
  IF lwa_itm-fix_val_dy IS NOT INITIAL.
    lwa_itmx-fix_val_dy =  abap_true.
  ENDIF.
  IF lwa_itm-fkk_conacct IS NOT INITIAL.
    lwa_itmx-fkk_conacct =  abap_true.
  ENDIF.
  IF lwa_itm-gross_wght IS NOT INITIAL.
    lwa_itmx-gross_wght =  abap_true.
  ENDIF.
  IF lwa_itm-hg_lv_item IS NOT INITIAL.
    lwa_itmx-hg_lv_item =  abap_true.
  ENDIF.
  IF lwa_itm-incoterms1 IS NOT INITIAL.
    lwa_itmx-incoterms1 =  abap_true.
  ENDIF.
  IF lwa_itm-incoterms2 IS NOT INITIAL.
    lwa_itmx-incoterms2 =  abap_true.
  ENDIF.
  IF lwa_itm-incoterms2l IS NOT INITIAL.
    lwa_itmx-incoterms2l =  abap_true.
  ENDIF.
  IF lwa_itm-incoterms3l IS NOT INITIAL.
    lwa_itmx-incoterms3l =  abap_true.
  ENDIF.
  IF lwa_itm-incotermsv IS NOT INITIAL.
    lwa_itmx-incotermsv =  abap_true.
  ENDIF.
  IF lwa_itm-invo_sched IS NOT INITIAL.
    lwa_itmx-invo_sched =  abap_true.
  ENDIF.
  IF lwa_itm-item_categ IS NOT INITIAL.
    lwa_itmx-item_categ =  abap_true.
  ENDIF.
  IF lwa_itm-itm_number IS NOT INITIAL.
    lwa_itmx-itm_number =  abap_true.
  ENDIF.
  IF lwa_itm-material IS NOT INITIAL.
    lwa_itmx-material =  abap_true.
  ENDIF.
  IF lwa_itm-mat_entrd_external IS NOT INITIAL.
    lwa_itmx-mat_entrd_external =  abap_true.
  ENDIF.
  IF lwa_itm-mat_guid IS NOT INITIAL.
    lwa_itmx-mat_guid =  abap_true.
  ENDIF.
  IF lwa_itm-material_long IS NOT INITIAL.
    lwa_itmx-material_long =  abap_true.
  ENDIF.

  IF lwa_itm-matl_group IS NOT INITIAL.
    lwa_itmx-matl_group =  abap_true.
  ENDIF.
  IF lwa_itm-mat_pr_grp IS NOT INITIAL.
    lwa_itmx-mat_pr_grp =  abap_true.
  ENDIF.
  IF lwa_itm-maxdevamnt IS NOT INITIAL.
    lwa_itmx-maxdevamnt =  abap_true.
  ENDIF.
  IF lwa_itm-maxdev_day IS NOT INITIAL.
    lwa_itmx-maxdev_day =  abap_true.
  ENDIF.
  IF lwa_itm-maxdevper IS NOT INITIAL.
    lwa_itmx-maxdevper =  abap_true.
  ENDIF.
  IF lwa_itm-max_pl_dlv IS NOT INITIAL.
    lwa_itmx-max_pl_dlv =  abap_true.
  ENDIF.
  IF lwa_itm-mn_invoice IS NOT INITIAL.
    lwa_itmx-mn_invoice =  abap_true.
  ENDIF.
  IF lwa_itm-net_weight IS NOT INITIAL.
    lwa_itmx-net_weight =  abap_true.
  ENDIF.
  IF lwa_itm-no_gr_post IS NOT INITIAL.
    lwa_itmx-no_gr_post =  abap_true.
  ENDIF.
  IF lwa_itm-orderid IS NOT INITIAL.
    lwa_itmx-orderid =  abap_true.
  ENDIF.
  IF lwa_itm-order_prob IS NOT INITIAL.
    lwa_itmx-order_prob =  abap_true.
  ENDIF.
  IF lwa_itm-ordcomp_in IS NOT INITIAL.
    lwa_itmx-ordcomp_in =  abap_true.
  ENDIF.
  IF lwa_itm-overhd_key IS NOT INITIAL.
    lwa_itmx-overhd_key =  abap_true.
  ENDIF.
  IF lwa_itm-overdlvtol IS NOT INITIAL.
    lwa_itmx-overdlvtol =  abap_true.
  ENDIF.
  IF lwa_itm-part_dlv IS NOT INITIAL.
    lwa_itmx-part_dlv =  abap_true.
  ENDIF.
  IF lwa_itm-pldlvshdin IS NOT INITIAL.
    lwa_itmx-pldlvshdin =  abap_true.
  ENDIF.
  IF lwa_itm-plant IS NOT INITIAL.
    lwa_itmx-plant =  abap_true.
  ENDIF.
  IF lwa_itm-pmnttrms IS NOT INITIAL.
    lwa_itmx-pmnttrms =  abap_true.
  ENDIF.
  IF lwa_itm-po_dat_s IS NOT INITIAL.
    lwa_itmx-po_dat_s =  abap_true.
  ENDIF.
  IF lwa_itm-po_itm_no IS NOT INITIAL.
    lwa_itmx-po_itm_no =  abap_true.
  ENDIF.
  IF lwa_itm-poitm_no_s IS NOT INITIAL.
    lwa_itmx-poitm_no_s =  abap_true.
  ENDIF.
  IF lwa_itm-po_method IS NOT INITIAL.
    lwa_itmx-po_method =  abap_true.
  ENDIF.
  IF lwa_itm-po_meth_s IS NOT INITIAL.
    lwa_itmx-po_meth_s =  abap_true.
  ENDIF.
  IF lwa_itm-prc_group1 IS NOT INITIAL.
    lwa_itmx-prc_group1 =  abap_true.
  ENDIF.
  IF lwa_itm-prc_group2 IS NOT INITIAL.
    lwa_itmx-prc_group2 =  abap_true.
  ENDIF.
  IF lwa_itm-prc_group3 IS NOT INITIAL.
    lwa_itmx-prc_group3 =  abap_true.
  ENDIF.
  IF lwa_itm-prc_group4 IS NOT INITIAL.
    lwa_itmx-prc_group4 =  abap_true.
  ENDIF.
  IF lwa_itm-prc_group5 IS NOT INITIAL.
    lwa_itmx-prc_group5 =  abap_true.
  ENDIF.
  IF lwa_itm-price_date IS NOT INITIAL.
    lwa_itmx-price_date =  abap_true.
  ENDIF.
  IF lwa_itm-price_grp IS NOT INITIAL.
    lwa_itmx-price_grp =  abap_true.
  ENDIF.
  IF lwa_itm-price_list IS NOT INITIAL.
    lwa_itmx-price_list =  abap_true.
  ENDIF.
  IF lwa_itm-prod_hiera IS NOT INITIAL.
    lwa_itmx-prod_hiera =  abap_true.
  ENDIF.
  IF lwa_itm-profit_ctr IS NOT INITIAL.
    lwa_itmx-profit_ctr =  abap_true.
  ENDIF.
  IF lwa_itm-promotion IS NOT INITIAL.
    lwa_itmx-promotion =  abap_true.
  ENDIF.
  IF lwa_itm-pr_ref_mat IS NOT INITIAL.
    lwa_itmx-pr_ref_mat =  abap_true.
  ENDIF.

  IF lwa_itm-p_mat_guid IS NOT INITIAL.
    lwa_itmx-p_mat_guid =  abap_true.
  ENDIF.
  IF lwa_itm-pr_ref_mat_long IS NOT INITIAL.
    lwa_itmx-pr_ref_mat_long =  abap_true.
  ENDIF.

  IF lwa_itm-purch_date IS NOT INITIAL.
    lwa_itmx-purch_date =  abap_true.
  ENDIF.
  IF lwa_itm-purch_no_c IS NOT INITIAL.
    lwa_itmx-purch_no_c =  abap_true.
  ENDIF.
  IF lwa_itm-purch_no_s IS NOT INITIAL.
    lwa_itmx-purch_no_s =  abap_true.
  ENDIF.
  IF lwa_itm-pmtgar_pro IS NOT INITIAL.
    lwa_itmx-pmtgar_pro =  abap_true.
  ENDIF.
  IF lwa_itm-pymt_meth IS NOT INITIAL.
    lwa_itmx-pymt_meth =  abap_true.
  ENDIF.
  IF lwa_itm-reason_rej IS NOT INITIAL.
    lwa_itmx-reason_rej =  abap_true.
  ENDIF.
  IF lwa_itm-rec_point IS NOT INITIAL.
    lwa_itmx-rec_point =  abap_true.
  ENDIF.
  IF lwa_itm-reflogsys IS NOT INITIAL.
    lwa_itmx-reflogsys =  abap_true.
  ENDIF.
  IF lwa_itm-refobjkey IS NOT INITIAL.
    lwa_itmx-refobjkey =  abap_true.
  ENDIF.
  IF lwa_itm-refobjtype IS NOT INITIAL.
    lwa_itmx-refobjtype =  abap_true.
  ENDIF.
  IF lwa_itm-ref_1 IS NOT INITIAL.
    lwa_itmx-ref_1 =  abap_true.
  ENDIF.
  IF lwa_itm-ref_1_s IS NOT INITIAL.
    lwa_itmx-ref_1_s =  abap_true.
  ENDIF.
  IF lwa_itm-ref_doc IS NOT INITIAL.
    lwa_itmx-ref_doc =  abap_true.
  ENDIF.
  IF lwa_itm-ref_doc_ca IS NOT INITIAL.
    lwa_itmx-ref_doc_ca =  abap_true.
  ENDIF.
  IF lwa_itm-ref_doc_ca_long IS NOT INITIAL.
    lwa_itmx-ref_doc_ca_long =  abap_true.
  ENDIF.
  IF lwa_itm-ref_doc_it IS NOT INITIAL.
    lwa_itmx-ref_doc_it =  abap_true.
  ENDIF.
  IF lwa_itm-reqmts_typ IS NOT INITIAL.
    lwa_itmx-reqmts_typ =  abap_true.
  ENDIF.
  IF lwa_itm-req_segment IS NOT INITIAL.
    lwa_itmx-req_segment =  abap_true.
  ENDIF.
  IF lwa_itm-req_seg_long IS NOT INITIAL.
    lwa_itmx-req_seg_long =  abap_true.
  ENDIF.
  IF lwa_itm-resanalkey IS NOT INITIAL.
    lwa_itmx-resanalkey =  abap_true.
  ENDIF.
  IF lwa_itm-rev_type IS NOT INITIAL.
    lwa_itmx-rev_type =  abap_true.
  ENDIF.
  IF lwa_itm-route IS NOT INITIAL.
    lwa_itmx-route =  abap_true.
  ENDIF.
  IF lwa_itm-sales_dist IS NOT INITIAL.
    lwa_itmx-sales_dist =  abap_true.
  ENDIF.
  IF lwa_itm-salqtyden IS NOT INITIAL.
    lwa_itmx-salqtyden =  abap_true.
  ENDIF.
  IF lwa_itm-salqtynum IS NOT INITIAL.
    lwa_itmx-salqtynum =  abap_true.
  ENDIF.
  IF lwa_itm-sales_unit IS NOT INITIAL.
    lwa_itmx-sales_unit =  abap_true.
  ENDIF.
  IF lwa_itm-sd_taxcode IS NOT INITIAL.
    lwa_itmx-sd_taxcode =  abap_true.
  ENDIF.
  IF lwa_itm-sepa_mandate_id IS NOT INITIAL.
    lwa_itmx-sepa_mandate_id =  abap_true.
  ENDIF.
  IF lwa_itm-seq_no IS NOT INITIAL.
    lwa_itmx-seq_no =  abap_true.
  ENDIF.
  IF lwa_itm-serv_date IS NOT INITIAL.
    lwa_itmx-serv_date =  abap_true.
  ENDIF.
  IF lwa_itm-ship_point IS NOT INITIAL.
    lwa_itmx-ship_point =  abap_true.
  ENDIF.
  IF lwa_itm-short_text IS NOT INITIAL.
    lwa_itmx-short_text =  abap_true.
  ENDIF.
  IF lwa_itm-store_loc IS NOT INITIAL.
    lwa_itmx-store_loc =  abap_true.
  ENDIF.
  IF lwa_itm-target_qty IS NOT INITIAL.
    lwa_itmx-target_qty =  abap_true.
  ENDIF.
  IF lwa_itm-target_qu IS NOT INITIAL.
    lwa_itmx-target_qu =  abap_true.
  ENDIF.
  IF lwa_itm-target_val IS NOT INITIAL.
    lwa_itmx-target_val =  abap_true.
  ENDIF.
  IF lwa_itm-trgqty_den IS NOT INITIAL.
    lwa_itmx-trgqty_den =  abap_true.
  ENDIF.
  IF lwa_itm-trg_qty_no IS NOT INITIAL.
    lwa_itmx-trg_qty_no =  abap_true.
  ENDIF.
  IF lwa_itm-taxlawicms IS NOT INITIAL.
    lwa_itmx-taxlawicms =  abap_true.
  ENDIF.
  IF lwa_itm-taxlawipi IS NOT INITIAL.
    lwa_itmx-taxlawipi =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class1 IS NOT INITIAL.
    lwa_itmx-tax_class1 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class2 IS NOT INITIAL.
    lwa_itmx-tax_class2 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class3 IS NOT INITIAL.
    lwa_itmx-tax_class3 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class4 IS NOT INITIAL.
    lwa_itmx-tax_class4 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class5 IS NOT INITIAL.
    lwa_itmx-tax_class5 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class6 IS NOT INITIAL.
    lwa_itmx-tax_class6 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class7 IS NOT INITIAL.
    lwa_itmx-tax_class7 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class8 IS NOT INITIAL.
    lwa_itmx-tax_class8 =  abap_true.
  ENDIF.
  IF lwa_itm-tax_class9 IS NOT INITIAL.
    lwa_itmx-tax_class9 =  abap_true.
  ENDIF.
  IF lwa_itm-t_unit_iso IS NOT INITIAL.
    lwa_itmx-t_unit_iso =  abap_true.
  ENDIF.
  IF lwa_itm-unddlv_tol IS NOT INITIAL.
    lwa_itmx-unddlv_tol =  abap_true.
  ENDIF.
  IF lwa_itm-untof_wght IS NOT INITIAL.
    lwa_itmx-untof_wght =  abap_true.
  ENDIF.
  IF lwa_itm-unlmt_dlv IS NOT INITIAL.
    lwa_itmx-unlmt_dlv =  abap_true.
  ENDIF.
  IF lwa_itm-usage_ind IS NOT INITIAL.
    lwa_itmx-usage_ind =  abap_true.
  ENDIF.
  IF lwa_itm-val_type IS NOT INITIAL.
    lwa_itmx-val_type =  abap_true.
  ENDIF.
  IF lwa_itm-volume IS NOT INITIAL.
    lwa_itmx-volume =  abap_true.
  ENDIF.
  IF lwa_itm-volunit IS NOT INITIAL.
    lwa_itmx-volunit =  abap_true.
  ENDIF.
  IF lwa_itm-wbs_elem IS NOT INITIAL.
    lwa_itmx-wbs_elem =  abap_true.
  ENDIF.
  APPEND lwa_itmx TO lt_itmx.

ENDFORM.
FORM prepare_calreqhdr USING lv_vbeln TYPE vbeln_va
                             lv_clrno TYPE /cgdc/clrqno
                             lv_recreate TYPE flag.
  IF lv_recreate IS INITIAL.
    PERFORM select_clrqhd USING lv_vbeln lv_clrno.
  ENDIF.
  IF gs_clrqdoc_infocus-x-crhdr IS INITIAL  AND gs_contract_hdr-/cgdc/rtbpn IS NOT INITIAL.
    PERFORM select_realtime_billprf_data USING gs_contract_hdr-/cgdc/rtbpn.
    PERFORM select_bill_pricing_control USING gs_contract_hdr-/cgdc/rtbpn.
    PERFORM select_calc_req_typ USING gs_rtbp-clrqt.
    PERFORM update_clrq_header CHANGING gs_clrqdoc_infocus-x-crhdr.
    PERFORM update_calcgrp_items USING gs_clrqdoc_infocus-x-crhdr.
    gs_clrqdoc_infocus-x-crhdr-vgbel = lv_vbeln.
  ELSE.
    "Code for Recreate
  ENDIF.
  PERFORM select_realtime_billprf_data USING gs_contract_hdr-/cgdc/rtbpn.
  PERFORM select_bill_pricing_control USING gs_contract_hdr-/cgdc/rtbpn.
  IF gs_clrqdoc_infocus IS NOT INITIAL.
    gs_clrqdoc_infocus-updkz = abap_true.
  ENDIF.
  IF gs_clrqdoc_infocus-x-crhdr-kalsm IS INITIAL.
    CLEAR : gs_clrqdoc_infocus-x-crhdr,
            gs_clrqdoc_infocus-updkz .
  ENDIF.
ENDFORM.


FORM prepare_bill_pre_char.
  DATA: lt_dd03l  TYPE TABLE OF dd03l,
        lwa_dd03l TYPE dd03l.
  DATA : lwa_bill_pre_char TYPE s_bill_preview_char.
  DATA : ls_blng_cds_view_name TYPE string.
  ls_blng_cds_view_name = gc_view-bill_item.
  SELECT *
    FROM dd03l
    INTO TABLE lt_dd03l
    WHERE tabname = ls_blng_cds_view_name.
  IF sy-subrc = 0.
    LOOP AT lt_dd03l INTO lwa_dd03l WHERE reffield IS INITIAL.
      IF lwa_dd03l-fieldname <> gc_clrqbi_field-mandt.
        lwa_bill_pre_char-fieldname = lwa_dd03l-fieldname.
        APPEND lwa_bill_pre_char TO gt_bill_prev_char.
        CLEAR lwa_bill_pre_char.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM prepare_dtls_for_cont USING lwa_vbak TYPE vbak
                                             lt_vbap  TYPE /cgdc/tt_vbap
                                             lt_vbkd  TYPE va_vbkdvb_t.

  FIELD-SYMBOLS: <lwa_vbap> TYPE vbap.
  FIELD-SYMBOLS: <lwa_vbkd> TYPE vbkd.
  gs_contract_hdr = lwa_vbak.
  MOVE-CORRESPONDING lt_vbap TO gt_contract_itm.
  MOVE-CORRESPONDING lt_vbkd TO gt_contract_business_data.
  DELETE gt_contract_itm WHERE posnr IS INITIAL.
  DELETE gt_contract_business_data WHERE posnr IS INITIAL.
  LOOP AT gt_contract_itm ASSIGNING <lwa_vbap>.
    <lwa_vbap>-vbeln = lwa_vbak-vbeln.
  ENDLOOP.
  LOOP AT gt_contract_business_data ASSIGNING <lwa_vbkd>.
    <lwa_vbkd>-vbeln = lwa_vbak-vbeln.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_ebdr_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <LT_DATA>
*&      <-- LT_EBDR_DATA
*&---------------------------------------------------------------------*
FORM prepare_ebdr_data CHANGING lt_data TYPE table
                                lt_ebdr_data TYPE bapiebdrrequest_t
                                lt_bdr_ptr TYPE bapiebdrrequestparnr_t
                                lt_condition_data TYPE bapiebdrrequestcond_t
                                ls_control_data TYPE bapiebdrrequestctrl
                                ls_administration_data TYPE bapiebdrrequestadmin
                                lt_fields TYPE dfies_table
                                lt_xrefdoc TYPE t_vbeln.

  DATA: lwa_ebdr_data            TYPE LINE OF bapiebdrrequest_t,
        lwa_cont_itm             TYPE vbap,
        lv_kposn                 TYPE kposn,
        lv_bdr_kposn             TYPE kposn,
        lv_partnernumber         TYPE kunnr,
        lwa_vbpa                 TYPE vbpav,
        lwa_condition_data       TYPE LINE OF bapiebdrrequestcond_t,
        ls_calc_req_cond         TYPE LINE OF bapiebdrrequestcond_t,
        lwa_bdr_ptr              TYPE LINE OF bapiebdrrequestparnr_t,
        lwa_fields               TYPE dfies,
        lwa_bill_preview_komv    TYPE komv,
        lwa_critm                TYPE /cgdc/s_clrqit,
        lt_critm                 TYPE /cgdc/tt_clrqit,
        lt_bill_preview_cond     TYPE komv_t,
        lwa_vbak                 TYPE vbak,
        lwa_xrefdoc              TYPE s_vbeln,
        lwa_br_cond_copy_control TYPE /cgdc/t_clrtbrcc,
        lv_where                 TYPE string,
        lv_billrel               TYPE rvari_val_255,
        lwa_crbinr               TYPE /cgdc/s_clrqbi,
        lwa_rtbufbd              TYPE /cgdc/t_rtbufbd,
        lv_vbtyp                 TYPE vbtypl,
        lwa_bilitty              TYPE /cgdc/t_bilitty.
  DATA: lt_whitelist    TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line.

  FIELD-SYMBOLS:<lwa_data>      TYPE data,
                <lv_bill_usage> TYPE data,
                <lv_data>       TYPE data,
                <lv_clrno>      TYPE any,
                <lv_rtbbinr>    TYPE any,
                <lv_netwr>      TYPE any,
                <lv_faksp>      TYPE any,
                <lv_fkrel>      TYPE any,
                <lv_xrfdn>      TYPE any,
                <lv_xrfin>      TYPE any,
                <lv_auart>      TYPE any,
                <lv_bdrty>      TYPE any,
                <lv_crauart>    TYPE any,
                <lv_crbdrty>    TYPE any,
                <lv_vgpos>      TYPE any.


  ls_control_data-precedingdocumentcheck = abap_false.
  ls_control_data-commit_mode            = gc_commit_mode-no_commit.

  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = gc_structure-billing_items
      all_types      = abap_true
    TABLES
      dfies_tab      = lt_fields
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
  ENDIF.

  PERFORM select_realtime_billprf_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.
  PERFORM select_calc_req_typ USING gs_clrqdoc_infocus-x-crhdr-clrqt.

  IF gs_clrqdoc_infocus-x-crhdr-xrfdn IS INITIAL.
    PERFORM get_xref_document_number USING gs_calc_req_type-xrnumki
                                           gc_xref_number_range_object
                                  CHANGING gs_clrqdoc_infocus-x-crhdr-xrfdn.
  ENDIF.
  lwa_xrefdoc-vbeln = gs_clrqdoc_infocus-x-crhdr-xrfdn.
  APPEND lwa_xrefdoc TO lt_xrefdoc.


  lv_kposn = gs_clrqdoc_infocus-x-crhdr-xrfli.

  CLEAR lv_billrel.
  PERFORM get_billing_relevance USING gc_var_type-cb123
                                CHANGING lv_billrel.


  PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuagv USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kurgv USING gs_clrqdoc_infocus-x-crhdr.

  LOOP AT lt_data ASSIGNING <lwa_data>.
    CLEAR: lwa_ebdr_data.
    ASSIGN COMPONENT gc_clrqit_field-clrno OF STRUCTURE <lwa_data> TO <lv_clrno>.
    ASSIGN COMPONENT gc_clrqit_field-rtbbinr OF STRUCTURE <lwa_data> TO <lv_rtbbinr>.
    IF <lv_rtbbinr> IS NOT ASSIGNED.
      ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE <lwa_data> TO <lv_rtbbinr>.
    ENDIF.
    ASSIGN COMPONENT gc_clrqit_field-netwr OF STRUCTURE <lwa_data> TO <lv_netwr>.
    ASSIGN COMPONENT gc_clrqit_field-faksp OF STRUCTURE <lwa_data> TO <lv_faksp>.
    ASSIGN COMPONENT gc_clrqit_field-fkrel OF STRUCTURE <lwa_data> TO <lv_fkrel>.
    ASSIGN COMPONENT gc_clrqbi_field-xrfdn OF STRUCTURE <lwa_data> TO <lv_xrfdn>.
    ASSIGN COMPONENT gc_clrqbi_field-xrfin OF STRUCTURE <lwa_data> TO <lv_xrfin>.
    ASSIGN COMPONENT 'AUART' OF STRUCTURE <lwa_data> TO <lv_auart>.
    ASSIGN COMPONENT 'BDRTY' OF STRUCTURE <lwa_data> TO <lv_bdrty>.
    ASSIGN COMPONENT 'CR_AUART' OF STRUCTURE <lwa_data> TO <lv_crauart>.
    ASSIGN COMPONENT 'CR_BDRTY' OF STRUCTURE <lwa_data> TO <lv_crbdrty>.
    ASSIGN COMPONENT 'VGPOS' OF STRUCTURE <lwa_data> TO <lv_vgpos>.

    CLEAR lwa_crbinr.
    READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_crbinr
                                           WITH KEY clrno     = <lv_clrno>
                                                    bill_item = <lv_rtbbinr>.
    IF sy-subrc EQ 0.
      CLEAR lwa_bilitty.
      READ TABLE gt_bilitty INTO lwa_bilitty
                            WITH KEY bilitmtyp = lwa_crbinr-bitype.
      IF sy-subrc EQ 0.
        IF lwa_bilitty-allow_0 IS INITIAL AND <lv_netwr> IS INITIAL.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT ( <lv_faksp> IS ASSIGNED AND <lv_faksp> = space AND <lv_fkrel> CA lv_billrel ).
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = gc_msg_cls_msgnr-049.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = <lv_rtbbinr>.
      APPEND gs_messages TO gt_messages.
      CONTINUE.
    ENDIF.

    IF <lv_clrno> IS ASSIGNED AND <lv_rtbbinr> IS ASSIGNED.
      READ TABLE gs_clrqdoc_infocus-x-crbinr TRANSPORTING NO FIELDS
                                             WITH KEY clrno     = <lv_clrno>
                                                      bill_item = <lv_rtbbinr>
                                                      bstat     = gc_ibill_stat-pbd_in_progress.
      IF sy-subrc IS INITIAL.
        CONTINUE.
      ENDIF.
      UNASSIGN: <lv_clrno>, <lv_rtbbinr>.
    ENDIF.

    ASSIGN COMPONENT gc_clrqit_field-bill_usage OF STRUCTURE <lwa_data> TO <lv_bill_usage>.
    IF <lv_bill_usage> IS ASSIGNED AND <lv_bill_usage> IS NOT INITIAL.
      IF lv_vbtyp IS INITIAL.
        SELECT SINGLE vbtyp
          FROM tvfk
          INTO lv_vbtyp
          WHERE fkart = gs_rtbp-bdrty.
      ENDIF.

      SELECT SINGLE *
      FROM /cgdc/t_rtbufbd
      INTO lwa_rtbufbd
      WHERE vbtyp = lv_vbtyp
      AND abrvw = <lv_bill_usage>.

      IF sy-subrc = 0.
        IF lwa_rtbufbd-rcode NE 0.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.


    CLEAR lt_bill_preview_cond.
    lv_kposn = lv_kposn + 1.
    IF lv_kposn EQ gc_kposn_low.
      IF gs_clrqdoc_infocus-y-crhdr IS INITIAL.
        gs_clrqdoc_infocus-y-crhdr = gs_clrqdoc_infocus-x-crhdr.
      ENDIF.
      CLEAR gs_clrqdoc_infocus-x-crhdr-xrfdn.
      PERFORM get_xref_document_number USING gs_calc_req_type-xrnumki
                                             gc_xref_number_range_object
                                    CHANGING gs_clrqdoc_infocus-x-crhdr-xrfdn.
      lv_kposn = lv_kposn + 1.
      gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
      lwa_xrefdoc-vbeln = gs_clrqdoc_infocus-x-crhdr-xrfdn.
      APPEND lwa_xrefdoc TO lt_xrefdoc.

    ENDIF.

    IF <lv_xrfin> IS ASSIGNED.
      <lv_xrfin> = lv_kposn.
    ENDIF.

    IF <lv_xrfdn> IS ASSIGNED.
      <lv_xrfdn> = gs_clrqdoc_infocus-x-crhdr-xrfdn.
    ENDIF.

    CLEAR: lt_bill_preview_cond[].
    PERFORM prepare_billing_conditions USING <lwa_data>
                                             lt_fields
                                             lv_kposn
                                    CHANGING lt_bill_preview_cond.

    APPEND LINES OF lt_bill_preview_cond TO gt_bill_preview_cond.
*    CLEAR lv_where.
*    PERFORM prep_ebdr_critm_where_cls USING <lwa_data>
*                                            lt_fields
*                                            abap_true
*                                   CHANGING lv_where.
*
*    CLEAR:lwa_critm.
*
*    INSERT lv_where INTO TABLE lt_whitelist .
*    TRY.
*        lv_where   = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_where whitelist = lt_whitelist ).
*      CATCH cx_abap_not_in_whitelist.
*    ENDTRY.
*
*    SELECT SINGLE * FROM /cgdc/_clrqit
*      INTO CORRESPONDING FIELDS OF lwa_critm
*      WHERE (lv_where).
*    CHECK sy-subrc = 0.

*    IF <lv_auart> IS ASSIGNED AND <lv_auart> IS NOT INITIAL.
*      lwa_ebdr_data-precedingdocumenttype = <lv_auart>.
*    ELSE.
*      lwa_ebdr_data-precedingdocumenttype = gs_rtbp-auart.
*    ENDIF.
*
*
*    IF <lv_bdrty> IS ASSIGNED AND <lv_bdrty> IS NOT INITIAL.
*      lwa_ebdr_data-extbillingdocrequesttype = <lv_bdrty>.
*    ELSE.
*      lwa_ebdr_data-extbillingdocrequesttype = gs_rtbp-bdrty.
*    ENDIF.
    IF <lv_netwr> < 0.
      IF <lv_crauart> IS ASSIGNED AND <lv_crauart> IS NOT INITIAL.
        lwa_ebdr_data-precedingdocumenttype = <lv_crauart>.
      ELSEIF <lv_auart> IS ASSIGNED AND <lv_auart> IS NOT INITIAL.
        lwa_ebdr_data-precedingdocumenttype = <lv_auart>.
      ENDIF.
      IF <lv_crbdrty> IS ASSIGNED AND <lv_crbdrty> IS NOT INITIAL.
        lwa_ebdr_data-extbillingdocrequesttype = <lv_crbdrty>.
      ELSEIF <lv_bdrty> IS ASSIGNED AND <lv_bdrty> IS NOT INITIAL.
        lwa_ebdr_data-extbillingdocrequesttype = <lv_bdrty>.
      ENDIF.
    ELSE.
      IF <lv_auart> IS ASSIGNED AND <lv_auart> IS NOT INITIAL.
        lwa_ebdr_data-precedingdocumenttype = <lv_auart>.
      ENDIF.
      IF <lv_bdrty> IS ASSIGNED AND <lv_bdrty> IS NOT INITIAL.
        lwa_ebdr_data-extbillingdocrequesttype = <lv_bdrty>.
      ENDIF.

    ENDIF.
*    lwa_ebdr_data-extbillingdocrequesttype = gs_rtbp-bdrty.
    lwa_ebdr_data-salesorganization = gs_clrqdoc_infocus-x-crhdr-vkorg.
    lwa_ebdr_data-distributionchannel = gs_clrqdoc_infocus-x-crhdr-vtweg.
    lwa_ebdr_data-division = gs_clrqdoc_infocus-x-crhdr-spart.
    lwa_ebdr_data-soldtoparty = gs_clrqdoc_infocus-x-crhdr-kunnr.

    lwa_ebdr_data-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.

    "++21.08.2024 AMISHARMA
    UNASSIGN <lv_data>.
    ASSIGN COMPONENT 'PS_PSP_PNR' OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-wbselement = <lv_data>.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-bldat OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-billingdate = sy-datum."<lv_data>.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-waerk OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-transactioncurrency = <lv_data>.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-bilmatnr OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-material = <lv_data>.


      DATA : lv_kdmat TYPE kdmat.
      SELECT SINGLE dwerk FROM mvke
              INTO lwa_ebdr_data-plant
              WHERE matnr EQ <lv_data>
                AND vkorg EQ gs_clrqdoc_infocus-x-crhdr-vkorg
                AND vtweg EQ gs_clrqdoc_infocus-x-crhdr-vtweg
                AND lvorm EQ space.

    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-zmeng OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-quantity = abs( <lv_data> ).
    ENDIF.
    IF lwa_ebdr_data-quantity IS INITIAL.
      lwa_ebdr_data-quantity = 1.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-zieme OF STRUCTURE lwa_critm TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-quantityunit = <lv_data>.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-bldat OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-servicesrendereddate = <lv_data>.
    ENDIF.

    UNASSIGN <lv_data>.
    ASSIGN COMPONENT gc_clrqit_field-bldat OF STRUCTURE <lwa_data> TO <lv_data>.
    IF <lv_data> IS ASSIGNED.
      lwa_ebdr_data-pricingdate = <lv_data>.
    ENDIF.
    gs_variables-sel_vgpos = <lv_vgpos>.
    PERFORM prepare_partner_data01 USING '3'.


    LOOP AT gt_x_vbpa INTO lwa_vbpa WHERE posnr = <lv_vgpos>.

      CASE lwa_vbpa-nrart.
        WHEN 'KU'.
          lv_partnernumber = lwa_vbpa-kunnr.
        WHEN 'LF'.
          lv_partnernumber = lwa_vbpa-lifnr.
        WHEN 'PE'.
          lv_partnernumber = lwa_vbpa-pernr.
      ENDCASE.
      CASE lwa_vbpa-parvw.
        WHEN 'AG'.
          lwa_ebdr_data-soldtoparty = lv_partnernumber.
        WHEN 'RE'.
          lwa_ebdr_data-billtoparty = lv_partnernumber.
        WHEN 'RG'.
          lwa_ebdr_data-payerparty = lv_partnernumber.
        WHEN 'WE'.
          lwa_ebdr_data-shiptoparty = lv_partnernumber.
        WHEN OTHERS.
      ENDCASE.
*      APPEND lwa_bdr_ptr TO lt_bdr_ptr.
    ENDLOOP.

    LOOP AT gt_x_vbpa INTO lwa_vbpa WHERE posnr = gc_posnr_low.

      CASE lwa_vbpa-nrart.
        WHEN 'KU'.
          lv_partnernumber = lwa_vbpa-kunnr.
        WHEN 'LF'.
          lv_partnernumber = lwa_vbpa-lifnr.
        WHEN 'PE'.
          lv_partnernumber = lwa_vbpa-pernr.
      ENDCASE.
      CASE lwa_vbpa-parvw.
        WHEN 'AG'.
          CHECK lwa_ebdr_data-soldtoparty IS INITIAL.
          lwa_ebdr_data-soldtoparty = lv_partnernumber.
        WHEN 'RE'.
          CHECK lwa_ebdr_data-billtoparty IS INITIAL.
          lwa_ebdr_data-billtoparty = lv_partnernumber.
        WHEN 'RG'.
          CHECK lwa_ebdr_data-payerparty IS INITIAL.
          lwa_ebdr_data-payerparty = lv_partnernumber.
        WHEN 'WE'.
          CHECK lwa_ebdr_data-shiptoparty IS INITIAL.
          lwa_ebdr_data-shiptoparty = lv_partnernumber.
        WHEN OTHERS.
      ENDCASE.
*      APPEND lwa_bdr_ptr TO lt_bdr_ptr.
    ENDLOOP.



    lwa_ebdr_data-precedingdocumentitem = lv_kposn.
    APPEND lwa_ebdr_data TO lt_ebdr_data.


    LOOP AT lt_bill_preview_cond INTO lwa_bill_preview_komv.

      CLEAR: lwa_br_cond_copy_control, lwa_condition_data, ls_calc_req_cond.

      IF NOT gt_br_cond_copy_control IS INITIAL.

        READ TABLE gt_br_cond_copy_control
        WITH KEY clrqt = gs_clrqdoc_infocus-x-crhdr-clrqt
                 clrcn = lwa_bill_preview_komv-kschl
        INTO lwa_br_cond_copy_control.

        IF sy-subrc EQ 0.
          lwa_condition_data-conditiontype = lwa_br_cond_copy_control-brcon.
        ELSE.
          CONTINUE.
        ENDIF.

      ELSE.

        lwa_condition_data-conditiontype = lwa_bill_preview_komv-kschl.

      ENDIF.

      ls_calc_req_cond-conditiontype = lwa_bill_preview_komv-kschl.

*      IF lv_doctyp_flg = abap_true.
**        DATA(lv_kwert) = -1 * lwa_bill_preview_komv-kwert.
*        lv_kwert = -1 * lwa_bill_preview_komv-kwert.
*      ELSE.
*        lv_kwert = lwa_bill_preview_komv-kwert.
*      ENDIF.

      lwa_condition_data-conditionratevalue = ls_calc_req_cond-conditionratevalue
      = lwa_bill_preview_komv-kwert.
      lwa_condition_data-conditioncurrency = ls_calc_req_cond-conditioncurrency =
       lwa_bill_preview_komv-waers.
      lwa_condition_data-conditionquantity = ls_calc_req_cond-conditionquantity =
      lwa_ebdr_data-quantity.
      lwa_condition_data-conditionquantityunit = ls_calc_req_cond-conditionquantityunit =
      lwa_ebdr_data-quantityunit.
      lwa_condition_data-precedingdocumentitem = ls_calc_req_cond-precedingdocumentitem =
      lv_kposn.
      lwa_condition_data-precedingdocument = ls_calc_req_cond-precedingdocument =
      gs_clrqdoc_infocus-x-crhdr-xrfdn.

      APPEND lwa_condition_data TO gt_pbd_conds.
      IF lwa_condition_data-conditionratevalue GE 1000000000.
        CLEAR lwa_condition_data-conditionratevalue. "added by nitin clear only if value is more million
      ENDIF.
      APPEND lwa_condition_data TO lt_condition_data.
      APPEND ls_calc_req_cond TO gt_calc_req_cond.
    ENDLOOP.

    CLEAR gs_variables-sel_vgpos.
    gs_variables-sel_vgpos = <lv_vgpos>.
    PERFORM prepare_partner_data01 USING '3'.

    LOOP AT gt_x_vbpa INTO lwa_vbpa WHERE posnr = <lv_vgpos>.
      lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
      lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
      lwa_bdr_ptr-partnerfunction = lwa_vbpa-parvw.
      CASE lwa_vbpa-nrart.
        WHEN 'KU'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-kunnr.
        WHEN 'LF'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-lifnr.
        WHEN 'PE'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-pernr.
      ENDCASE.
*      APPEND lwa_bdr_ptr TO lt_bdr_ptr.
    ENDLOOP.

    LOOP AT gt_x_vbpa INTO lwa_vbpa WHERE posnr = gc_posnr_low.
      lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
      lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
      lwa_bdr_ptr-partnerfunction = lwa_vbpa-parvw.
      CASE lwa_vbpa-nrart.
        WHEN 'KU'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-kunnr.
        WHEN 'LF'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-lifnr.
        WHEN 'PE'.
          lwa_bdr_ptr-partnernumber = lwa_vbpa-pernr.
      ENDCASE.
*      APPEND lwa_bdr_ptr TO lt_bdr_ptr.
    ENDLOOP.


*    lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
*    lwa_bdr_ptr-partnerfunction = gc_partner_func-sold_to_party.
*    lwa_bdr_ptr-partnernumber = gs_clrqdoc_infocus-x-crhdr-kunnr.
*    lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
*    lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
*    APPEND lwa_bdr_ptr TO lt_bdr_ptr.
*
*    lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
*    lwa_bdr_ptr-partnerfunction = gc_partner_func-ship_to_party.
*    lwa_bdr_ptr-partnernumber = gs_clrqdoc_infocus-x-crhdr-kunnr.
*    lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
*    APPEND lwa_bdr_ptr TO lt_bdr_ptr.
*
*    lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
*    lwa_bdr_ptr-partnerfunction = gc_partner_func-bill_to_party.
*    lwa_bdr_ptr-partnernumber = gs_clrqdoc_infocus-x-crhdr-kunnr.
*    lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
*    APPEND lwa_bdr_ptr TO lt_bdr_ptr.


  ENDLOOP.

*  PERFORM prepare_partner_data01 USING space.
*  LOOP AT gt_x_vbpa INTO lwa_vbpa WHERE posnr = gc_posnr_low.
*    lwa_bdr_ptr-precedingdocument = gs_clrqdoc_infocus-x-crhdr-xrfdn.
**    lwa_bdr_ptr-precedingdocumentitem = lv_kposn.
*    lwa_bdr_ptr-partnerfunction = lwa_vbpa-parvw.
*    CASE lwa_vbpa-nrart.
*      WHEN 'KU'.
*        lwa_bdr_ptr-partnernumber = lwa_vbpa-kunnr.
*      WHEN 'LF'.
*        lwa_bdr_ptr-partnernumber = lwa_vbpa-lifnr.
*      WHEN 'PE'.
*        lwa_bdr_ptr-partnernumber = lwa_vbpa-pernr.
*    ENDCASE.
*    APPEND lwa_bdr_ptr TO lt_bdr_ptr.
*  ENDLOOP.


  ls_administration_data-createdbyuser = sy-uname.
  ls_administration_data-creationdate = sy-datum.
  CONCATENATE sy-sysid TEXT-173 sy-mandt INTO ls_administration_data-senderlogicalsystem.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_ebdr_critm_where_cls
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <LWA_DATA>
*&      --> LT_FIELDS
*&      <-- LV_WHERE
*&---------------------------------------------------------------------*
FORM prep_ebdr_critm_where_cls USING ls_data TYPE data
                                      lt_fields TYPE dfies_table
                                      lv_skip   TYPE flag
                             CHANGING lv_where TYPE string.

  DATA: lv_target_value TYPE string,
        lv_where_temp   TYPE string,
        lt_fields_critm TYPE dfies_table.

  DATA: lwa_fields TYPE dfies.
  FIELD-SYMBOLS: <lv_data> TYPE data.
  FIELD-SYMBOLS : <lv_clrno>     TYPE any,
                  <lv_bill_item> TYPE any.
  CLEAR:lv_where.

  REFRESH: lt_fields_critm.
  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = '/CGDC/_CLRQIT'
      all_types      = abap_true
    TABLES
      dfies_tab      = lt_fields_critm
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
  ENDIF.

  ASSIGN COMPONENT 'CLRNO' OF STRUCTURE ls_data TO <lv_clrno>.
  ASSIGN COMPONENT 'BILL_ITEM' OF STRUCTURE ls_data TO <lv_bill_item>.
  CONCATENATE `CLRNO = '` <lv_clrno> `' AND RTBBINR = '` <lv_bill_item> `'` INTO lv_where.

ENDFORM.
FORM prep_calc_req_subitm_dta.
  DATA: lt_itemkey  TYPE /cgdc/tt_clrqit_key,
        lwa_itemkey LIKE LINE OF lt_itemkey.
  DATA: lt_cond TYPE TABLE OF /cgdc/s_clrqcn.
  DATA: lwa_cond TYPE  /cgdc/s_clrqcn.
  IF gs_variables-subitem_infocus IS NOT INITIAL.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_variables-subitem_infocus
      IMPORTING
        output = gs_variables-subitem_infocus.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_variables-delta_infocus
      IMPORTING
        output = gs_variables-delta_infocus.

    CLEAR : gt_subitm_condn.
    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_cond WHERE clrit = gs_variables-item_infocus
                                                          AND clrsit = gs_variables-subitem_infocus
                                                          AND clrdit = gs_variables-delta_infocus.
      APPEND lwa_cond TO gt_subitm_condn.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM prep_calc_req_subitm_dtl_dta.
  DATA: lt_clrit    TYPE /cgdc/tt_clrqit,
        lwa_clrit   TYPE /cgdc/s_clrqit,
        lwa_subitms TYPE /cgdc/s_clrqit_fcat.
  DATA: lt_itemkey  TYPE /cgdc/tt_clrqit_key,
        lwa_itemkey LIKE LINE OF lt_itemkey.
  CLEAR : gt_item_subitem.
  IF  gs_variables-item_infocus IS NOT INITIAL .
    LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_clrit WHERE clrit = gs_variables-item_infocus.
      IF lwa_clrit-clrsit <> '000000'.
        MOVE-CORRESPONDING lwa_clrit TO lwa_subitms.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lwa_subitms-clrsit
          IMPORTING
            output = lwa_subitms-clrsit.
        IF sy-subrc <> 0.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lwa_subitms-clrdit
          IMPORTING
            output = lwa_subitms-clrdit.
        IF sy-subrc <> 0.
        ENDIF.

        "update billing status
        READ TABLE gs_clrqdoc_infocus-x-crbinr
        ASSIGNING FIELD-SYMBOL(<fs_crbinr>)
        WITH KEY clrno     = lwa_clrit-clrno
                 bill_item = lwa_clrit-rtbbinr
                 bitype    = lwa_clrit-bityp.
        IF sy-subrc = 0.
          lwa_subitms-bstat = <fs_crbinr>-bstat.
        ENDIF.
        IF gs_variables-show_rsncd_items IS NOT INITIAL.
          IF ( lwa_clrit-istat =  'P' OR lwa_clrit-istat = 'R' ) AND
          lwa_clrit-rsncd IS NOT INITIAL.
            APPEND lwa_subitms TO gt_item_subitem.
          ELSE.
            CONTINUE.
          ENDIF.
        ELSE.
          APPEND lwa_subitms TO gt_item_subitem.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM prepare_clrqhd_prc_data.
  SELECT h~*
  FROM /cgdc/_clrqhd AS h
  INNER JOIN /cgdc/_clrqpcn AS /cgdc/_clrqpcn ON h~vgbel = /cgdc/_clrqpcn~vbeln
  INNER JOIN vbak AS vbak ON h~vgbel = vbak~vbeln
  INTO CORRESPONDING FIELDS OF TABLE @gt_calc_hd_reprice
  WHERE h~clrno IN @so_vbeln[]
  AND  h~clrqt IN @so_crtyp[]
  AND vbak~auart IN @so_auart[]
  AND h~vgbel IN @so_conno[].
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_bill_hist_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_bill_hist_data .
  DATA: lwa_bill_hist_fcat       TYPE /cgdc/s_clrq_bill_hist_fcat,
        lt_bill_hist_fcat        LIKE gt_bill_hist_fcat,
        lv_next_doc,
        lt_vbrk                  TYPE TABLE OF vbrk,
        lwa_vbrk                 TYPE vbrk,
        lt_bill_hist             TYPE /cgdc/tt_clrqdf,
        lt_bill_hist_temp        TYPE /cgdc/tt_clrqdf,
        lt_bill_hist_sb_docs     TYPE /cgdc/tt_clrqdf,
        lt_bill_hist_sb_set      TYPE /cgdc/tt_clrqdf,
        lwa_bill_hist            TYPE /cgdc/s_clrqdf,
        lwa_bill_hist_sb_dc      TYPE /cgdc/s_clrqdf,
        lwa_bill_hist_sb_dc_temp TYPE /cgdc/s_clrqdf.

  FIELD-SYMBOLS : <lwa_bill_hist> TYPE /cgdc/s_clrq_bill_hist_fcat.
  READ TABLE gt_bill_hist_fcat INTO lwa_bill_hist_fcat
  WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

  CHECK lwa_bill_hist_fcat IS INITIAL.
  CLEAR: gt_bill_hist_fcat.
  IF gs_clrqdoc_infocus-x-crdfl IS INITIAL.
    SELECT * FROM /cgdc/_clrqdf
      INTO CORRESPONDING FIELDS OF TABLE gs_clrqdoc_infocus-x-crdfl
      WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  ENDIF.
  SORT gs_clrqdoc_infocus-x-crdfl BY clrno sbdct sbqdc.
  lt_bill_hist_temp = gs_clrqdoc_infocus-x-crdfl.
  DELETE ADJACENT DUPLICATES FROM lt_bill_hist_temp COMPARING clrno sbqty sbqdc.
  lt_bill_hist = gs_clrqdoc_infocus-x-crdfl.
  SORT lt_bill_hist_temp BY erdat erzet.
  SORT lt_bill_hist BY  prcdc sbqdc.
  DELETE ADJACENT DUPLICATES FROM lt_bill_hist COMPARING prcdc sbqdc.

  LOOP AT lt_bill_hist_temp INTO lwa_bill_hist
    WHERE prcdc IS INITIAL.

    MOVE-CORRESPONDING lwa_bill_hist TO lwa_bill_hist_fcat.
    lwa_bill_hist_fcat-icon = '@9T@'.
    APPEND lwa_bill_hist_fcat TO gt_bill_hist_fcat.


    PERFORM prep_calc_rq_dfl USING lwa_bill_hist
                                   lt_bill_hist
                          CHANGING gt_bill_hist_fcat.

  ENDLOOP.
  SELECT * FROM vbrk
    INTO TABLE lt_vbrk
    FOR ALL ENTRIES IN gt_bill_hist_fcat
    WHERE vbeln = gt_bill_hist_fcat-sbqdc
      AND fkart = gt_bill_hist_fcat-sbqty.

  LOOP AT gt_bill_hist_fcat ASSIGNING <lwa_bill_hist>.
    READ TABLE lt_vbrk INTO lwa_vbrk
    WITH KEY vbeln = <lwa_bill_hist>-sbqdc
             fkart = <lwa_bill_hist>-sbqty.

    <lwa_bill_hist>-netwr = lwa_vbrk-netwr.
  ENDLOOP.

  SORT gt_bill_hist_fcat BY erdat erzet DESCENDING.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_calc_rq_dfl
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_BILL_HIST
*&      --> LT_BILL_HIST
*&      <-- GT_BILL_HIST_FCAT
*&---------------------------------------------------------------------*
FORM prep_calc_rq_dfl  USING ls_bill_hist TYPE /cgdc/s_clrqdf
                             lt_bill_hist TYPE /cgdc/tt_clrqdf
                    CHANGING gt_bill_hist_fcat TYPE /cgdc/tt_clrq_bill_hist_fcat.

  DATA: lwa_bill_hist      TYPE /cgdc/s_clrqdf,
        lwa_bill_hist_temp TYPE /cgdc/s_clrqdf,
        lwa_bill_hist_fcat TYPE /cgdc/s_clrq_bill_hist_fcat.

  READ TABLE lt_bill_hist INTO lwa_bill_hist
  WITH KEY prcdc = ls_bill_hist-sbqdc.
  IF sy-subrc = 0.

    LOOP AT lt_bill_hist INTO lwa_bill_hist FROM sy-tabix.
      IF ls_bill_hist-sbqdc NE lwa_bill_hist-prcdc .
        EXIT.
      ENDIF.
      IF lwa_bill_hist_temp-sbqdc NE lwa_bill_hist-sbqdc.
        MOVE-CORRESPONDING lwa_bill_hist TO lwa_bill_hist_fcat.
        lwa_bill_hist_fcat-icon = '@9T@'.
        APPEND lwa_bill_hist_fcat TO gt_bill_hist_fcat.
        lwa_bill_hist_temp = lwa_bill_hist.

        PERFORM prep_calc_rq_dfl  USING lwa_bill_hist
                                        lt_bill_hist
                               CHANGING gt_bill_hist_fcat .

      ENDIF.
    ENDLOOP.

  ENDIF.

ENDFORM.
FORM prepare_fcat_reprice CHANGING lt_fcat TYPE lvc_t_fcat.

  DATA: lwa_fcat  TYPE lvc_s_fcat,
        lv_colpos TYPE lvc_colpos.
  lwa_fcat-fieldname = gc_fieldname-cntno.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l =  TEXT-011.
  lwa_fcat-coltext = TEXT-011.
  lwa_fcat-scrtext_m = TEXT-011.
  lwa_fcat-scrtext_s = TEXT-174.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-auart.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-175.
  lwa_fcat-coltext =  TEXT-175.
  lwa_fcat-scrtext_m = TEXT-175.
  lwa_fcat-scrtext_s = TEXT-176.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-clrno.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-177.
  lwa_fcat-coltext =  TEXT-177.
  lwa_fcat-do_sum = abap_true.
  lwa_fcat-scrtext_m = TEXT-178.
  lwa_fcat-scrtext_s =  TEXT-179.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-clrqt.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-010.
  lwa_fcat-coltext = TEXT-010.
  lwa_fcat-scrtext_m = TEXT-185.
  lwa_fcat-scrtext_s = TEXT-186.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-rtbpn.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-180.
  lwa_fcat-coltext = TEXT-180.
  lwa_fcat-scrtext_m = TEXT-180.
  lwa_fcat-scrtext_s = TEXT-181.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-erdat.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-182.
  lwa_fcat-coltext = TEXT-182.
  lwa_fcat-scrtext_m = TEXT-182.
  lwa_fcat-scrtext_s = TEXT-182.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-erzet.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-scrtext_l = TEXT-183.
  lwa_fcat-coltext = TEXT-183.
  lwa_fcat-scrtext_m = TEXT-183.
  lwa_fcat-scrtext_s = TEXT-183.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.

  lwa_fcat-fieldname = gc_fieldname-ernam.
  lwa_fcat-col_pos = lv_colpos + 1.
  lwa_fcat-coltext = TEXT-184.
  lwa_fcat-scrtext_m = TEXT-184.
  lwa_fcat-scrtext_s = TEXT-184.
  APPEND lwa_fcat TO lt_fcat.
  CLEAR lwa_fcat.
ENDFORM.

FORM prep_postpone_data.
  CLEAR : gt_item_postponed_fcat.
  DATA: lwa_style TYPE lvc_s_styl.
  DATA: lwa_data TYPE /cgdc/s_clrq_postpone.
  LOOP AT gt_item_postponed INTO lwa_data WHERE psdat IS NOT INITIAL AND clrit = gs_variables-item_infocus AND postp_qty IS NOT INITIAL.
    IF lwa_data-psdat < sy-datum.
      lwa_style-style = cl_gui_alv_grid=>mc_style_disabled.
    ELSE.
      lwa_style-style = cl_gui_alv_grid=>mc_style_enabled.
    ENDIF.
    lwa_style-fieldname = 'POSTP_AMT'.
    APPEND lwa_style TO lwa_data-style.
    lwa_style-fieldname = 'POSTP_QTY'.
    APPEND lwa_style TO lwa_data-style.
    lwa_style-style = cl_gui_alv_grid=>mc_style_disabled.
    lwa_style-fieldname = 'PSDAT'.
    APPEND lwa_style TO lwa_data-style.
    APPEND lwa_data TO gt_item_postponed_fcat.
  ENDLOOP.

  DO 5 TIMES.
    CLEAR : lwa_data.
    lwa_data-clrit = gs_variables-item_infocus.
    lwa_style-style = cl_gui_alv_grid=>mc_style_enabled.
    lwa_style-fieldname = 'POSTP_AMT'.
    APPEND lwa_style TO lwa_data-style.
    lwa_style-fieldname = 'POSTP_QTY'.
    APPEND lwa_style TO lwa_data-style.
    lwa_style-fieldname = 'PSDAT'.
    APPEND lwa_style TO lwa_data-style.
    APPEND lwa_data TO gt_item_postponed_fcat.
  ENDDO.
ENDFORM.
FORM postpone_reject_data CHANGING lv_success TYPE flag.
  DATA: lt_sel_rows TYPE lvc_t_row.
  DATA: lv_cont           TYPE flag,
        lv_grid_index     TYPE sytabix VALUE IS INITIAL,
        lwa_sel_rows      TYPE lvc_s_row,
        lwa_postpone_fcat TYPE /cgdc/s_clrq_postpone,
        lwa_calc_req_itm  TYPE /cgdc/s_clrqit_fcat.
  DATA: lv_temp_qty TYPE dzmeng,
        lv_diff_qty TYPE dzmeng.
  DATA: lt_t006  TYPE TABLE OF t006,
        lwa_t006 TYPE t006.
  DATA : lv_valid TYPE c.

  go_grid_calc_req_items->get_selected_rows( IMPORTING et_index_rows = lt_sel_rows ).

  IF go_postpone_grid IS BOUND.
    PERFORM validate_postpone_alv CHANGING lv_valid.
    CHECK lv_valid IS INITIAL.
  ENDIF.
  SELECT *
    FROM t006
    INTO TABLE lt_t006
    FOR ALL ENTRIES IN gt_calc_req_items_fcat
    WHERE msehi = gt_calc_req_items_fcat-zieme.
  LOOP AT lt_sel_rows INTO lwa_sel_rows.
    LOOP AT gt_item_postponed_fcat INTO lwa_postpone_fcat.
      IF NOT (  lwa_postpone_fcat-postp_amt IS INITIAL
          AND lwa_postpone_fcat-postp_qty IS INITIAL
          AND lwa_postpone_fcat-psdat IS INITIAL
          AND lwa_postpone_fcat-rej_amt IS INITIAL
          AND lwa_postpone_fcat-rej_qty IS INITIAL
          AND ( gs_variables-itm_post_amt_un IS NOT INITIAL
           OR gs_variables-itm_post_quan_un IS NOT INITIAL ) ).
        READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_itm INDEX lwa_sel_rows-index.
        IF sy-subrc = 0.
          IF gs_variables-itm_post_quan IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
            lv_temp_qty = lwa_postpone_fcat-postp_qty.
            READ TABLE lt_t006 INTO lwa_t006 WITH KEY msehi = lwa_calc_req_itm-zieme BINARY SEARCH.
            IF sy-subrc = 0.
              CALL FUNCTION 'ROUND'
                EXPORTING
                  decimals      = lwa_t006-decan
                  input         = lwa_postpone_fcat-postp_qty
                IMPORTING
                  output        = lwa_postpone_fcat-postp_qty
                EXCEPTIONS
                  input_invalid = 1
                  overflow      = 2
                  type_invalid  = 3
                  OTHERS        = 4.
              IF sy-subrc <> 0.
              ENDIF.
              lv_diff_qty = lwa_postpone_fcat-postp_qty - lv_temp_qty.
            ENDIF.
          ENDIF.

          lwa_postpone_fcat-clrit = lwa_calc_req_itm-clrit.

*//populate the reason codes to postpone and reject
          IF lwa_postpone_fcat-rsncd IS INITIAL.
            lwa_postpone_fcat-rsncd = /cgdc/s_clrq_screenfields-rsncd.
          ENDIF.

          PERFORM create_post_rej_line3 CHANGING lwa_calc_req_itm
                                                          lwa_postpone_fcat.

          IF gs_variables-itm_post_quan IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
            lwa_postpone_fcat-postp_qty = lwa_postpone_fcat-postp_qty + lv_temp_qty.
          ENDIF.
          CLEAR lv_temp_qty.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
  lv_success = abap_true.
ENDFORM.

FORM popup_to_confirm_for_on_demand  USING    lv_titlebar
                                   lv_question
                                   VALUE(lv_btn1_txt)
                                   VALUE(lv_icon1)
                                   VALUE(lv_btn2_txt)
                                   VALUE(lv_icon2)
                                   lv_disp_canc
                          CHANGING lv_answer.

  DATA: lv_icon_1 TYPE iconname,
        lv_icon_2 TYPE iconname.

  CLEAR: lv_icon_1, lv_icon_2.

  lv_icon_1 = lv_icon1.

  lv_icon_2 = lv_icon2.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = lv_titlebar
      text_question         = lv_question
      text_button_1         = lv_btn1_txt
      icon_button_1         = lv_icon_1
      text_button_2         = lv_btn2_txt
      icon_button_2         = lv_icon_2
      display_cancel_button = lv_disp_canc
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM update_calc_req USING lv_vbeln TYPE vbeln_va.
  TYPES: lty_params    TYPE RANGE OF vbeln_va.
  DATA: lv_ques(100) TYPE c,
        lv_msg       TYPE string,
        lv_params    TYPE lty_params,
        lv_ans       TYPE c.

  IF gs_variables-trfc_lght = 'Y'.
    CLEAR: lv_ques, lv_ans,
           lv_msg.
    WRITE gs_variables-mis_itm_count TO lv_ques.
    CONDENSE lv_ques.
    CONCATENATE lv_ques TEXT-053 TEXT-058 INTO lv_msg SEPARATED BY space.
    PERFORM popup_to_confirm_for_on_demand USING TEXT-052
                                                 lv_msg
                                                 TEXT-063
                                                 space
                                                 TEXT-064
                                                 space
                                                 abap_true
                                           CHANGING lv_ans.
    IF sy-subrc EQ 0.
      CASE lv_ans.
        WHEN '1'.
          CLEAR: gs_variables-total_count.
          gs_variables-total_count = gs_variables-mis_itm_count.

          lv_params = VALUE lty_params( ( sign = 'I' option = 'EQ' low = lv_vbeln ) ).
          SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                                    WITH r_crt    = abap_true
                                    WITH p_parall = abap_true
                                    WITH p_noprc  = abap_true
                                    AND RETURN.
          IF sy-subrc EQ 0.
            COMMIT WORK AND WAIT.
          ENDIF.

          CLEAR gs_variables-max_on_dmd_excd.
          gs_variables-max_on_dmd_excd = 'Y'.
        WHEN '2'.
          PERFORM update_calc_req_background USING lv_vbeln.
        WHEN OTHERS.
          "No action required
      ENDCASE.
    ENDIF.
  ELSEIF gs_variables-trfc_lght = 'O'.
    CLEAR: lv_ques, lv_ans,
           lv_msg.
    WRITE gs_variables-mis_itm_count TO lv_ques.
    CONDENSE lv_ques.
    CONCATENATE lv_ques TEXT-057 TEXT-059 INTO lv_msg SEPARATED BY space.
    PERFORM popup_to_confirm_for_on_demand USING TEXT-052
                                                 lv_msg
                                                 'Yes'
                                                 'ICON_CHECKED'
                                                 'No'
                                                 'ICON_CANCEL'
                                                 abap_true
                                           CHANGING lv_ans.
    IF sy-subrc EQ 0.
      CASE lv_ans.
        WHEN '1'.
          PERFORM update_calc_req_background USING lv_vbeln.
        WHEN OTHERS.
          "No action required.
      ENDCASE.
    ENDIF.
  ENDIF.
ENDFORM.
FORM prepare_itmty_dd USING o_grid TYPE REF TO cl_gui_alv_grid.
  DATA: lt_dropdown      TYPE TABLE OF lvc_s_dral,
        lwa_dropdown     TYPE lvc_s_dral,
        lt_domain_value  TYPE TABLE OF dd07v,
        lwa_domain_value TYPE dd07v.
  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      domname         = '/CGDC/CLRQ_ITEM_TYPE'
    TABLES
      values_tab      = lt_domain_value[]
    EXCEPTIONS
      no_values_found = 1
      OTHERS          = 2.
  IF sy-subrc = 0.
    LOOP AT lt_domain_value INTO lwa_domain_value WHERE ddlanguage = sy-langu.
      lwa_dropdown-handle = 1.
      lwa_dropdown-value = lwa_domain_value-ddtext.
      APPEND lwa_dropdown TO lt_dropdown.
    ENDLOOP.
  ENDIF.

  o_grid->set_drop_down_table( EXPORTING it_drop_down_alias = lt_dropdown ).
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_calc_group_item_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LT_KONP
*&---------------------------------------------------------------------*
FORM prep_calc_group_item_data  USING lt_konp TYPE konp_t
                                      ls_calc_grp TYPE /cgdc/s_rtbpcg.
  DATA: lwa_konp         TYPE konp,
        lwa_t685         TYPE t685,
        lt_t682i         TYPE t682i_t,
        lwa_t682i        TYPE t682i,
        ls_clrqit        TYPE /cgdc/s_clrqit_fcat,
        lwa_clrq_itm_old TYPE /cgdc/s_clrqit,
        lv_tabname       TYPE tabname,
        lref_atab_data   TYPE REF TO data.
  DATA: lt_tbl_flds          TYPE TABLE OF dd03l,
        lwa_tbl_fld          TYPE dd03l,
        lt_clrqgrr           TYPE TABLE OF /cgdc/s_clrqgrr,
        lt_clritkey          TYPE /cgdc/tt_clrqit_key,
        lwa_clritkey         TYPE /cgdc/s_clrqit_key,
        lt_clrqit            TYPE /cgdc/tt_clrqit,
        lwa_critm            TYPE /cgdc/s_clrqit,
        lt_critm_drv         TYPE /cgdc/tt_clrqit,
        lt_crptr_itm         TYPE /cgdc/tt_clrqpt,
        lt_crcon_itm         TYPE /cgdc/tt_clrqcn,
        lv_one_qty_amt       TYPE netwr_ap,
        lwa_clr_item_open    TYPE /cgdc/s_clrqit,
        lwa_clrq_itm_new     TYPE /cgdc/s_clrqit_fcat,
        lwa_item_old         TYPE /cgdc/s_clrqit,
        lt_clrqgrrf          TYPE TABLE OF /cgdc/s_clrqgrrf,
        lv_subrc             TYPE sy-subrc,
        lwa_clrqgrrf         TYPE /cgdc/s_clrqgrrf,
        lt_clrqgrrf_temp     TYPE /cgdc/tt_clrqgrrf,
        lv_kwert             TYPE kwert,
        lwa_contract_funding LIKE LINE OF gt_contract_funding,
        lwa_bpit_per_posnr   LIKE LINE OF gt_pbp_bpit_per_posnr,
        lwa_clrqgrr          TYPE /cgdc/s_clrqgrr,
        lv_where_grp         TYPE string,
        lv_concat            TYPE string.
  DATA: lt_s_clrqit TYPE /cgdc/tt_clrqit.

  DATA: lt_rtbpcgt  TYPE TABLE OF /cgdc/t_rtbpcgt,
        lt_prps     TYPE TABLE OF prps,
        lwa_prps    TYPE prps,
        lwa_vbap    TYPE vbap,
        lwa_rtbpcgt TYPE /cgdc/t_rtbpcgt,
        lv_tabix    TYPE posnr.
  FIELD-SYMBOLS: <lwa_crgrr> TYPE /cgdc/s_clrqgrr.
  FIELD-SYMBOLS: <lv_value>    TYPE any,
                 <lwa_clrqgrr> TYPE /cgdc/s_clrqgrr.
  FIELD-SYMBOLS: <ls_axxx_data> TYPE any.

  FIELD-SYMBOLS : <lwa_clrit_sub> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrit_item> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrit_delta> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrcn_old> TYPE /cgdc/s_clrqcn.
  FIELD-SYMBOLS : <lwa_clrcn_delta> TYPE /cgdc/s_clrqcn.


  IF gt_header_fields IS INITIAL.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = '/CGDC/_CLRQHD'
      TABLES
        dfies_tab      = gt_header_fields
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  IF gt_item_fields IS INITIAL.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = '/CGDC/_CLRQIT'
      TABLES
        dfies_tab      = gt_item_fields
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  IF gt_itemc_fields IS INITIAL.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = '/CGDC/_CLRQIC'
      TABLES
        dfies_tab      = gt_itemc_fields
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  IF ls_calc_grp-bsmth = 'A'.
    LOOP AT lt_konp INTO lwa_konp
      WHERE kschl = ls_calc_grp-kschl_base
        AND loevm_ko IS INITIAL.

      gv_index = gv_index + 1.
      CLEAR: lt_clrqgrrf_temp.

      CLEAR lwa_clrqgrr.

      READ TABLE gs_clrqdoc_infocus-x-crgrr
      INTO lwa_clrqgrr
      WITH KEY clgrp_knumh = lwa_konp-knumh
               clgrn = ls_calc_grp-clgrn.

      lv_subrc = sy-subrc.

      IF lv_subrc = 0 .
        CONTINUE.
      ENDIF.

      CLEAR:lwa_t685.
      SELECT SINGLE * FROM t685
        INTO lwa_t685
        WHERE kappl = 'V'
          AND kvewe = 'A'
        AND kschl = lwa_konp-kschl.

      CHECK lwa_t685-kozgf IS NOT INITIAL.
      CLEAR:lt_t682i.

      SELECT * FROM t682i
        INTO TABLE lt_t682i
        WHERE kappl = 'V'
          AND kvewe = 'A'
          AND kozgf = lwa_t685-kozgf.


      LOOP AT lt_t682i INTO lwa_t682i.
        CONCATENATE 'A' lwa_t682i-kotabnr INTO lv_tabname.
        FREE lref_atab_data.

        CREATE DATA lref_atab_data TYPE (lv_tabname).
        ASSIGN lref_atab_data->* TO <ls_axxx_data>.

        SELECT SINGLE * FROM (lv_tabname)
          INTO CORRESPONDING FIELDS OF <ls_axxx_data>
          WHERE knumh = lwa_konp-knumh.
        IF sy-subrc = 0.
          SELECT *
            FROM dd03l
            INTO TABLE lt_tbl_flds
            WHERE tabname = lv_tabname.
          EXIT.
        ENDIF.
      ENDLOOP.

      CLEAR: ls_clrqit.
      IF <ls_axxx_data> IS ASSIGNED.
        IF <ls_axxx_data> IS NOT INITIAL
          AND lwa_clrqgrr IS INITIAL.

          MOVE-CORRESPONDING <ls_axxx_data> TO lwa_clrqgrr.
          lwa_clrqgrr-rowid = gv_index.
          lwa_clrqgrr-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
          lwa_clrqgrr-clgrn = ls_calc_grp-clgrn.
          lwa_clrqgrr-clgrp_knumh = lwa_konp-knumh.
          lwa_clrqgrr-clgrp_kolnr = lwa_t682i-kolnr.
          lwa_clrqgrr-clgrp_kotabnr = lwa_t682i-kotabnr.
          lwa_clrqgrr-clgrp_kschl = lwa_konp-kschl.

          APPEND lwa_clrqgrr TO gs_clrqdoc_infocus-x-crgrr.

          CONCATENATE 'a~CLRNO' ` = '` gs_clrqdoc_infocus-clrno  `' ` INTO lv_concat .
          IF lv_concat IS NOT INITIAL.
            lv_where_grp =  | { lv_concat } |.
          ENDIF.

          LOOP AT lt_tbl_flds INTO lwa_tbl_fld
            WHERE keyflag IS NOT INITIAL
            OR fieldname = 'DATAB'.
            CHECK lwa_tbl_fld-fieldname NE 'MANDT'
              AND lwa_tbl_fld-fieldname NE 'KAPPL'
              AND lwa_tbl_fld-fieldname NE 'KSCHL'
              AND lwa_tbl_fld-fieldname NE 'KFRST'
              .

            CLEAR lwa_clrqgrrf.
            MOVE-CORRESPONDING lwa_clrqgrr TO lwa_clrqgrrf.
            ASSIGN COMPONENT lwa_tbl_fld-fieldname OF STRUCTURE <ls_axxx_data> TO <lv_value>.
            IF <lv_value> IS ASSIGNED.
              lwa_clrqgrrf-fname = lwa_tbl_fld-fieldname.
              lwa_clrqgrrf-fvalue = <lv_value>.

              IF lwa_clrqgrrf-fname = 'POSNR'.
                CONCATENATE 'b~' 'VGPOS' ` = '`  lwa_clrqgrrf-fvalue `' ` INTO lv_concat .
                lwa_clrqgrrf-fname = 'CNTIT'.
*                lwa_clrqgrrf-fcatg = 'IT'.
              ENDIF.

              READ TABLE gt_item_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = lwa_tbl_fld-fieldname.
              IF sy-subrc = 0.

                lwa_clrqgrrf-fcatg = 'IT'.
                CONCATENATE 'b~' lwa_clrqgrrf-fname ` = '`  lwa_clrqgrrf-fvalue `' ` INTO lv_concat .

              ELSE.

                READ TABLE gt_header_fields
                TRANSPORTING NO FIELDS
                WITH KEY fieldname = lwa_tbl_fld-fieldname.

                IF sy-subrc = 0.

                  lwa_clrqgrrf-fcatg = 'HD'.
                  CONCATENATE 'a~' lwa_clrqgrrf-fname ` = '`  lwa_clrqgrrf-fvalue `' ` INTO lv_concat.
***DCLM 6686
                ELSE.

                  CASE lwa_clrqgrrf-fname.
                    WHEN '/CGDC/DEFIN'.
                      lwa_clrqgrrf-fcatg = 'IT'.
                  ENDCASE.
***
                ENDIF.

              ENDIF.

              IF lwa_clrqgrrf-fname = 'VBELN'.
                CONCATENATE 'b~' 'VGBEL' ` = '`  lwa_clrqgrrf-fvalue `' ` INTO lv_concat .
              ENDIF.

              APPEND lwa_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
              APPEND lwa_clrqgrrf TO lt_clrqgrrf_temp.

              IF lv_where_grp IS INITIAL AND lv_concat IS NOT INITIAL.
                lv_where_grp =  | { lv_concat } |.
              ELSEIF lv_concat IS NOT INITIAL.
                lv_where_grp =  | { lv_where_grp } | & |AND| & | { lv_concat } |.
              ENDIF.

              IF lwa_clrqgrrf-fname = 'CNTIT'.

                lwa_clrqgrrf-fname = '/CGDC/ORGI'.
                lwa_clrqgrrf-fcatg = 'IT'.

                CONCATENATE lwa_clrqgrrf-fname ` = '`  lwa_clrqgrrf-fvalue `' ` INTO lv_concat .
                IF lv_where_grp IS INITIAL AND lv_concat IS NOT INITIAL.
                  lv_where_grp =  | { lv_concat } |.
                ELSEIF lv_concat IS NOT INITIAL.
                  lv_where_grp =  | { lv_where_grp } | & |AND| & | { lv_concat } |.
                ENDIF.

                APPEND lwa_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
                APPEND lwa_clrqgrrf TO lt_clrqgrrf_temp.
              ENDIF.

              UNASSIGN <lv_value>.
            ENDIF.
          ENDLOOP.
          PERFORM subgroup_data USING lwa_clrqgrr lv_where_grp lt_clrqgrrf_temp
                    CHANGING lt_s_clrqit.
          CLEAR:lv_concat, lv_where_grp.
        ENDIF.
      ENDIF.

      IF lt_clrqgrrf_temp IS INITIAL.
        LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_clrqgrrf
          WHERE clgrp_knumh =  lwa_clrqgrr-clgrp_knumh
            AND rowid = lwa_clrqgrr-rowid.   "lpriyanka
          APPEND lwa_clrqgrrf TO lt_clrqgrrf_temp.
        ENDLOOP.
      ENDIF.
      gt_crgrrf = lt_clrqgrrf_temp.
      gs_crgrr = lwa_clrqgrr.

    ENDLOOP.
***DCLM 5764
  ELSEIF ls_calc_grp-bsmth = 'C'.

    PERFORM create_cgitm_for_scheditm_base USING ls_calc_grp.
***
  ENDIF.

  IF gs_clrqdoc_infocus-x-crgrr IS NOT INITIAL.
    SELECT a~*
   FROM /cgdc/t_rtbpcgt AS a  INNER JOIN /cgdc/t_asgncg AS b
    ON  a~clgrn = b~clgrn
   INTO TABLE @lt_rtbpcgt
   FOR ALL ENTRIES IN @gs_clrqdoc_infocus-x-crgrr
   WHERE b~rtbpn = @gs_rtbp-rtbpn
     AND a~clgrn = @gs_clrqdoc_infocus-x-crgrr-clgrn
     AND a~spras = @sy-langu.

    LOOP AT gs_clrqdoc_infocus-x-crgrr ASSIGNING <lwa_crgrr>.
      READ TABLE lt_rtbpcgt INTO lwa_rtbpcgt
      WITH KEY clgrn = <lwa_crgrr>-clgrn.
      IF sy-subrc = 0 .
        <lwa_crgrr>-descr = lwa_rtbpcgt-descr.
      ENDIF.
      "if distribution is marked for the condition type , send flag x to the CRGRR
      LOOP AT gt_calc_group_fun INTO DATA(ls_cal_fun) WHERE clgrn = <lwa_crgrr>-clgrn AND dist_base IS NOT INITIAL.
        IF ls_cal_fun-dist_base IS NOT INITIAL .
          <lwa_crgrr>-dist_flag = 'X'.
          <lwa_crgrr>-dist_base = ls_cal_fun-dist_base.
          <lwa_crgrr>-dist_method = ls_cal_fun-dist_method.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM prepare_rel_itm_data.
  TYPES: BEGIN OF ty_data,
           matnr TYPE matnr,
         END OF ty_data,

         BEGIN OF ty_fields,
           field TYPE fieldname,
         END OF ty_fields.

  DATA: lt_data1  TYPE TABLE OF ty_data,
        lwa_data1 TYPE ty_data.
  DATA: lt_fieldss  TYPE TABLE OF ty_fields,
        lwa_fieldss TYPE ty_fields.

  lwa_fieldss-field = 'MATNR'.
  APPEND lwa_fieldss TO lt_fieldss.

  lwa_data1-matnr = 'LABOR_A'.
  APPEND lwa_data1 TO lt_data1.

  DATA: lt_range  TYPE RANGE OF string,
        lt_style  TYPE lvc_t_styl,
        lwa_style TYPE lvc_s_styl,
        lwa_range LIKE LINE OF lt_range,
        lwa_critm TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS: <lwa_rel_itm_fcat> TYPE /cgdc/s_rtb_rlease_mit_fcat.
  FIELD-SYMBOLS : <lwa_data>      TYPE any,
                  <lwa_field>     TYPE any,
                  <lv_data_value> TYPE any.
  CONSTANTS: lc_and TYPE c LENGTH 3 VALUE 'AND'.
  CONSTANTS: lc_space TYPE c LENGTH 1 VALUE ' '.
  CONSTANTS: lc_itm2 TYPE c LENGTH 12 VALUE `ITMTY NE '2'`.
  CONSTANTS: lc_itm4 TYPE c LENGTH 12 VALUE `ITMTY EQ '4'`.
  DATA: lv_where TYPE string.
  ASSIGN lt_data1 TO <gt_rel_itm_data>.
  ASSIGN lt_fieldss TO <gt_rel_itm_flds>.
  CLEAR gt_release_item_fcat.
  lwa_style-fieldname = 'NEW_REL'.
  lwa_style-style = cl_gui_alv_grid=>mc_style_enabled.
  APPEND lwa_style TO lt_style.
  LOOP AT <gt_rel_itm_data> ASSIGNING <lwa_data>.
    IF <lwa_data> IS ASSIGNED.
      LOOP AT  <gt_rel_itm_flds> ASSIGNING <lwa_field>.
        CONCATENATE 'CLRNO = ' `'` gs_clrqdoc_infocus-x-crhdr-clrno `' AND CLRSIT NE '000000' AND ` lc_itm2 ` AND ISTAT EQ 'A'` INTO lv_where RESPECTING BLANKS.
        APPEND INITIAL LINE TO gt_release_item_fcat ASSIGNING <lwa_rel_itm_fcat>.
        <lwa_rel_itm_fcat>-style = lt_style[].
        IF <lwa_field> IS ASSIGNED.
          ASSIGN COMPONENT <lwa_field> OF STRUCTURE <lwa_data> TO <lv_data_value>.
          IF <lv_data_value> IS ASSIGNED.
            CONCATENATE <lwa_rel_itm_fcat>-source <lv_data_value> '/' INTO <lwa_rel_itm_fcat>-source.
            CONCATENATE lv_where space lc_and space <lwa_field> space 'EQ' space `'` <lv_data_value> `'` INTO lv_where RESPECTING BLANKS.
            UNASSIGN <lv_data_value>.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
    IF <lwa_rel_itm_fcat> IS ASSIGNED.
      LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm WHERE (lv_where).
        IF lwa_critm-updkz = gc_updkz_new AND lwa_critm-itmty = gc_clrq_itmty-release_item.
          <lwa_rel_itm_fcat>-new_rel = lwa_critm-netwr.
        ENDIF.
      ENDLOOP.
      SELECT SUM( netwr )
        INTO <lwa_rel_itm_fcat>-total_amt
        FROM /cgdc/_clrqit
        WHERE (lv_where).

      REPLACE ALL OCCURRENCES OF lc_itm2 IN lv_where WITH lc_itm4.

      SELECT SUM( netwr )
      INTO <lwa_rel_itm_fcat>-rel_amt
      FROM /cgdc/_clrqit
      WHERE (lv_where).

      <lwa_rel_itm_fcat>-rem_amt = <lwa_rel_itm_fcat>-total_amt - <lwa_rel_itm_fcat>-rel_amt.
      <lwa_rel_itm_fcat>-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.

      UNASSIGN <lwa_rel_itm_fcat>.
    ENDIF.
  ENDLOOP.

ENDFORM.
FORM prep_calc_grp_data.
  DATA: lwa_crgrr     TYPE /cgdc/s_clrqgrr,
        lwa_komv      TYPE komv,
        lwa_crgrrf    TYPE /cgdc/s_clrqgrrf,
        lwa_clgrp_fun TYPE /cgdc/t_rtbpcgf.
  ASSIGN go_calc_grp_data->* TO <gt_calc_grp_data>.
  ASSIGN go_calc_grp_data_page->* TO <gt_calc_grp_data_page>.

  FIELD-SYMBOLS : <lwa>      TYPE any,
                  <lv_value> TYPE any.
  DATA: lv_tabix  TYPE sytabix.
  DATA : lv_clrgn TYPE /cgdc/rtb_clgrn.

  IF <gt_calc_grp_data> IS ASSIGNED.

    CLEAR <gt_calc_grp_data>[].

    LOOP AT gs_clrqdoc_infocus-x-crgrr INTO lwa_crgrr.
      lv_tabix = sy-tabix.
      APPEND INITIAL LINE TO <gt_calc_grp_data> ASSIGNING <lwa>.
      MOVE-CORRESPONDING lwa_crgrr TO <lwa>.
      IF <lwa> IS ASSIGNED.
        ASSIGN COMPONENT 'CLRNO' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_crgrr-clrno.
          UNASSIGN <lv_value>.
        ENDIF.

        ASSIGN COMPONENT 'SRNO' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lv_tabix.
          UNASSIGN <lv_value>.
        ENDIF.

        ASSIGN COMPONENT 'CLRIT' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_crgrr-clrit.
          UNASSIGN <lv_value>.
        ENDIF.

        ASSIGN COMPONENT 'CLRGN' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_crgrr-clgrn.
          UNASSIGN <lv_value>.
        ENDIF.

        ASSIGN COMPONENT 'CLGRP_KNUMH' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_crgrr-clgrp_knumh.
          UNASSIGN <lv_value>.
        ENDIF.

        ASSIGN COMPONENT 'BSAMT' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          READ TABLE gs_clrqdoc_infocus-x-cgrcon INTO lwa_komv
          WITH KEY kposn = lwa_crgrr-rowid
                   kschl = lwa_crgrr-clgrp_kschl.

          <lv_value> = lwa_komv-kwert.
          UNASSIGN <lv_value>.
          CLEAR:lwa_komv.
        ENDIF.

        ASSIGN COMPONENT 'DESCR' OF STRUCTURE <lwa> TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = lwa_crgrr-descr.
          UNASSIGN <lv_value>.
        ENDIF.

        DATA(lv_bsmth) = VALUE #( gt_calc_group[ clgrn = lwa_crgrr-clgrn ]-bsmth OPTIONAL ).
        IF lv_bsmth = 'B'.       "only when Cost funding from contract.
          "Validity From
          ASSIGN COMPONENT 'DATAB' OF STRUCTURE <lwa> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            <lv_value> = gs_vbak-guebg.
            UNASSIGN <lv_value>.
          ENDIF.

          "Validity To
          ASSIGN COMPONENT 'DATBI' OF STRUCTURE <lwa> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            <lv_value> = gs_vbak-gueen.
            UNASSIGN <lv_value>.
          ENDIF.
        ENDIF.

        LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf WHERE clgrn = lwa_crgrr-clgrn
                                                              AND rowid = lwa_crgrr-rowid   "lpriyanka
                                                              AND clgrp_knumh = lwa_crgrr-clgrp_knumh.

          ASSIGN COMPONENT lwa_crgrrf-fname OF STRUCTURE <lwa> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            <lv_value> = lwa_crgrrf-fvalue.
            UNASSIGN <lv_value>.
          ENDIF.

        ENDLOOP.
      ENDIF.
      LOOP AT gt_calc_group_fun INTO lwa_clgrp_fun WHERE clgrn = lwa_crgrr-clgrn
                                                     AND fname IS NOT INITIAL.
        READ TABLE gs_clrqdoc_infocus-x-cgrcon INTO lwa_komv
        WITH KEY kposn = lv_tabix
                 kschl = lwa_clgrp_fun-proc_kschl.
        IF sy-subrc = 0.
          ASSIGN COMPONENT lwa_clgrp_fun-fname OF STRUCTURE <lwa> TO <lv_value>.
          IF <lv_value> IS ASSIGNED.
            <lv_value> = lwa_komv-kwert.
            UNASSIGN <lv_value>.
          ENDIF.

        ENDIF.

      ENDLOOP.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form pricing_calc_grpup
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM pricing_calc_grpup CHANGING lwa_crgrr TYPE /cgdc/s_clrqgrr
                                 ls_komp   TYPE komp
                                 lt_komv   TYPE komv_t.

  DATA:lt_komv_grcon TYPE komv_t.
  DATA:
                      ls_cgrcon TYPE komv.
  DATA: ls_komk                 TYPE komk,
        lv_final_amount         TYPE netwr_ap,
        lv_subrc                TYPE sy-subrc,
        lv_tabix                TYPE sy-tabix,
        lv_offset               TYPE i,
        lv_kstat                TYPE kstat,
        ls_komk_temp            TYPE komk,
        lv_calculation_type(1)  VALUE 'C',
        ls_critm                TYPE /cgdc/s_clrqit,
        lwa_crcon               TYPE /cgdc/s_clrqcn,
        lwa_crcon_pricing       TYPE /cgdc/s_clrqcn,
        ls_kompax               TYPE kompax,
        lwa_konp                TYPE konp,
        lwa_komv                TYPE komv,
        lwa_komv_old            TYPE komv,
        lwa_komv_new            TYPE komv,
        lwa_calc_grp            TYPE /cgdc/t_rtbpcg,
        lwa_crgrrf              TYPE /cgdc/s_clrqgrrf,
        lwa_pbp_eligible_bprqit LIKE LINE OF gt_pbp_eligible_bprqit,
        lt_komv_temp            TYPE komv_tab,
        lwa_cont_item           TYPE vbap,
        lt_komv_old             TYPE komv_tab.

  DATA lwa_return TYPE /cgdc/s_message.

  FIELD-SYMBOLS: <ls_komk_key> TYPE any,
                 <lwa_komv>    TYPE komv,
                 <lv_rowid>    TYPE any,
                 <lv_clrgn>    TYPE any,
                 <lv_value>    TYPE any.


  READ TABLE gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf
  WITH KEY clgrn = lwa_crgrr-clgrn
           clgrp_knumh = lwa_crgrr-clgrp_knumh
           rowid = lwa_crgrr-rowid "lpriyanka
           fname = 'CNTIT'."'POSNR'.

  ASSIGN COMPONENT 'VGPOS' OF STRUCTURE ls_critm TO <lv_value>.

  IF <lv_value> IS ASSIGNED.
    <lv_value> = lwa_crgrrf-fvalue.
    UNASSIGN <lv_value>.
  ENDIF.


  ls_critm-/cgdc/orgi = ls_critm-vgpos.

  CLEAR lwa_cont_item.
  READ TABLE gt_contract_itm INTO lwa_cont_item
  WITH KEY vbeln = gs_contract_hdr-vbeln
           posnr = ls_critm-vgpos.
  IF lwa_cont_item IS NOT INITIAL.
    MOVE-CORRESPONDING lwa_cont_item TO ls_critm.
    ls_critm-vgpos = ls_critm-/cgdc/orgi.
  ENDIF.
  CLEAR:ls_critm-matnr.
  MOVE-CORRESPONDING lwa_crgrr TO ls_critm.
  READ TABLE gt_calc_group INTO lwa_calc_grp
  WITH KEY clgrn = lwa_crgrr-clgrn.

  ls_critm-clgrp_knumh = lwa_crgrr-clgrp_knumh.
  ls_critm-clgrp_kolnr = lwa_crgrr-clgrp_kolnr.
  ls_critm-clgrp_kotabnr = lwa_crgrr-clgrp_kotabnr.
  ls_critm-clgrp_kschl = lwa_crgrr-clgrp_kschl.

*  IF sy-datum > lwa_crgrr-datbi.
*    ls_critm-prsdt = lwa_crgrr-datab.
*    ls_critm-budat = lwa_crgrr-datab.
*  ELSE.
*    ls_critm-prsdt = sy-datum.
*    ls_critm-budat = sy-datum.
*  ENDIF.
  "-- change for Calc grp release to work with Constr. date
  IF gs_variables-rel_constr_dt > lwa_crgrr-datbi.
    ls_critm-prsdt = lwa_crgrr-datab.
    ls_critm-budat = lwa_crgrr-datab.
  ELSE.
    ls_critm-prsdt = gs_variables-rel_constr_dt.
    ls_critm-budat = gs_variables-rel_constr_dt.
  ENDIF.

  IF ls_critm-matnr IS INITIAL.
    ls_critm-matnr = lwa_calc_grp-matnr.
  ENDIF.

  ls_critm-itmty = gc_clrq_itmty-calc_grp_itm.
  ls_critm-clrno = gs_clrqdoc_infocus-clrno.
  IF lwa_crgrr-clrit IS INITIAL .
    ls_critm-clrit = lwa_crgrr-rowid.
  ELSE.
  ENDIF.

  LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf WHERE clgrn = lwa_crgrr-clgrn
                                                        AND rowid = lwa_crgrr-rowid  "lpriyanka
                                                        AND clgrp_knumh = ls_critm-clgrp_knumh
                                                        AND wbsel = lwa_crgrr-wbsel.

    ASSIGN COMPONENT lwa_crgrrf-fname OF STRUCTURE ls_critm TO <lv_value>.
    IF lwa_crgrrf-fname = 'POSNR'.
      ASSIGN COMPONENT 'CNTIT' OF STRUCTURE ls_critm TO <lv_value>.
    ENDIF.
    IF <lv_value> IS ASSIGNED.
      <lv_value> = lwa_crgrrf-fvalue.
      UNASSIGN <lv_value>.
    ENDIF.

  ENDLOOP.

  PERFORM prepare_komk USING ls_critm
                    CHANGING ls_komk.

  READ TABLE gt_calc_group INTO lwa_calc_grp
  WITH KEY kschl_base = ls_critm-clgrp_kschl.

  ls_komk-kalsm = lwa_calc_grp-ckalsm.
  ls_critm-tmpit = lwa_crgrr-rowid.

  PERFORM prepare_pricing_data USING ls_critm
                            CHANGING ls_komk
                                     ls_komp.

  ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ASSIGN COMPONENT 'KEY_UC' OF STRUCTURE ls_komk TO <ls_komk_key>.
  IF sy-subrc EQ 0.
    READ TABLE gt_komk INTO ls_komk_temp WITH KEY ('KEY_UC') = <ls_komk_key>.
  ELSE.
    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <ls_komk_key>.
    IF <ls_komk_key> IS ASSIGNED.
      READ TABLE gt_komk INTO ls_komk_temp  WITH KEY <ls_komk_key>.
    ENDIF.
  ENDIF.

  IF sy-subrc NE 0.
    CLEAR: ls_komk-ix_komt1_v, ls_komk-ix_komt1_b.

    APPEND ls_komk TO gt_komk.
    ls_komk-ix_komk = sy-tabix.
    MODIFY gt_komk FROM ls_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ELSE.
    ls_komk = ls_komk_temp.
  ENDIF.

*****
  ls_komp-aubel = ls_komp-vgbel.
  ls_komp-aupos = ls_komp-vgpos.
****
  ls_komp-ix_komk = ls_komk-ix_komk.
  APPEND ls_komp TO gt_komp.

  CLEAR: lt_komv.

  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
  gs_clrit = ls_critm.
  gs_crgrr = lwa_crgrr.
  CLEAR: gt_crgrrf.
  LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf
    WHERE clgrn = lwa_crgrr-clgrn
      AND rowid = lwa_crgrr-rowid  "lpriyanka
      AND clgrp_knumh = lwa_crgrr-clgrp_knumh
      AND wbsel = lwa_crgrr-wbsel.
    APPEND lwa_crgrrf  TO gt_crgrrf.
  ENDLOOP.

  CLEAR: lwa_komv.
  " Skip value determination for cost funding. Will be processed through Pricing routine.
  DATA(lv_bsmth) = VALUE #( gt_calc_group[ clgrn = lwa_crgrr-clgrn ]-bsmth OPTIONAL ).

  IF lv_bsmth <> 'B'       "skip for Cost funding from contract.
    AND lv_bsmth NE 'C'.                                                     " DCLM 5764

    CALL METHOD /cgdc/cl_clrq_process=>select_amounts_calc_grp_row
      EXPORTING
        is_clrqhd    = gs_clrqdoc_infocus-x-crhdr
        it_crgrrf    = gt_crgrrf
        is_crgrr     = lwa_crgrr
        i_kschl      = lwa_crgrr-clgrp_kschl
        iv_constr_dt = gs_variables-rel_constr_dt
      CHANGING
        c_value      = lwa_komv-kwert.

***DCLM 5764
  ELSEIF lv_bsmth EQ 'C'.

    PERFORM fill_komv_pbp CHANGING lwa_crgrr lwa_komv.
***
  ENDIF.

  lwa_komv-kschl = lwa_crgrr-clgrp_kschl.
  lwa_komv-knumv = lwa_crgrr-clrno.
  lwa_komv-kposn = lwa_crgrr-rowid.
  lwa_komv-kbetr = lwa_komv-kwert.
  ls_komk-knumv =  lwa_crgrr-clrno.

  PERFORM fill_komv USING lwa_komv-kschl
                          lwa_komv-kbetr
                          gs_clrqdoc_infocus-x-crhdr-waerk
                          lv_kstat
                          ls_cgrcon
                 CHANGING ls_komk
                          ls_komp
                          lt_komv.

  CALL FUNCTION 'PRICING'
    EXPORTING
      calculation_type = lv_calculation_type
      comm_head_i      = ls_komk
      comm_item_i      = ls_komp
    IMPORTING
      comm_head_e      = ls_komk
      comm_item_e      = ls_komp
    TABLES
      tkomv            = lt_komv[].

  CLEAR: gt_crgrrf.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_temp_hdr_itm_no
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM prepare_temp_hdr_itm_no  CHANGING ls_clrq_itm TYPE /cgdc/s_clrqit.

  IF gs_variables-temp_last_posnr EQ 999999.
    CLEAR gs_variables-temp_last_posnr.
    gs_variables-temp_last_vbeln = gs_variables-temp_last_vbeln + 1.
  ENDIF.

  IF gs_variables-temp_last_vbeln IS INITIAL.
    gs_variables-temp_last_vbeln = 1.
  ENDIF.
* For now we have added TEMP header and item numbers in structure only, we will add them in table in future if needed
* This is to accommodate PRICING COMPLETE call
  ls_clrq_itm-tmpit = gs_variables-temp_last_posnr = gs_variables-temp_last_posnr + 1.
  ls_clrq_itm-tmphd = gs_variables-temp_last_vbeln.
  gs_variables-last_posnr = ls_clrq_itm-clrit.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form post_parallel_update_calc_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM post_parallel_update_calc_item  USING lv_taskname.
  DATA : lt_item_key TYPE TABLE OF /cgdc/s_clrqit_key.
  RECEIVE RESULTS FROM FUNCTION 'CGDC/CLRQ_RTB_PRL_PROCESS'
  IMPORTING
    et_item_key = lt_item_key

  EXCEPTIONS
    communication_failure       = 1
    system_failure              = 2
    resource_failure            = 3
    OTHERS                      = 4
           .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
  APPEND LINES OF lt_item_key TO gt_bg_crt_keys.
  SUBTRACT 1 FROM gs_parallel_porcess-active_session_count.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_billing_conditions
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <LWA_DATA>
*&---------------------------------------------------------------------*
FORM prepare_billing_conditions  USING ls_data       TYPE /cgdc/s_clrqbi_fcat
                                       lt_cds_fields TYPE dfies_table
                                       lv_kposn TYPE kposn
                              CHANGING lt_bdr_con TYPE komv_t.

  DATA: lv_where                 TYPE string,
        lv_processed_bill,
        lv_viewname              TYPE string,
        lv_processed_unbill,
        lv_clrqb_pcon_view       TYPE tabname,
        lwa_komv                 TYPE komv,
        lwa_critm                TYPE /cgdc/s_clrqit,
        lwa_dfies                TYPE dfies,
        lwa_crcon                TYPE /cgdc/s_clrqcn,
        lv_select                TYPE string,
        lv_from                  TYPE string,
        lv_group_by              TYPE string,
        lt_dfies_crbspc          TYPE dfies_tab,
        lt_critm                 TYPE /cgdc/tt_clrqit,
        lt_crcon                 TYPE /cgdc/tt_clrqcn,
        lt_whitelist             TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line,
        lo_clrq_bill_pcond       TYPE REF TO data,
        lo_clrq_bill_pcond_final TYPE REF TO data,
        lo_wa_clrq_bill_pcond    TYPE REF TO data,
        lo_clrq_bill_ss_pcond    TYPE REF TO data,
        lo_wa_clrq_bill_ss_pcond TYPE REF TO data.
  TYPES: BEGIN OF ty_cond_data,
           knumv TYPE knumv,
           kschl TYPE kscha,
           kstat TYPE kstat,
           kinak TYPE kinak,
           kwert TYPE kwert,
         END OF ty_cond_data,
         tt_cond_data TYPE TABLE OF ty_cond_data.

  DATA lt_cond_data TYPE tt_cond_data.

  FIELD-SYMBOLS: <lv_billed_value>          TYPE any,
                 <lv_total_value>           TYPE any,
                 <lv_final_value>           TYPE any,
                 <lv_kschl>                 TYPE any,
                 <lv_waers>                 TYPE any,
                 <lv_kstat>                 TYPE any,
                 <lv_kwert>                 TYPE any,
                 <lv_matnr>                 TYPE any,
                 <lv_prsdt>                 TYPE any,
                 <lv_zieme>                 TYPE any,
                 <lv_matkl>                 TYPE any,
                 <lv_cntit>                 TYPE any,
                 <lv_waerk>                 TYPE any,
                 <lv_kawrt>                 TYPE any,
                 <lv_kbetr>                 TYPE any,
                 <lv_kawrt24>               TYPE any,
                 <lv_kbetr24>               TYPE any,
                 <lv_kwert24>               TYPE any,
                 <lt_clrq_bill_pcond>       TYPE ANY TABLE,
                 <lt_clrq_bill_pcond_final> TYPE ANY TABLE,
                 <lt_clrq_bill_ss_pcond>    TYPE ANY TABLE,
                 <lwa_clrq_bill_pcond>      TYPE any,
                 <lwa_clrq_bill_ss_pcond>   TYPE any.

  CONSTANTS: lc_fld_bill_itm TYPE char12 VALUE 'BILL_ITEM = '.

  "++SOC - ATC correction
* CONCATENATE lv_where TEXT-170 ls_data-bill_item gc_operator-quotes INTO lv_where.
  lv_where = |{ cl_abap_dyn_prg=>escape_quotes( lc_fld_bill_itm ) } '{ cl_abap_dyn_prg=>escape_quotes( ls_data-bill_item ) }' |.
  "++EOC - ATC correction

  lv_clrqb_pcon_view = gc_view-clrqb_pcon.
  CREATE DATA lo_clrq_bill_pcond TYPE TABLE OF (lv_clrqb_pcon_view).
  CREATE DATA lo_clrq_bill_pcond_final TYPE TABLE OF (lv_clrqb_pcon_view).
  CREATE DATA lo_wa_clrq_bill_pcond TYPE (lv_clrqb_pcon_view).
  ASSIGN lo_clrq_bill_pcond->* TO <lt_clrq_bill_pcond>.
  ASSIGN lo_clrq_bill_pcond_final->* TO <lt_clrq_bill_pcond_final>.
  ASSIGN lo_wa_clrq_bill_pcond->* TO <lwa_clrq_bill_pcond>.

  CHECK <lt_clrq_bill_pcond> IS ASSIGNED AND <lwa_clrq_bill_pcond> IS ASSIGNED
  AND <lt_clrq_bill_pcond_final> IS ASSIGNED.

  lv_viewname = lv_clrqb_pcon_view.
  CONCATENATE lv_viewname TEXT-171 gs_clrqdoc_infocus-x-crhdr-clrno TEXT-172 INTO lv_viewname.


  INSERT lv_viewname INTO TABLE lt_whitelist.

  TRY.
      lv_viewname = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_viewname whitelist = lt_whitelist ).
    CATCH cx_abap_not_in_whitelist.
      EXIT.
  ENDTRY.

  SELECT *
    FROM (lv_viewname)
    INTO CORRESPONDING FIELDS OF TABLE @<lt_clrq_bill_pcond>
    WHERE (lv_where).

  IF NOT <lt_clrq_bill_pcond> IS INITIAL.

    LOOP AT <lt_clrq_bill_pcond> ASSIGNING <lwa_clrq_bill_pcond>.

      UNASSIGN: <lv_matnr>, <lv_prsdt>, <lv_zieme>, <lv_matkl>, <lv_cntit>, <lv_kschl>, <lv_waerk>.
      ASSIGN COMPONENT gc_fieldname-bilmatnr OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_matnr>.
      ASSIGN COMPONENT gc_fieldname-kschl    OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kschl>.
      ASSIGN COMPONENT gc_fieldname-waerk    OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_waerk>.
      ASSIGN COMPONENT gc_fieldname-waers    OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_waers>.

      CHECK <lv_matnr> IS ASSIGNED AND <lv_kschl> IS ASSIGNED
      AND <lv_waerk> IS ASSIGNED.

      COLLECT <lwa_clrq_bill_pcond> INTO <lt_clrq_bill_pcond_final>.

    ENDLOOP.

    LOOP AT <lt_clrq_bill_pcond_final> ASSIGNING <lwa_clrq_bill_pcond>.
      CLEAR lwa_komv.
      UNASSIGN: <lv_kschl>, <lv_waers>, <lv_kstat>, <lv_kwert>.
      ASSIGN COMPONENT gc_fieldname-kschl OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kschl>.
      ASSIGN COMPONENT gc_fieldname-waers OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_waers>.
      ASSIGN COMPONENT gc_fieldname-kstat OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kstat>.
      ASSIGN COMPONENT gc_fieldname-kwert OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kwert>.
      ASSIGN COMPONENT gc_fieldname-kbetr OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kbetr>.
      ASSIGN COMPONENT gc_fieldname-kawrt OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kawrt>.
      "++SOC - Decimal precision
      ASSIGN COMPONENT gc_fieldname-kwert24 OF STRUCTURE <lwa_clrq_bill_pcond> TO <lv_kwert24>.
      "++EOC - Decimal precision
      CHECK <lv_kschl> IS ASSIGNED AND <lv_waers> IS ASSIGNED AND <lv_kstat> IS ASSIGNED AND <lv_kwert24> IS ASSIGNED
      AND <lv_kwert> IS ASSIGNED.
      lwa_komv-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
      lwa_komv-kposn = lv_kposn.
      lwa_komv-kschl = <lv_kschl>.
      lwa_komv-waers = <lv_waers>.
      lwa_komv-kstat = <lv_kstat>.
      IF <lv_kwert24> IS NOT INITIAL.
        lwa_komv-kwert = CONV #( <lv_kwert24> ).
      ELSE.
        lwa_komv-kwert = <lv_kwert>.
      ENDIF.

*      lwa_komv-kbetr = <lv_kbetr>.
*      lwa_komv-kawrt = <lv_kawrt>.
      APPEND lwa_komv TO lt_bdr_con.
    ENDLOOP.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form on_bill_pre_hotspot_click
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM on_bill_pre_hotspot_click USING ls_row_id TYPE lvc_s_row
      ls_column_id TYPE lvc_s_col .

  DATA : lv_where TYPE string.
  DATA: lv_value TYPE string.
  DATA : lwa_bill_prev_char TYPE s_bill_preview_char,
         lt_whitelist       TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line.
  FIELD-SYMBOLS: <lwa_bill_data>      TYPE any,
                 <lv_srno>            TYPE any,
                 <lwa_bill_data_page> TYPE any.
  FIELD-SYMBOLS: <lwa_value> TYPE any.
  FIELD-SYMBOLS : <lv_bill_item> TYPE any.

  READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_bill_data_page> INDEX ls_row_id-index.
  ASSIGN COMPONENT gc_clrqbi_field-srno OF STRUCTURE <lwa_bill_data_page> TO <lv_srno>.
  IF sy-subrc = 0.
    gs_variables-bp_curr_sel_row = <lv_srno>.
    IF gs_variables-bp_prev_sel_row IS INITIAL.
      gs_variables-bp_prev_sel_row = <lv_srno>.
    ENDIF.
  ENDIF.

*  READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_bill_data_page> INDEX ls_row_id-index.
*  ASSIGN COMPONENT gc_clrqbi_field-srno OF STRUCTURE <lwa_bill_data_page> TO <lv_srno>.
*  READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> WITH KEY (gc_clrqbi_field-srno) = <lv_srno> .
*  IF sy-subrc = 0.
*    ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_data> TO <lwa_value>.
*    IF <lwa_value> IS ASSIGNED.
*      <lwa_value> = gc_rowcolor-yellow.
*      UNASSIGN <lwa_value>.
*    ENDIF.
*  ENDIF.
*
*  gs_variables-bp_curr_sel_row = <lv_srno>.
*  IF gs_variables-bp_prev_sel_row IS INITIAL.
*    gs_variables-bp_prev_sel_row = <lv_srno>.
*  ELSEIF gs_variables-bp_prev_sel_row <> <lv_srno>.
*    READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> INDEX gs_variables-bp_prev_sel_row.
*    IF sy-subrc = 0.
*      ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_data> TO <lwa_value>.
*      IF <lwa_value> IS ASSIGNED.
*        CLEAR <lwa_value>.
*        UNASSIGN <lwa_value>.
*      ENDIF.
*    ENDIF.
*    gs_variables-bp_prev_sel_row = <lv_srno>.
*ENDIF.
  IF gt_clrq_key IS INITIAL.
    gt_clrq_key = gs_clrqdoc_infocus-x-critm_key.
  ENDIF.

  CLEAR: gs_clrqdoc_infocus-x-critm_key.

  TRY.
      IF ls_column_id-fieldname = gc_clrqbi_field-srno.
        ASSIGN COMPONENT gc_clrqbi_field-bill_item OF STRUCTURE <lwa_bill_data_page> TO <lv_bill_item>.
        SELECT DISTINCT clrno clrit
        FROM /cgdc/_clrqit
        INTO TABLE gs_clrqdoc_infocus-x-critm_key
        WHERE  rtbbinr = <lv_bill_item> .
      ELSE.
        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Correction
        SELECT DISTINCT clrno clrit
        FROM /cgdc/_clrqit
        INTO TABLE gs_clrqdoc_infocus-x-critm_key
        WHERE (lv_where).
      ENDIF.
    CATCH cx_sy_dynamic_osql_semantics.

  ENDTRY.

  gs_variables-refresh_calc_req_items_grid = abap_true.
  gs_variables-refersh_bill_bp_grid = abap_true.
  gs_variables-show_imp_all_btn = abap_true.
  "Set Page No.1 and Data From 1.
  gs_variables-page_number = gs_variables-item_from_tabix = 1.
  gs_variables-item_to_tabix = gs_calc_req_type-psize.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_cr_group_items
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prepare_cr_group_items USING lv_call_for " SPACE: Regular Infocus Upd, X: Run Time Items
                                  ls_crgrr TYPE /cgdc/s_clrqgrr.

  TYPES: BEGIN OF ty_split,
           item  TYPE posnr,
           kwert TYPE kwert,
         END OF ty_split.

  TYPES : BEGIN OF ty_crgcon,
            crgcon TYPE komv,
            tot    TYPE kwert,
          END OF ty_crgcon.

  DATA: lt_crgcon_final TYPE TABLE OF ty_crgcon,
        ls_crgcon_final TYPE ty_crgcon.

  DATA: lv_cds_viewname    TYPE tabnam,
        lv_where           TYPE string,
        lv_tabname         TYPE tabname,
        lv_kwert           TYPE kwert,
        ls_t685            TYPE t685,
        ls_clrqit          TYPE /cgdc/s_clrqit_fcat,
        lt_konp            TYPE konp_t,
        lt_t682i           TYPE t682i_t,
        lwa_konp           TYPE konp,
        lwa_t682i          TYPE t682i,
        lwa_calc_grp       TYPE /cgdc/s_rtbpcg,
        lwa_crgrr          TYPE /cgdc/s_clrqgrr,
        lwa_crgrrf         TYPE /cgdc/s_clrqgrrf,
        lwa_cgrcon         TYPE komv,
        lwa_clrq_itm_old   TYPE /cgdc/s_clrqit,
        lwa_calc_group_fun TYPE /cgdc/s_rtbpcgf,
        lref_atab_data     TYPE REF TO data,
        lv_crt_req_itm     TYPE flag,
        lt_cgrcon_spilt    TYPE /cgdc/tt_clrqit_fcat,
        ls_cgrcon_split    TYPE /cgdc/s_clrqit_fcat,
        lt_grp_fun         TYPE /cgdc/tt_rtbpcgf,
        lt_calc_group_fun  TYPE /cgdc/tt_rtbpcgf,
        ls_calc_group_fun  TYPE /cgdc/s_rtbpcgf,
        lt_cgrrf           TYPE /cgdc/tt_clrqgrrf,
        lt_cgrrf_dist      TYPE /cgdc/tt_clrqgrrf,
        ls_cgrrf_dist      TYPE /cgdc/s_clrqgrrf,
        lt_split           TYPE TABLE OF ty_split,
        ls_split           TYPE ty_split,
        lv_count           TYPE i VALUE 1,
        lv_string          TYPE string,
        lt_clrq_dist       TYPE /cgdc/tt_clrq_dist,
        lt_cgrcon          TYPE komv_t,
        ls_clrq_dist       TYPE /cgdc/s_clrq_dist,
        lv_value           TYPE kwert,
        lv_remaining       TYPE kwert,
        lv_tot             TYPE kwert,
        lv_tot1            TYPE kwert,
        lv_even            TYPE kwert,
        lv_even_tot        TYPE kwert,
        lv_where_dist      TYPE string,
        lt_clrqgrrf        TYPE /cgdc/tt_clrqgrrf,
        lt_clrqit_f        TYPE /cgdc/tt_clrqit_fcat,
        lt_whitelist       TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line,
        ls_clrqit_f        TYPE /cgdc/s_clrqit_fcat,
        lv_clgrn           TYPE /cgdc/rtb_clgrn,
        lv_concat          TYPE string,
        lv_index           TYPE syst_tabix,
        lv_subrc           TYPE sy-subrc,
        lt_ic_fields       TYPE dfies_table.
  DATA: lv_ind     TYPE sy-index,
        lv_fin_amt TYPE string.


  DATA: lt_otab TYPE abap_sortorder_tab,
        ls_otab TYPE abap_sortorder.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row
  FIELD-SYMBOLS: <lv_rowid>        TYPE any,
                 <lv_clrgn>        TYPE any,
                 <lv_value>        TYPE any,
                 <ls_axxx_data>    TYPE any,
                 <ls_cgrcon_final> TYPE komv.
  FIELD-SYMBOLS: <ft_calc_grp_data>      TYPE STANDARD TABLE.

  UNASSIGN: <lv_rowid>, <lv_clrgn>.
  ASSIGN COMPONENT gc_calc_grp_rows_field-rowid OF STRUCTURE ls_crgrr TO <lv_rowid>.
  ASSIGN COMPONENT gc_calc_grp_rows_field-clgrn OF STRUCTURE ls_crgrr TO <lv_clrgn>.
  CHECK <lv_rowid> IS ASSIGNED AND <lv_clrgn> IS ASSIGNED.
  READ TABLE gt_calc_group
  WITH KEY clgrn = <lv_clrgn>
  INTO lwa_calc_grp.
  CLEAR gt_cgrcon_final[].
  CHECK sy-subrc EQ 0
  AND lwa_calc_grp-grtyp = gc_billing_function-billable.


  CLEAR lv_crt_req_itm.
  LOOP AT gt_calc_group_fun INTO lwa_calc_group_fun WHERE clgrn EQ <lv_clrgn>
                                                      AND trgt_kschl IS NOT INITIAL.
***DCLM 5764
    IF lwa_calc_grp-bsmth EQ 'C'
      AND ls_crgrr-netwr_pbp IS NOT INITIAL
      AND lwa_calc_group_fun-cricv = abap_true.

      lv_crt_req_itm = abap_true.

    ELSE.
***
      READ TABLE gs_clrqdoc_infocus-x-cgrcon
      WITH KEY kposn = <lv_rowid>
               kschl = lwa_calc_group_fun-proc_kschl
      INTO lwa_cgrcon.
      CHECK sy-subrc EQ 0.
      lwa_cgrcon-kschl = lwa_calc_group_fun-trgt_kschl.
      APPEND lwa_cgrcon TO gt_cgrcon_final.

      IF lwa_calc_group_fun-cricv = abap_true AND
         lwa_cgrcon-kwert IS NOT INITIAL.
        lv_crt_req_itm = abap_true.
      ENDIF.
***DCLM 5764
    ENDIF.
***
  ENDLOOP.

****Distribution logic
  CLEAR:lt_cgrrf, lt_calc_group_fun, lt_clrq_dist.
  IF ls_crgrr-dist_flag IS NOT INITIAL AND lv_call_for = space.

    LOOP AT gs_clrqdoc_infocus-x-cgrcon INTO lwa_cgrcon WHERE kschl = ls_crgrr-dist_base.
      ls_crgcon_final-crgcon = lwa_cgrcon .

      lv_tot = lv_tot + lwa_cgrcon-kwert.
      ls_crgcon_final-tot = lv_tot.

      APPEND ls_crgcon_final TO lt_crgcon_final.

      READ TABLE gt_calc_group_fun INTO lwa_calc_group_fun WITH KEY proc_kschl = lwa_cgrcon-kschl.
      IF sy-subrc = 0.
        IF lwa_calc_group_fun-cricv = abap_true AND
           lwa_cgrcon-kwert IS NOT INITIAL.
          lv_crt_req_itm = abap_true.
        ENDIF.
        IF lv_clgrn <> lwa_calc_group_fun-clgrn.
          LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO DATA(ls_crgrrf) WHERE clgrn = lwa_calc_group_fun-clgrn.." AND rowid = ls_crgrr-rowid.
            lv_clgrn = ls_crgrrf-clgrn.
            APPEND ls_crgrrf TO lt_cgrrf_dist.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDLOOP.

    DELETE ADJACENT DUPLICATES FROM lt_cgrrf_dist COMPARING clgrn clgrp_knumh.
    LOOP AT lt_cgrrf_dist INTO ls_cgrrf_dist.
      MOVE-CORRESPONDING ls_cgrrf_dist TO ls_clrqit_f.
      ls_clrqit_f-matnr = lwa_calc_grp-matnr.
      CLEAR ls_clrqit_f-clrit.

      ls_clrqit_f-rtbusage = lwa_calc_grp-vwpos.
      ls_clrqit_f-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
      ls_clrqit_f-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
      IF sy-datum > ls_crgrr-datbi.
        ls_clrqit_f-budat = ls_crgrr-datbi.
      ELSE.
        ls_clrqit_f-budat = sy-datum.
      ENDIF.
      ls_clrqit_f-itmty = gc_clrq_itmty-calc_grp_itm.
      ls_clrqit_f-bldat = ls_crgrr-datab.

      LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO ls_crgrrf WHERE clgrn = ls_cgrrf_dist-clgrn
                                                           AND clgrp_knumh = ls_cgrrf_dist-clgrp_knumh.
        IF ls_crgrrf-fname = 'CNTIT'.
          ls_crgrrf-fname = 'VGPOS'.
        ENDIF.
        ASSIGN COMPONENT ls_crgrrf-fname OF STRUCTURE ls_clrqit_f TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          <lv_value> = ls_crgrrf-fvalue.
          UNASSIGN <lv_value>.
        ENDIF.
      ENDLOOP.
      ls_clrqit_f-clrit = sy-index.
      APPEND ls_clrqit_f TO lt_clrqit_f.
    ENDLOOP.

    DATA(lv_line) = lines( lt_crgcon_final ).
    lv_ind = lv_line.

    IF ls_crgrr-dist_method = '3'.
      CLEAR lv_tot.
    ENDIF.

    IF ls_crgrr-dist_method = '2'.
      SORT lt_clrqit_f DESCENDING BY vgpos.
    ELSE.
      SORT lt_clrqit_f ASCENDING BY vgpos.
    ENDIF.
    SELECT * FROM /cgdc/t_rtbpcgfc INTO TABLE @DATA(lt_src)
                    WHERE clgrn = @<lv_clrgn>.
  ENDIF.


  CLEAR: ls_clrqit.
  MOVE-CORRESPONDING ls_crgrr TO ls_clrqit.
  ls_clrqit-matnr = lwa_calc_grp-matnr.
  CLEAR ls_clrqit-clrit.

  ls_clrqit-rtbusage = lwa_calc_grp-vwpos.
  ls_clrqit-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_clrqit-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.

*  IF sy-datum > ls_crgrr-datbi.
*    ls_clrqit-budat = ls_crgrr-datbi.
*  ELSE.
*    ls_clrqit-budat = sy-datum.
*  ENDIF.
  "-- Calc. group release to work with contraint date
  IF gs_variables-rel_constr_dt > ls_crgrr-datbi.
    ls_clrqit-budat = ls_crgrr-datbi.
  ELSE.
    ls_clrqit-budat = gs_variables-rel_constr_dt.
  ENDIF.

  ls_clrqit-itmty = gc_clrq_itmty-calc_grp_itm.
  ls_clrqit-bldat = ls_crgrr-datab.


  LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf WHERE clgrn = <lv_clrgn>
                                                        AND rowid = <lv_rowid>
                                                        AND clgrp_knumh = ls_clrqit-clgrp_knumh.

    ASSIGN COMPONENT lwa_crgrrf-fname OF STRUCTURE ls_clrqit TO <lv_value>.
    IF lwa_crgrrf-fname = gc_fieldname-posnr.
      ASSIGN COMPONENT gc_fieldname-cntit OF STRUCTURE ls_clrqit TO <lv_value>.
    ENDIF.
    IF <lv_value> IS ASSIGNED.
      <lv_value> = lwa_crgrrf-fvalue.
      UNASSIGN <lv_value>.
    ENDIF.
    READ TABLE gt_item_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = lwa_crgrrf-fname.
    IF sy-subrc = 0.
      IF lwa_crgrrf-fcatg <> 'HD'.

        CONCATENATE 'a~' lwa_crgrrf-fname  ` = '` lwa_crgrrf-fvalue `' ` INTO lv_concat.
        IF lv_where_dist IS INITIAL.
          lv_where_dist =  | { lv_concat } |.
        ELSE.
          lv_where_dist =  | { lv_where_dist } | & |AND| & | { lv_concat } |.
        ENDIF.
      ENDIF.
    ELSE.
      IF  lwa_crgrrf-fname = 'CNTIT'.
        lwa_crgrrf-fname = 'VGPOS'.
        CONCATENATE 'a~' lwa_crgrrf-fname  ` = '` lwa_crgrrf-fvalue `' ` INTO lv_concat.
        IF lv_where_dist IS INITIAL.
          lv_where_dist =  | { lv_concat } |.
        ELSE.
          lv_where_dist =  | { lv_where_dist } | & |AND| & | { lv_concat } |.
        ENDIF.
      ENDIF.
      IF  lwa_crgrrf-fname = 'VBELN'.
        lwa_crgrrf-fname = 'VGBEL'.
        CONCATENATE 'a~' lwa_crgrrf-fname  ` = '` lwa_crgrrf-fvalue `' ` INTO lv_concat.
        IF lv_where_dist IS INITIAL.
          lv_where_dist =  | { lv_concat } |.
        ELSE.
          lv_where_dist =  | { lv_where_dist } | & |AND| & | { lv_concat } |.
        ENDIF.
      ENDIF.
      IF lwa_crgrrf-fname = 'DATBI'.
        lwa_crgrrf-fname = 'PRSDT'.
        CONCATENATE 'a~' lwa_crgrrf-fname  ` < '` lwa_crgrrf-fvalue `' ` INTO lv_concat.
        IF lv_where_dist IS INITIAL.
          lv_where_dist =  | { lv_concat } |.
        ELSE.
          lv_where_dist =  | { lv_where_dist } | & |AND| & | { lv_concat } |.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE gt_itemc_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = lwa_crgrrf-fname.
    IF sy-subrc = 0.
      CONCATENATE 'b~' lwa_crgrrf-fname  ` = '` lwa_crgrrf-fvalue `' ` INTO lv_concat.
      IF lv_where_dist IS INITIAL.
        lv_where_dist =  | { lv_concat } |.
      ELSE.
        lv_where_dist =  | { lv_where_dist } | & |AND| & | { lv_concat } |.
      ENDIF.
    ENDIF.
    CLEAR lv_concat.
  ENDLOOP.

  IF  lv_call_for = space.

    lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where_dist ).

    IF lv_where IS NOT INITIAL.
      SELECT DISTINCT  vgpos FROM /cgdc/_clrqit AS a
                             LEFT OUTER JOIN /cgdc/_clrqic AS b
                             ON b~clrno = a~clrno AND
                                b~clrit = a~clrit       "++AMISHARMA using inner join as IC needs to have records for this case
                             INTO TABLE @DATA(lt_clrqitm) WHERE (lv_where).
      READ TABLE lt_clrqitm INTO DATA(lwa_clrqitm) INDEX 1.
      IF ls_clrqit-/cgdc/orgi IS INITIAL.
        ls_clrqit-vgpos      = lwa_clrqitm-vgpos.
        ls_clrqit-/cgdc/orgi = lwa_clrqitm-vgpos.
      ENDIF.
    ENDIF.
  ENDIF.

  READ TABLE lt_crgcon_final INTO ls_crgcon_final INDEX lv_ind.
  IF sy-subrc = 0.
    lv_tot1 = ls_crgcon_final-tot.
  ENDIF.



  IF NOT lv_crt_req_itm IS INITIAL.
***DCLM 5764
    IF lwa_calc_grp-bsmth EQ 'C'
      AND lv_call_for EQ space.

      PERFORM split_pbp_cost_base USING ls_crgrr.

    ELSE.
***
      IF ls_crgrr-dist_flag IS INITIAL OR lv_call_for = 'X'.
        PERFORM update_clrq_item01 USING lv_call_for
                                            ls_link_data
                                            lwa_clrq_itm_old
                                          CHANGING ls_clrqit.
      ELSE.
        CLEAR: lv_count, lv_tot.
        LOOP AT lt_crgcon_final INTO ls_crgcon_final.
          lv_index = sy-tabix.
          READ TABLE gt_calc_group_fun INTO lwa_calc_group_fun WITH KEY  clgrn = <lv_clrgn> dist_base = ls_crgcon_final-crgcon-kschl.
          IF sy-subrc = 0.
            READ TABLE gt_cgrcon_final ASSIGNING <ls_cgrcon_final> WITH KEY kschl = lwa_calc_group_fun-trgt_kschl.
            IF sy-subrc = 0.
              READ TABLE lt_src INTO DATA(ls_src) WITH KEY clgrn =  <lv_clrgn> kschl_src = ls_crgcon_final-crgcon-kschl.
              IF sy-subrc = 0.
                IF ls_src-contr = '-'.
                  ls_crgcon_final-crgcon-kwert = ls_crgcon_final-crgcon-kwert * -1.
                  IF lv_tot IS INITIAL.
                    lv_tot = lv_tot1.
                    lv_tot = lv_tot * -1.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF lv_value IS INITIAL AND lv_fin_amt IS INITIAL.
                lv_value = <ls_cgrcon_final>-kwert.
                IF lv_even_tot IS INITIAL.
                  lv_even_tot = lv_value.
                ENDIF.
              ENDIF.

              IF lv_value IS INITIAL.
                CONTINUE.
              ENDIF.

              IF lwa_calc_group_fun-dist_method IS INITIAL OR lwa_calc_group_fun-dist_method = '1'.   "Ascending
                IF lv_value > ls_crgcon_final-crgcon-kwert.
                  <ls_cgrcon_final>-kwert = ls_crgcon_final-crgcon-kwert.
                  lv_value = lv_value - ls_crgcon_final-crgcon-kwert.
                ELSEIF lv_value <= ls_crgcon_final-crgcon-kwert.
                  <ls_cgrcon_final>-kwert = lv_value.
                  CLEAR lv_value.
                  lv_fin_amt = 'X'.
                ENDIF.
              ELSEIF lwa_calc_group_fun-dist_method = '2'.   "Descending
                IF lv_value > ls_crgcon_final-crgcon-kwert.
                  <ls_cgrcon_final>-kwert = ls_crgcon_final-crgcon-kwert.
                  lv_value = lv_value - ls_crgcon_final-crgcon-kwert.
                ELSEIF lv_value <= ls_crgcon_final-crgcon-kwert.
                  <ls_cgrcon_final>-kwert = lv_value.
                  CLEAR lv_value.
                  lv_fin_amt = 'X'.
                ENDIF.
              ELSEIF lwa_calc_group_fun-dist_method = '3'.   "Even
                lv_count = lv_count + 1.
                IF lv_count = lv_line.
                  <ls_cgrcon_final>-kwert = lv_even_tot.
                ELSE.
                  IF lv_even IS NOT INITIAL.
                    <ls_cgrcon_final>-kwert = lv_even.
                  ELSE.
                    <ls_cgrcon_final>-kwert = <ls_cgrcon_final>-kwert / lv_line.
                  ENDIF.
                  IF lv_even IS INITIAL.
                    lv_even = <ls_cgrcon_final>-kwert.
                  ENDIF.

                  lv_even_tot = lv_even_tot -  lv_even.
                ENDIF.

              ELSEIF lwa_calc_group_fun-dist_method = '4'.   "proportionate
                lv_count = lv_count + 1.
                <ls_cgrcon_final>-kwert = ls_crgcon_final-crgcon-kwert * lv_value / lv_tot.
                lv_remaining = ( lv_value - <ls_cgrcon_final>-kwert )  .

              ENDIF.
              CLEAR ls_crgrrf.
              READ TABLE lt_clrqit_f INTO ls_clrqit_f INDEX lv_index .  " WITH KEY clgrp_knumh = <ls_cgrcon_final>-knumh.
              IF sy-subrc = 0.
                ls_clrqit = ls_clrqit_f.
                CLEAR ls_clrqit-clint .
              ENDIF.

*              IF  ls_clrqit-vgpos IS INITIAL.
*                READ TABLE lt_clrqit INTO DATA(ls_clrqit1) WITH KEY clgrp_knumh = ls_clrqit-clgrp_knumh.
*                IF sy-subrc = 0.
*                  ls_clrqit-vgpos = ls_clrqit1-vgpos.
*                ENDIF.
*              ENDIF.

              PERFORM update_clrq_item01 USING lv_call_for
                                               ls_link_data
                                               lwa_clrq_itm_old
                                             CHANGING ls_clrqit.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
***DCLM 5764
    ENDIF.
***
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_calc_grp_row-data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_calc_grp_row_data USING lv_call_for_bdr_create
                         CHANGING lt_fcat   TYPE lvc_t_fcat.
  DATA: lv_subrc            TYPE sy-subrc,
        lt_komv             TYPE komv_t,
        ls_komp             TYPE komp,
        lwa_komv            TYPE komv,
        lv_call_for_runtime,
        lwa_crgrr           TYPE /cgdc/s_clrqgrr.
  FIELD-SYMBOLS: <lwa_crgrr> TYPE /cgdc/s_clrqgrr.

  gs_variables-pricing_cgrp_runtime_itms = abap_true.
  PERFORM update_calcgrp_items USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM create_dyn_fcat_calc_grp CHANGING lt_fcat.
  CHECK lt_fcat IS NOT INITIAL.

  PERFORM create_dyn_table_using_fcat USING lt_fcat
                                      CHANGING go_calc_grp_data.

  PERFORM create_dyn_table_using_fcat USING lt_fcat
                                      CHANGING go_calc_grp_data_page.

  IF lv_call_for_bdr_create EQ abap_true.
    CLEAR: gs_variables-pricing_cgrp_runtime_itms.
  ENDIF.
  lv_call_for_runtime = gs_variables-pricing_cgrp_runtime_itms.

  PERFORM select_calc_grp_row_data USING lv_call_for_runtime .

  PERFORM prep_calc_grp_data.

ENDFORM.

FORM post_prl_reprice_calc_item USING lv_taskname.

  DATA: ls_clrqdoc TYPE /cgdc/s_clrq_doc,
        lt_clrqpit TYPE /cgdc/tt_clrqpit,
        lt_clrqdoc TYPE /cgdc/tt_clrq_doc,
        lt_return  TYPE /cgdc/t_message.
  DATA : lt_item_key TYPE /CGDC/tt_CLRQIT_KEY.

  RECEIVE RESULTS FROM FUNCTION '/CGDC/CLRQ_RTB_PRL_REPRICE'
  IMPORTING
    et_return_tab              = lt_return
    et_item_key             = lt_item_key
 EXCEPTIONS
   communication_failure       = 1
   system_failure              = 2
   resource_failure            = 3
   OTHERS                      = 4
          .
  IF sy-subrc <> 0.
    " Implement suitable error handling here
  ENDIF.
  APPEND LINES OF lt_item_key TO gt_bg_crt_keys.
  IF NOT ls_clrqdoc IS INITIAL.
    CLEAR lt_clrqdoc.
    APPEND ls_clrqdoc TO lt_clrqdoc.

    PERFORM save_mass_documents USING lt_clrqdoc
                                      space.
    CALL FUNCTION '/CGDC/CLRQ_CLRQPRS_UPDATE_DB' IN UPDATE TASK
      EXPORTING
        it_clrqpit = lt_clrqpit.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.

  CLEAR ls_clrqdoc.

  IF NOT lt_return IS INITIAL.
    APPEND LINES OF lt_return TO gt_msg_return.
  ENDIF.

  SUBTRACT 1 FROM gs_parallel_porcess-active_session_count.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form process_f4_fcode
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM process_f4_fcode .
  ok_code = sy-ucomm.
  PERFORM process_fcode.
  LEAVE TO SCREEN 0.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  DOUBLE_CLICK  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE double_click INPUT.

  DATA(lv_code) = sy-ucomm.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form prepare_bill_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_pagination_bill_data.

  DATA: ls_page_number(10) TYPE n,
        lv_page_count(10)  TYPE n,
        lv_pg_count        TYPE p DECIMALS 3,
        lv_lines(10)       TYPE i.
  CLEAR gt_bill_pre_data_page.
  DESCRIBE TABLE gt_bill_pre_data LINES lv_lines.

  IF gs_variables-page_number_bitm IS INITIAL.
    gs_variables-page_number_bitm = 1.
  ENDIF.
*calculating to and from index
  IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > '00000'.
*    *    lv_page_count = lv_lines / gs_calc_req_type-psize.
    lv_pg_count = lv_lines / gs_calc_req_type-psize.
    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = lv_pg_count
        sign   = '+'
      IMPORTING
        output = lv_pg_count.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    lv_page_count = lv_pg_count.

    gs_variables-pre_bill_to_tabix = gs_variables-page_number_bitm * gs_calc_req_type-psize.
    gs_variables-pre_bill_from_tabix = gs_variables-pre_bill_to_tabix - ( gs_calc_req_type-psize - 1 ).
  ELSEIF lv_lines = 0.
    MOVE 1 TO lv_page_count.
    gs_variables-pre_bill_to_tabix = 0.
    gs_variables-pre_bill_from_tabix = 0.
  ELSE.
    MOVE 1 TO lv_page_count.
    gs_variables-pre_bill_from_tabix = 1.
    gs_variables-pre_bill_to_tabix = lv_lines.
  ENDIF.
*preparing data for specific page
  IF lv_lines > 0.
    CLEAR gt_bill_pre_data_page.

    LOOP AT gt_bill_pre_data ASSIGNING FIELD-SYMBOL(<lwa_pre_bill>) FROM  gs_variables-pre_bill_from_tabix TO  gs_variables-pre_bill_to_tabix.
      APPEND <lwa_pre_bill> TO gt_bill_pre_data_page.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_pagination_cal_grp_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_pagination_cal_grp_data .

  DATA: ls_page_number    TYPE n,
        lv_page_count(10) TYPE n,
        lv_lines          TYPE i.

  DESCRIBE TABLE <gt_calc_grp_data> LINES lv_lines.

  IF gs_variables-page_number_calc_grp IS INITIAL.
    gs_variables-page_number_calc_grp = 1.
  ENDIF.
*calculating to and from index.
  IF lv_lines GT gs_calc_req_type-psize AND gs_calc_req_type-psize > 0.
    lv_page_count = lv_lines / gs_calc_req_type-psize.
    gs_variables-calc_grp_to_tabix = gs_variables-page_number_calc_grp * gs_calc_req_type-psize.
    gs_variables-calc_grp_from_tabix = gs_variables-calc_grp_to_tabix - ( gs_calc_req_type-psize - 1 ).
  ELSEIF lv_lines = 0.
    MOVE 1 TO lv_page_count.
    gs_variables-calc_grp_to_tabix = 0.
    gs_variables-calc_grp_from_tabix = 0.
  ELSE.
    MOVE 1 TO lv_page_count.
    gs_variables-calc_grp_from_tabix = 1.
    gs_variables-calc_grp_to_tabix = lv_lines.
  ENDIF.
*preparing data for specific page
  IF lv_lines > 0.
    CLEAR <gt_calc_grp_data_page>.
    LOOP AT <gt_calc_grp_data> ASSIGNING FIELD-SYMBOL(<lwa_calc_grp>) FROM  gs_variables-calc_grp_from_tabix TO  gs_variables-calc_grp_to_tabix.
      APPEND <lwa_calc_grp> TO <gt_calc_grp_data_page>.
    ENDLOOP.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_rej_itm_lst
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_rej_itm_lst .
  DATA: lt_critm LIKE gs_clrqdoc_infocus-x-critm.
  DATA: lt_critm1 TYPE TABLE OF /cgdc/_clrqit.

  IF lt_critm1 IS INITIAL.
    SELECT *
      FROM /cgdc/_clrqit
      INTO TABLE @lt_critm1
      WHERE clrno   = @gs_clrqdoc_infocus-clrno AND
            istat   = 'R'.
  ENDIF.

  LOOP AT lt_critm1 INTO DATA(lwa_critm).
    READ TABLE  gs_clrqdoc_infocus-x-critm
          ASSIGNING FIELD-SYMBOL(<lwa_critm>)
          WITH KEY clrno  = lwa_critm-clrno
                   clrit  = lwa_critm-clrit
                   clrsit = lwa_critm-clrsit
                   clrdit = lwa_critm-clrdit.
    IF sy-subrc <> 0.
      APPEND lwa_critm TO  gs_clrqdoc_infocus-x-critm.
    ENDIF.

  ENDLOOP.

  IF <lwa_critm> IS ASSIGNED.
    UNASSIGN <lwa_critm>.
  ENDIF.

  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm>
    WHERE istat = 'R'.
    APPEND <lwa_critm> TO lt_critm.
  ENDLOOP.

  MOVE-CORRESPONDING lt_critm TO gt_rejitms.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_bill_pre_select_statmnt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <LV_CLRNO>
*&---------------------------------------------------------------------*
FORM prep_bill_pre_select_statmnt  USING lv_clrno TYPE /cgdc/clrqno
                                         lv_bilitmtyp TYPE /cgdc/bitype
                                    CHANGING lv_final_string TYPE string
                                      lv_from_table_string  TYPE string
                                      lv_where TYPE string
                                      lv_group_by TYPE string.

  DATA : lt_sum_char          TYPE TABLE OF /cgdc/t_clrqbic,
         lv_fxd_fields_string TYPE string,
         lv_date              TYPE sy-datum,
         lwa_sum_char         TYPE /cgdc/t_clrqbic.
  CLEAR : lv_final_string ,
          lv_from_table_string ,
          lv_where ,
          lv_group_by.

  MOVE sy-datum TO lv_date  .

  SELECT *
    FROM /cgdc/t_clrqbic
    INTO TABLE @lt_sum_char
    WHERE bilitmtyp = @lv_bilitmtyp.


  CONCATENATE  ` clrqbi.bilmatnr, clrqbi.bill_item, clrqbi.pop_stdt, clrqbi.pop_enddt, clrqbi.bldat, `
               ` clrqbi.faksp, `
               ` clrqbi.fkrel, clrqbi.bstat, clrqhd.clrno, clrqbi.exdat , `
               INTO  lv_fxd_fields_string .
  LOOP AT lt_sum_char INTO lwa_sum_char.
    IF NOT ( lv_fxd_fields_string CS lwa_sum_char-fieldname ).
      CONCATENATE lv_final_string  `clrqbi.` lwa_sum_char-fieldname `, ` INTO lv_final_string .
    ENDIF.
  ENDLOOP.
  CONCATENATE lv_fxd_fields_string ` ` lv_final_string INTO lv_final_string .

  CONCATENATE lv_final_string `SUM( CASE WHEN ( clrqit.clrsit != '000000' `
  `and clrqit.istat = 'A' and clrqbi.bstat = ' ' ) `
  `then clrqit.netwr end  ) as netwr , ` INTO  lv_final_string.

  CONCATENATE lv_final_string `SUM( CASE when clrqit.clrsit != '000000' `
  `and ( ( clrqit.psdat != ' ' and clrqit.istat = 'P' `
  `and clrqit.psdat < '` lv_date `' ) ) then clrqit.zmeng end ) as ZMENG , ` INTO lv_final_string.

  CONCATENATE lv_final_string `SUM( CASE WHEN clrqit.clrsit != '000000' and clrqbi.bstat != ' ' then  clrqit.netwr `
  `end ) as billed_amt , ` INTO  lv_final_string.

  CONCATENATE lv_final_string `SUM( CASE WHEN clrqit.clrsit != '000000' `
  `and clrqit.istat = 'R' then clrqit.netwr end  ) as rej_amt , ` INTO  lv_final_string.

  CONCATENATE lv_final_string `SUM( CASE WHEN  clrqit.clrsit != '000000' and clrqit.istat = 'R' `
  `then clrqit.zmeng end  ) as rej_qty , ` INTO  lv_final_string.

  CONCATENATE lv_final_string ` SUM( CASE WHEN clrqit.clrsit != '000000' `
  `and  ( ( clrqit.psdat != ' ' and clrqit.istat = 'P' and clrqit.psdat >= '` lv_date `' ) `
  `or ( clrqit.psdat = ' ' and clrqit.istat = 'P' ) ) then clrqit.netwr end  ) as postp_amt   , ` INTO  lv_final_string.

  CONCATENATE lv_final_string ` SUM( CASE WHEN clrqit.clrsit  != '000000' `
  `and  ( ( clrqit.psdat != ' ' and clrqit.istat = 'P' and clrqit.psdat >= '` lv_date `' ) `
  `or ( clrqit.psdat  = ' ' and clrqit.istat = 'P' ) ) `
 `then clrqit.zmeng end  ) as postp_qty ` INTO  lv_final_string.


  CONCATENATE lv_from_table_string `"/CGDC/_CLRQHD" as clrqhd `
`INNER JOIN "/CGDC/_CLRQIT" AS clrqit `
`ON clrqhd.clrno = clrqit.clrno `
`INNER JOIN "/CGDC/_CLRQBI" as clrqbi `
`ON  clrqit.clrno   = clrqbi.clrno `
`AND clrqit.rtbbinr = clrqbi.bill_item `
`AND clrqit.bityp   = clrqbi.bitype `
`LEFT OUTER JOIN "/CGDC/_CLRQIC" AS clrqic `
`ON clrqit.clrno  = clrqic.clrno `
`AND clrqit.clrit  = clrqic.clrit `
`AND clrqit.clrsit = clrqic.clrsit `
`AND clrqit.clrdit = clrqic.clrdit ` INTO lv_from_table_string.


  CONCATENATE ` clrqhd.clrno = '` lv_clrno `' ` INTO lv_where.
  CONCATENATE ` clrqhd.clrno , `
              ` clrqbi.bilmatnr , `
              ` clrqbi.bill_item , `
              ` clrqbi.pop_stdt , `
              ` clrqbi.pop_enddt , `
              ` clrqbi.bldat , `
              ` clrqbi.exdat , `
              ` clrqbi.faksp , `
              ` clrqbi.fkrel , `
INTO lv_group_by.

  LOOP AT lt_sum_char INTO lwa_sum_char.
    IF NOT ( lv_fxd_fields_string CS lwa_sum_char-fieldname ).
      CONCATENATE  lv_group_by ` clrqbi.`lwa_sum_char-fieldname ` , ` INTO lv_group_by.
    ENDIF.
  ENDLOOP.
  CONCATENATE lv_group_by ` clrqbi.bstat ` INTO lv_group_by.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_bill_cond_where_cls
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_DATA
*&      <-- LV_SELECT
*&      <-- LV_FROM
*&      <-- LV_WHERE
*&      <-- LV_GROUP_BY
*&---------------------------------------------------------------------*
FORM prep_bill_cond_where_cls  USING ls_data TYPE /cgdc/s_clrqbi_fcat
                            CHANGING lv_select TYPE string
                                     lv_from TYPE string
                                     lv_where TYPE string
                                     lv_group_by TYPE string.

  CONCATENATE  `clrqhrd.clrno AS knumv , ClrqCn.kschl AS kschl, ClrqCn.kstat AS kstat,`
    `ClrqCn.kinak as kinak,` INTO lv_select.
  CONCATENATE lv_select `SUM(`
  `CASE(WHEN ClrqItem.clrsit != '000000' AND ClrqItem.istat = 'A' and Clrqbi.bstat = '' `
  `then ClrqCn.kwert else  0 end ) as kwert` INTO lv_select.

  CONCATENATE `"/cgdc/_clrqhd AS ClrqHrd" `
  `INNER JOIN "/cgdc/_clrqit" AS ClrqItem ON ClrqHrd.clrno = ClrqItem.clrno `
  `LEFT OUTER JOIN "/cgdc/_clrqic as clrqic"   ON  ClrqItem.clrno  = clrqic.clrno `
  `AND ClrqItem.clrit  = clrqic.clrit AND ClrqItem.clrsit = clrqic.clrsit `
  `AND ClrqItem.clrdit = clrqic.clrdit `
  `INNER JOIN      /cgdc/_clrqcn AS ClrqCn ON  ClrqItem.clrno  = ClrqCn.clrno `
  `AND ClrqItem.clrit  = ClrqCn.clrit `
  `AND ClrqItem.clrsit = ClrqCn.clrsit `
  `AND ClrqItem.clrdit = ClrqCn.clrdit `
  `INNER JOIN "/cgdc/_clrqbi as Clrqbi" `
  `ON  ClrqItem.clrno   = Clrqbi.clrno `
  `AND ClrqItem.rtbbinr = Clrqbi.bill_item `
  `AND ClrqItem.bityp   = Clrqbi.bitype"` INTO lv_from.

  CONCATENATE `ClrqHrd.clrno = '` ls_data-clrno `' ` INTO lv_where.

  CONCATENATE `ClrqCn.kschl, ClrqCn.kstat, ` `ClrqCn.kinak, ClrqCn.waers` INTO lv_group_by.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form prep_bi_where_cls
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_CRITM
*&      --> LV_BITYPELS_BILITTY_BILMATNR
*&      <-- LV_WHERE
*&---------------------------------------------------------------------*
FORM prep_bi_where_cls  USING    ls_clrq_itm TYPE any
                                 lv_bitype TYPE /cgdc/bitype
                                 lv_bilmatnr TYPE /cgdc/bilmatnr
                        CHANGING lv_where TYPE string.

  DATA : lt_sum_char  TYPE STANDARD TABLE OF /cgdc/t_clrqbic,
         lwa_sum_char TYPE /cgdc/t_clrqbic,
         lv_concat    TYPE string.

  FIELD-SYMBOLS : <lv_data>       TYPE any,
                  <lv_clrno>      TYPE any,
                  <lv_bill_usage> TYPE any,
                  <lv_ps_psp_pnr> TYPE any,
                  <lv_cline>      TYPE any,
                  <lv_pop_stdt>   TYPE any,
                  <lv_pop_enddt>  TYPE any,
                  <lv_billitem>   TYPE any,
                  <lv_bpprtyp>    TYPE any,
                  <lv_defin>      TYPE any,
                  <lv_pbpgp>      TYPE any.

  CLEAR : lv_where ,
          lv_concat.

  SELECT *
             FROM /cgdc/t_clrqbic
             INTO TABLE @lt_sum_char
             WHERE bilitmtyp = @lv_bitype.


  ASSIGN COMPONENT 'CLRNO'       OF STRUCTURE ls_clrq_itm TO <lv_clrno>.
  ASSIGN COMPONENT 'BILL_USAGE'  OF STRUCTURE ls_clrq_itm TO <lv_bill_usage>.
  ASSIGN COMPONENT 'PS_PSP_PNR'  OF STRUCTURE ls_clrq_itm TO <lv_ps_psp_pnr>.
  ASSIGN COMPONENT '/CGDC/CLINE' OF STRUCTURE ls_clrq_itm TO <lv_cline>.
  ASSIGN COMPONENT 'SRVC_DATE'   OF STRUCTURE ls_clrq_itm TO <lv_pop_stdt>.
  ASSIGN COMPONENT 'SRVC_DATE'   OF STRUCTURE ls_clrq_itm TO <lv_pop_enddt>.
  ASSIGN COMPONENT 'BILLITEM'    OF STRUCTURE ls_clrq_itm TO <lv_billitem>.
  ASSIGN COMPONENT 'BP_PRTYP'    OF STRUCTURE ls_clrq_itm TO <lv_bpprtyp>.
  ASSIGN COMPONENT '/CGDC/DEFIN'    OF STRUCTURE ls_clrq_itm TO <lv_defin>.
  ASSIGN COMPONENT '/CGDC/PBPGP'    OF STRUCTURE ls_clrq_itm TO <lv_pbpgp>.

  IF <lv_clrno> IS ASSIGNED AND <lv_bill_usage> IS ASSIGNED AND <lv_ps_psp_pnr> IS  ASSIGNED AND
    <lv_cline> IS ASSIGNED AND    <lv_pop_stdt> IS ASSIGNED AND  <lv_pop_enddt> IS ASSIGNED AND
    <lv_billitem> IS ASSIGNED AND <lv_bpprtyp> IS ASSIGNED AND <lv_defin> IS ASSIGNED
    AND <lv_pbpgp> IS ASSIGNED.


    IF <lv_bpprtyp> = 1. "FIXED AMOUNT.
      CONCATENATE `CLRNO = '` <lv_clrno> `' AND BITYPE = '` lv_bitype
                  `' AND BILMATNR = '` lv_bilmatnr
                  `' AND BSTAT = ' ' AND BILL_USAGE = '` <lv_bill_usage>
                  `' AND PS_PSP_PNR EQ '` <lv_ps_psp_pnr> `'`
                  `  AND /CGDC/CLINE = '` <lv_cline>
                  `' AND POP_STDT  <= '` <lv_pop_stdt>
                  `' AND POP_ENDDT >= '` <lv_pop_enddt>
                  `' AND BILLSCHEDITEM = '` <lv_billitem>
                  `' AND /CGDC/DEFIN = '` <lv_defin>
                  `' AND /CGDC/PBPGP = '` <lv_pbpgp> `'`
                   INTO lv_where.
    ELSE.
      CONCATENATE `CLRNO = '` <lv_clrno> `' AND BITYPE = '` lv_bitype
            `' AND BILMATNR = '` lv_bilmatnr
            `' AND BSTAT = ' ' AND BILL_USAGE = '` <lv_bill_usage>
            `' AND PS_PSP_PNR EQ '` <lv_ps_psp_pnr> `'`
            `  AND /CGDC/CLINE = '` <lv_cline>
            `' AND POP_STDT  <= '` <lv_pop_stdt>
            `' AND POP_ENDDT >= '` <lv_pop_enddt>
            `' AND /CGDC/DEFIN = '` <lv_defin>
            `' AND /CGDC/PBPGP = '` <lv_pbpgp> `'`
             INTO lv_where.

    ENDIF.

  ENDIF.


  LOOP AT lt_sum_char INTO lwa_sum_char.
    UNASSIGN <lv_data>.
    ASSIGN COMPONENT lwa_sum_char-fieldname OF STRUCTURE ls_clrq_itm TO <lv_data>.
    CHECK <lv_data> IS ASSIGNED.
    CONCATENATE lwa_sum_char-fieldname ` = '`  <lv_data> `' ` INTO lv_concat .
    lv_where =  | { lv_where } | & |AND| & | { lv_concat } |.

    CLEAR lv_concat.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_group_clin_log
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> SPACE
*&      --> LS_FINAL_ITEMS
*&      --> LS_MOGRP_BASED_FINAL_ITMS
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> GS_VBAK_VBELN
*&      --> LS_FINAL_ITEMS_VBELN
*&      --> LS_MESSAGE_MSGV3
*&      --> LS_MESSAGE_MSGV4
*&      --> LV_TIMESTAMP
*&      <-- LS_GROUP_CLIN_LOG
*&---------------------------------------------------------------------*
FORM prepare_group_clin_log  USING lv_call_from                                   " SPACE: Scheduler Group, 1: Override Group
                                  ls_final_items            TYPE gs_final_items
                                  ls_mogrp_based_final_itms TYPE gs_mogrp_based_final_itms
                                  lv_msg_type                TYPE bdc_mart
                                  lv_msg_id                  TYPE bdc_mid
                                  lv_msg_no
                                  lv_msg_var1
                                  lv_msg_var2
                                  lv_msg_var3
                                  lv_msg_var4
                                  lv_timestamp               TYPE timestampl
                         CHANGING ls_group_clin_log          TYPE /cgdc/_rtbsgcl.

  CLEAR ls_group_clin_log.

  CASE lv_call_from.
    WHEN space.
      ls_group_clin_log-vbeln = ls_final_items-vbeln.
      ls_group_clin_log-sgrpn = ls_final_items-sgrpn.
      ls_group_clin_log-tstamp = lv_timestamp.
      ls_group_clin_log-mtype = lv_msg_type.
      ls_group_clin_log-msgid = lv_msg_id.
      ls_group_clin_log-msgnr = lv_msg_no.
      ls_group_clin_log-msgv1 = lv_msg_var1.
      ls_group_clin_log-msgv2 = lv_msg_var2.
      ls_group_clin_log-msgv3 = lv_msg_var3.
      ls_group_clin_log-msgv4 = lv_msg_var4.
      ls_group_clin_log-ernam = sy-uname.
    WHEN gc_call-1.
      ls_group_clin_log-vbeln = ls_mogrp_based_final_itms-vbeln.
      ls_group_clin_log-cogrp = ls_mogrp_based_final_itms-cogrp.
      ls_group_clin_log-tstamp = lv_timestamp.
      ls_group_clin_log-mtype = lv_msg_type.
      ls_group_clin_log-msgid = lv_msg_id.
      ls_group_clin_log-msgnr = lv_msg_no.
      ls_group_clin_log-msgv1 = lv_msg_var1.
      ls_group_clin_log-msgv2 = lv_msg_var2.
      ls_group_clin_log-msgv3 = lv_msg_var3.
      ls_group_clin_log-msgv4 = lv_msg_var4.
      ls_group_clin_log-ernam = sy-uname.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_group_log
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> SPACE
*&      --> LS_FINAL_ITEMS
*&      --> LS_MOGRP_BASED_FINAL_ITMS
*&      --> LS_CHAR_AND_FREQ
*&      --> LS_OGROUP_CHAR_AND_FREQ
*&      --> LV_TIMESTAMP
*&      <-- LS_GROUP_LOG
*&---------------------------------------------------------------------*
FORM prepare_group_log  USING lv_call_from                                   " SPACE: Scheduler Group, 1: Override Group
                             ls_final_items            TYPE gs_final_items
                             ls_mogrp_based_final_itms TYPE gs_mogrp_based_final_itms
                             ls_char_and_freq          TYPE /cgdc/t_rtbsc
                             ls_ogroup_char_and_freq   TYPE /cgdc/_rtbsogc
                             lv_timestamp               TYPE timestampl
                    CHANGING ls_group_log               TYPE /cgdc/_rtbsgl.

  DATA: lv_days                TYPE /cgdc/freq_period,
        lv_freq_type           TYPE /cgdc/freq_type,
        lv_group_name(8),
        lv_start_date          TYPE /cgdc/rrbs_sdate,
        lv_period              TYPE dlydy,
        lv_dummy_period        TYPE dlydy,
        lv_next_date           TYPE /cgdc/rrbs_ldate,
        ls_next_date_per_group TYPE gs_next_date_per_group.

  CLEAR ls_group_log.

  CASE lv_call_from.
    WHEN space.
      ls_group_log-sgrpn = ls_final_items-sgrpn.
      ls_group_log-tstamp = lv_timestamp.
      lv_freq_type = ls_char_and_freq-ftype.
      lv_group_name = ls_char_and_freq-sgrpn.
      MOVE ls_char_and_freq-fperd TO lv_period.
      lv_start_date = ls_char_and_freq-sdate.
    WHEN '1'.
      ls_group_log-cogrp = ls_mogrp_based_final_itms-cogrp.
      ls_group_log-tstamp = lv_timestamp.
      lv_freq_type = ls_ogroup_char_and_freq-ftype.
      lv_group_name = ls_ogroup_char_and_freq-cogrp.
      MOVE ls_ogroup_char_and_freq-fperd TO lv_period.
      lv_start_date = ls_ogroup_char_and_freq-sdate.
  ENDCASE.

  READ TABLE gt_next_date_per_group
  WITH KEY group = lv_group_name
  INTO ls_next_date_per_group.

  IF sy-subrc EQ 0.
    lv_start_date = ls_next_date_per_group-next_date.
  ENDIF.

  WHILE lv_start_date LE sy-datum.

    CASE lv_freq_type.
      WHEN gc_freq_type-daily.

        CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
          EXPORTING
            date      = lv_start_date
            days      = lv_period
            months    = lv_dummy_period
            years     = lv_dummy_period
          IMPORTING
            calc_date = lv_next_date.

      WHEN gc_freq_type-weekly.

        lv_next_date = lv_start_date.
        lv_days = 7 * lv_period.
        ADD lv_days TO lv_next_date.

      WHEN gc_freq_type-monthly.

        CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
          EXPORTING
            date      = lv_start_date
            months    = lv_period
            days      = lv_dummy_period
            years     = lv_dummy_period
          IMPORTING
            calc_date = lv_next_date.

    ENDCASE.

    IF lv_call_from EQ space.

      IF ls_char_and_freq-calendarid IS NOT INITIAL.

        PERFORM check_holiday_date USING ls_char_and_freq-calendarid ls_char_and_freq-next_wrk_day
                                CHANGING lv_next_date.

      ENDIF.

    ELSEIF lv_call_from EQ gc_call-1.

      IF ls_ogroup_char_and_freq-calendarid IS NOT INITIAL.

        PERFORM check_holiday_date USING ls_ogroup_char_and_freq-calendarid ls_ogroup_char_and_freq-next_wrk_day
                                CHANGING lv_next_date.

      ENDIF.

    ENDIF.

    lv_start_date = lv_next_date.

  ENDWHILE.

  IF lv_start_date GT sy-datum.
    lv_next_date = lv_start_date.
  ENDIF.

  ls_group_log-ndate = lv_next_date.
ENDFORM.
FORM post_prl_validate_clrq USING lv_taskname.
  DATA : ls_clrq_doc TYPE /cgdc/s_clrq_doc.
  DATA : lt_clrq_doc TYPE TABLE OF /cgdc/s_clrq_doc.
  gs_parallel_porcess-active_session_count  = gs_parallel_porcess-active_session_count - 1.
ENDFORM.
*FORM prepare_calc_link_data USING ls_linked_data TYPE /cgdc/s_crlink
*                            CHANGING ls_clrqlt TYPE /cgdc/s_clrqlt.
*
*  DATA: lt_dd03l  TYPE TABLE OF dd03l,
*        lwa_dd03l TYPE dd03l.
*  FIELD-SYMBOLS : <lwa_wa>   TYPE any,
*                  <lv_value> TYPE any.
*  DATA : lv_keyvalue TYPE char300.
*
*  SELECT *
*    FROM dd03l
*    INTO TABLE lt_dd03l
*    WHERE tabname = ls_linked_data-link_table
*         AND keyflag = abap_true.
*  IF sy-subrc = 0.
*    ASSIGN ls_linked_data-crlink_tab->* TO <lwa_wa>.
*
*    LOOP AT lt_dd03l INTO lwa_dd03l.
*      ASSIGN COMPONENT lwa_dd03l-fieldname OF STRUCTURE <lwa_wa> TO <lv_value>.
*      IF <lv_value> IS ASSIGNED.
*        IF lv_keyvalue IS INITIAL.
*          lv_keyvalue = <lv_value>.
*        ELSE.
*          CONCATENATE lv_keyvalue gc_operator-fwd_slash <lv_value> INTO lv_keyvalue.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.
*  ls_clrqlt-source = ls_linked_data-source.
*  ls_clrqlt-prim_table = ls_linked_data-prim_table.
*  ls_clrqlt-link_table = ls_linked_data-link_table.
*  ls_clrqlt-keyvalue = lv_keyvalue.
*ENDFORM. "commented By Nitin 3.4.24
FORM prepare_calc_itm_source USING ls_link_data TYPE /cgdc/s_clrqlink_data
                             CHANGING ls_critm_fcat TYPE /cgdc/s_clrqit.
  DATA: lt_dd03l  TYPE TABLE OF dd03l,
        lwa_dd03l TYPE dd03l.
  FIELD-SYMBOLS : <lt_link_data> TYPE STANDARD TABLE,
*                  <lwa_wa>       TYPE any,
                  <lv_value>     TYPE any.
  DATA : lv_keyvalue TYPE char300.
  DATA : lwa_ref_doc_fcat TYPE /cgdc/s_clrqit_ref_data_fcat.
  CLEAR gt_clrit_ref_fcat.
  SELECT *
    FROM dd03l
    INTO TABLE lt_dd03l
    WHERE tabname = ls_link_data-link_tb
         AND keyflag = abap_true
         AND fieldname <> gc_fieldname-mandt.
  IF sy-subrc = 0.
    SELECT *
      FROM dd04t
      INTO TABLE @DATA(lt_dd04t)
      FOR ALL ENTRIES IN @lt_dd03l
      WHERE rollname = @lt_dd03l-rollname.
    ASSIGN ls_link_data-data->* TO <lt_link_data>.
    READ TABLE <lt_link_data> ASSIGNING FIELD-SYMBOL(<lwa_wa>) INDEX 1.
    CHECK sy-subrc = 0.

    LOOP AT lt_dd03l INTO lwa_dd03l.
      ASSIGN COMPONENT lwa_dd03l-fieldname OF STRUCTURE <lwa_wa> TO <lv_value>.
      IF <lv_value> IS ASSIGNED.
        READ TABLE lt_dd04t INTO DATA(lwa_dd04t) WITH KEY rollname = lwa_dd03l-rollname.
        lwa_ref_doc_fcat-fieldname = lwa_dd04t-scrtext_l.
        lwa_ref_doc_fcat-fieldvalue = <lv_value>.
        APPEND lwa_ref_doc_fcat TO gt_clrit_ref_fcat.
        IF ls_critm_fcat-source IS INITIAL.
          ls_critm_fcat-source = <lv_value>.
        ELSE.
          CONCATENATE ls_critm_fcat-source gc_operator-fwd_slash <lv_value> INTO ls_critm_fcat-source.
        ENDIF.
        UNASSIGN <lv_value>.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM reverse_pricing USING lv_call_for     " Convert Pricing into -Ve
          CHANGING ls_clrq_itm_fcat TYPE /cgdc/s_clrqit_fcat
                   ls_clrq_itm      TYPE /cgdc/s_clrqit
                   lt_komv          TYPE komv_tab.

  DATA: ls_komk                TYPE komk,
        lv_offset              TYPE i,
        lv_kbetr               TYPE kbetr,
        ls_komk_temp           TYPE komk,
        lv_calculation_type(1) VALUE 'C',
        lwa_crcon              TYPE /cgdc/s_clrqcn,
        lwa_crcon_pricing      TYPE /cgdc/s_clrqcn,
        lwa_cscon              TYPE /cgdc/s_clrqcscn,
        ls_komp                TYPE komp,
        ls_kompax              TYPE kompax,
        lwa_konp               TYPE konp,
        lwa_cgrcon             TYPE komv,
        lwa_komv               TYPE komv,
        lwa_komv_old           TYPE komv,
        lwa_item_catg          TYPE /cgdc/t_rtbic,
        lwa_komv_new           TYPE komv,
        lt_komv_temp           TYPE komv_tab,
        lt_komv_old            TYPE komv_tab,
        lt_komv_old_t          TYPE komv_tab,
        lt_komv_cost           TYPE komv_tab,
        lwa_komv_cost          TYPE komv,
        lwa_clcgrp_func        TYPE /cgdc/t_rtbpcgf,
        lwa_clcgrp             TYPE /cgdc/t_rtbpcg,
        lwa_clrqbi             TYPE /cgdc/s_clrqbi,
        lv_exrate              TYPE kurrf,
        lt_rtbfm               TYPE /cgdc/tt_rtbfm,
        lv_count               TYPE i,
        lv_kstat               TYPE kstat,
        lv_num                 TYPE string,
        lv_field               TYPE string,
        lv_waerk               TYPE waerk,
        lv_kschl1              TYPE kschl.
  DATA lwa_return TYPE /cgdc/s_message.
  DATA: lwa_bplnty TYPE /cgdc/t_bplnty.
  DATA: lwa_critm_ic TYPE /cgdc/s_clrqit_ic.

  DATA : lv_knumv_st TYPE knumv,
         lv_knumv_ed TYPE knumv,
         lv_kposn_st TYPE kposn,
         lv_kposn_ed TYPE kposn.

  FIELD-SYMBOLS: <ls_komk_key> TYPE any,
                 <lwa_komv>    TYPE komv.
  FIELD-SYMBOLS : <lwa_main_item> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <fv_curr>  TYPE any,
                  <fv_curky> TYPE any,
                  <fv_field> TYPE any.

*  IF ls_clrq_itm-tmpit IS INITIAL.
*    PERFORM prepare_temp_hdr_itm_no CHANGING ls_clrq_itm.
*  ENDIF.
*  PERFORM prepare_komk USING ls_clrq_itm
*                    CHANGING ls_komk.
*
*  PERFORM prepare_pricing_data USING ls_clrq_itm
*                            CHANGING ls_komk
*                                     ls_komp.
*  ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
*  ASSIGN COMPONENT 'KEY_UC' OF STRUCTURE ls_komk TO <ls_komk_key>.
*  IF sy-subrc EQ 0.
*    READ TABLE gt_komk INTO ls_komk_temp WITH KEY ('KEY_UC') = <ls_komk_key>.
*  ELSE.
*    PERFORM get_komk_key_offset CHANGING lv_offset.
*    ASSIGN ls_komk+0(lv_offset) TO <ls_komk_key>.
*    IF <ls_komk_key> IS ASSIGNED.
*      READ TABLE gt_komk INTO ls_komk_temp  WITH KEY <ls_komk_key>.
*    ENDIF.
*  ENDIF.
*
*  IF sy-subrc NE 0.
*    CLEAR: ls_komk-ix_komt1_v, ls_komk-ix_komt1_b.
*
*    APPEND ls_komk TO gt_komk.
*    ls_komk-ix_komk = sy-tabix.
*    MODIFY gt_komk FROM ls_komk INDEX sy-tabix TRANSPORTING ix_komk.
*  ELSE.
*    ls_komk = ls_komk_temp.
*  ENDIF.
*
*  ls_komp-ix_komk = ls_komk-ix_komk.
*  APPEND ls_komp TO gt_komp.
*
*  CALL METHOD /cgdc/cl_rtb_src_db=>read_mapping
*    EXPORTING
*      iv_rtbpn      = gs_contract_hdr-/cgdc/rtbpn
*      iv_rtbsrc     = ls_clrq_itm-rtb_source
*    IMPORTING
*      et_srcfld_map = lt_rtbfm.
*
*  IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-calc_grp_itm.
*
*    LOOP AT gt_cgrcon_final INTO lwa_cgrcon.
*
*      lv_kbetr = CONV kbetr( lwa_cgrcon-kwert ).
*      PERFORM fill_komv USING lwa_cgrcon-kschl
*                              lv_kbetr
*                              gs_clrqdoc_infocus-x-crhdr-waerk
*                              lv_kstat
*                     CHANGING ls_komk
*                              ls_komp
*                              lt_komv.
*    ENDLOOP.
*
*  ELSE.
*    IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-bill_plan_line.
*      IF ls_clrq_itm_fcat-bpln_type IS INITIAL.
*        READ TABLE gs_clrqdoc_infocus-x-critm_ic INTO lwa_critm_ic WITH KEY clrno = ls_clrq_itm_fcat-clrno
*                                                                            clrit = ls_clrq_itm_fcat-clrit
*                                                                            clrsit = ls_clrq_itm_fcat-cuepos
*                                                                            clrdit = ls_clrq_itm_fcat-duepos.
*        IF sy-subrc = 0.
*          ls_clrq_itm_fcat-bpln_type = lwa_critm_ic-bpln_type.
*        ENDIF.
*      ENDIF.
*      PERFORM read_blnpl_item_type_data USING ls_clrq_itm_fcat-bpln_type
*                                              ls_clrq_itm-pstyv
*                                         CHANGING lwa_bplnty.
*      ls_clrq_itm_fcat-kschl1 = lwa_bplnty-tkschl.
*    ELSE.
*      ls_clrq_itm_fcat-kschl1 = gs_rtbp-ccond.
*    ENDIF.
**    Rounding
*    IF ls_clrq_itm_fcat-istat = 'A'.
*      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 + gs_rounding-kbetr1.
*    ELSE.
*      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 - gs_rounding-kbetr1 .
*    ENDIF.
*
*    IF ls_clrq_itm_fcat-kwaer1 IS INITIAL.
*      ls_clrq_itm_fcat-kwaer1 = ls_clrq_itm_fcat-waerk.
*    ENDIF.
*
*    LOOP AT lt_rtbfm INTO DATA(ls_rtbfm) WHERE tgtfld CP 'KBETR*'.
*      lv_count = lv_count + 1.
*      lv_num = lv_count.
*      CONDENSE lv_num NO-GAPS.
*      IF ls_rtbfm-tgtfld <> 'KBETR1'.
*        ASSIGN ls_rtbfm-tgtfld TO <fv_curr>.
*        lv_kschl1 = ls_rtbfm-tgtkschl.
*      ELSEIF ls_rtbfm-tgtfld = 'KBETR1'.
*        lv_kschl1 = ls_clrq_itm_fcat-kschl1.
*      ENDIF.
*
*      CONCATENATE 'KWAER' lv_num INTO lv_field.
*      ASSIGN COMPONENT ls_rtbfm-tgtfld OF STRUCTURE ls_clrq_itm_fcat TO FIELD-SYMBOL(<fv_value>).
*      ASSIGN COMPONENT lv_field  OF STRUCTURE ls_clrq_itm_fcat TO FIELD-SYMBOL(<fv_value1>).
*      IF <fv_value1> IS ASSIGNED AND <fv_value> IS ASSIGNED.
*        IF <fv_value1> IS INITIAL.
*          lv_waerk = ls_clrq_itm_fcat-waerk.
*        ELSE.
*          lv_waerk = <fv_value1>.
*        ENDIF.
*        IF lv_kschl1 IS NOT INITIAL.
*          lv_kstat = ls_rtbfm-kstat.
*          IF lv_kstat IS INITIAL.
*            READ TABLE gt_item_catg INTO lwa_item_catg
*            WITH KEY pstyv = ls_clrq_itm-pstyv.
*            IF sy-subrc = 0 .
*              IF lwa_item_catg-cost_stat IS NOT INITIAL.
*                lv_kstat = abap_true.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*          PERFORM fill_komv USING lv_kschl1
*                                      <fv_value>
*                                      lv_waerk
*                                      lv_kstat
*                             CHANGING ls_komk
*                                      ls_komp
*                                      lt_komv.
*        ENDIF.
*      ENDIF.
*      CLEAR lv_kstat.
*    ENDLOOP.
*    IF ls_clrq_itm_fcat-itmty = gc_clrq_itmty-bill_plan_line.
*      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = ls_clrq_itm_fcat-kschl1.
*      IF sy-subrc <> 0.
*
**      ls_clrq_itm_fcat-kbetr1 = lwa_komv-kbetr * ( ls_clrq_itm_fcat-kbetr1 / 100 ).
*
*        CLEAR:lv_kstat.
*        READ TABLE gt_item_catg INTO lwa_item_catg
*        WITH KEY pstyv = ls_clrq_itm-pstyv.
*        IF sy-subrc = 0 .
*          IF lwa_item_catg-cost_stat IS NOT INITIAL.
*            lv_kstat = abap_true.
*          ENDIF.
*        ENDIF.
*
*        PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
*                         ls_clrq_itm_fcat-kbetr1
*                         ls_clrq_itm_fcat-kwaer1
*                         lv_kstat
*                CHANGING ls_komk
*                         ls_komp
*                         lt_komv.
*        CLEAR:lv_kstat.
*      ENDIF.
*    ENDIF.
**    Rounding
*    IF gs_rounding-kbetr1 IS NOT INITIAL.
*      IF ls_clrq_itm_fcat-istat = 'A'.
*        gs_rounding-kbetr1 = - ( gs_rounding-kbetr1 ).
*      ENDIF.
*      ls_clrq_itm_fcat-kbetr1 = ls_clrq_itm_fcat-kbetr1 + gs_rounding-kbetr1 .
*      PERFORM fill_komv USING gs_rounding-kschl1
*                        gs_rounding-kbetr1
*                        gs_rounding-kwaer1
*                        lv_kstat
*               CHANGING ls_komk
*                        ls_komp
*                        lt_komv.
*    ENDIF.
*
*    READ TABLE gt_item_catg INTO lwa_item_catg
*    WITH KEY pstyv = ls_clrq_itm-pstyv.
*    IF sy-subrc = 0 .
*      IF lwa_item_catg-cost_stat IS NOT INITIAL.
*        READ TABLE lt_komv ASSIGNING <lwa_komv>
*        WITH KEY kschl = gs_rtbp-ccond.
*        IF <lwa_komv> IS ASSIGNED.
*          <lwa_komv>-kstat = abap_true.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*  ENDIF.
*
*  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
*  gs_clrit = ls_clrq_itm.
*
**  IF ls_clrq_itm-itmty <> gc_clrq_itmty-manual_line
**    AND ls_clrq_itm-itmty <> gc_clrq_itmty-prepayment_item
**    AND ls_clrq_itm-itmty <> gc_clrq_itmty-calc_grp_itm
**    AND ls_clrq_itm-itmty <> gc_clrq_itmty-bill_plan_line.
**    PERFORM update_costingsheet_conditions USING ls_clrq_itm_fcat
**                                        CHANGING ls_clrq_itm
**                                                 ls_komk
**                                                 ls_komp
**                                                 lt_komv
**                                                 lt_komv_cost.
**  ENDIF.
*  IF gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new.
*    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE clrdit = gs_clrit_org-item_delta.
*      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
*      lwa_komv-knumv = ls_clrq_itm-tmphd.
*      lwa_komv-kposn = ls_clrq_itm-tmpit.
*      APPEND lwa_komv TO lt_komv_old.
*      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
*      IF sy-subrc <> 0.
*        IF ls_clrq_itm_fcat-kschl1 = lwa_komv-kschl.
*          ls_clrq_itm_fcat-kbetr1 = lwa_komv-kbetr * ( ls_clrq_itm_fcat-kbetr1 / 100 ).
*          PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
*                           ls_clrq_itm_fcat-kbetr1
*                           ls_clrq_itm_fcat-kwaer1
*                           lv_kstat
*                  CHANGING ls_komk
*                           ls_komp
*                           lt_komv.
*        ELSE.
*          APPEND lwa_komv TO lt_komv.
*        ENDIF.
*      ENDIF.
*
*    ENDLOOP.
*  ELSE.
*    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE   clrit = gs_clrit_org-clrit
*                                                            AND  clrsit = ls_clrq_itm-cuepos
*                                                            AND clrdit = ls_clrq_itm-duepos.
*      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
*      lwa_komv-knumv = ls_clrq_itm-tmphd.
*      lwa_komv-kposn = ls_clrq_itm-tmpit.
*      APPEND lwa_komv TO lt_komv_old.
*      READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
*      IF sy-subrc <> 0.
*        READ TABLE gt_costingsheet_copy_contrl TRANSPORTING NO FIELDS WITH KEY clrcn = lwa_crcon-kschl.
*        IF sy-subrc <> 0.
*          IF ls_clrq_itm_fcat-kschl1 = lwa_komv-kschl.
*            PERFORM fill_komv USING ls_clrq_itm_fcat-kschl1
*                             ls_clrq_itm_fcat-kbetr1
*                             ls_clrq_itm_fcat-kwaer1
*                             lv_kstat
*                    CHANGING ls_komk
*                             ls_komp
*                             lt_komv.
*          ELSE.
*            APPEND lwa_komv TO lt_komv.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.

  "When the currency of cost posting is different than SD Doc currency
  IF gs_contract_hdr-waerk <> ls_clrq_itm-waerk.
    CLEAR lv_exrate.
    CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
      EXPORTING
        date             = ls_clrq_itm-exdat
        foreign_amount   = ls_clrq_itm-kbetr1
        foreign_currency = ls_clrq_itm-waerk
        local_currency   = gs_contract_hdr-waerk
      IMPORTING
        exchange_rate    = lv_exrate
      EXCEPTIONS
        no_rate_found    = 1
        overflow         = 2
        no_factors_found = 3
        no_spread_found  = 4
        derived_2_times  = 5
        OTHERS           = 6.
    IF sy-subrc <> 0.
    ENDIF.

    IF lv_exrate < 0.
      lv_exrate = ( 1 / abs( lv_exrate ) ).
    ENDIF.

    ls_komk-kurrf     = lv_exrate.
    ls_komk-kurrf_dat = ls_clrq_itm-exdat.


    IF <lwa_komv> IS ASSIGNED.
      UNASSIGN <lwa_komv>.
    ENDIF.
    LOOP AT lt_komv ASSIGNING <lwa_komv>.
      <lwa_komv>-waers = ls_clrq_itm-waerk.
      <lwa_komv>-kkurs = lv_exrate.
    ENDLOOP.
  ENDIF.

  SORT lt_komv BY knumv kposn stunr zaehk.
  PERFORM find_doc_st_ed_no USING lt_komv
                             CHANGING lv_knumv_st
                                      lv_knumv_ed
                                      lv_kposn_st
                                      lv_kposn_ed.
  CALL FUNCTION 'PRICING_COPY'
    EXPORTING
*     CURRENCY_NEW         = ' '
*     CURRENCY_NEW_DATE    = 0
*     CURRENCY_NEW_LOCAL   = ' '
*     CURRENCY_NEW_RATE    = 0
*     CURRENCY_NEW_TYPE    = 'M'
*     CURRENCY_OLD         = ' '
*     CURRENCY_OLD_LOCAL   = ' '
      document_number_from = lv_knumv_st
      document_number_to   = lv_knumv_ed
      item_number_from     = lv_kposn_st
      item_number_to       = lv_kposn_ed
      mode                 = 'F'
*     QUANTITY_NEW         = 0
*     QUANTITY_OLD         = 0
*     VBTYP_NEW            = ' '
*     ORDER_NUMBER         = ' '
*     AMOUNT               = 0
*     PROPORTION           = 0
*     AMOUNT_RULE          = ' '
*     SOURCE               = ' '
*     CHECK_REBATE         = ' '
*     IV_CPE_CPY_BUF_FIRST = ' '
*     IV_COPY_TO_EXISTING_ITEM       = ' '
*     IV_TURN_SIGN_COND_BASIS        = ' '
    TABLES
      tkomv                = lt_komv
*     SOURCE_KOMV          =
    .



  LOOP AT lt_komv INTO lwa_komv.

    MOVE-CORRESPONDING lwa_komv TO lwa_crcon.
    lwa_crcon-clrno = ls_clrq_itm-clrno.
    lwa_crcon-clrit = ls_clrq_itm-clrit.
    lwa_crcon-clrsit = ls_clrq_itm-clrsit.
    lwa_crcon-updkz = gc_updkz_new.
    lwa_crcon-clrdit = ls_clrq_itm-clrdit.

    IF lv_call_for IS INITIAL.

      APPEND lwa_crcon TO gs_clrqdoc_infocus-x-crcon.
      IF ls_clrq_itm-clgrp_kschl IS NOT INITIAL.
        APPEND lwa_crcon TO gt_clgrp_cnd_buffer.
      ENDIF.
    ELSE.
      APPEND lwa_crcon TO gt_clgrp_cnd_buffer.
    ENDIF.

  ENDLOOP.

  LOOP AT lt_komv_cost INTO lwa_komv_cost.
    MOVE-CORRESPONDING lwa_komv_cost TO lwa_cscon.
    lwa_cscon-clrno = ls_clrq_itm-clrno.
    lwa_cscon-clrit = ls_clrq_itm-clrit.
    lwa_cscon-clrsit = ls_clrq_itm-clrsit.
    lwa_cscon-updkz = gc_updkz_new.
    lwa_cscon-clrdit = ls_clrq_itm-clrdit.

    APPEND lwa_cscon TO gs_clrqdoc_infocus-x-cscon.

  ENDLOOP.


  MOVE-CORRESPONDING ls_komp TO ls_kompax.
  MOVE-CORRESPONDING ls_kompax TO ls_clrq_itm.

  READ TABLE lt_komv INTO lwa_komv WITH KEY kschl = gs_rtbp-ccond.
  IF sy-subrc = 0.
    ls_clrq_itm-kbetr1 = lwa_komv-kbetr.
  ENDIF.

*    Added for rounding issues
  READ TABLE lt_komv INTO lwa_komv WITH KEY kschl = gs_rounding-kschl1.
  IF sy-subrc = 0.
    ls_clrq_itm-kbetr1 = ls_clrq_itm-kbetr1 + lwa_komv-kbetr.
  ENDIF.


  "If SD Doc currency is not the same as CO Doc currency,
  "always post item in SD Doc currency
  IF gs_contract_hdr-waerk <> ls_clrq_itm-waerk.
    ls_clrq_itm-waerk = gs_contract_hdr-waerk.
  ENDIF.

  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = ls_clrq_itm-pstyv.
  IF sy-subrc = 0 .
    IF lwa_item_catg-stat IS NOT INITIAL.
      CLEAR: ls_clrq_itm-netwr,
             ls_kompax-netwr,
             ls_komp-netwr.
    ENDIF.
  ENDIF.

ENDFORM.
FORM prep_conc_komv USING ls_clrqit TYPE /cgdc/s_clrqit
                    CHANGING ls_clrqit_d TYPE /cgdc/s_clrqit
                             lt_komv TYPE komv_tab.

  DATA : ls_komk      TYPE komk,
         ls_komp      TYPE komp,
         lv_offset    TYPE i,
         lwa_komv     TYPE komv,
         ls_komk_temp TYPE komk.
  FIELD-SYMBOLS: <ls_komk_key> TYPE any,
                 <lwa_komv>    TYPE komv,
                 <lwa_crcon_n> TYPE /cgdc/s_clrqcn,
                 <lwa_crcs_n>  TYPE /cgdc/s_clrqcscn.


  LOOP AT gs_clrqdoc_infocus-x-crcon INTO DATA(lwa_crcon) WHERE   clrit = ls_clrqit-clrit
                                                            AND  clrsit = ls_clrqit-clrsit
                                                            AND clrdit = ls_clrqit-clrdit.

    READ TABLE gs_clrqdoc_infocus-x-crcon ASSIGNING <lwa_crcon_n> WITH KEY clrit = ls_clrqit_d-clrit
                                                                           clrsit = ls_clrqit_d-clrsit
                                                                           clrdit = ls_clrqit_d-clrdit
                                                                           kschl = lwa_crcon-kschl.
    IF sy-subrc = 0.
      <lwa_crcon_n>-kbetr = ( ( -1 ) * lwa_crcon-kbetr ) + <lwa_crcon_n>-kbetr.
      <lwa_crcon_n>-kwert = ( ( -1 ) * lwa_crcon-kwert ) + <lwa_crcon_n>-kwert.
      <lwa_crcon_n>-kawrt = ( ( -1 ) * lwa_crcon-kawrt ) + <lwa_crcon_n>-kawrt.

      <lwa_crcon_n>-kbetr24 = ( ( -1 ) * lwa_crcon-kbetr24 ) + <lwa_crcon_n>-kbetr24.
      <lwa_crcon_n>-kwert24 = ( ( -1 ) * lwa_crcon-kwert24 ) + <lwa_crcon_n>-kwert24.
      <lwa_crcon_n>-kawrt24 = ( ( -1 ) * lwa_crcon-kawrt24 ) + <lwa_crcon_n>-kawrt24.
    ELSE.
      APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-crcon ASSIGNING <lwa_crcon_n>.
      MOVE-CORRESPONDING lwa_crcon TO <lwa_crcon_n>.
      <lwa_crcon_n>-clrno = ls_clrqit_d-clrno.
      <lwa_crcon_n>-clrit = ls_clrqit_d-clrit.
      <lwa_crcon_n>-clrsit = ls_clrqit_d-clrsit.
      <lwa_crcon_n>-clrdit = ls_clrqit_d-clrdit.
      <lwa_crcon_n>-updkz = gc_updkz_new.
      <lwa_crcon_n>-kbetr = ( -1 ) * <lwa_crcon_n>-kbetr.
      <lwa_crcon_n>-kwert = ( -1 ) * <lwa_crcon_n>-kwert.
      <lwa_crcon_n>-kawrt = ( -1 ) * <lwa_crcon_n>-kawrt.
      <lwa_crcon_n>-kbetr24 = ( -1 ) * <lwa_crcon_n>-kbetr24.
      <lwa_crcon_n>-kwert24 = ( -1 ) * <lwa_crcon_n>-kwert24.
      <lwa_crcon_n>-kawrt24 = ( -1 ) * <lwa_crcon_n>-kawrt24.
    ENDIF.
  ENDLOOP.

  LOOP AT gs_clrqdoc_infocus-x-cscon INTO DATA(lwa_crcs) WHERE   clrit = ls_clrqit-clrit
                                                          AND  clrsit = ls_clrqit-clrsit
                                                          AND clrdit = ls_clrqit-clrdit.

    READ TABLE gs_clrqdoc_infocus-x-cscon ASSIGNING <lwa_crcs_n> WITH KEY clrit = ls_clrqit_d-clrit
                                                                           clrsit = ls_clrqit_d-clrsit
                                                                           clrdit = ls_clrqit_d-clrdit
                                                                           kschl = lwa_crcon-kschl.
    IF sy-subrc = 0.
      <lwa_crcs_n>-kbetr = ( ( -1 ) * lwa_crcs-kbetr ) + <lwa_crcs_n>-kbetr.
      <lwa_crcs_n>-kwert = ( ( -1 ) * lwa_crcs-kwert ) + <lwa_crcs_n>-kwert.
      <lwa_crcs_n>-kawrt = ( ( -1 ) * lwa_crcs-kawrt ) + <lwa_crcs_n>-kawrt.

      <lwa_crcs_n>-kbetr24 = ( ( -1 ) * lwa_crcs-kbetr24 ) + <lwa_crcs_n>-kbetr24.
      <lwa_crcs_n>-kwert24 = ( ( -1 ) * lwa_crcs-kwert24 ) + <lwa_crcs_n>-kwert24.
      <lwa_crcs_n>-kawrt24 = ( ( -1 ) * lwa_crcs-kawrt24 ) + <lwa_crcs_n>-kawrt24.
    ELSE.
      APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-cscon ASSIGNING <lwa_crcs_n>.
      MOVE-CORRESPONDING lwa_crcs TO <lwa_crcs_n>.
      <lwa_crcs_n>-clrno = ls_clrqit_d-clrno.
      <lwa_crcs_n>-clrit = ls_clrqit_d-clrit.
      <lwa_crcs_n>-clrsit = ls_clrqit_d-clrsit.
      <lwa_crcs_n>-clrdit = ls_clrqit_d-clrdit.
      <lwa_crcs_n>-updkz = gc_updkz_new.
      <lwa_crcs_n>-kbetr = ( -1 ) * <lwa_crcs_n>-kbetr.
      <lwa_crcs_n>-kwert = ( -1 ) * <lwa_crcs_n>-kwert.
      <lwa_crcs_n>-kawrt = ( -1 ) * <lwa_crcs_n>-kawrt.

      <lwa_crcs_n>-kbetr24 = ( -1 ) * <lwa_crcs_n>-kbetr24.
      <lwa_crcs_n>-kwert24 = ( -1 ) * <lwa_crcs_n>-kwert24.
      <lwa_crcs_n>-kawrt24 = ( -1 ) * <lwa_crcs_n>-kawrt24.
    ENDIF.
  ENDLOOP.
ENDFORM.
FORM prep_item_values.

  CLEAR gt_item_values.
  DATA : lwa_item_val TYPE s_item_val.
  LOOP AT gs_clrqdoc_infocus-x-critm INTO DATA(lwa_critm).
    READ TABLE gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_clrqbi) WITH KEY bitype = lwa_critm-bityp
                                                                         bill_item = lwa_critm-rtbbinr.
    IF lwa_critm-clrsit <> '000000'.

      IF lwa_clrqbi-bstat IS NOT INITIAL AND lwa_critm-istat = gc_ibill_stat-open.
        lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.
        lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
        lwa_item_val-bill_quan = lwa_item_val-bill_quan  + lwa_critm-zmeng.
        lwa_item_val-bill_amt = lwa_item_val-bill_amt + lwa_critm-kbetr1.
      ELSEIF lwa_critm-istat = 'A'.
        lwa_item_val-open_amt = lwa_item_val-open_amt + lwa_critm-kbetr1.
        lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
        lwa_item_val-open_quan = lwa_item_val-open_quan + lwa_critm-zmeng.
        lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.

      ELSEIF lwa_critm-istat = gc_ibill_stat-postponed.
        lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.
        lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
        IF lwa_critm-psdat IS NOT INITIAL.
          lwa_item_val-post_amt_ut = lwa_item_val-post_amt_ut + lwa_critm-kbetr1.
          lwa_item_val-post_quan_ut = lwa_item_val-post_quan_ut + lwa_critm-zmeng.
        ELSE.
          lwa_item_val-post_amt = lwa_item_val-post_amt + lwa_critm-kbetr1.
          lwa_item_val-post_quan = lwa_item_val-post_quan + lwa_critm-zmeng.
        ENDIF.

        READ TABLE gt_item_postponed ASSIGNING FIELD-SYMBOL(<lwa_postponed_data>) WITH KEY clrit = lwa_critm-clrit
                                                                             psdat = lwa_critm-psdat.
        IF sy-subrc = 0.
          <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + ( lwa_critm-zmeng * lwa_item_val-cost_ratio ).
          <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lwa_critm-zmeng.
        ELSE.
          APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
          <lwa_postponed_data>-clrit = lwa_critm-clrit.
          <lwa_postponed_data>-psdat = lwa_critm-psdat.
          <lwa_postponed_data>-postp_amt = <lwa_postponed_data>-postp_amt + ( lwa_critm-kbetr1 ).
          <lwa_postponed_data>-postp_qty = <lwa_postponed_data>-postp_qty + lwa_critm-zmeng.
        ENDIF.
      ELSEIF lwa_critm-istat = gc_ibill_stat-rejected.
        lwa_item_val-rej_amt = lwa_item_val-rej_amt +  lwa_critm-kbetr1.
        lwa_item_val-tot_amt = lwa_item_val-tot_amt + lwa_critm-kbetr1.
        lwa_item_val-rej_quan = lwa_item_val-rej_quan + lwa_critm-zmeng.
        lwa_item_val-tot_quan = lwa_item_val-tot_quan + lwa_critm-zmeng.

        READ TABLE gt_item_postponed ASSIGNING <lwa_postponed_data> WITH KEY clrit = lwa_critm-clrit
                                                                            psdat = lwa_critm-psdat.
        IF sy-subrc = 0.
          <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + ( lwa_critm-zmeng * lwa_item_val-cost_ratio ).
          <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lwa_critm-zmeng.
        ELSE.
          APPEND INITIAL LINE TO gt_item_postponed ASSIGNING <lwa_postponed_data>.
          <lwa_postponed_data>-clrit = lwa_critm-clrit.
          <lwa_postponed_data>-psdat = lwa_critm-psdat.
          <lwa_postponed_data>-rej_amt = <lwa_postponed_data>-rej_amt + ( lwa_critm-kbetr1 ).
          <lwa_postponed_data>-rej_qty = <lwa_postponed_data>-rej_qty + lwa_critm-zmeng.
        ENDIF.
      ENDIF.
    ELSE.
*      lwa_item_val-clrno = lwa_critm-clrno.
      lwa_item_val-clrit = lwa_critm-clrit.
    ENDIF.

    AT END OF clrit.
      APPEND lwa_item_val TO gt_item_values.
      CLEAR lwa_item_val.
    ENDAT.
    CLEAR : lwa_clrqbi.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_styles_bill_pre
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_styles_bill_pre .
*gs_variables-bp_prev_sel_row
  FIELD-SYMBOLS: <lwa_bill_data> TYPE any,
                 <lwa_value>     TYPE any,
                 <lwa_styles>    TYPE any.

  READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> WITH KEY (gc_clrqbi_field-srno) = gs_variables-bp_curr_sel_row .
  IF sy-subrc = 0.
    ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_data> TO <lwa_value>.
    IF <lwa_value> IS ASSIGNED.
      <lwa_value> = gc_rowcolor-yellow.
      UNASSIGN <lwa_value>.
    ENDIF.
  ENDIF.

  IF gs_variables-bp_prev_sel_row IS NOT INITIAL.
    IF gs_variables-bp_prev_sel_row <> gs_variables-bp_curr_sel_row.
      READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> INDEX gs_variables-bp_prev_sel_row.
      IF sy-subrc = 0.
        ASSIGN COMPONENT gc_fieldname-rwclr OF STRUCTURE <lwa_bill_data> TO <lwa_value>.
        IF <lwa_value> IS ASSIGNED.
          CLEAR <lwa_value>.
          UNASSIGN <lwa_value>.
        ENDIF.
      ENDIF.
    ENDIF.
    gs_variables-bp_prev_sel_row = gs_variables-bp_curr_sel_row.
  ENDIF.

  IF gs_variables-document_mode = gc_mode_change.
    DATA : lwa_style     TYPE lvc_s_styl.

    LOOP AT gt_bill_pre_data ASSIGNING <lwa_bill_data> WHERE bstat <> gc_bibstat-open.
      UNASSIGN <lwa_styles>.
      ASSIGN COMPONENT 'STYLES' OF STRUCTURE <lwa_bill_data> TO <lwa_styles>.

      lwa_style-fieldname = gc_clrqbi_field-pop_stdt.
      lwa_style-style = cl_gui_alv_grid=>mc_style_disabled.
      INSERT lwa_style INTO TABLE <lwa_styles>.

      lwa_style-fieldname = gc_clrqbi_field-pop_enddt.
      lwa_style-style = cl_gui_alv_grid=>mc_style_disabled.
      INSERT lwa_style INTO TABLE <lwa_styles>.

      lwa_style-fieldname = gc_clrqbi_field-bldat.
      lwa_style-style = cl_gui_alv_grid=>mc_style_disabled.
      INSERT lwa_style INTO TABLE <lwa_styles>.

*      CLEAR <lwa_styles>.

    ENDLOOP.

  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form prepare_partner_data01
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prepare_partner_data01 USING lv_call_for TYPE c " 1: Header, 2: Item, 3: Bill
                                  .
  DATA: lv_vbeln       TYPE vbeln,
        ls_vbpa        TYPE vbpav,
        ls_tpar        TYPE tpar,
        lwa_vbpa       LIKE LINE OF gt_vbpa,
        lwa_critm_fcat TYPE /cgdc/s_clrqit_fcat,
        lwa_bill_pre   TYPE /cgdc/s_clrqbi_fcat.

  lv_vbeln = gs_clrqdoc_infocus-x-crhdr-vgbel.
  PERFORM read_contract_partners USING lv_vbeln.


  CASE lv_call_for.
    WHEN gc_call-1.
      LOOP AT gt_vbpa INTO lwa_vbpa WHERE posnr NE gc_posnr_low.
        CLEAR ls_vbpa.
        MOVE-CORRESPONDING lwa_vbpa TO ls_vbpa.
        ls_vbpa-vbeln = gs_clrqdoc_infocus-x-crhdr-clrno.
        IF ls_vbpa-nrart IS INITIAL.
          PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
          ls_vbpa-nrart = ls_tpar-nrart.
        ENDIF.
        APPEND ls_vbpa TO gt_x_vbpa.
      ENDLOOP.
    WHEN gc_call-2.
      READ TABLE gt_calc_req_items_fcat
    WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
           clrit = gs_variables-item_infocus
    INTO lwa_critm_fcat.
      LOOP AT gt_vbpa INTO lwa_vbpa WHERE posnr EQ lwa_critm_fcat-vgpos.
        CLEAR ls_vbpa.
        MOVE-CORRESPONDING lwa_vbpa TO ls_vbpa.
        ls_vbpa-vbeln = gs_clrqdoc_infocus-x-crhdr-clrno.
        IF ls_vbpa-nrart IS INITIAL.
          PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
          ls_vbpa-nrart = ls_tpar-nrart.
        ENDIF.
        APPEND ls_vbpa TO gt_x_vbpa.
      ENDLOOP.
    WHEN gc_call-3 OR gc_call-4.
      LOOP AT gt_vbpa INTO lwa_vbpa WHERE posnr EQ gs_variables-sel_vgpos.
        CLEAR ls_vbpa.
        MOVE-CORRESPONDING lwa_vbpa TO ls_vbpa.
        ls_vbpa-vbeln = gs_clrqdoc_infocus-x-crhdr-clrno.
        IF ls_vbpa-nrart IS INITIAL.
          PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
          ls_vbpa-nrart = ls_tpar-nrart.
        ENDIF.
        APPEND ls_vbpa TO gt_x_vbpa.
      ENDLOOP.
  ENDCASE.

  CHECK lv_call_for NE gc_call-4.
  LOOP AT gt_vbpa INTO lwa_vbpa WHERE posnr EQ gc_posnr_low.
    READ TABLE gt_x_vbpa TRANSPORTING NO FIELDS WITH KEY parvw = lwa_vbpa-parvw.
    IF sy-subrc <> 0.
      CLEAR ls_vbpa.
      MOVE-CORRESPONDING lwa_vbpa TO ls_vbpa.
      ls_vbpa-vbeln = gs_clrqdoc_infocus-x-crhdr-clrno.
      IF ls_vbpa-nrart IS INITIAL.
        PERFORM read_tpar USING ls_vbpa-parvw CHANGING ls_tpar.
        ls_vbpa-nrart = ls_tpar-nrart.
      ENDIF.
      APPEND ls_vbpa TO gt_x_vbpa.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form prep_contr_date
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM prep_contr_date .
  TYPES: BEGIN OF ls_value,
           bldat TYPE /cgdc/clrq_bldat,
         END OF ls_value.

  DATA: lt_value_tab TYPE TABLE OF ls_value
        .
  FIELD-SYMBOLS: <ls_valuetab> TYPE ls_value.

*  CHECK gs_variables-rel_constr_dt IS INITIAL.
  LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE
    bstat = space AND
    bldat LE sy-datum.
    UNASSIGN <ls_valuetab>.
    APPEND INITIAL LINE TO lt_value_tab ASSIGNING <ls_valuetab>.
    <ls_valuetab>-bldat = lwa_crbinr-bldat.
  ENDLOOP.

  SORT lt_value_tab BY bldat DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_value_tab COMPARING bldat.
  READ TABLE lt_value_tab INDEX 1 ASSIGNING <ls_valuetab>.

  IF sy-subrc = 0 AND gs_variables-rel_constr_dt IS INITIAL.
    gs_variables-rel_constr_dt = <ls_valuetab>-bldat.
  ENDIF.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: /CGDC/LCLRQMF0R
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0R.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form register_control_events
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM register_control_events.

  DATA: lv_perform(30) VALUE 'REGISTER_CONTROL_EVENTS_'.

  CONCATENATE lv_perform sy-dynnr INTO lv_perform.

  IF go_event_handler IS INITIAL.
    CREATE OBJECT go_event_handler.
  ENDIF.

  PERFORM (lv_perform) IN PROGRAM (gc_program) IF FOUND.

ENDFORM.

FORM register_control_events_0100.

  SET HANDLER: go_event_handler->on_calc_req_wl_toolbar           FOR go_calc_request_worklist,
               go_event_handler->on_calc_req_wl_hotspot_click     FOR go_calc_request_worklist,
               go_event_handler->on_calc_req_wl_user_command      FOR go_calc_request_worklist.

ENDFORM.
FORM register_control_events_0506.

  SET HANDLER: go_event_handler->on_reassign_bi_user_cmd     FOR go_grid_reassign_bi.
ENDFORM.

FORM register_control_events_0170.

  SET HANDLER: go_event_handler->on_calc_req_itm_toolbar       FOR go_grid_calc_req_items,
               go_event_handler->on_calc_req_itm_button_clk    FOR go_grid_calc_req_items,
               go_event_handler->on_calc_req_itm_hotspot_click FOR go_grid_calc_req_items,
               go_event_handler->on_calc_req_itm_user_cmd      FOR go_grid_calc_req_items.

ENDFORM.

FORM register_control_events_0197.

  go_rej_itm_grid->register_edit_event(
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter " Event ID
    EXCEPTIONS
      error      = 1                " Error
      OTHERS     = 2
  ).

  SET HANDLER: go_event_handler->on_rej_itm_toolbar       FOR go_rej_itm_grid,
               go_event_handler->on_rej_itm_user_cmd      FOR go_rej_itm_grid,
               go_event_handler->on_rej_itm_hotspot_click FOR go_rej_itm_grid,
               go_event_handler->on_rej_itm_data_changed  FOR go_rej_itm_grid .

ENDFORM.

*&---------------------------------------------------------------------*
*& Form read_calc_request_document
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_VBELN
*&      <-- GS_CLRQDOC_INFOCUS
*&---------------------------------------------------------------------*
FORM read_calc_request_document USING lv_vbeln
                             CHANGING ls_clrq_doc TYPE /cgdc/s_clrq_doc.

  DATA: lt_clrq_doc TYPE /cgdc/tt_clrq_doc,
        lt_clrqno   TYPE /cgdc/tt_clrqno,
        lwa_clrqno  TYPE /cgdc/s_clrqno.

  lwa_clrqno-clrno = lv_vbeln.
  APPEND lwa_clrqno TO lt_clrqno.

  CALL FUNCTION '/CGDC/CLRQ_VIEW'
    EXPORTING
      i_key_only     = gs_variables-key_only
      it_clrqno      = lt_clrqno
    IMPORTING
      et_clrq_doc    = lt_clrq_doc
    EXCEPTIONS
      data_not_found = 1
      OTHERS         = 2.
  IF sy-subrc <> 0.
  ENDIF.

  IF sy-subrc EQ 0.
    READ TABLE lt_clrq_doc INTO ls_clrq_doc INDEX 1.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form read_tpar
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_VBPA_PARVW
*&      <-- LS_TPAR
*&---------------------------------------------------------------------*
FORM read_tpar  USING lv_parvw
             CHANGING ls_tpar.

  IF gt_tpar IS INITIAL.

    SELECT *
      FROM tpar
      INTO TABLE gt_tpar.

    IF sy-subrc EQ 0.
      SORT gt_tpar BY parvw.
    ENDIF.

  ENDIF.

  IF NOT gt_tpar IS INITIAL.
    READ TABLE gt_tpar INTO ls_tpar WITH KEY parvw = lv_parvw.
  ENDIF.

ENDFORM.

FORM read_tvko USING lv_vkorg
            CHANGING ls_tvko TYPE tvko.

  SELECT SINGLE * FROM tvko
  INTO CORRESPONDING FIELDS OF ls_tvko
  WHERE vkorg EQ lv_vkorg.

ENDFORM.

FORM read_tvta USING lv_vkorg
                     lv_vtweg
                     lv_spart
            CHANGING ls_tvta TYPE tvta
                     ls_tvko TYPE tvko.

  CHECK NOT lv_vkorg IS INITIAL
    AND NOT lv_vtweg IS INITIAL
    AND NOT lv_spart IS INITIAL.

  IF NOT ls_tvta-vkorg EQ lv_vkorg
    OR NOT ls_tvta-vtweg EQ lv_vtweg
    OR NOT ls_tvta-spart EQ lv_spart.

    CLEAR ls_tvta.

    CALL FUNCTION 'TVTA_SINGLE_READ'
      EXPORTING
        i_vkorg         = lv_vkorg
        i_vtweg         = lv_vtweg
        i_spart         = lv_spart
      IMPORTING
        o_tvta          = ls_tvta
      EXCEPTIONS
        not_found       = 1
        parameter_error = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
    ENDIF.

    PERFORM read_tvko USING lv_vkorg
                   CHANGING ls_tvko.

  ENDIF.

ENDFORM.

FORM read_t001  USING lv_bukrs
             CHANGING ls_t001 TYPE t001.

  SELECT SINGLE * FROM t001
    INTO ls_t001
    WHERE bukrs = lv_bukrs.

ENDFORM.

FORM read_contract_header USING lv_vbeln TYPE vbeln.

  CHECK lv_vbeln NE gs_vbak.

  SELECT SINGLE *
    FROM vbak INTO gs_vbak
    WHERE vbeln = lv_vbeln.

ENDFORM.

FORM read_contract_business_data USING lv_vbeln TYPE vbeln.

  READ TABLE gt_contract_business_data
  TRANSPORTING NO FIELDS
  WITH KEY vbeln = lv_vbeln.

  IF sy-subrc NE 0.

    CLEAR gt_contract_business_data[].

    SELECT * FROM vbkd
      INTO CORRESPONDING FIELDS OF TABLE gt_contract_business_data
      WHERE vbeln = lv_vbeln.

  ENDIF.

ENDFORM.

FORM read_contract_items USING lv_vbeln TYPE vbeln.

  READ TABLE gt_contract_itm
  TRANSPORTING NO FIELDS
  WITH KEY vbeln = lv_vbeln.

  IF sy-subrc NE 0.

    CLEAR: gt_contract_itm.

    SELECT * FROM vbap
      INTO CORRESPONDING FIELDS OF TABLE gt_contract_itm
      WHERE vbeln = lv_vbeln
        AND uepos = gc_posnr_low.

    SELECT *
    FROM /cgdc/cf_sd_it
    INTO TABLE gt_cnt_iflow
    FOR ALL ENTRIES IN gt_contract_itm
    WHERE vbeln = lv_vbeln AND posnr = gt_contract_itm-posnr ."AND uepos = gc_posnr_low .

  ENDIF.

  READ TABLE gt_contract_subitm
    TRANSPORTING NO FIELDS
    WITH KEY vbeln = lv_vbeln.

  IF sy-subrc NE 0.

    CLEAR: gt_contract_subitm.

    SELECT * FROM vbap
      INTO CORRESPONDING FIELDS OF TABLE gt_contract_subitm
      WHERE vbeln = lv_vbeln
        AND uepos <> gc_posnr_low.



  ENDIF.
ENDFORM.

FORM read_contract_partners USING lv_vbeln TYPE vbeln.

  READ TABLE gt_vbpa
  TRANSPORTING NO FIELDS
  WITH KEY vbeln = lv_vbeln.

  IF sy-subrc NE 0.

    CLEAR: gt_vbpa.

    SELECT * FROM vbpa
      INTO CORRESPONDING FIELDS OF TABLE gt_vbpa
      WHERE vbeln = lv_vbeln.

  ENDIF.

ENDFORM.

FORM read_customer_material USING ls_clrq_itm TYPE /cgdc/s_clrqit.

  CALL FUNCTION 'RV_CUSTOMER_MATERIAL_READ'
    EXPORTING
      cmr_kdmat      = ls_clrq_itm-kdmat
      cmr_kunnr      = gs_kuagv-kunnr
      cmr_matnr      = ls_clrq_itm-matnr
      cmr_vkorg      = gs_clrqdoc_infocus-x-crhdr-vkorg
      cmr_vtweg      = gs_clrqdoc_infocus-x-crhdr-vtweg
      cmr_spart      = gs_clrqdoc_infocus-x-crhdr-spart
      cmr_adrnr      = gs_kuagv-adrnr
    IMPORTING
      cmr_knmt       = gs_knmt
    EXCEPTIONS
      knmt_not_found = 1.

  IF sy-subrc NE 0.
    CLEAR: gs_knmt.
  ENDIF.

ENDFORM.

FORM read_contract_details USING lv_vbeln TYPE vbeln_va.
  DATA : lt_cont_item_temp LIKE gt_contract_itm.
  SELECT SINGLE * "Header
    FROM vbak
    INTO gs_contract_hdr
    WHERE vbtyp = if_sd_doc_category=>contract
      AND vbeln = lv_vbeln. "Header

  CHECK gs_contract_hdr IS NOT INITIAL.
  SELECT * "Item
    FROM vbap
    INTO TABLE gt_contract_itm
    WHERE vbeln = lv_vbeln
      AND uepos = gc_posnr_low.
  IF sy-subrc = 0.
    lt_cont_item_temp = gt_contract_itm[].
    SORT lt_cont_item_temp BY ps_psp_pnr.
    DELETE ADJACENT DUPLICATES FROM lt_cont_item_temp COMPARING ps_psp_pnr.
    IF lt_cont_item_temp IS NOT INITIAL.
      SELECT *
        FROM /cgdc/_billelem
        INTO TABLE gt_billitem
        FOR ALL ENTRIES IN lt_cont_item_temp
        WHERE bpspnr = lt_cont_item_temp-ps_psp_pnr.
    ENDIF.

    CLEAR: gt_contract_subitm.

    SELECT * FROM vbap
      INTO CORRESPONDING FIELDS OF TABLE gt_contract_subitm
      WHERE vbeln = lv_vbeln
        AND uepos <> gc_posnr_low.

    SELECT *
    FROM /cgdc/cf_sd_it
    INTO TABLE gt_cnt_iflow
    FOR ALL ENTRIES IN gt_contract_itm
    WHERE vbeln = lv_vbeln AND posnr = gt_contract_itm-posnr .
  ENDIF.

  SELECT *
    FROM vbkd
    INTO TABLE gt_contract_business_data
    WHERE vbeln = lv_vbeln.

*- copy gs_contract_hdr to gs_vbak
  gs_vbak = gs_contract_hdr .

ENDFORM.
"++ Start of change - Replacement routine for configured sources
FORM read_source_data_02 USING lt_src_tab TYPE table
                               lt_billelem TYPE /cgdc/tt_billelem
                               lt_prps_tab TYPE tt_prps
                               lt_contract TYPE /cgdc/tt_contr_key     "source replacement
                               lv_primtab  TYPE viewname
                               lt_sources  TYPE /cgdc/tt_source_data.
  DATA : lt_prps     TYPE TABLE OF prps,
         ls_prps_tmp TYPE prps,
         lt_prps_tmp TYPE TABLE OF prps,
         lwa_prps    TYPE prps.
  DATA:
    lwa_contract_item       TYPE vbap,
    lv_where_clause         TYPE string,
    lv_valid,
    lwa_add_cost_coll_pspnr LIKE LINE OF gt_add_cost_coll_pspnr,
    lwa_bill_element        TYPE /cgdc/_billelem.
  DATA: lwa_clrq_itm_new TYPE /cgdc/s_clrqit_fcat.
  DATA lwa_clrq_itm_old TYPE /cgdc/s_clrqit.
  DATA: lt_rtbpmdce  TYPE TABLE OF /cgdc/t_rtbpmdce,
        lwa_rtbpmdce TYPE /cgdc/t_rtbpmdce.
  DATA: lt_vbak TYPE TABLE OF vbak.
  DATA : lwa_return TYPE /cgdc/s_message.

*  DATA : ls_bilitty TYPE /cgdc/t_bilitty.

  FIELD-SYMBOLS: <lv_data>  TYPE data,
                 <lt_data>  TYPE ANY TABLE,
                 <lv_value> TYPE any.

  DATA: lt_data1         TYPE REF TO data,
        lt_ind_rlshp     TYPE REF TO data,
        lv_where         TYPE string,
        ls_link_data     TYPE /cgdc/s_crlink,   "Link tab update row
        lv_join_fld      TYPE fieldname,        "field used for indirect rlshp
        lv_ind_rshp_type TYPE typename,
        lv_subrc         TYPE sy-subrc,
        lv_clrno         TYPE /cgdc/clrqno.
  FIELD-SYMBOLS: <lfs_link>     TYPE any,
                 <lt_ind_rlshp> TYPE table.

  gs_variables-process_type = 'N'.

  IF lt_sources IS NOT INITIAL.

    "prepopulate data from call
    gt_billitem = lt_billelem.
    lt_prps = lt_prps_tab.

***Consider Add Cost Collectors
    PERFORM select_add_cost_collectors.
***
    IF sy-subrc = 0.
***Consider Add Cost Collectors
      IF NOT gt_add_cost_coll_pspnr IS INITIAL.

        LOOP AT lt_prps INTO lwa_prps.

          LOOP AT gt_add_cost_coll_pspnr INTO lwa_add_cost_coll_pspnr WHERE cost_coll_pspnr EQ lwa_prps-pspnr.
            CLEAR ls_prps_tmp.
            ls_prps_tmp-pspnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.
            APPEND ls_prps_tmp TO lt_prps_tmp.
          ENDLOOP.

        ENDLOOP.

        IF NOT lt_prps_tmp IS INITIAL.

          SELECT *
            FROM prps
            APPENDING TABLE lt_prps
            FOR ALL ENTRIES IN lt_prps_tmp
            WHERE pspnr EQ lt_prps_tmp-pspnr.

          SELECT *
            FROM /cgdc/_billelem
            INTO TABLE gt_billitem
            FOR ALL ENTRIES IN lt_prps
            WHERE pspnr = lt_prps-pspnr.
          IF sy-subrc = 0.
          ENDIF.
        ENDIF.

      ENDIF.
    ENDIF.

    "SOC ++14.03.24 - Check critical block on Contract before proceeding.
    CALL METHOD /cgdc/cl_rtb_src_db=>read_critical_blocks
      IMPORTING
        et_rng_block = DATA(lt_rng_block).
    "EOC ++14.03.24 - Check critical block on Contract before proceeding.

    IF gt_billitem IS NOT INITIAL.
      "inital Check and delete duplicate.
      SELECT *                                         "#EC CI_NOFIELD.
        FROM vbap
        INTO TABLE gt_contract_itm
        FOR ALL ENTRIES IN gt_billitem
        WHERE ps_psp_pnr = gt_billitem-bpspnr
        AND uepos = gc_posnr_low
        AND faksp NOT IN lt_rng_block.                  "++ don't process items with critical block
    ELSE.
      "select based on contract item
      SELECT *                                         "#EC CI_NOFIELD.
        FROM vbap
        INTO TABLE @gt_contract_itm
        FOR ALL ENTRIES IN @lt_contract
        WHERE vbeln = @lt_contract-vbeln
        AND   posnr = @lt_contract-posnr
        AND   uepos = @gc_posnr_low
        AND   faksp NOT IN @lt_rng_block.                "++ don't process items with critical block
    ENDIF.

    "continue with old logic from here on, cause we have contract items now
    IF gt_contract_itm IS NOT INITIAL.
      SELECT *
        FROM vbak
        INTO TABLE lt_vbak
        FOR ALL ENTRIES IN gt_contract_itm
        WHERE vbeln = gt_contract_itm-vbeln
        AND uvall = 'C'
        AND uvals = 'C'.


      SELECT *
      FROM /cgdc/cf_sd_it
      INTO TABLE gt_cnt_iflow
      FOR ALL ENTRIES IN gt_contract_itm
      WHERE vbeln = gt_contract_itm-vbeln AND posnr = gt_contract_itm-posnr.

      LOOP AT lt_sources ASSIGNING FIELD-SYMBOL(<lfs_source>).
        ASSIGN <lfs_source>-data->* TO <lt_data>.
        IF <lt_data> IS ASSIGNED.
          LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<lfs_data>).   "loop source loop data for each source
            IF <lv_value> IS ASSIGNED.
              UNASSIGN <lv_value>.
            ENDIF.

            ASSIGN COMPONENT 'OBJNR' OF STRUCTURE <lfs_data> TO <lv_value>.
            IF <lv_value> IS ASSIGNED.
              READ TABLE lt_prps
              INTO lwa_prps
              WITH KEY objnr = <lv_value>.
            ENDIF.

            " decoupled from general logic. If objnr is available, below logic will work
            IF lwa_prps-pspnr IS NOT INITIAL.
              READ TABLE gt_billitem
                   INTO lwa_bill_element
                   WITH KEY pspnr = lwa_prps-pspnr.

              READ TABLE gt_contract_itm INTO lwa_contract_item
              WITH KEY ps_psp_pnr = lwa_bill_element-bpspnr.
***Consider Add Cost Collectors
              IF sy-subrc NE 0 AND NOT lwa_bill_element-bpspnr IS INITIAL.
                READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_bill_element-bpspnr
                INTO lwa_add_cost_coll_pspnr.

                IF sy-subrc EQ 0.
                  READ TABLE gt_contract_itm INTO lwa_contract_item
                  WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.

                  IF sy-subrc NE 0.
                    CLEAR lwa_contract_item.
                  ENDIF.
                ENDIF.
              ENDIF.

              "always use passed reference.
              READ TABLE gt_contract_itm INTO lwa_contract_item
                WITH KEY vbeln = <lfs_source>-vbeln
                         posnr = <lfs_source>-posnr.
              IF sy-subrc NE 0.
                CLEAR lwa_contract_item.
              ENDIF.
*              ENDIF.
            ENDIF.

            READ TABLE lt_vbak INTO gs_contract_hdr
            WITH KEY vbeln = lwa_contract_item-vbeln.

            CHECK gs_contract_hdr-/cgdc/rtbpn IS NOT INITIAL.                      "Billing Block
            SELECT *
              FROM vbkd
              INTO TABLE gt_contract_business_data
              FOR ALL ENTRIES IN gt_contract_itm
              WHERE vbeln = gt_contract_itm-vbeln
              AND   posnr = gt_contract_itm-posnr.
            IF sy-subrc <> 0.
              CLEAR gt_contract_business_data.
            ENDIF.

            IF gs_clrqdoc_infocus-x-crhdr-vgbel NE gs_contract_hdr-vbeln
              AND gs_clrqdoc_infocus-x-crhdr-vgbel IS NOT INITIAL.
              APPEND gs_clrqdoc_infocus TO gt_clrqdoc_infocus.
              CLEAR:gs_clrqdoc_infocus.
              READ TABLE gt_clrqdoc_infocus INTO gs_clrqdoc_infocus

              WITH KEY x-crhdr-vgbel = gs_contract_hdr-vbeln.
              IF sy-subrc = 0.
                DELETE gt_clrqdoc_infocus INDEX sy-tabix.
              ENDIF.
            ENDIF.
            PERFORM prepare_calreqhdr USING gs_contract_hdr-vbeln '' ''.
*            "check if CR is not locked, before proceeding. Skip if locked.
*            IF lv_clrno IS INITIAL OR lv_clrno <> gs_clrqdoc_infocus-x-crhdr-clrno.   "only once for a CR
*              lv_clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
*              PERFORM enqueue_calc_request USING lv_clrno
*                                   gc_enq_mode-write
*                             CHANGING lv_subrc.
*              IF lv_subrc IS NOT INITIAL.
*                CONTINUE.                                       "can't update this 1
*              ENDIF.
*            ENDIF.

            IF <lv_value> IS ASSIGNED.
              UNASSIGN <lv_value>.
            ENDIF.
            ASSIGN COMPONENT 'OBJNR' OF STRUCTURE <lfs_data> TO <lv_value>.
            IF <lv_value> IS ASSIGNED.
              READ TABLE lt_prps TRANSPORTING NO FIELDS WITH KEY objnr = <lv_value>.
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.
            ENDIF.

            CLEAR lwa_clrq_itm_new.
            TRY.

                CALL METHOD /cgdc/cl_rtb_source_util=>map_source_data
                  EXPORTING
                    iv_rtbpn            = <lfs_source>-rtbpn
                    iv_rtb_source       = <lfs_source>-source
                    is_src_data         = <lfs_data>
                  IMPORTING
                    et_return           = DATA(lt_return)
                  CHANGING
                    /cgdc/s_clrqit_fcat = lwa_clrq_itm_new.
                IF lt_return IS NOT INITIAL.
                  APPEND LINES OF lt_return TO gt_messages.
                ENDIF.

                ASSIGN COMPONENT 'PERNR' OF STRUCTURE <lfs_data> TO <lv_data>.
                IF <lv_data> IS ASSIGNED.
                  lwa_clrq_itm_new-/cgdc/pernr = <lv_data>.
                ENDIF.
              CATCH cx_sy_conversion_overflow.

            ENDTRY.
            lwa_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

            "read RTB Usage and Bill usage.
            DATA(ls_rtb_as) = /cgdc/cl_rtb_src_db=>read_rtbp_as(
                                          iv_rtbpn      = <lfs_source>-rtbpn
                                          iv_rtb_source = CONV #( <lfs_source>-source ) ).

            lwa_clrq_itm_new-rtbusage   = ls_rtb_as-item_usage.
            lwa_clrq_itm_new-bill_usage = ls_rtb_as-bill_usage.



            "populate contract ref. if not already done.
            IF lwa_clrq_itm_new-vgbel IS INITIAL OR
               lwa_clrq_itm_new-vgpos IS INITIAL.
              lwa_clrq_itm_new-vgbel = <lfs_source>-vbeln.
              lwa_clrq_itm_new-vgpos = <lfs_source>-posnr.
            ENDIF.

            "get link tab name
            /cgdc/cl_rtb_src_db=>find_linktab_by_table( EXPORTING
                                                          iv_table = lv_primtab
                                                        IMPORTING
                                                          ev_linktab   = DATA(lv_linktab)
                                                          ev_update_fm = DATA(lv_update_fm) ).
            CREATE DATA ls_link_data-crlink_tab TYPE (lv_linktab).
            ASSIGN ls_link_data-crlink_tab->* TO <lfs_link>.
            IF <lfs_link> IS ASSIGNED.
              ls_link_data-source        = <lfs_source>-source.
              ls_link_data-prim_table    = lv_primtab.
              ls_link_data-link_table    = lv_linktab.
              ls_link_data-lnktab_upd_fm = lv_update_fm.
              "key fields will be assigned.
              MOVE-CORRESPONDING <lfs_data> TO <lfs_link>.
              PERFORM update_clrq_item01 USING space ls_link_data lwa_clrq_itm_old
                                         CHANGING lwa_clrq_itm_new.
            ENDIF.

            CLEAR gs_clrit_org.
          ENDLOOP.

          UNASSIGN: <lt_data>.
        ENDIF.
      ENDLOOP.

    ELSE.
      CLEAR gt_contract_itm.
    ENDIF.

  ENDIF.

ENDFORM.
FORM read_clrqcost.
ENDFORM.
FORM read_bill_pre_data.

  IF gt_bill_pre_data IS INITIAL  OR gs_variables-refersh_bill_bp_grid = abap_true .
    PERFORM select_bill_pre_data USING abap_true.
  ENDIF.

ENDFORM.

FORM register_control_events_0191.

  go_grid_calc_req_bill_pre->check_changed_data( ).
  go_grid_calc_req_bill_pre->register_edit_event(
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_modified
    EXCEPTIONS
      error      = 1
      OTHERS     = 2 ).
  SET HANDLER: go_event_handler->on_bill_pre_toolbar       FOR go_grid_calc_req_bill_pre,
               go_event_handler->on_bill_pre_hotspot_click FOR go_grid_calc_req_bill_pre,
               go_event_handler->on_bill_pre_user_cmd      FOR go_grid_calc_req_bill_pre,
               go_event_handler->on_bill_pre_data_changed  FOR go_grid_calc_req_bill_pre.

ENDFORM.
FORM register_control_events_0193.

  SET HANDLER: go_event_handler->on_req_calc_subitm_toolbar  FOR go_grid_calc_subitems,
               go_event_handler->on_req_calc_subitm_hotspot  FOR go_grid_calc_subitems,
               go_event_handler->on_req_calc_subitm_user_cmd FOR go_grid_calc_subitems.

ENDFORM.

FORM register_control_events_0121.

  SET HANDLER: go_event_handler->on_bill_hist_toolbar       FOR go_grid_bill_hist,
               go_event_handler->on_bill_hist_hotspot_click FOR go_grid_bill_hist,
               go_event_handler->on_bill_hist_user_cmd      FOR go_grid_bill_hist.

ENDFORM.


FORM register_control_events_0900.

  SET HANDLER: go_event_handler->on_req_calc_upd_prc_toolbar  FOR go_calc_req_upd_prc_grd,
               go_event_handler->on_req_calc_upd_prc_hotspot  FOR go_calc_req_upd_prc_grd,
               go_event_handler->on_req_calc_upd_prc_user_cmd FOR go_calc_req_upd_prc_grd.

ENDFORM.
FORM register_control_events_0901.
  SET HANDLER  go_event_handler->on_messages_user_command FOR go_message_grid.
  SET HANDLER go_event_handler->on_messages_button_click  FOR go_message_grid.
ENDFORM.
FORM read_master_data USING i_objnr        TYPE j_objnr
                            is_ionra       TYPE ionra
                            i_ovrhd_date   TYPE d
                   CHANGING cs_coiob       TYPE coiob
                            cr_master_data TYPE REF TO data
                            cv_kokrs       TYPE kokrs.

  DATA:
    ls_vbak       TYPE vbak,
    ls_vbap       TYPE vbap,
    ls_aufkv      TYPE aufkv,
    ls_aufk       TYPE aufk,
    ls_aufk_sd    TYPE aufk,
    ls_prps       TYPE prps,
    ls_ckphv      TYPE ckphv,
    lt_csksv      TYPE STANDARD TABLE OF csksv,
    ls_csksv      TYPE csksv,
    lt_cbprv      TYPE STANDARD TABLE OF cbprv,
    ls_cbprv      TYPE cbprv,
    l_message(80) TYPE c.

  FIELD-SYMBOLS <master_data> TYPE any.

* Read master data for object type:
  CASE is_ionra-obart.

*----------------------------------------------------------------------*
*   Internal orders and networks
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_or OR con_obart-objektart_np.
      CALL FUNCTION 'K_ORDER_READ'
        EXPORTING
          aufnr   = is_ionra-aufnr
        IMPORTING
          i_aufkv = ls_aufkv.
      IF sy-subrc <> 0.
      ENDIF.

      CREATE DATA cr_master_data TYPE aufkv.
      ASSIGN cr_master_data->* TO <master_data>.
      <master_data> = ls_aufkv.

      cv_kokrs = ls_aufkv-kokrs.
*----------------------------------------------------------------------*
*   Customer orders
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_vb.                            "2934715
      CALL FUNCTION 'SD_DOCUMENT_ACCOUNT_ASSIGNMENT'
        EXPORTING
          i_document_number = is_ionra-vbeln
          i_item_number     = is_ionra-posnr
        IMPORTING
          e_bukrs           = ls_aufk_sd-bukrs
          e_gsber           = ls_aufk_sd-gsber
          e_kokrs           = ls_aufk_sd-kokrs
          e_objnr           = ls_aufk_sd-objnr
          e_plant           = ls_aufk_sd-werks
          e_prctr           = ls_aufk_sd-prctr
          e_waerk           = ls_aufk_sd-waers
          e_vbap            = ls_vbap
          e_vbak            = ls_vbak
        EXCEPTIONS
          OTHERS            = 1.
      IF sy-subrc <> 0.
      ENDIF.

      IF sy-subrc = 1.
        MESSAGE e380(ka) WITH i_objnr INTO l_message.
        PERFORM message_add.
      ELSE.
*       Copy fields from sales order header/item:
        MOVE-CORRESPONDING ls_vbak TO ls_aufk.
        MOVE-CORRESPONDING ls_vbap TO ls_aufk.

*       Replace account assignment fields returned back from SD function call:
        ls_aufk-bukrs = ls_aufk_sd-bukrs.
        ls_aufk-gsber = ls_aufk_sd-gsber.
        ls_aufk-kokrs = ls_aufk_sd-kokrs.
        ls_aufk-objnr = ls_aufk_sd-objnr.
        ls_aufk-werks = ls_aufk_sd-werks.
        ls_aufk-prctr = ls_aufk_sd-prctr.
        ls_aufk-waers = ls_aufk_sd-waers.

        PERFORM find_bukrs_of_werks USING    ls_aufk-werks
                                    CHANGING ls_aufk-bukrs.
        ls_aufk-kappl = 'KA'.                               "#EC NOTEXT
        ls_aufk-kdauf = ls_vbap-vbeln.
        ls_aufk-kdpos = ls_vbap-posnr.


        ls_aufk-kalsm = gs_clrit-csheet.
        ls_aufk-zschl = gs_clrit-zschl.
        ls_aufk-waers = ls_vbap-waerk.
        ls_aufk-pspel = ls_vbap-ps_psp_pnr.

*       Update COIOB entry with SD object info:
        MOVE-CORRESPONDING ls_aufk TO cs_coiob.
        cs_coiob-zpspnr = ls_aufk-pspel.
        cs_coiob-owaer  = ls_aufk-waers.

*       Check Joint Venture fields
        IF NOT ls_aufk-vname IS INITIAL.
          CALL FUNCTION 'VALID_EQUITY_GROUP'
            EXPORTING
              bldat     = sy-datlo
              bukrs     = ls_aufk-bukrs
              etype     = ls_aufk-etype
              vname     = ls_aufk-vname
              coobjtype = cs_coiob-obart
            IMPORTING
              egrup     = cs_coiob-egrup
            EXCEPTIONS
              OTHERS    = 1.
          IF sy-subrc = 1.
            PERFORM message_add.
          ELSE.
            cs_coiob-vname  = ls_aufk-vname.
            cs_coiob-recid  = ls_aufk-recid.
          ENDIF.
        ENDIF.

        CREATE DATA cr_master_data TYPE aufk.
        ASSIGN cr_master_data->* TO <master_data>.
        <master_data> = ls_aufk.

        cv_kokrs = ls_aufk-kokrs.
      ENDIF.

*----------------------------------------------------------------------*
*   Work breakdown structure element (WBS)
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_pr.
      CALL FUNCTION 'CJPN_GET_WBS_ELEMENT'
        EXPORTING
          i_objnr = i_objnr
        IMPORTING
          e_prps  = ls_prps.
      IF sy-subrc <> 0.
      ENDIF.

      CREATE DATA cr_master_data TYPE prps .
      ASSIGN cr_master_data->* TO <master_data>.
      <master_data> = ls_prps.

      cv_kokrs = ls_prps-pkokr.

*----------------------------------------------------------------------*
*   Network activity and activity
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_nv.
      CALL FUNCTION 'CO_SF_AFVG_OBJECT_GET'
        EXPORTING
          aplzl     = is_ionra-aplzl
          aufpl     = is_ionra-aufpl
          nplnr     = is_ionra-aufnr
        IMPORTING
          aufkv_exp = ls_aufkv.
      IF sy-subrc <> 0.
      ENDIF.

      CREATE DATA cr_master_data TYPE aufkv.
      ASSIGN cr_master_data->* TO <master_data>.
      <master_data> = ls_aufkv.

      cv_kokrs = ls_aufkv-kokrs.

*----------------------------------------------------------------------*
*   OLC                                                   "BEGIN 1954141
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_ov.
      IF cl_erp_co_olc_sw_check=>erp_co_olc( ) = 'X'.
        CALL FUNCTION 'CO_SF_AFVG_OBJECT_GET'
          EXPORTING
            aplzl     = is_ionra-aplzl
            aufpl     = is_ionra-aufpl
          IMPORTING
            aufkv_exp = ls_aufkv.
        IF sy-subrc <> 0.
        ENDIF.

        CREATE DATA cr_master_data TYPE aufkv.
        ASSIGN cr_master_data->* TO <master_data>.
        <master_data> = ls_aufkv.

        cv_kokrs = ls_aufkv-kokrs.
      ENDIF.                                                "END 1954141

*----------------------------------------------------------------------*
*   Cost objects
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_hp.
      CALL FUNCTION 'K_KSTRG_READ'
        EXPORTING
          kstrg   = is_ionra-kstrg
        IMPORTING
          e_ckphv = ls_ckphv.
      IF sy-subrc <> 0.
      ENDIF.

      CREATE DATA cr_master_data TYPE ckphv.
      ASSIGN cr_master_data->* TO <master_data>.
      <master_data> = ls_ckphv.

      cv_kokrs = ls_ckphv-kokrs.

*----------------------------------------------------------------------*
*   Cost centers and activities
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_ks OR con_obart-objektart_kl.
      CALL FUNCTION 'K_COSTCENTERS_SELECT'
        EXPORTING
          kokrs           = is_ionra-kokrs
          cc_from         = is_ionra-kostl
          date_from       = i_ovrhd_date
          date_to         = i_ovrhd_date
          with_text       = ' '
          tabname         = 'CSKSV'                         "#EC NOTEXT
        TABLES
          it_result       = lt_csksv
        EXCEPTIONS
          no_record_found = 1
          OTHERS          = 2.
      IF sy-subrc = 0.
        READ TABLE lt_csksv INTO ls_csksv INDEX 1.
        CREATE DATA cr_master_data TYPE csksv.
        ASSIGN cr_master_data->* TO <master_data>.
        <master_data> = ls_csksv.

        cv_kokrs = ls_csksv-kokrs.
      ELSE.
        MESSAGE e421(ka) WITH i_ovrhd_date i_ovrhd_date INTO l_message.
        PERFORM message_add.
      ENDIF.

*----------------------------------------------------------------------*
*   Business processes
*----------------------------------------------------------------------*
    WHEN con_obart-objektart_bp.
      CALL FUNCTION 'K_PROCESSES_SELECT'
        EXPORTING
          kokrs           = is_ionra-kokrs
          bp_from         = is_ionra-prznr
          date_from       = i_ovrhd_date
          date_to         = i_ovrhd_date
          with_text       = space
          tabname         = 'CBPRV'                         "#EC NOTEXT
        TABLES
          it_result       = lt_cbprv
        EXCEPTIONS
          no_record_found = 1
          OTHERS          = 2.
      IF sy-subrc = 0.
        READ TABLE lt_cbprv INTO ls_cbprv INDEX 1.
        CREATE DATA cr_master_data TYPE cbprv.
        ASSIGN cr_master_data->* TO <master_data>.
        <master_data> = ls_cbprv.

        cv_kokrs = ls_cbprv-kokrs.
      ELSE.
        MESSAGE e421(ka) WITH i_ovrhd_date i_ovrhd_date INTO l_message.
        PERFORM message_add.
      ENDIF.

  ENDCASE.

ENDFORM.                    "read_master_data
*&---------------------------------------------------------------------*
*& Form read_blnpl_item_type_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_BLPLN_TYPE
*&      <-- LWA_BLPLN_TYPE
*&---------------------------------------------------------------------*
FORM read_blnpl_item_type_data  USING lv_blpln_type TYPE /cgdc/bp_item_type
                                      lv_item_catg  TYPE pstyv
                             CHANGING ls_blpln_type TYPE /cgdc/t_bplnty.
  IF gt_blp_itm_typ IS INITIAL .
    SELECT * FROM /cgdc/t_bplnty
      INTO TABLE gt_blp_itm_typ.
    SORT gt_blp_itm_typ BY bpln_type.
  ENDIF.

  READ TABLE gt_blp_itm_typ INTO ls_blpln_type
  WITH KEY bpln_type = lv_blpln_type
           BINARY SEARCH.
ENDFORM.
FORM register_control_events_0303.

  DATA: lt_f4  TYPE lvc_t_f4,
        lwa_f4 TYPE lvc_s_f4.

  go_postpone_grid->register_edit_event(
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter
    EXCEPTIONS
      error      = 1
      OTHERS     = 2 ).

  lwa_f4-fieldname = gc_clrq_postpone_field-rsncd.
  lwa_f4-chngeafter = abap_true.
  lwa_f4-register = abap_true.
  APPEND lwa_f4 TO lt_f4.

  go_postpone_grid->register_f4_for_fields(
    EXPORTING
      it_f4 = lt_f4 ).

  SET HANDLER: go_event_handler->on_postpone_toolbar       FOR go_postpone_grid,
               go_event_handler->on_postpone_user_cmd      FOR go_postpone_grid,
               go_event_handler->on_postpone_handle_change FOR go_postpone_grid,
               go_event_handler->on_postpone_f4            FOR go_postpone_grid.

ENDFORM.

FORM register_control_events_0202.
  DATA: lt_f4  TYPE lvc_t_f4,
        lwa_f4 TYPE lvc_s_f4.
  SET HANDLER: go_event_handler->on_man_itm_f4    FOR go_man_item_grid,
               go_event_handler->on_man_itm_handle_change     FOR go_man_item_grid.

  go_man_item_grid->register_edit_event(
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter
    EXCEPTIONS
      error      = 1
      OTHERS     = 2 ).

  lwa_f4-fieldname = gc_clrqit_field-matnr.
  lwa_f4-chngeafter = abap_true.
  lwa_f4-register = abap_true.
  APPEND lwa_f4 TO lt_f4.
  lwa_f4-fieldname = gc_clrqit_field-matwa.
  lwa_f4-chngeafter = abap_true.
  lwa_f4-register = abap_true.
  APPEND lwa_f4 TO lt_f4.
  lwa_f4-fieldname = gc_clrqit_field-reason_code.
  lwa_f4-chngeafter = abap_true.
  lwa_f4-register = abap_true.
  APPEND lwa_f4 TO lt_f4.

  go_man_item_grid->register_f4_for_fields(
    EXPORTING
      it_f4 = lt_f4 ).
ENDFORM.
FORM read_calc_grps_data.
  DATA: lt_clrit_key  TYPE TABLE OF /cgdc/s_clrqit_key,
        lwa_clrit_key TYPE /cgdc/s_clrqit_key.

  lwa_clrit_key-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  APPEND lwa_clrit_key TO lt_clrit_key.

  CALL FUNCTION '/CGDC/CLRQ_ITM_READ'
    EXPORTING
      i_clrno                = gs_clrqdoc_infocus-x-crhdr-clrno
      it_clrit               = lt_clrit_key
    IMPORTING
      et_crgrr               = gs_clrqdoc_infocus-x-crgrr
      et_crgrrf              = gs_clrqdoc_infocus-x-crgrrf
    EXCEPTIONS
      reached_max_char_limit = 1.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
FORM register_control_events_0151.

  SET HANDLER: go_event_handler->on_calc_grp_toolbar           FOR go_calc_grp_grid,
               go_event_handler->on_calc_grp_hotspot_click     FOR go_calc_grp_grid,
               go_event_handler->on_calc_grp_user_command      FOR go_calc_grp_grid.

ENDFORM.

FORM reprice_calc_req_back USING lv_flag TYPE boolean.
  DATA: lv_msg TYPE string,
        lv_ans TYPE c.

  TYPES: lty_params    TYPE RANGE OF vbeln_va.
  DATA: lv_jobnumber TYPE tbtcjob-jobcount,
        lv_params    TYPE lty_params,
        lv_jobname   TYPE tbtcjob-jobname,
        ls_jobip     TYPE tbtcstrt,
        ls_jobop     TYPE tbtcstrt,
        lv_message   TYPE string,
        lv_jobrel    TYPE btch0000-char1.

  CLEAR: lv_jobnumber,
         lv_params,
         lv_jobname,
         ls_jobip,
         ls_jobop,
         lv_message,
         lv_jobrel.

  CLEAR: lv_msg, lv_ans.

  IF lv_flag EQ abap_false.
    CONCATENATE TEXT-080 TEXT-081 INTO lv_msg SEPARATED BY space.
    PERFORM popup_to_confirm_for_on_demand USING TEXT-084
                                                   lv_msg
                                                   'Yes'
                                                   'ICON_CHECKED'
                                                   'No'
                                                   'ICON_CANCEL'
                                                   abap_true
                                             CHANGING lv_ans.
    IF sy-subrc EQ 0.
      CASE lv_ans.
        WHEN '1'.
          lv_params = VALUE lty_params( ( sign = 'I' option = 'EQ' low = gs_clrqdoc_infocus-x-crhdr-vgbel ) ).
          CONCATENATE gc_job_name_repr '_' sy-datum sy-uzeit INTO lv_jobname.
          CALL FUNCTION 'JOB_OPEN'
            EXPORTING
              jobname          = lv_jobname
            IMPORTING
              jobcount         = lv_jobnumber
            EXCEPTIONS
              cant_create_job  = 1
              invalid_job_data = 2
              jobname_missing  = 3
              OTHERS           = 4.
          IF sy-subrc EQ 0.
            IF gs_variables-partial_repr EQ abap_false.
              SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                                  WITH r_crt   = ''
                                  WITH r_reprc = ''
                                  WITH r_repfl = 'X'
                                  VIA JOB lv_jobname NUMBER lv_jobnumber
                                  AND RETURN.
            ELSE.
              SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                           WITH r_crt   = ''
                           WITH r_reprc = 'X'
                           WITH r_repfl = ''
                           VIA JOB lv_jobname NUMBER lv_jobnumber
                           AND RETURN.
            ENDIF.
            IF sy-subrc EQ 0.
              CALL FUNCTION 'BP_START_DATE_EDITOR'
                EXPORTING
                  stdt_dialog                    = 'Y'
                  stdt_input                     = ls_jobip
                  stdt_opcode                    = 14
                IMPORTING
                  stdt_output                    = ls_jobop
                EXCEPTIONS
                  fcal_id_not_defined            = 1
                  incomplete_last_startdate      = 2
                  incomplete_startdate           = 3
                  invalid_dialog_type            = 4
                  invalid_eventid                = 5
                  invalid_opcode                 = 6
                  invalid_opmode_name            = 7
                  invalid_periodbehaviour        = 8
                  invalid_predecessor_jobname    = 9
                  last_startdate_in_the_past     = 10
                  no_period_data_given           = 11
                  no_startdate_given             = 12
                  period_and_predjob_no_way      = 13
                  period_too_small_for_limit     = 14
                  predecessor_jobname_not_unique = 15
                  startdate_interval_too_large   = 16
                  startdate_in_the_past          = 17
                  startdate_is_a_holiday         = 18
                  startdate_out_of_fcal_range    = 19
                  stdt_before_holiday_in_past    = 20
                  unknown_fcal_error_occured     = 21
                  no_workday_nr_given            = 22
                  invalid_workday_countdir       = 23
                  invalid_workday_nr             = 24
                  notbefore_stdt_missing         = 25
                  workday_starttime_missing      = 26
                  no_eventid_given               = 27
                  OTHERS                         = 28.
              IF sy-subrc EQ 0.
                IF ls_jobop-startdttyp EQ 'D'.
                  CALL FUNCTION 'JOB_CLOSE'
                    EXPORTING
                      jobcount             = lv_jobnumber
                      jobname              = lv_jobname
                      sdlstrtdt            = ls_jobop-sdlstrtdt
                      sdlstrttm            = ls_jobop-sdlstrttm
                    IMPORTING
                      job_was_released     = lv_jobrel
                    EXCEPTIONS
                      cant_start_immediate = 1
                      invalid_startdate    = 2
                      jobname_missing      = 3
                      job_close_failed     = 4
                      job_nosteps          = 5
                      job_notex            = 6
                      lock_failed          = 7
                      invalid_target       = 8
                      invalid_time_zone    = 9
                      OTHERS               = 10.
                  IF sy-subrc EQ 0.
                    CASE lv_jobrel.
                      WHEN abap_true.
                        CLEAR gs_messages.
                        gs_messages-msgid = gc_clrq_msg_cls.
                        gs_messages-msgnr = '022'.
                        gs_messages-msgty = gc_message_type-information.
                        gs_messages-msgv1 = lv_jobname.
                        gs_messages-msgv2 = lv_jobnumber.
                        APPEND gs_messages TO gt_messages.
                      WHEN OTHERS.
                        CLEAR gs_messages.
                        gs_messages-msgid = gc_clrq_msg_cls.
                        gs_messages-msgnr = '023'.
                        gs_messages-msgty = gc_message_type-information.
                        gs_messages-msgv1 = lv_jobname.
                        gs_messages-msgv2 = lv_jobnumber.
                        APPEND gs_messages TO gt_messages.
                    ENDCASE.

                  ENDIF.
                ELSE.
                  CALL FUNCTION 'JOB_CLOSE'
                    EXPORTING
                      jobcount             = lv_jobnumber
                      jobname              = lv_jobname
                      strtimmed            = abap_true
                    IMPORTING
                      job_was_released     = lv_jobrel
                    EXCEPTIONS
                      cant_start_immediate = 1
                      invalid_startdate    = 2
                      jobname_missing      = 3
                      job_close_failed     = 4
                      job_nosteps          = 5
                      job_notex            = 6
                      lock_failed          = 7
                      invalid_target       = 8
                      invalid_time_zone    = 9
                      OTHERS               = 10.
                  IF sy-subrc EQ 0.
                    CASE lv_jobrel.
                      WHEN abap_true.
                        CLEAR gs_messages.
                        gs_messages-msgid = gc_clrq_msg_cls.
                        gs_messages-msgnr = '022'.
                        gs_messages-msgty = gc_message_type-information.
                        gs_messages-msgv1 = lv_jobname.
                        gs_messages-msgv2 = lv_jobnumber.
                        APPEND gs_messages TO gt_messages.
                      WHEN OTHERS.
                        CLEAR gs_messages.
                        gs_messages-msgid = gc_clrq_msg_cls.
                        gs_messages-msgnr = '023'.
                        gs_messages-msgty = gc_message_type-information.
                        gs_messages-msgv1 = lv_jobname.
                        gs_messages-msgv2 = lv_jobnumber.
                        APPEND gs_messages TO gt_messages.
                    ENDCASE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '029'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_jobname.
              APPEND gs_messages TO gt_messages.
            ENDIF.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_clrq_msg_cls.
            gs_messages-msgnr = '030'.
            gs_messages-msgty = gc_message_type-information.
            gs_messages-msgv1 = lv_jobname.
            APPEND gs_messages TO gt_messages.
          ENDIF.
        WHEN OTHERS.
          "No action required
      ENDCASE.
    ENDIF.
  ELSE.
    lv_params = VALUE lty_params( ( sign = 'I' option = 'EQ' low = gs_clrqdoc_infocus-x-crhdr-vgbel ) ).
    CONCATENATE gc_job_name_repr '_' sy-datum sy-uzeit INTO lv_jobname.
    CALL FUNCTION 'JOB_OPEN'
      EXPORTING
        jobname          = lv_jobname
      IMPORTING
        jobcount         = lv_jobnumber
      EXCEPTIONS
        cant_create_job  = 1
        invalid_job_data = 2
        jobname_missing  = 3
        OTHERS           = 4.
    IF sy-subrc EQ 0.
      IF gs_variables-partial_repr EQ abap_false.
        SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                            WITH r_crt   = ''
                            WITH r_reprc = ''
                            WITH r_repfl = 'X'
                            VIA JOB lv_jobname NUMBER lv_jobnumber
                            AND RETURN.
      ELSE.
        SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                    WITH r_crt   = ''
                    WITH r_reprc = 'X'
                    WITH r_repfl = ''
                    VIA JOB lv_jobname NUMBER lv_jobnumber
                    AND RETURN.
      ENDIF.
      IF sy-subrc EQ 0.
        CALL FUNCTION 'BP_START_DATE_EDITOR'
          EXPORTING
            stdt_dialog                    = 'Y'
            stdt_input                     = ls_jobip
            stdt_opcode                    = 14
          IMPORTING
            stdt_output                    = ls_jobop
          EXCEPTIONS
            fcal_id_not_defined            = 1
            incomplete_last_startdate      = 2
            incomplete_startdate           = 3
            invalid_dialog_type            = 4
            invalid_eventid                = 5
            invalid_opcode                 = 6
            invalid_opmode_name            = 7
            invalid_periodbehaviour        = 8
            invalid_predecessor_jobname    = 9
            last_startdate_in_the_past     = 10
            no_period_data_given           = 11
            no_startdate_given             = 12
            period_and_predjob_no_way      = 13
            period_too_small_for_limit     = 14
            predecessor_jobname_not_unique = 15
            startdate_interval_too_large   = 16
            startdate_in_the_past          = 17
            startdate_is_a_holiday         = 18
            startdate_out_of_fcal_range    = 19
            stdt_before_holiday_in_past    = 20
            unknown_fcal_error_occured     = 21
            no_workday_nr_given            = 22
            invalid_workday_countdir       = 23
            invalid_workday_nr             = 24
            notbefore_stdt_missing         = 25
            workday_starttime_missing      = 26
            no_eventid_given               = 27
            OTHERS                         = 28.
        IF sy-subrc EQ 0.
          IF ls_jobop-startdttyp EQ 'D'.
            CALL FUNCTION 'JOB_CLOSE'
              EXPORTING
                jobcount             = lv_jobnumber
                jobname              = lv_jobname
                sdlstrtdt            = ls_jobop-sdlstrtdt
                sdlstrttm            = ls_jobop-sdlstrttm
              IMPORTING
                job_was_released     = lv_jobrel
              EXCEPTIONS
                cant_start_immediate = 1
                invalid_startdate    = 2
                jobname_missing      = 3
                job_close_failed     = 4
                job_nosteps          = 5
                job_notex            = 6
                lock_failed          = 7
                invalid_target       = 8
                invalid_time_zone    = 9
                OTHERS               = 10.
            IF sy-subrc EQ 0.
              CASE lv_jobrel.
                WHEN abap_true.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '022'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                WHEN OTHERS.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '023'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
              ENDCASE.

            ENDIF.
          ELSE.
            CALL FUNCTION 'JOB_CLOSE'
              EXPORTING
                jobcount             = lv_jobnumber
                jobname              = lv_jobname
                strtimmed            = abap_true
              IMPORTING
                job_was_released     = lv_jobrel
              EXCEPTIONS
                cant_start_immediate = 1
                invalid_startdate    = 2
                jobname_missing      = 3
                job_close_failed     = 4
                job_nosteps          = 5
                job_notex            = 6
                lock_failed          = 7
                invalid_target       = 8
                invalid_time_zone    = 9
                OTHERS               = 10.
            IF sy-subrc EQ 0.
              CASE lv_jobrel.
                WHEN abap_true.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '022'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                WHEN OTHERS.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '023'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
              ENDCASE.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '029'.
        gs_messages-msgty = gc_message_type-information.
        gs_messages-msgv1 = lv_jobname.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '030'.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = lv_jobname.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.
ENDFORM.

FORM reprice_calc_req_fore.
  TYPES lty_params TYPE RANGE OF vbeln_va.
  DATA: lv_msg    TYPE string,
        lv_ans    TYPE c,
        lv_params TYPE lty_params.

  CLEAR: lv_msg, lv_ans.

  CONCATENATE TEXT-082 TEXT-083 INTO lv_msg SEPARATED BY space.

  PERFORM popup_to_confirm_for_on_demand USING TEXT-084
                                               lv_msg
                                               TEXT-063
                                               space
                                               TEXT-064
                                               space
                                               abap_true
                                         CHANGING lv_ans.
  IF sy-subrc EQ 0.
    CASE lv_ans.
      WHEN '1'.

        CLEAR lv_params.
        lv_params = VALUE lty_params( ( sign = 'I' option = 'EQ' low = gs_clrqdoc_infocus-x-crhdr-vgbel ) ).
        IF gs_variables-partial_repr IS INITIAL.
          SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                                    WITH r_crt    = abap_false
                                    WITH r_reprc  = abap_false
                                    WITH r_repfl  = abap_true
                                    WITH p_parall = abap_true
                                    AND RETURN.
        ELSE.
          SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                          WITH r_crt    = abap_false
                          WITH r_reprc  = abap_true
                          WITH r_repfl  = abap_false
                          WITH p_parall = abap_false
                          AND RETURN.
        ENDIF.
        IF sy-subrc EQ 0.
          COMMIT WORK AND WAIT.
        ENDIF.
      WHEN '2'.
        PERFORM reprice_calc_req_back USING abap_true.
      WHEN OTHERS.
    ENDCASE.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form reassign_billing_item_number
*&---------------------------------------------------------------------*
*& This subroutine will reassign the billing item number to a different
*& existing billing item number on the same calc req.
*&---------------------------------------------------------------------*
*&      --> LWA_CALC_REQ_ITEMS_FCAT
*&---------------------------------------------------------------------*
FORM reassign_billing_item_number CHANGING lwa_calc_req_items_fcat
                                      TYPE /cgdc/s_clrqit_fcat.
  TYPES: BEGIN OF lty_data,
           flag      TYPE c,
           clrno     TYPE /cgdc/clrqno,
           bitype    TYPE /cgdc/bitype,
           bill_item TYPE /cgdc/billitem_guid,
           bilmatnr  TYPE /cgdc/bilmatnr,
           pop_stdt  TYPE /cgdc/pop_start,
           pop_enddt TYPE /cgdc/pop_end,
           bldat     TYPE /cgdc/clrq_bldat,
           exdat     TYPE /cgdc/xrtdate,
           fkrel     TYPE fkrel,
         END OF lty_data.

  DATA: lt_data     TYPE STANDARD TABLE OF /cgdc/s_clrqbi_fcat,
        ls_data     TYPE /cgdc/s_clrqbi,
        ls_bilitty  TYPE /cgdc/t_bilitty,
        lt_bilitty  TYPE TABLE OF /cgdc/t_bilitty,
        lt_fieldcat TYPE slis_t_fieldcat_alv,
        ls_fieldcat TYPE slis_fieldcat_alv,
        lv_lines    TYPE sy-tabix,
        lv_flag,
        lt_fcat     TYPE lvc_t_fcat,
        lwa_fcat    TYPE lvc_s_fcat,
        lt_clrqbi   TYPE /cgdc/tt_clrqbi,
        ls_clrqbi   TYPE /cgdc/s_clrqbi,
        ls_clrtic   TYPE /cgdc/t_rtbic. " RTB24-15

  FIELD-SYMBOLS : <lwa_fieldcat> TYPE any,
                  <lv_seltext>   TYPE any.
  FIELD-SYMBOLS: <ls_clrqit>  TYPE /cgdc/s_clrqit,
                 <lfs_clrqbi> TYPE /cgdc/s_clrqbi.

  CLEAR: ls_data,
         lt_data,
         lv_flag,
         gt_reassign_bi_data,
         ls_bilitty.

  SELECT * FROM /cgdc/_clrqbi

           WHERE clrno    EQ @lwa_calc_req_items_fcat-clrno
*           AND   bitype   EQ @lwa_calc_req_items_fcat-bityp
*           AND   bilmatnr EQ @lwa_calc_req_items_fcat-bilmatnr
*           AND   bstat    EQ @lwa_calc_req_items_fcat-bstat
           AND   bill_usage  EQ @lwa_calc_req_items_fcat-bill_usage
           AND   ps_psp_pnr  EQ @lwa_calc_req_items_fcat-ps_psp_pnr
           AND   /cgdc/cline EQ @lwa_calc_req_items_fcat-/cgdc/cline
           AND   pop_stdt    <= @lwa_calc_req_items_fcat-srvc_date
           AND   pop_enddt   >= @lwa_calc_req_items_fcat-srvc_date
           AND   bstat       EQ ' '
           INTO CORRESPONDING FIELDS OF TABLE @lt_clrqbi.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  CLEAR ls_clrqbi.
  LOOP AT lt_clrqbi INTO ls_clrqbi.
    CLEAR lv_flag.
    IF lwa_calc_req_items_fcat-rtbbinr EQ ls_clrqbi-bill_item.
      CLEAR ls_clrqbi.
      CONTINUE.
    ELSE.
      CLEAR ls_bilitty.
      READ TABLE gt_bilitty INTO ls_bilitty
                            WITH KEY bilitmtyp = ls_clrqbi-bitype
                                     allow_to  = abap_true.

      IF sy-subrc EQ 0.
        SELECT *
            FROM /cgdc/t_clrqbic
            INTO TABLE @DATA(lt_sum_char)
            WHERE bilitmtyp = @ls_clrqbi-bitype
            AND required =  @abap_true.

        LOOP AT lt_sum_char INTO DATA(lwa_sum_char)
          WHERE bilitmtyp = ls_clrqbi-bitype.
          ASSIGN COMPONENT lwa_sum_char-fieldname
          OF STRUCTURE lwa_calc_req_items_fcat TO FIELD-SYMBOL(<lwa_fcat>).

          ASSIGN COMPONENT lwa_sum_char-fieldname
          OF STRUCTURE ls_clrqbi
          TO FIELD-SYMBOL(<lwa_clrqbi>).
          IF <lwa_clrqbi> IS ASSIGNED AND <lwa_fcat> IS ASSIGNED.
            IF <lwa_clrqbi> <> <lwa_fcat>.
              lv_flag = abap_true.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
        IF lv_flag IS  INITIAL.
          MOVE-CORRESPONDING ls_clrqbi TO ls_data.
          APPEND ls_data TO gt_reassign_bi_data.
          CLEAR ls_data.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF NOT gt_reassign_bi_data IS INITIAL.

    CLEAR: ls_fieldcat, lt_fieldcat.

    SELECT *
                FROM /cgdc/t_bilitty
                INTO TABLE @lt_bilitty.
    CLEAR gv_cont506_flag.
    CALL SCREEN '0506' STARTING AT 7 7 ENDING AT 145 20.

    IF gv_cont506_flag = abap_true.

      lv_lines = lines( gt_selcted_rows_bi_reassign ).

      IF lv_lines GT 1.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '002'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
        EXIT.
      ELSE.
        CLEAR ls_data.
        READ TABLE gt_selcted_rows_bi_reassign INTO ls_data INDEX 1.
        IF sy-subrc EQ 0.
          IF <lfs_clrqbi> IS ASSIGNED.
            UNASSIGN <lfs_clrqbi>.
          ENDIF.
          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lfs_clrqbi>
          WITH KEY clrno     = lwa_calc_req_items_fcat-clrno
                   bill_item = lwa_calc_req_items_fcat-rtbbinr.
          IF sy-subrc EQ 0.
            READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = lwa_calc_req_items_fcat-pstyv. "RTB24-15

            READ TABLE lt_bilitty INTO ls_bilitty
            WITH KEY bilitmtyp = <lfs_clrqbi>-bitype.
            IF sy-subrc = 0.
              IF ls_bilitty-qty_1 = abap_true.
                <lfs_clrqbi>-zmeng = 1.
              ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                <lfs_clrqbi>-zmeng = <lfs_clrqbi>-zmeng - lwa_calc_req_items_fcat-zmeng.
              ENDIF.
            ENDIF.
            <lfs_clrqbi>-netwr = <lfs_clrqbi>-netwr - lwa_calc_req_items_fcat-netwr.
            <lfs_clrqbi>-wavwr = <lfs_clrqbi>-wavwr - lwa_calc_req_items_fcat-wavwr.
            <lfs_clrqbi>-kzwi1 = <lfs_clrqbi>-kzwi1 - lwa_calc_req_items_fcat-kzwi1.
            <lfs_clrqbi>-kzwi2 = <lfs_clrqbi>-kzwi2 - lwa_calc_req_items_fcat-kzwi2.
            <lfs_clrqbi>-kzwi3 = <lfs_clrqbi>-kzwi3 - lwa_calc_req_items_fcat-kzwi3.
            <lfs_clrqbi>-kzwi4 = <lfs_clrqbi>-kzwi4 - lwa_calc_req_items_fcat-kzwi4.
            <lfs_clrqbi>-kzwi5 = <lfs_clrqbi>-kzwi5 - lwa_calc_req_items_fcat-kzwi5.
            <lfs_clrqbi>-kzwi6 = <lfs_clrqbi>-kzwi6 - lwa_calc_req_items_fcat-kzwi6.
            "++SOC - Decimal precision fields
            <lfs_clrqbi>-netwr24 = <lfs_clrqbi>-netwr24 - lwa_calc_req_items_fcat-netwr24.
            <lfs_clrqbi>-kzwi1_24 = <lfs_clrqbi>-kzwi1_24 - lwa_calc_req_items_fcat-kzwi1_24.
            <lfs_clrqbi>-kzwi2_24 = <lfs_clrqbi>-kzwi2_24 - lwa_calc_req_items_fcat-kzwi2_24.
            <lfs_clrqbi>-kzwi3_24 = <lfs_clrqbi>-kzwi3_24 - lwa_calc_req_items_fcat-kzwi3_24.
            <lfs_clrqbi>-kzwi4_24 = <lfs_clrqbi>-kzwi4_24 - lwa_calc_req_items_fcat-kzwi4_24.
            <lfs_clrqbi>-kzwi5_24 = <lfs_clrqbi>-kzwi5_24 - lwa_calc_req_items_fcat-kzwi5_24.
            <lfs_clrqbi>-kzwi6_24 = <lfs_clrqbi>-kzwi6_24 - lwa_calc_req_items_fcat-kzwi6_24.
            "++EOC - decimal precision fields
            <lfs_clrqbi>-updkz = gc_updkz_update.
          ENDIF.

          IF <lfs_clrqbi> IS ASSIGNED.
            UNASSIGN <lfs_clrqbi>.
          ENDIF.
          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lfs_clrqbi>
          WITH KEY clrno     = ls_data-clrno
                   bill_item = ls_data-bill_item.
          IF sy-subrc EQ 0.
            READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = lwa_calc_req_items_fcat-pstyv. "RTB24-15

            READ TABLE lt_bilitty INTO ls_bilitty
              WITH KEY bilitmtyp = <lfs_clrqbi>-bitype.
            IF sy-subrc = 0.
              IF ls_bilitty-qty_1 = abap_true.
                <lfs_clrqbi>-zmeng = 1.
              ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                <lfs_clrqbi>-zmeng = <lfs_clrqbi>-zmeng + lwa_calc_req_items_fcat-zmeng.
              ENDIF.
            ENDIF.

            <lfs_clrqbi>-netwr = <lfs_clrqbi>-netwr + lwa_calc_req_items_fcat-netwr.
            <lfs_clrqbi>-wavwr = <lfs_clrqbi>-wavwr + lwa_calc_req_items_fcat-wavwr.
            <lfs_clrqbi>-kzwi1 = <lfs_clrqbi>-kzwi1 + lwa_calc_req_items_fcat-kzwi1.
            <lfs_clrqbi>-kzwi2 = <lfs_clrqbi>-kzwi2 + lwa_calc_req_items_fcat-kzwi2.
            <lfs_clrqbi>-kzwi3 = <lfs_clrqbi>-kzwi3 + lwa_calc_req_items_fcat-kzwi3.
            <lfs_clrqbi>-kzwi4 = <lfs_clrqbi>-kzwi4 + lwa_calc_req_items_fcat-kzwi4.
            <lfs_clrqbi>-kzwi5 = <lfs_clrqbi>-kzwi5 + lwa_calc_req_items_fcat-kzwi5.
            <lfs_clrqbi>-kzwi6 = <lfs_clrqbi>-kzwi6 + lwa_calc_req_items_fcat-kzwi6.
            "++SOC - Decimal Precision changes
            <lfs_clrqbi>-netwr24 = <lfs_clrqbi>-netwr24 + lwa_calc_req_items_fcat-netwr24.
            <lfs_clrqbi>-kzwi1_24 = <lfs_clrqbi>-kzwi1_24 + lwa_calc_req_items_fcat-kzwi1_24.
            <lfs_clrqbi>-kzwi2_24 = <lfs_clrqbi>-kzwi2_24 + lwa_calc_req_items_fcat-kzwi2_24.
            <lfs_clrqbi>-kzwi3_24 = <lfs_clrqbi>-kzwi3_24 + lwa_calc_req_items_fcat-kzwi3_24.
            <lfs_clrqbi>-kzwi4_24 = <lfs_clrqbi>-kzwi4_24 + lwa_calc_req_items_fcat-kzwi4_24.
            <lfs_clrqbi>-kzwi5_24 = <lfs_clrqbi>-kzwi5_24 + lwa_calc_req_items_fcat-kzwi5_24.
            <lfs_clrqbi>-kzwi6_24 = <lfs_clrqbi>-kzwi6_24 + lwa_calc_req_items_fcat-kzwi6_24.
            "++EOC - Decimal Precision changes

            IF <lfs_clrqbi>-matkl IS INITIAL.
              <lfs_clrqbi>-matkl = lwa_calc_req_items_fcat-matkl.
            ENDIF.

            IF <lfs_clrqbi>-arktx IS INITIAL.
              <lfs_clrqbi>-arktx = lwa_calc_req_items_fcat-arktx.
            ENDIF.

            IF <lfs_clrqbi>-zmeng IS INITIAL AND ls_clrtic-blkcumul_qty = abap_false.
              <lfs_clrqbi>-zmeng = lwa_calc_req_items_fcat-zmeng.
            ENDIF.

            IF <lfs_clrqbi>-zieme IS INITIAL.
              <lfs_clrqbi>-zieme = lwa_calc_req_items_fcat-zieme.
            ENDIF.

            IF <lfs_clrqbi>-vgbel IS INITIAL.
              <lfs_clrqbi>-vgbel = lwa_calc_req_items_fcat-vgbel.
            ENDIF.

            IF <lfs_clrqbi>-vgpos IS INITIAL.
              <lfs_clrqbi>-vgpos = lwa_calc_req_items_fcat-vgpos.
            ENDIF.

            IF <lfs_clrqbi>-prsok IS INITIAL.
              <lfs_clrqbi>-prsok = lwa_calc_req_items_fcat-prsok.
            ENDIF.

            IF <lfs_clrqbi>-ps_psp_pnr IS INITIAL.
              <lfs_clrqbi>-ps_psp_pnr = lwa_calc_req_items_fcat-ps_psp_pnr.
            ENDIF.

            IF <lfs_clrqbi>-mvgr1 IS INITIAL.
              <lfs_clrqbi>-mvgr1 = lwa_calc_req_items_fcat-mvgr1.
            ENDIF.

            IF <lfs_clrqbi>-mvgr2 IS INITIAL.
              <lfs_clrqbi>-mvgr2 = lwa_calc_req_items_fcat-mvgr2.
            ENDIF.

            IF <lfs_clrqbi>-mvgr3 IS INITIAL.
              <lfs_clrqbi>-mvgr3 = lwa_calc_req_items_fcat-mvgr3.
            ENDIF.

            IF <lfs_clrqbi>-mvgr4 IS INITIAL.
              <lfs_clrqbi>-mvgr4 = lwa_calc_req_items_fcat-mvgr4.
            ENDIF.

            IF <lfs_clrqbi>-mvgr5 IS INITIAL.
              <lfs_clrqbi>-mvgr5 = lwa_calc_req_items_fcat-mvgr5.
            ENDIF.

            <lfs_clrqbi>-updkz = gc_updkz_update.
          ENDIF.

          lwa_calc_req_items_fcat-bityp     = ls_data-bitype.
          lwa_calc_req_items_fcat-bilmatnr  = ls_data-bilmatnr.
          lwa_calc_req_items_fcat-rtbbinr   = ls_data-bill_item.
          lwa_calc_req_items_fcat-pop_stdt  = ls_data-pop_stdt.
          lwa_calc_req_items_fcat-pop_enddt = ls_data-pop_enddt.
          lwa_calc_req_items_fcat-bldat_bi  = ls_data-bldat.
          lwa_calc_req_items_fcat-fkrel     = ls_data-fkrel.
          IF ls_data-exdat IS NOT INITIAL.
            lwa_calc_req_items_fcat-exdat = ls_data-exdat.
          ENDIF.
          LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <ls_clrqit>
                                             WHERE clrno = lwa_calc_req_items_fcat-clrno
                                             AND   clrit = lwa_calc_req_items_fcat-clrit
                                             AND istat = 'A'.
            <ls_clrqit>-bityp     = ls_data-bitype.
            <ls_clrqit>-bilmatnr  = ls_data-bilmatnr.
            <ls_clrqit>-rtbbinr   = ls_data-bill_item.
            <ls_clrqit>-bldat_bi  = ls_data-bldat.
            <ls_clrqit>-fkrel     = ls_data-fkrel.
            IF ls_data-exdat IS NOT INITIAL.
              <ls_clrqit>-exdat = ls_data-exdat.
            ENDIF.
            <ls_clrqit>-updkz     = gc_updkz_update.
          ENDLOOP.

          PERFORM document_save USING gs_clrqdoc_infocus
                                      abap_false.

          IF <ls_clrqit> IS ASSIGNED.
            UNASSIGN <ls_clrqit>.
          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    MESSAGE s127(/cgdc/clrq) DISPLAY LIKE gc_message_type-warning.
  ENDIF.
ENDFORM.

"Replacement routine: 5144 configure sources
FORM recreate_calc_req01.
  DATA: lt_prps         TYPE t_prps,
        lv_where_clause TYPE string,
        lv_valid,
        lt_objnr        TYPE /cgdc/t_objnr,
        lv_vbeln        TYPE vbeln_va.

  FIELD-SYMBOLS: <lt_src_data> TYPE table,
                 <lt_src>      TYPE tt_src_data,
                 <lt_data1>    TYPE table,
                 <lt_data2>    TYPE table.

  DATA: lwa_objnr   TYPE /cgdc/s_objnr.
  DATA : lt_clritkey TYPE /cgdc/tt_clrqit_key.

  DATA: lvc_class  TYPE REF TO /cgdc/cl_rtb_source_util,
        lt_srcdata TYPE tt_src_data.

  lv_vbeln = gs_clrqdoc_infocus-x-crhdr-vgbel.

  PERFORM delete_calc_req USING gs_clrqdoc_infocus-x-crhdr-clrno lt_clritkey '2'.
  CLEAR gs_clrqdoc_infocus.
  PERFORM prepare_calreqhdr USING lv_vbeln
                                  ''
                                  abap_true.
  IF gs_clrqdoc_infocus IS INITIAL .
    gs_variables-exit_loop = abap_true.
    EXIT.
  ENDIF.

  ASSIGN lt_srcdata TO <lt_src>.
  IF <lt_src> IS ASSIGNED.
    CREATE OBJECT lvc_class.
    "read source data
    CALL METHOD lvc_class->source_get_data
      EXPORTING
        iv_rtbpn     = gs_contract_hdr-/cgdc/rtbpn
        iv_clrno     = gs_clrqdoc_infocus-x-crhdr-clrno
        iv_vbeln     = gs_contract_hdr-vbeln
        it_item      = gt_contract_itm
        iv_bukrs     = gs_contract_hdr-bukrs_vf
        iv_kokrs     = gs_contract_hdr-kokrs
      IMPORTING
        iv_exit_loop = gs_variables-exit_loop
        it_srcdata   = <lt_src>.

    "collect data for all contract items/sources into gt_src_dyn
    LOOP AT <lt_src> ASSIGNING FIELD-SYMBOL(<lfs_src>).
      READ TABLE gt_src_dyn ASSIGNING FIELD-SYMBOL(<lfs_src_dyn>)
                            WITH KEY source = <lfs_src>-source.
      IF sy-subrc = 0.
        "update existing one.
        ASSIGN <lfs_src>-data->*     TO <lt_data1>.
        ASSIGN <lfs_src_dyn>-data->* TO <lt_data2>.
        IF <lt_data1> IS ASSIGNED AND <lt_data2> IS ASSIGNED.
          APPEND LINES OF <lt_data1> TO <lt_data2>.
        ENDIF.
      ELSE.
        "add new record.
        APPEND INITIAL LINE TO gt_src_dyn ASSIGNING <lfs_src_dyn>.
        <lfs_src_dyn>-source       = <lfs_src>-source.
        <lfs_src_dyn>-/cgdc/rtbpn  = <lfs_src>-/cgdc/rtbpn.
        <lfs_src_dyn>-data         = <lfs_src>-data.
      ENDIF.
    ENDLOOP.

    "clear for next one
    CLEAR: <lt_src>.
  ENDIF.

  PERFORM prepare_calc_req_item_01.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form redetermine_billing_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM redetermine_billing_item .
  DATA: lt_critm         TYPE /cgdc/tt_clrqit,
        lt_critm_all     TYPE /cgdc/tt_clrqit,
        ls_critm         TYPE /cgdc/s_clrqit,
        lt_bilitty       TYPE STANDARD TABLE OF /cgdc/t_bilitty,
        ls_clrqit_brf    TYPE /cgdc/s_clrqitbrf,
        ls_clrcost_brf   TYPE /cgdc/s_clrqcost_brf,
        ls_clrhdt_brf    TYPE /cgdc/s_clrqhd_brf,
        lv_bitype        TYPE /cgdc/bitype,
        ls_bilitty       TYPE /cgdc/t_bilitty,
        ls_clrqbi        TYPE /cgdc/_clrqbi,
        ls_clrqbi_tmp    TYPE /cgdc/s_clrqbi,
        ls_clrqit_fcat   TYPE /cgdc/s_clrqit_fcat,
        ls_bill_item     TYPE /cgdc/s_clrqbi,
        ls_bill_item_tmp TYPE /cgdc/s_clrqbi,
        "        ls_clrqbs_doc    TYPE /cgdc/s_clrqbs_doc,
        lv_src_date      TYPE datum,
        lv_pop_st        TYPE datum,
        lv_pop_end       TYPE datum,
        lt_sum_char      TYPE STANDARD TABLE OF /cgdc/t_rtbbic,
        lwa_sum_char     TYPE /cgdc/t_clrqbic,
        lv_where         TYPE string,
        lv_line          TYPE string,
        ls_clrq_cost     TYPE /cgdc/s_clrqcost,
        ls_clrtic        TYPE /cgdc/t_rtbic,
        lv_bilmatnr      TYPE /cgdc/bilmatnr.

  FIELD-SYMBOLS: <ls_critm>  TYPE /cgdc/s_clrqit,
                 <ls_clrqbi> TYPE /cgdc/s_clrqbi.

  SELECT * FROM /cgdc/t_bilitty
    INTO TABLE lt_bilitty.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  IF gs_clrqdoc_infocus-x-critm_key IS NOT INITIAL.
    SELECT * FROM /cgdc/_clrqit AS a
      INNER JOIN /cgdc/_clrqic AS b
      ON a~clrno = b~clrno
      AND a~clrit = b~clrit
      AND a~clrsit = b~clrsit
      AND a~clrdit = b~clrdit
      FOR ALL ENTRIES IN @gs_clrqdoc_infocus-x-critm_key
      WHERE a~clrno = @gs_clrqdoc_infocus-x-critm_key-clrno
      AND   a~clrit = @gs_clrqdoc_infocus-x-critm_key-clrit
      AND   a~rtbbinr IS INITIAL
      AND   a~istat = 'A'               "active only
      INTO CORRESPONDING FIELDS OF TABLE @lt_critm_all.

    IF sy-subrc EQ 0.
      SORT lt_critm_all BY clrno clrit.
      lt_critm[] = lt_critm_all[].
      DELETE ADJACENT DUPLICATES FROM lt_critm COMPARING clrno clrit.
    ENDIF.
  ENDIF.


*  LOOP AT lt_critm INTO ls_critm.  "--DCLM 6295
  LOOP AT lt_critm_all ASSIGNING <ls_critm>.   "++DCLM 6295
    MOVE-CORRESPONDING <ls_critm> TO ls_clrqit_brf.
    MOVE-CORRESPONDING <ls_critm> TO ls_clrcost_brf.
    MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrhdt_brf.

    CLEAR lv_bitype.
    CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
      EXPORTING
        is_clrqhd   = ls_clrhdt_brf
        is_clrqit   = ls_clrqit_brf
        is_clrqcost = ls_clrcost_brf
      IMPORTING
        ev_bi_type  = lv_bitype.
    IF sy-subrc <> 0.
    ENDIF.
    READ TABLE lt_bilitty INTO ls_bilitty WITH KEY bilitmtyp = lv_bitype.
    IF sy-subrc = 0.
      IF  <ls_critm>-bill_usage IS INITIAL.
        <ls_critm>-bill_usage = ls_bilitty-bill_usage.
      ENDIF.
    ENDIF.


    IF NOT lv_bitype IS INITIAL.
      CLEAR ls_bilitty.
      READ TABLE lt_bilitty INTO ls_bilitty WITH KEY bilitmtyp = lv_bitype.
      IF sy-subrc EQ 0.

        CLEAR lv_src_date.
        CASE ls_bilitty-pop_src_date.
          WHEN 'DOCU'.
            lv_src_date = <ls_critm>-bldat.
          WHEN 'POST'.
            lv_src_date = <ls_critm>-budat.
          WHEN OTHERS.
            lv_src_date = <ls_critm>-bldat.
        ENDCASE.
        CLEAR ls_bill_item.
        ls_bill_item-bitype = lv_bitype.
        ls_bill_item-vgbel  = <ls_critm>-vgbel.
        ls_bill_item-vgpos  = <ls_critm>-vgpos.
        ls_bill_item-ps_psp_pnr = <ls_critm>-ps_psp_pnr.

        PERFORM get_performance_dates USING ls_bill_item
                                            <ls_critm>
                                      CHANGING lv_pop_st
                                               lv_pop_end.
        CLEAR: ls_clrqbi, ls_clrqbi_tmp.
        IF NOT ls_bilitty-bilmatnr IS INITIAL.
          lv_bilmatnr = ls_bilitty-bilmatnr.
        ELSE.
          lv_bilmatnr = <ls_critm>-matnr.
        ENDIF.
        PERFORM prep_bi_where_cls USING <ls_critm>
                                        lv_bitype
                                        lv_bilmatnr "ls_bilitty-bilmatnr
                                CHANGING lv_where .

        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Check Fix

        LOOP AT gs_clrqdoc_infocus-x-crbinr INTO ls_clrqbi_tmp WHERE (lv_where).
          EXIT.
        ENDLOOP.

        MOVE-CORRESPONDING ls_clrqbi_tmp TO ls_clrqbi.

*        IF sy-subrc EQ 0.     "--DCLM 6295
        IF ls_clrqbi IS NOT INITIAL.
          "--SOC- DCLM 6295
*          LOOP AT lt_critm_all ASSIGNING <ls_critm> WHERE clrno = ls_critm-clrno
*                                                    AND   clrit = ls_critm-clrit.
*
*            IF ( <ls_critm>-istat EQ 'D'
*            OR   <ls_critm>-istat EQ 'R'
*            OR   <ls_critm>-istat EQ 'P' ).
*              CONTINUE.
*            ENDIF.
          "--EOC- DCLM 6295

          ls_clrqit_fcat-srvc_date = lv_src_date.
          "Assign bill item number at field cat level
          PERFORM assign_exist_bill_item USING ls_clrqbi
                                               ls_bilitty
                                                   '1'
                                         CHANGING <ls_critm>
                                                  ls_clrqit_fcat.

          <ls_critm>-updkz = gc_updkz_update.
          IF <ls_critm>-clrsit NE '000000'.
            IF <ls_clrqbi> IS ASSIGNED.
              UNASSIGN <ls_clrqbi>.
              READ TABLE gs_clrqdoc_infocus-x-crbinr
              ASSIGNING <ls_clrqbi>  WITH KEY clrno     = <ls_critm>-clrno
                                              bill_item = <ls_critm>-rtbbinr
                                              bitype    = <ls_critm>-bityp.
              IF sy-subrc IS INITIAL.

                READ TABLE lt_bilitty INTO ls_bilitty
                WITH KEY bilitmtyp = <ls_clrqbi>-bitype.

                READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <ls_critm>-pstyv. "RTB24-15

                IF sy-subrc = 0.
                  IF ls_bilitty-qty_1 = abap_true.
                    <ls_clrqbi>-zmeng = 1.
                  ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                    <ls_clrqbi>-zmeng = <ls_clrqbi>-zmeng + <ls_critm>-zmeng.
                  ENDIF.
                ENDIF.

                <ls_clrqbi>-netwr = <ls_clrqbi>-netwr + <ls_critm>-netwr.
                <ls_clrqbi>-wavwr = <ls_clrqbi>-wavwr + <ls_critm>-wavwr.
                <ls_clrqbi>-kzwi1 = <ls_clrqbi>-kzwi1 + <ls_critm>-kzwi1.
                <ls_clrqbi>-kzwi2 = <ls_clrqbi>-kzwi2 + <ls_critm>-kzwi2.
                <ls_clrqbi>-kzwi3 = <ls_clrqbi>-kzwi3 + <ls_critm>-kzwi3.
                <ls_clrqbi>-kzwi4 = <ls_clrqbi>-kzwi4 + <ls_critm>-kzwi4.
                <ls_clrqbi>-kzwi5 = <ls_clrqbi>-kzwi5 + <ls_critm>-kzwi5.
                <ls_clrqbi>-kzwi6 = <ls_clrqbi>-kzwi6 + <ls_critm>-kzwi6.
                "++SOC - Decimal precision fields
                <ls_clrqbi>-netwr24 = <ls_clrqbi>-netwr24 + <ls_critm>-netwr24.
                <ls_clrqbi>-kzwi1_24 = <ls_clrqbi>-kzwi1_24 + <ls_critm>-kzwi1_24.
                <ls_clrqbi>-kzwi2_24 = <ls_clrqbi>-kzwi2_24 + <ls_critm>-kzwi2_24.
                <ls_clrqbi>-kzwi3_24 = <ls_clrqbi>-kzwi3_24 + <ls_critm>-kzwi3_24.
                <ls_clrqbi>-kzwi4_24 = <ls_clrqbi>-kzwi4_24 + <ls_critm>-kzwi4_24.
                <ls_clrqbi>-kzwi5_24 = <ls_clrqbi>-kzwi5_24 + <ls_critm>-kzwi5_24.
                <ls_clrqbi>-kzwi6_24 = <ls_clrqbi>-kzwi6_24 + <ls_critm>-kzwi6_24.
                "++EOC - decimal precision fields
                <ls_clrqbi>-updkz = gc_updkz_update.
              ENDIF.
            ENDIF.
          ENDIF.
*          ENDLOOP.
        ELSE.
          CASE ls_bilitty-bilcreate_type.
            WHEN  'AUTO' OR 'AUMA'.

              "--SOC- DCLM 6295
*              LOOP AT lt_critm_all ASSIGNING <ls_critm> WHERE clrno = ls_critm-clrno
*                                                        AND   clrit = ls_critm-clrit.
*
*                "Calc req item with status D is either already billed or need not bill.
*                IF ( <ls_critm>-istat EQ 'D'
*                OR   <ls_critm>-istat EQ 'R'
*                OR   <ls_critm>-istat EQ 'P' ).
*                  CONTINUE.
*                ENDIF.
              "--EOC- DCLM 6295

              "Create & assign the new Bill item number to field cat.
              TRY.
                  cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
                    RECEIVING
                      uuid = <ls_critm>-rtbbinr ).
                CATCH cx_uuid_error INTO DATA(lo_expn).
              ENDTRY.

              <ls_critm>-bityp    = lv_bitype.
              <ls_critm>-msg_icon = '@08@'.
              <ls_critm>-updkz    = gc_updkz_update.
              CLEAR <ls_critm>-msg_code.



              PERFORM get_additional_details_binr USING <ls_critm>
                                                     ls_bilitty
                                               CHANGING ls_bill_item.
*              <ls_critm>-bldat_bi  = ls_bill_item-bldat.
*              <ls_critm>-srvc_date = lv_src_date.
*              ENDLOOP.


*              CLEAR ls_bill_item.
*              PERFORM get_additional_details_binr USING <ls_critm>
*                                                        ls_bilitty
*                                                  CHANGING ls_bill_item.

              IF ls_bill_item-pop_stdt IS INITIAL
                  OR ls_bill_item-pop_enddt IS INITIAL
                  OR ls_bill_item-bldat IS INITIAL
                  OR ls_bill_item-bilmatnr IS INITIAL
                  OR ls_bill_item-ps_psp_pnr IS INITIAL.
                CLEAR <ls_critm>-rtbbinr.
              ELSE.
                <ls_critm>-bityp    = lv_bitype.
                <ls_critm>-msg_icon = '@08@'.
                <ls_critm>-updkz    = gc_updkz_update.
                CLEAR <ls_critm>-msg_code.
                <ls_critm>-bldat_bi  = ls_bill_item-bldat.
                <ls_critm>-srvc_date = lv_src_date.
                <ls_critm>-pop_stdt = lv_pop_st. "DCLM-6558
                <ls_critm>-pop_enddt = lv_pop_end. "DCLM-6558
                <ls_critm>-fkrel = ls_bill_item-fkrel."DCLM-6558
                APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.

              ENDIF.

*              APPEND ls_bill_item TO gs_clrqdoc_infocus-x-crbinr.
            WHEN OTHERS.
          ENDCASE.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF NOT lt_critm_all IS INITIAL.
    APPEND LINES OF lt_critm_all TO gs_clrqdoc_infocus-x-critm.
    PERFORM document_save USING gs_clrqdoc_infocus
                                abap_true.
    PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-clrno.
    gs_variables-refresh_calc_req_items_grid = abap_true.
    go_grid_calc_req_items->refresh_table_display( ).
  ENDIF.

ENDFORM.
FORM repricing USING ls_clrq_itm_old TYPE /cgdc/s_clrqit
                   CHANGING ls_clrq_itm     TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_subrc             TYPE sy-subrc,
        ls_clrq_itm_new      TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_fcat TYPE /cgdc/s_clrqit_fcat,
        ls_clrq_itm_new1     TYPE /cgdc/s_clrqit,
        ls_clrq_itm_status   TYPE /cgdc/s_clrqst,
        lwa_item_catg        TYPE /cgdc/t_rtbic,
        ls_tvap              TYPE tvap,
        lt_komv              TYPE komv_tab,
        lt_clrq_err          TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
        ls_clrq_err          TYPE /cgdc/t_clrq_err,
        ls_t001w             TYPE t001w,
        lwa_billitem         TYPE /cgdc/_billelem,
        ls_bill_num_open     TYPE /cgdc/_clrqbi,
        ls_bill_typ          TYPE /cgdc/t_bilitty,
        ls_message           TYPE /cgdc/s_message,
        lv_pop_st            TYPE datum,
        lv_pop_end           TYPE datum,
        ls_bill_item         TYPE /cgdc/s_clrqbi,
        ls_bill_num          TYPE /cgdc/s_clrqbi,
        ls_clrqcost          TYPE /cgdc/s_clrqcost,
        lt_sum_char          TYPE STANDARD TABLE OF /cgdc/t_rtbbic,
        lv_line              TYPE string,
        lv_where             TYPE string,
        lwa_sum_char         TYPE /cgdc/t_clrqbic,
        ls_item              TYPE /cgdc/s_clrqit,
        ls_coep              TYPE coep,
        ls_clrtic            TYPE /cgdc/t_rtbic, "RTB24-15
        lv_bukrs             TYPE bukrs,
        lv_updkz             TYPE updkz,
        lv_bilmatnr          TYPE /cgdc/bilmatnr.
  DATA: lt_whitelist    TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line.
  DATA: lwa_bg_keys TYPE /cgdc/s_clrqit_key.
  DATA : ls_clrqhd_brf  TYPE /cgdc/s_clrqhd_brf,
         ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
         lt_bilityp     TYPE TABLE OF /cgdc/t_bilitty,
         lwa_bilityp    TYPE  /cgdc/t_bilitty,
         ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf.

  DATA: lv_call_for TYPE flag.
  DATA: ls_itmkey TYPE /cgdc/s_clrqit_key.
  FIELD-SYMBOLS : <lwa_clrqit> TYPE /cgdc/s_clrqit.
  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.

  CLEAR ls_item.
  SELECT *
       FROM /cgdc/t_bilitty
       INTO  TABLE @lt_bilityp.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  MOVE-CORRESPONDING ls_clrq_itm TO ls_item.

  MOVE-CORRESPONDING ls_clrq_itm TO ls_clrq_itm_new.
  ls_clrq_itm_new-clrdit = gs_clrit_org-item_delta.
  ls_clrq_itm_new-clrsit = gs_clrit_org-clrsit.
  ls_clrq_itm_new-clrit = gs_clrit_org-clrit.
  ls_clrq_itm_new-clrno = gs_clrit_org-clrno.

  "++ SOC Multi payer - Find allocation percentage for Source WBS.
  "Check additonal cost coll and set Alloc %
  DATA(ls_src_wbs) = VALUE #( gt_add_cost_collector[ vbeln =  ls_clrq_itm-vgbel
                                                     wbs_cost_col = ls_clrq_itm-cc_pspnr
                                                     wbsel = ls_clrq_itm-ps_psp_pnr ]
                                                     OPTIONAL ).
  IF ls_src_wbs IS NOT INITIAL.
    IF ls_src_wbs-multi_payer_ind = abap_true.
      "allocated amount
      ls_item-wbs_allocation         = ls_src_wbs-allocation.
      ls_clrq_itm_new-wbs_allocation = ls_src_wbs-allocation.
      ls_clrq_itm-wbs_allocation = ls_src_wbs-allocation.

      READ TABLE gs_clrqdoc_infocus-x-critm INTO DATA(lwa_critm_p) WITH KEY clrit = ls_clrq_itm-clrit clrsit = '000000' clrdit = '000000'.
      IF sy-subrc = 0 AND lwa_critm_p-no_price IS INITIAL.
        ls_clrq_itm_new-kbetr1 = ( lwa_critm_p-kbetr1 / lwa_critm_p-zmeng ) * ls_clrq_itm-zmeng.
        ls_clrq_itm-kbetr1 = ls_clrq_itm_new-kbetr1.
      ENDIF.
    ELSE.
      "full amount
      ls_item-wbs_allocation         = CONV #( 100 ).
      ls_clrq_itm_new-wbs_allocation = CONV #( 100 ).
      ls_clrq_itm-wbs_allocation = ls_src_wbs-allocation.
    ENDIF.
  ELSE.
    "full amount
    ls_item-wbs_allocation         = CONV #( 100 ).
    ls_clrq_itm_new-wbs_allocation = CONV #( 100 ).
    ls_clrq_itm-wbs_allocation = ls_src_wbs-allocation.
  ENDIF.
*  ENDIF.
  "++ EOC Multi payer - Find allocation percentage for Source WBS.

  PERFORM prepare_temp_hdr_itm_no  CHANGING ls_clrq_itm_new.
  IF ls_clrq_itm_new-bityp IS INITIAL.

    CLEAR : ls_clrqhd_brf, ls_clrqit_brf,
            ls_clrcost_brf.
    MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.
    MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrqit_brf.
    MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrcost_brf.

    CALL FUNCTION '/CGDC/_CLRQ_GET_BI_TYPE'
      EXPORTING
        is_clrqhd   = ls_clrqhd_brf
        is_clrqit   = ls_clrqit_brf
        is_clrqcost = ls_clrcost_brf
      IMPORTING
        ev_bi_type  = ls_clrq_itm_new-bityp.
    IF sy-subrc <> 0.
    ENDIF.

  ENDIF.

  PERFORM check_costingsheet USING ls_clrq_itm_new
                                   ls_clrq_itm_new-objnr
                                   gs_clrqdoc_infocus-x-crhdr-vgbel
                                   ls_clrq_itm_new-vgpos
                                   ls_clrq_itm_new-budat
                             CHANGING ls_clrq_itm_new-csist
                                      ls_clrq_itm_new-csheet
                                      ls_clrq_itm_new-zschl.

  IF gs_variables-no_pricing EQ abap_false AND ls_clrq_itm_new-istat NE 'E'.

    CLEAR lv_bukrs.
    lv_bukrs = ls_clrq_itm-source+0(4).
    READ TABLE gt_coep INTO ls_coep WITH KEY belnr = ls_clrq_itm-belnr
                                             buzei = ls_clrq_itm-buzei
                                             bukrs = lv_bukrs.
    IF sy-subrc = 0.
      ls_clrq_itm_new-netwr = CONV netwr_ap( ls_coep-wtgbtr ).
      ls_clrq_itm_new-waerk = ls_coep-twaer.
    ENDIF.
    PERFORM pricing USING lv_call_for CHANGING ls_clrq_itm
                                               ls_clrq_itm_new
                                               lt_komv.
    ls_clrq_itm_new-no_price = abap_false.

    IF <lwa_clrqit> IS ASSIGNED.
      UNASSIGN <lwa_clrqit>.
    ENDIF.
    LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                       WHERE clrno = ls_clrq_itm_new-clrno
                                       AND   clrit = ls_clrq_itm_new-clrit.
      CLEAR <lwa_clrqit>-msg_code.
      <lwa_clrqit>-msg_icon = '@08@'.

      <lwa_clrqit>-updkz = gc_updkz_update.
    ENDLOOP.

    CLEAR ls_clrq_itm-msg_code.
    ls_clrq_itm-msg_icon     = '@08@'.

    CLEAR ls_clrq_itm_new-msg_code.
    ls_clrq_itm_new-msg_icon = '@08@'.
  ELSE.
    IF ls_clrq_itm_new-clrsit EQ '000001'.
      ls_clrq_itm_new-no_price = abap_true.
    ENDIF.
  ENDIF.

  "Only process this code when a new item is being added
  " in real time to the calculation request.
  IF gs_variables-bit_num_gen EQ abap_true AND gs_variables-billed_item IS INITIAL
    AND ls_clrq_itm_new-istat = gc_ibill_stat-open.

    IF ls_clrq_itm_new-bityp IS NOT INITIAL.
      "Only create Bill item type when bill create type is automatic.
      CLEAR ls_bill_typ.
      SELECT SINGLE * FROM /cgdc/t_bilitty
                        INTO ls_bill_typ
                        WHERE bilitmtyp EQ ls_clrq_itm_new-bityp.
      IF sy-subrc IS INITIAL.

        CASE ls_bill_typ-pop_src_date.
          WHEN 'DOCU'.
            ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
            ls_clrq_itm-srvc_date     = ls_clrq_itm_new-bldat.
          WHEN 'POST'.
            ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-budat.
            ls_clrq_itm-srvc_date     = ls_clrq_itm_new-budat.
          WHEN OTHERS.
            ls_clrq_itm_new-srvc_date = ls_clrq_itm_new-bldat.
            ls_clrq_itm-srvc_date     = ls_clrq_itm_new-bldat.
        ENDCASE.
        CLEAR ls_bill_item.
        ls_bill_item-bitype = ls_clrq_itm_new-bityp.
        ls_bill_item-vgbel  = ls_clrq_itm_new-vgbel.
        ls_bill_item-vgpos  = ls_clrq_itm_new-vgpos.
        ls_bill_item-ps_psp_pnr = ls_clrq_itm_new-ps_psp_pnr.


        PERFORM get_performance_dates USING ls_bill_item
                                            ls_item
                                      CHANGING lv_pop_st
                                               lv_pop_end.
        "Check if a billing item number of the type exists
        "in the calc req. item table in open status
        IF <lwa_clrqbi> IS ASSIGNED.
          UNASSIGN <lwa_clrqbi>.
        ENDIF.
        IF NOT ls_bill_typ-bilmatnr IS INITIAL.
          lv_bilmatnr = ls_bill_typ-bilmatnr.
        ELSE.
          lv_bilmatnr = ls_item-matnr.
        ENDIF.

        PERFORM prep_bi_where_cls USING ls_clrq_itm_new
                                        ls_clrq_itm_new-bityp
                                        lv_bilmatnr "ls_bill_typ-bilmatnr
                                CHANGING lv_where .

        lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Check Fix

        LOOP AT gs_clrqdoc_infocus-x-crbinr
            ASSIGNING <lwa_clrqbi> WHERE (lv_where).
          <lwa_clrqbi>-updkz = gc_updkz_update.
          EXIT.
        ENDLOOP.

        IF <lwa_clrqbi> IS ASSIGNED.
          MOVE-CORRESPONDING <lwa_clrqbi> TO ls_bill_num_open.
          PERFORM assign_exist_bill_item USING ls_bill_num_open
                                               ls_bill_typ
                                               '1'
                                         CHANGING ls_clrq_itm_new
                                                  ls_clrq_itm.

          CLEAR lv_updkz.
          lv_updkz     = <lwa_clrqbi>-updkz.

          READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = ls_clrq_itm_new-pstyv. "RTB24-15

          READ TABLE lt_bilityp INTO lwa_bilityp
                WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

          IF sy-subrc = 0.
            IF lwa_bilityp-qty_1 = abap_true.
              <lwa_clrqbi>-zmeng = 1.
            ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
              <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + ls_clrq_itm_new-zmeng.
            ENDIF.
          ENDIF.
          "minus it
          IF gs_clrit_org-istat = gc_ibill_stat-open.
            <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + ls_clrq_itm_new-netwr.
            <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + ls_clrq_itm_new-wavwr.
            <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + ls_clrq_itm_new-kzwi1.
            <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + ls_clrq_itm_new-kzwi2.
            <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + ls_clrq_itm_new-kzwi3.
            <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + ls_clrq_itm_new-kzwi4.
            <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + ls_clrq_itm_new-kzwi5.
            <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + ls_clrq_itm_new-kzwi6.
            "++SOC - Decimal Precision fields
            <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + ls_clrq_itm_new-netwr24.
            <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
            <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
            <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
            <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
            <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
            <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
            "++EOC - Decimal Precision fields

            <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr - ls_clrq_itm-netwr.
            <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr - ls_clrq_itm-wavwr.
            <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 - ls_clrq_itm-kzwi1.
            <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 - ls_clrq_itm-kzwi2.
            <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 - ls_clrq_itm-kzwi3.
            <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 - ls_clrq_itm-kzwi4.
            <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 - ls_clrq_itm-kzwi5.
            <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 - ls_clrq_itm-kzwi6.
            "++SOC - Decimal Precision fields
            <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 - ls_clrq_itm-netwr24.
            <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 - ls_clrq_itm-kzwi1_24.
            <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 - ls_clrq_itm-kzwi2_24.
            <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 - ls_clrq_itm-kzwi3_24.
            <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 - ls_clrq_itm-kzwi4_24.
            <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 - ls_clrq_itm-kzwi5_24.
            <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 - ls_clrq_itm-kzwi6_24.
            "++EOC - Decimal Precision fields
            IF lwa_bilityp-qty_1 = abap_true.
              <lwa_clrqbi>-zmeng = 1.
            ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
              <lwa_clrqbi>-zmeng =  <lwa_clrqbi>-zmeng - ls_clrq_itm-zmeng.
            ENDIF.

            <lwa_clrqbi>-updkz = lv_updkz.
            IF <lwa_clrqbi>-updkz IS INITIAL.
              <lwa_clrqbi>-updkz = gc_updkz_new.
            ENDIF.
          ENDIF.
        ELSE.

          INSERT lv_where INTO TABLE lt_whitelist .
          TRY.
              lv_where   = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_where whitelist = lt_whitelist ).
            CATCH cx_abap_not_in_whitelist.
          ENDTRY.

          SELECT SINGLE *
                 FROM /cgdc/_clrqbi
            WHERE (lv_where)
            INTO @ls_bill_num_open.
          IF sy-subrc IS INITIAL.
            PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                 ls_bill_typ
                                                 '1'
                                           CHANGING ls_clrq_itm_new
                                                    ls_clrq_itm.
            CLEAR ls_bill_num.
            ls_bill_num = CORRESPONDING #( ls_bill_num_open ).
            CLEAR: ls_bill_num-netwr, ls_bill_num-wavwr,
                   ls_bill_num-kzwi1, ls_bill_num-kzwi2,
                   ls_bill_num-kzwi3, ls_bill_num-kzwi4,
                   ls_bill_num-kzwi5, ls_bill_num-kzwi6.

            READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = ls_clrq_itm_new-pstyv. "RTB24-15

            READ TABLE lt_bilityp INTO lwa_bilityp
                WITH KEY bilitmtyp = ls_bill_num-bitype.

            IF sy-subrc = 0.
              IF lwa_bilityp-qty_1 = abap_true.
                ls_bill_num-zmeng = 1.
              ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                ls_bill_num-zmeng = ls_bill_num-zmeng + ls_clrq_itm_new-zmeng.
              ENDIF.
            ENDIF.
            IF gs_clrit_org-istat = gc_ibill_stat-open.
              ls_bill_num-netwr = ls_bill_num-netwr + ls_clrq_itm_new-netwr.
              ls_bill_num-wavwr = ls_bill_num-wavwr + ls_clrq_itm_new-wavwr.
              ls_bill_num-kzwi1 = ls_bill_num-kzwi1 + ls_clrq_itm_new-kzwi1.
              ls_bill_num-kzwi2 = ls_bill_num-kzwi2 + ls_clrq_itm_new-kzwi2.
              ls_bill_num-kzwi3 = ls_bill_num-kzwi3 + ls_clrq_itm_new-kzwi3.
              ls_bill_num-kzwi4 = ls_bill_num-kzwi4 + ls_clrq_itm_new-kzwi4.
              ls_bill_num-kzwi5 = ls_bill_num-kzwi5 + ls_clrq_itm_new-kzwi5.
              ls_bill_num-kzwi6 = ls_bill_num-kzwi6 + ls_clrq_itm_new-kzwi6.
              "++SOC - decimal precision fields
              ls_bill_num-netwr24 = ls_bill_num-netwr24 + ls_clrq_itm_new-netwr24.
              ls_bill_num-kzwi1_24 = ls_bill_num-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
              ls_bill_num-kzwi2_24 = ls_bill_num-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
              ls_bill_num-kzwi3_24 = ls_bill_num-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
              ls_bill_num-kzwi4_24 = ls_bill_num-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
              ls_bill_num-kzwi5_24 = ls_bill_num-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
              ls_bill_num-kzwi6_24 = ls_bill_num-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
              "++EOC - decimal precision fields

              <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr - ls_clrq_itm-netwr.
              <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr - ls_clrq_itm-wavwr.
              <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 - ls_clrq_itm-kzwi1.
              <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 - ls_clrq_itm-kzwi2.
              <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 - ls_clrq_itm-kzwi3.
              <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 - ls_clrq_itm-kzwi4.
              <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 - ls_clrq_itm-kzwi5.
              <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 - ls_clrq_itm-kzwi6.
              "++SOC - Decimal Precision fields
              <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 - ls_clrq_itm-netwr24.
              <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 - ls_clrq_itm-kzwi1_24.
              <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 - ls_clrq_itm-kzwi2_24.
              <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 - ls_clrq_itm-kzwi3_24.
              <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 - ls_clrq_itm-kzwi4_24.
              <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 - ls_clrq_itm-kzwi5_24.
              <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 - ls_clrq_itm-kzwi6_24.
              "++EOC - Decimal Precision fields
              IF lwa_bilityp-qty_1 = abap_true.
                <lwa_clrqbi>-zmeng = 1.
              ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                <lwa_clrqbi>-zmeng =  <lwa_clrqbi>-zmeng - ls_clrq_itm-zmeng.
              ENDIF.

            ENDIF.
            IF ls_bill_num-updkz IS INITIAL.
              ls_bill_num-updkz = gc_updkz_update.
            ENDIF.
            APPEND ls_bill_num TO gs_clrqdoc_infocus-x-crbinr.
          ELSEIF gs_variables-bg_prl_run IS INITIAL.
            CASE ls_bill_typ-bilcreate_type.
              WHEN 'AUTO' OR 'AUMA'.
                "Assign/Create billing item number to the calc req item
                PERFORM generate_billing_item_number  USING ls_bill_typ
                                                            ls_clrq_itm
                                                      CHANGING ls_clrq_itm_new.

              WHEN OTHERS.
                "Do not ASSIGN bill item number
                CLEAR ls_message.
                ls_message-msgid = gc_clrq_msg_cls.
                ls_message-msgnr = '056'.
                ls_message-msgty = gc_message_type-warning.
                ls_message-msgv1 = ls_clrq_itm_new-bityp.
                ls_message-fieldname = 'RTBBINR'.
                APPEND ls_message TO gt_messages.
                CLEAR ls_clrq_err.
                READ TABLE lt_clrq_err INTO ls_clrq_err
                WITH KEY msgclass = gc_clrq_msg_cls
                         msgid = '056'.
                IF sy-subrc EQ 0.
                  IF ls_clrq_itm_new-msg_code CA 'G'.
                    CLEAR ls_clrq_itm_new-msg_code.
                  ENDIF.
                  ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
                  CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
                  IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
                    ls_clrq_itm_new-msg_icon = '@09@'.
                  ELSE.
                    ls_clrq_itm_new-msg_icon = '@08@'.
                  ENDIF.

                  IF <lwa_clrqit> IS ASSIGNED.
                    UNASSIGN <lwa_clrqit>.
                  ENDIF.
                  LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                                     WHERE clrno = ls_clrq_itm_new-clrno
                                                     AND   clrit = ls_clrq_itm_new-clrit
                                                     AND   clrsit = '000000'.
                    <lwa_clrqit>-msg_code = ls_clrq_itm_new-msg_code.
                    <lwa_clrqit>-msg_icon = ls_clrq_itm_new-msg_icon.
                    <lwa_clrqit>-updkz    = gc_updkz_update.
                  ENDLOOP.
                ENDIF.
            ENDCASE.
          ENDIF.
        ENDIF.
        IF ( ls_clrq_itm_new-rtbbinr IS INITIAL   AND
           ( ls_bill_typ-bilcreate_type EQ 'AUTO' OR
             ls_bill_typ-bilcreate_type EQ 'AUMA' ) ).
          CLEAR ls_message.
          ls_message-msgid = gc_clrq_msg_cls.
          ls_message-msgnr = '055'.
          ls_message-msgty = gc_message_type-error.
          ls_message-msgv1 = ls_clrq_itm_new-bityp.
          ls_message-fieldname = 'RTBBINR'.
          APPEND ls_message TO gt_messages.

          CLEAR ls_clrq_err.
          READ TABLE lt_clrq_err INTO ls_clrq_err
          WITH KEY msgclass = gc_clrq_msg_cls
                   msgid = '055'.
          IF sy-subrc EQ 0.
            ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
            CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
            IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
              ls_clrq_itm_new-msg_icon = '@0A@'.
            ELSE.
              ls_clrq_itm_new-msg_icon = '@08@'.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        "Config for bill item type is missing
        CLEAR ls_message.
        ls_message-msgid = gc_clrq_msg_cls.
        ls_message-msgnr = '042'.
        ls_message-msgty = gc_message_type-error.
        ls_message-msgv1 = ls_clrq_itm_new-bityp.
        ls_message-fieldname = 'RTBBINR'.
        APPEND ls_message TO gt_messages.

        CLEAR ls_clrq_err.
        READ TABLE lt_clrq_err INTO ls_clrq_err
        WITH KEY msgclass = gc_clrq_msg_cls
                 msgid = '042'.
        IF sy-subrc EQ 0.
          ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
          CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
          IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
            ls_clrq_itm_new-msg_icon = '@0A@'.
          ELSE.
            ls_clrq_itm_new-msg_icon = '@08@'.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      "No bill item type found.
      CLEAR ls_message.
      ls_message-msgid = gc_clrq_msg_cls.
      ls_message-msgnr = '037'.
      ls_message-msgty = gc_message_type-error.
      ls_message-msgv1 = ls_clrq_itm_new-clrno.
      ls_message-msgv2 = ls_clrq_itm_new-clrit.
      ls_message-fieldname = 'RTBBINR'.
      APPEND ls_message TO gt_messages.

      CLEAR ls_clrq_err.
      READ TABLE lt_clrq_err INTO ls_clrq_err
      WITH KEY msgclass = gc_clrq_msg_cls
               msgid = '037'.
      IF sy-subrc EQ 0.
        ls_clrq_itm_new-msg_code = ls_clrq_itm_new-msg_code && ls_clrq_err-msg_code.
        CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
        IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
          ls_clrq_itm_new-msg_icon = '@0A@'.
        ELSE.
          ls_clrq_itm_new-msg_icon = '@08@'.
        ENDIF.
      ENDIF.

    ENDIF.
  ENDIF.
  CLEAR ls_clrq_itm_new-bstat.
  IF ls_clrq_itm_new-updkz IS INITIAL.
    ls_clrq_itm_new-updkz = gc_updkz_update.
  ENDIF.
  ls_clrq_itm-netwr   = ls_clrq_itm_new-netwr.
  "++SOC - DCLM 6423 subtotal not populated
  ls_clrq_itm-kzwi1 = ls_clrq_itm_new-kzwi1.
  ls_clrq_itm-kzwi2 = ls_clrq_itm_new-kzwi2.
  ls_clrq_itm-kzwi3 = ls_clrq_itm_new-kzwi3.
  ls_clrq_itm-kzwi4 = ls_clrq_itm_new-kzwi4.
  ls_clrq_itm-kzwi5 = ls_clrq_itm_new-kzwi5.
  ls_clrq_itm-kzwi6 = ls_clrq_itm_new-kzwi6.
  "++EOC - DCLM 6423 subtotal not populated

  "++SOC - Decimal precision fields
  ls_clrq_itm-netwr24  = ls_clrq_itm_new-netwr24.
  ls_clrq_itm-kzwi1_24 = ls_clrq_itm_new-kzwi1_24.
  ls_clrq_itm-kzwi2_24 = ls_clrq_itm_new-kzwi2_24.
  ls_clrq_itm-kzwi3_24 = ls_clrq_itm_new-kzwi3_24.
  ls_clrq_itm-kzwi4_24 = ls_clrq_itm_new-kzwi4_24.
  ls_clrq_itm-kzwi5_24 = ls_clrq_itm_new-kzwi5_24.
  ls_clrq_itm-kzwi6_24 = ls_clrq_itm_new-kzwi6_24.
  "++EOC - Decimal precision fields

  ls_clrq_itm-istat = ls_clrq_itm_new-istat.
  ls_clrq_itm-clrdit = ls_clrq_itm_new-clrdit.
  ls_clrq_itm-clrsit = ls_clrq_itm_new-clrsit.
  ls_clrq_itm-rtbbinr = ls_clrq_itm_new-rtbbinr.
  IF gs_clrit_org IS  INITIAL OR gs_clrit_org-istat IS NOT INITIAL.
    IF gs_clrit_org-istat IS NOT INITIAL.
      gs_clrit_org-istat = ls_clrq_itm_new-istat.
      IF gs_variables-billed_item EQ abap_true.
        ls_clrq_itm_new-istat = gc_ibill_stat-copied.
      ELSE.
        ls_clrq_itm_new-istat = gs_clrit_org-istat.
      ENDIF.
    ENDIF.
    ls_clrq_itm_new-updkz = gc_updkz_new.
    APPEND ls_clrq_itm_new TO gs_clrqdoc_infocus-x-critm.
    MOVE-CORRESPONDING ls_clrq_itm_new TO lwa_bg_keys.
    APPEND lwa_bg_keys TO gt_bg_crt_keys.

    IF  ls_clrq_itm_new-csheet <> ls_clrq_itm-csheet OR ls_clrq_itm_new-csist <> ls_clrq_itm-csist
            OR ls_clrq_itm_new-zschl <> ls_clrq_itm-zschl.
      ls_clrq_itm_new1-clrsit = '000000'.
      ls_clrq_itm_new1-clrdit = '000000'.
      ls_clrq_itm_new1-lclrsit = ls_clrq_itm_new-clrsit.
      ls_clrq_itm_new1-updkz = gc_updkz_update.
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY clrno = ls_clrq_itm_new1-clrno
                                                                            clrit = ls_clrq_itm_new1-clrit
                                                                            clrsit = ls_clrq_itm_new1-clrsit.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form reassign_bill_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM reassign_bill_item USING pit_reassign_billitem TYPE /cgdc/tt_clrq_reassign
                        CHANGING lwa_calc_req_items_api TYPE /cgdc/s_clrqit_fcat
                                 et_messages TYPE /cgdc/t_message. .

  DATA:
    ls_bilitty  TYPE /cgdc/t_bilitty,
    lwa_bilityp TYPE /cgdc/t_bilitty,
    ls_clrtic   TYPE /cgdc/t_rtbic, "RTB24-15
    ls_messages TYPE /cgdc/s_message.

  DATA : lv_fnkey TYPE /cgdc/rtb_authfnkey.
  DATA :lv_invalid TYPE flag.
  FIELD-SYMBOLS: <ls_clrqit>  TYPE /cgdc/s_clrqit,
                 <lfs_clrqbi> TYPE /cgdc/s_clrqbi.

  CLEAR ls_bilitty.
  READ TABLE gt_bilitty INTO ls_bilitty
                        WITH KEY bilitmtyp = lwa_calc_req_items_api-bityp.
  IF sy-subrc EQ 0.
    CONCATENATE 'BS' ls_bilitty-rtb_authkey INTO lv_fnkey.
    PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
       gs_clrqdoc_infocus-x-crhdr-vkorg
       gs_clrqdoc_infocus-x-crhdr-vtweg
       gs_clrqdoc_infocus-x-crhdr-spart
       'Q5'
       lv_fnkey
        CHANGING lv_invalid.
    IF lv_invalid IS NOT INITIAL.
      IF gs_variables-call_from_ui IS INITIAL.
        MESSAGE i100(gc_clrq_msg_cls) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                              gs_clrqdoc_infocus-x-crhdr-vkorg
                                              gs_clrqdoc_infocus-x-crhdr-vtweg
                                              gs_clrqdoc_infocus-x-crhdr-spart.
      ELSE.
        CLEAR ls_messages.
        ls_messages-msgid = gc_clrq_msg_cls.
        ls_messages-msgnr = '100'.
        ls_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
        ls_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
        ls_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
        ls_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
        ls_messages-msgty = gc_message_type-information.
        APPEND ls_messages TO et_messages.
      ENDIF.
      RETURN.
    ENDIF.

    IF ls_bilitty-allow_from EQ abap_false.
      CLEAR ls_messages.
      ls_messages-msgid = gc_clrq_msg_cls.
      ls_messages-msgnr = '041'.
      ls_messages-msgty = gc_message_type-information.
      ls_messages-msgv1 = lwa_calc_req_items_api-bityp.
      APPEND ls_messages TO et_messages.
      EXIT.
    ELSE.
      READ TABLE pit_reassign_billitem INTO DATA(ls_reassign) INDEX 1.
      IF sy-subrc EQ 0.
        IF <lfs_clrqbi> IS ASSIGNED.
          UNASSIGN <lfs_clrqbi>.
        ENDIF.
        READ TABLE gs_clrqdoc_infocus-x-crbinr
        ASSIGNING <lfs_clrqbi>
        WITH KEY clrno     = lwa_calc_req_items_api-clrno
                 bill_item = lwa_calc_req_items_api-rtbbinr.
        IF sy-subrc EQ 0.
          PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15
          READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = lwa_calc_req_items_api-pstyv. "RTB24-15

          READ TABLE gt_bilitty INTO lwa_bilityp
                WITH KEY bilitmtyp = <lfs_clrqbi>-bitype.

          IF sy-subrc = 0.
            IF lwa_bilityp-qty_1 = abap_true.
              <lfs_clrqbi>-zmeng = 1.
            ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
              <lfs_clrqbi>-zmeng = <lfs_clrqbi>-zmeng - lwa_calc_req_items_api-zmeng.
            ENDIF.
          ENDIF.
          <lfs_clrqbi>-netwr = <lfs_clrqbi>-netwr - lwa_calc_req_items_api-netwr.
          <lfs_clrqbi>-wavwr = <lfs_clrqbi>-wavwr - lwa_calc_req_items_api-wavwr.
          <lfs_clrqbi>-kzwi1 = <lfs_clrqbi>-kzwi1 - lwa_calc_req_items_api-kzwi1.
          <lfs_clrqbi>-kzwi2 = <lfs_clrqbi>-kzwi2 - lwa_calc_req_items_api-kzwi2.
          <lfs_clrqbi>-kzwi3 = <lfs_clrqbi>-kzwi3 - lwa_calc_req_items_api-kzwi3.
          <lfs_clrqbi>-kzwi4 = <lfs_clrqbi>-kzwi4 - lwa_calc_req_items_api-kzwi4.
          <lfs_clrqbi>-kzwi5 = <lfs_clrqbi>-kzwi5 - lwa_calc_req_items_api-kzwi5.
          <lfs_clrqbi>-kzwi6 = <lfs_clrqbi>-kzwi6 - lwa_calc_req_items_api-kzwi6.
          "++SOC - Decimal precision fields
          <lfs_clrqbi>-netwr24 = <lfs_clrqbi>-netwr24 - lwa_calc_req_items_api-netwr24.
          <lfs_clrqbi>-kzwi1_24 = <lfs_clrqbi>-kzwi1_24 - lwa_calc_req_items_api-kzwi1_24.
          <lfs_clrqbi>-kzwi2_24 = <lfs_clrqbi>-kzwi2_24 - lwa_calc_req_items_api-kzwi2_24.
          <lfs_clrqbi>-kzwi3_24 = <lfs_clrqbi>-kzwi3_24 - lwa_calc_req_items_api-kzwi3_24.
          <lfs_clrqbi>-kzwi4_24 = <lfs_clrqbi>-kzwi4_24 - lwa_calc_req_items_api-kzwi4_24.
          <lfs_clrqbi>-kzwi5_24 = <lfs_clrqbi>-kzwi5_24 - lwa_calc_req_items_api-kzwi5_24.
          <lfs_clrqbi>-kzwi6_24 = <lfs_clrqbi>-kzwi6_24 - lwa_calc_req_items_api-kzwi6_24.
          "++EOC - decimal precision fields
          <lfs_clrqbi>-updkz = gc_updkz_update.
        ENDIF.
        IF <lfs_clrqbi> IS ASSIGNED.
          UNASSIGN <lfs_clrqbi>.
        ENDIF.
        READ TABLE gs_clrqdoc_infocus-x-crbinr
        ASSIGNING <lfs_clrqbi>
        WITH KEY clrno     = ls_reassign-clrno
                 bill_item = ls_reassign-rtbbinr.
        IF sy-subrc EQ 0.
          <lfs_clrqbi>-netwr = <lfs_clrqbi>-netwr + lwa_calc_req_items_api-netwr.
          <lfs_clrqbi>-wavwr = <lfs_clrqbi>-wavwr + lwa_calc_req_items_api-wavwr.
          <lfs_clrqbi>-kzwi1 = <lfs_clrqbi>-kzwi1 + lwa_calc_req_items_api-kzwi1.
          <lfs_clrqbi>-kzwi2 = <lfs_clrqbi>-kzwi2 + lwa_calc_req_items_api-kzwi2.
          <lfs_clrqbi>-kzwi3 = <lfs_clrqbi>-kzwi3 + lwa_calc_req_items_api-kzwi3.
          <lfs_clrqbi>-kzwi4 = <lfs_clrqbi>-kzwi4 + lwa_calc_req_items_api-kzwi4.
          <lfs_clrqbi>-kzwi5 = <lfs_clrqbi>-kzwi5 + lwa_calc_req_items_api-kzwi5.
          <lfs_clrqbi>-kzwi6 = <lfs_clrqbi>-kzwi6 + lwa_calc_req_items_api-kzwi6.
          "++SOC- decimal precision fields
          <lfs_clrqbi>-netwr24 = <lfs_clrqbi>-netwr24 + lwa_calc_req_items_api-netwr24.
          <lfs_clrqbi>-kzwi1_24 = <lfs_clrqbi>-kzwi1_24 + lwa_calc_req_items_api-kzwi1_24.
          <lfs_clrqbi>-kzwi2_24 = <lfs_clrqbi>-kzwi2_24 + lwa_calc_req_items_api-kzwi2_24.
          <lfs_clrqbi>-kzwi3_24 = <lfs_clrqbi>-kzwi3_24 + lwa_calc_req_items_api-kzwi3_24.
          <lfs_clrqbi>-kzwi4_24 = <lfs_clrqbi>-kzwi4_24 + lwa_calc_req_items_api-kzwi4_24.
          <lfs_clrqbi>-kzwi5_24 = <lfs_clrqbi>-kzwi5_24 + lwa_calc_req_items_api-kzwi5_24.
          <lfs_clrqbi>-kzwi6_24 = <lfs_clrqbi>-kzwi6_24 + lwa_calc_req_items_api-kzwi6_24.
          "++EOC- decimal precision fields

          IF <lfs_clrqbi>-matkl IS INITIAL.
            <lfs_clrqbi>-matkl = lwa_calc_req_items_api-matkl.
          ENDIF.

          IF <lfs_clrqbi>-arktx IS INITIAL.
            <lfs_clrqbi>-arktx = lwa_calc_req_items_api-arktx.
          ENDIF.

          IF <lfs_clrqbi>-zmeng IS INITIAL.
            <lfs_clrqbi>-zmeng = lwa_calc_req_items_api-zmeng.
          ENDIF.

          IF <lfs_clrqbi>-zieme IS INITIAL.
            <lfs_clrqbi>-zieme = lwa_calc_req_items_api-zieme.
          ENDIF.

          IF <lfs_clrqbi>-vgbel IS INITIAL.
            <lfs_clrqbi>-vgbel = lwa_calc_req_items_api-vgbel.
          ENDIF.

          IF <lfs_clrqbi>-vgpos IS INITIAL.
            <lfs_clrqbi>-vgpos = lwa_calc_req_items_api-vgpos.
          ENDIF.

          IF <lfs_clrqbi>-prsok IS INITIAL.
            <lfs_clrqbi>-prsok = lwa_calc_req_items_api-prsok.
          ENDIF.

          IF <lfs_clrqbi>-ps_psp_pnr IS INITIAL.
            <lfs_clrqbi>-ps_psp_pnr = lwa_calc_req_items_api-ps_psp_pnr.
          ENDIF.

          IF <lfs_clrqbi>-mvgr1 IS INITIAL.
            <lfs_clrqbi>-mvgr1 = lwa_calc_req_items_api-mvgr1.
          ENDIF.

          IF <lfs_clrqbi>-mvgr2 IS INITIAL.
            <lfs_clrqbi>-mvgr2 = lwa_calc_req_items_api-mvgr2.
          ENDIF.

          IF <lfs_clrqbi>-mvgr3 IS INITIAL.
            <lfs_clrqbi>-mvgr3 = lwa_calc_req_items_api-mvgr3.
          ENDIF.

          IF <lfs_clrqbi>-mvgr4 IS INITIAL.
            <lfs_clrqbi>-mvgr4 = lwa_calc_req_items_api-mvgr4.
          ENDIF.

          IF <lfs_clrqbi>-mvgr5 IS INITIAL.
            <lfs_clrqbi>-mvgr5 = lwa_calc_req_items_api-mvgr5.
          ENDIF.

          <lfs_clrqbi>-updkz = gc_updkz_update.
        ENDIF.

        lwa_calc_req_items_api-bityp     = ls_reassign-bityp.
        lwa_calc_req_items_api-rtbbinr   = ls_reassign-rtbbinr.
        lwa_calc_req_items_api-pop_stdt  = ls_reassign-pop_stdt.
        lwa_calc_req_items_api-pop_enddt = ls_reassign-pop_enddt.
        lwa_calc_req_items_api-bldat_bi  = ls_reassign-bldat_bi.
        lwa_calc_req_items_api-fkrel     = ls_reassign-fkrel.
        LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <ls_clrqit>
                                           WHERE clrno = lwa_calc_req_items_api-clrno
                                           AND   clrit = lwa_calc_req_items_api-clrit.
          <ls_clrqit>-bityp     = ls_reassign-bityp.
          <ls_clrqit>-rtbbinr   = ls_reassign-rtbbinr.
          <ls_clrqit>-bldat_bi  = ls_reassign-bldat_bi.
          <ls_clrqit>-fkrel     = ls_reassign-fkrel.
          <ls_clrqit>-updkz     = gc_updkz_update.
        ENDLOOP.

      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_chars_and_frequency
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_chars_and_frequency .
  SELECT *
    FROM /cgdc/t_rtbsc
    INTO TABLE gt_char_and_freq.

  IF sy-subrc EQ 0.
    SORT gt_char_and_freq BY sgrpn.
  ENDIF.

  SELECT *
    FROM /cgdc/_rtbsogc
    INTO TABLE gt_ogroup_char_and_freq.

  IF sy-subrc EQ 0.
    SORT gt_ogroup_char_and_freq BY vbeln cogrp.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form release_calc_group
*&---------------------------------------------------------------------*
*& Release selected calculation group
*&---------------------------------------------------------------------*
*&      --> LS_SELECTED_ROW
*&---------------------------------------------------------------------*
FORM release_calc_group  USING  lv_call_from "--AMISHARMA lv_call_for_runtime
                                ls_selected_row TYPE lvc_s_row.
  DATA: lt_komv             TYPE komv_t,
        ls_komp             TYPE komp,
        ls_komv             TYPE komv,
        lv_call_for_runtime.

  FIELD-SYMBOLS: <ls_crgrr> TYPE /cgdc/s_clrqgrr.
** get the base value for all cal groups
  SELECT * FROM /cgdc/t_rtbpcg INTO TABLE @DATA(lt_calc_group)
                               FOR ALL ENTRIES IN @gs_clrqdoc_infocus-x-crgrr
                               WHERE clgrn = @gs_clrqdoc_infocus-x-crgrr-clgrn.
  CLEAR gs_variables-cgrr_itm_crt.
  gs_variables-cgrr_itm_crt = abap_true. "Skip mat det. for CGRR items

  CLEAR gs_variables-bit_num_gen.
  gs_variables-bit_num_gen = abap_true. "Gen. Bill item for CGRR items

  CLEAR gs_variables-create_req_itm_for_grp.
  gs_variables-create_req_itm_for_grp = abap_true. "Create req items for CGRR items

  IF <ls_crgrr> IS ASSIGNED.
    UNASSIGN <ls_crgrr>.
  ENDIF.

  CLEAR gs_clrqdoc_infocus-x-cgrcon.
  "on release all the cal request will get released
  LOOP AT gs_clrqdoc_infocus-x-crgrr ASSIGNING <ls_crgrr>.
    READ TABLE lt_calc_group INTO DATA(ls_calc_group) WITH KEY clgrn =  <ls_crgrr>-clgrn.
    IF sy-subrc = 0.   "skip the release if cal group base value is PBP event
      IF lv_call_from = 'X'.
        lv_call_for_runtime = abap_false.
        IF ls_calc_group-bsmth = 'C'.
          CONTINUE.
        ENDIF.
      ELSEIF lv_call_from = 'Y'.
        lv_call_for_runtime = abap_false.
        IF ls_calc_group-bsmth <> 'C'.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.
*    <ls_crgrr>-rowid = sy-tabix.       "--AMISHARMA DCLM 6632
    CLEAR:lt_komv,
          ls_komp.

    PERFORM pricing_calc_grpup CHANGING <ls_crgrr> ls_komp lt_komv.                     " DCLM 5764
    <ls_crgrr>-netwr_pbp = ls_komp-netwr.                                               " DCLM 5764
    <ls_crgrr>-prsok = ls_komp-prsok.

    LOOP AT lt_komv INTO ls_komv.
      ls_komv-knumv = <ls_crgrr>-clrno.
      ls_komv-kposn = <ls_crgrr>-rowid.
      APPEND ls_komv TO gs_clrqdoc_infocus-x-cgrcon.
    ENDLOOP.

    PERFORM prepare_cr_group_items USING lv_call_for_runtime
                                         <ls_crgrr>.
  ENDLOOP.

*  CLEAR gs_variables-rel_constr_dt.
  gs_clrqdoc_infocus-updkz         =  abap_true.
  gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
  gs_clrqdoc_infocus-x-crhdr-rel_calc_dt = gs_variables-rel_constr_dt.

  gs_variables-calc_changed = abap_true. "Mark calc request as changed

  gs_variables-refresh_calc_req_items_grid = abap_true. "Refresh req items (screen 170)
  gs_variables-refersh_bill_bp_grid        = abap_true. "Refresh billing items (screen 191)
  gs_variables-refresh_calc_grp_grid       = abap_true. "Refresh calc grp items (screen 151)


ENDFORM.

***DCLM 5764
FORM read_pbp_eligible_items.

  DATA: lv_item_cat                   TYPE pstyv,       " Dummy
        lv_first_start_date           TYPE /cgdc/blp_svcstart,
        lv_last_end_date              TYPE /cgdc/blp_svcend,
        lv_lines                      TYPE sy-tabix,
        ls_blpln_type                 TYPE /cgdc/t_bplnty,
        ls_start_end_date             LIKE LINE OF gt_pbp_bpit_per_posnr,
        lt_pbp_eligible_bpit          LIKE gt_pbp_eligible_bpit,
        lt_pbp_eligible_bprqit        TYPE TABLE OF s_pbp_eligible_rqit,
        lt_pbp_bpit_per_posnr_sdate   LIKE gt_pbp_bpit_per_posnr,
        lt_bpit_per_posnr_sdate_final LIKE gt_pbp_bpit_per_posnr,
        lt_pbp_bpit_per_posnr_edate   LIKE gt_pbp_bpit_per_posnr,
        lt_bpit_per_posnr_edate_final LIKE gt_pbp_bpit_per_posnr,
        lwa_pbp_eligible_bpit         LIKE LINE OF gt_pbp_eligible_bpit,
        lwa_pbp_eligible_bpit_tmp     LIKE LINE OF gt_pbp_eligible_bpit.

  FIELD-SYMBOLS: <lwa_pbp_bpit_per_vbeln> LIKE LINE OF gt_pbp_bpit_per_vbeln,
                 <lwa_pbp_bpit_per_posnr> LIKE LINE OF gt_pbp_bpit_per_posnr.

  CHECK gt_pbp_eligible_bprqit IS INITIAL AND NOT gs_clrqdoc_infocus-x-critm_key IS INITIAL.

  SELECT *
    FROM /cgdc/_clrqit
    INTO TABLE gt_pbp_eligible_bprqit
    FOR ALL ENTRIES IN gs_clrqdoc_infocus-x-critm_key
    WHERE clrno EQ gs_clrqdoc_infocus-x-critm_key-clrno
      AND clrit EQ gs_clrqdoc_infocus-x-critm_key-clrit
      AND itmty EQ gc_clrq_itmty-bill_plan_line
      AND fsched EQ abap_true
      AND billitem NE space.

  IF sy-subrc EQ 0.

    SORT gt_pbp_eligible_bprqit BY clrno clrit clrsit clrdit.

    SELECT *
      FROM /cgdc/t_blnpln
      INTO TABLE gt_pbp_eligible_bpit
      FOR ALL ENTRIES IN gt_pbp_eligible_bprqit
      WHERE billitem EQ gt_pbp_eligible_bprqit-billitem
        AND vbeln EQ gt_pbp_eligible_bprqit-/cgdc/orgh
        AND posnr EQ gt_pbp_eligible_bprqit-/cgdc/orgi.

    IF sy-subrc EQ 0.
      SORT gt_pbp_eligible_bpit BY vbeln posnr billitem.
      PERFORM modify_service_start_end_date.
    ENDIF.

  ENDIF.

ENDFORM.
***
FORM reprocess_bill_plan_itm USING ls_blpln TYPE /cgdc/s_blnpln
                                   ls_blpln_type TYPE /cgdc/t_bplnty
                          CHANGING ls_clrqit TYPE /cgdc/s_clrqit
                                   lv_rprc TYPE flag.

  DATA: lwa_clrq_itm_new TYPE /cgdc/s_clrqit.
  DATA : lv_kbetr TYPE kbetr.
*  data : lv_rprc TYPE flag.

  ""TOTAL NETWR
  LOOP AT gs_clrqdoc_infocus-x-critm INTO DATA(lwa_critm) WHERE clrit = ls_clrqit-clrit.
    IF lwa_critm-clrsit = '000000' OR lwa_critm-istat <> gc_ibill_stat-open.
      CONTINUE.
    ELSE.
      lv_kbetr = lwa_critm-kbetr1 + lv_kbetr.
    ENDIF.
  ENDLOOP.



  READ TABLE gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_clrbi) WITH KEY bill_item = ls_clrqit-rtbbinr. "CHECK ITEM IS NOT BILLED
  IF lwa_clrbi-bstat IS INITIAL.
    ls_clrqit-billitem = ls_blpln-billitem.
    ls_clrqit-rtbusage =  ls_blpln_type-vwpos.
    ls_clrqit-srvc_date = ls_blpln-svcstart.
    ls_clrqit-pop_stdt = ls_blpln-svcstart.
    ls_clrqit-pop_enddt  = ls_blpln-svcend.
    ls_clrqit-bldat_bi  = ls_blpln-billdate.
*  ls_clrqit-bilmatnr =  ls_blpln_type
    ls_clrqit-bpln_type = ls_blpln_type-bpln_type.
    ls_clrqit-bityp = ls_blpln_type-bitype.
    ls_clrqit-billitem = ls_blpln-billitem.
    ls_clrqit-bp_prtyp = ls_blpln_type-prtyp.
    ls_clrqit-/cgdc/fmsck = ls_blpln-fmsck.
    ls_clrqit-/cgdc/eline = ls_blpln-/cgdc/eline.
    ls_clrqit-/cgdc/acrns = ls_blpln-/cgdc/acrn.
    ls_clrqit-/cgdc/cline = ls_blpln-clin.
    "Update Billing Items
    IF lv_kbetr <> ls_blpln-billamt AND gs_variables-rprc_bp IS NOT INITIAL.
      "Reprice and Create Delta
      MOVE-CORRESPONDING ls_clrqit TO lwa_clrq_itm_new.
      lwa_clrq_itm_new-kbetr1 = ls_blpln-billamt - lv_kbetr.
      lwa_clrq_itm_new-netwr = ls_blpln-billamt.
      lwa_clrq_itm_new-istat = gc_ibill_stat-copied_to_subitems.
      PERFORM repricing_bill_plan_itm USING lwa_clrq_itm_new CHANGING lv_rprc.

      "If Repriced Successfully Make Current Line as 'X'
      IF lv_rprc IS NOT INITIAL.
        ls_clrqit-istat = gc_ibill_stat-copied_to_subitems.
      ENDIF.
    ENDIF.
    ls_clrqit-updkz = gc_updkz_update.
  ENDIF.
ENDFORM.
FORM repricing_bill_plan_itm USING ls_clrq_itm TYPE /cgdc/s_clrqit CHANGING lv_rprc TYPE flag.
  "Call Pricing if GS_CLRQIT_ORG-ISTAT is not initial create new item with Delta + 1.
  DATA: ls_clrqit_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA ls_clrq_itm_new TYPE /cgdc/s_clrqit.
  DATA : lt_komv TYPE komv_tab.
  CLEAR gs_clrit_org.
  MOVE-CORRESPONDING  ls_clrq_itm TO ls_clrqit_fcat.
  MOVE-CORRESPONDING  ls_clrq_itm TO ls_clrq_itm_new.
  gs_clrit_org-clrno = ls_clrqit_fcat-clrno.
  gs_clrit_org-clrit = ls_clrqit_fcat-clrit.
  gs_clrit_org-clrsit = ls_clrqit_fcat-clrsit.
  gs_clrit_org-item_delta = ls_clrqit_fcat-clrdit + 1.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gs_clrit_org-item_delta
    IMPORTING
      output = gs_clrit_org-item_delta.

  ls_clrq_itm_new-clrdit = gs_clrit_org-item_delta.
  ls_clrqit_fcat-clrdit = gs_clrit_org-item_delta.
  PERFORM check_costingsheet USING ls_clrq_itm_new
                                   ls_clrq_itm_new-objnr
                                   gs_clrqdoc_infocus-x-crhdr-vgbel
                                   ls_clrq_itm_new-vgpos
                                   ls_clrq_itm_new-budat
                             CHANGING ls_clrq_itm_new-csist
                                      ls_clrq_itm_new-csheet
                                      ls_clrq_itm_new-zschl.
  PERFORM pricing USING '' CHANGING ls_clrqit_fcat
                                                ls_clrq_itm_new
                                                lt_komv.
  IF gs_clrit_org-istat IS NOT INITIAL.
    "read with Subitem with 0 delta update LCLRDIT
    lv_rprc = abap_true.
*    ls_clrq_itm_new-clrdit = gs_clrit_org-item_delta.
    ls_clrq_itm_new-istat = gs_clrit_org-istat.
    ls_clrq_itm_new-updkz = gc_updkz_new.
    APPEND ls_clrq_itm_new TO gs_clrqdoc_infocus-x-critm.
  ENDIF.
ENDFORM.

FORM prep_bill_cond_tb USING ls_komp TYPE komp
                             ls_komk TYPE komk
                       CHANGING lt_komv TYPE tab_komv.
  DATA : lwa_komv TYPE komv.
  LOOP AT gs_clrqdoc_infocus-x-critm INTO DATA(lwa_item) WHERE rtbbinr = gs_variables-sel_rtbbinr.
    LOOP AT gs_clrqdoc_infocus-x-crcon INTO DATA(lwa_crcon) WHERE clrno = lwa_item-clrno AND
                                                                  clrit = lwa_item-clrit AND
                                                                  clrsit = lwa_item-clrsit AND
                                                                  clrdit = lwa_item-clrdit.
      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
      lwa_komv-knumv = ls_komk-knumv.
      lwa_komv-kposn = ls_komp-kposn.
      APPEND lwa_komv TO lt_komv.

    ENDLOOP.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form redetermine_bilitm
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM redetermine_bilitm_gprf .
  DATA: lwa_selected_row TYPE lvc_s_row,
        lt_rtbbpsc       TYPE STANDARD TABLE OF /cgdc/t_rtbbpsc,
        ls_clrqbi_brf    TYPE /cgdc/_clrqbi,
        lx_fdt           TYPE REF TO cx_fdt.

  FIELD-SYMBOLS: <lv_clrno>           TYPE /cgdc/_clrqbi-clrno,
                 <lv_rtbbinr>         TYPE /cgdc/billitem_guid,
                 <lv_grpid>           TYPE /cgdc/grpid,
                 <lv_spltid>          TYPE /cgdc/splt_id,
                 <lwa_bill_data_page> TYPE /cgdc/s_clrqbi_fcat,
                 <lwa_bill_pre_data>  TYPE /cgdc/s_clrqbi_fcat,
                 <ls_fldval>          TYPE any
                 .

  LOOP AT gt_bill_pre_selected_rows INTO lwa_selected_row.
    READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_bill_data_page> INDEX lwa_selected_row-index.
    READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_pre_data> WITH KEY srno =  <lwa_bill_data_page>-srno.
    ASSIGN COMPONENT 'BILL_ITEM' OF STRUCTURE <lwa_bill_pre_data> TO <lv_rtbbinr>.
    ASSIGN COMPONENT 'CLRNO'     OF STRUCTURE <lwa_bill_pre_data> TO <lv_clrno>.
    ASSIGN COMPONENT 'GRPID'     OF STRUCTURE <lwa_bill_pre_data> TO <lv_grpid>.
    ASSIGN COMPONENT 'SPLT_ID'   OF STRUCTURE <lwa_bill_pre_data> TO <lv_spltid>.

    READ TABLE gs_clrqdoc_infocus-x-crbinr
    TRANSPORTING NO FIELDS WITH KEY clrno     = <lv_clrno>
                                    bill_item = <lv_rtbbinr>
                                    bstat     = space.
    IF sy-subrc <> 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i086(/cgdc/clrq) WITH <lv_rtbbinr>.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '086'.
        gs_messages-msgty = gc_message_type-information.
        gs_messages-msgv1 = <lv_rtbbinr>.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      RETURN.
    ENDIF.

    CHECK <lwa_bill_pre_data>-grp_prf NE gs_contract_hdr-/cgdc/bill_prf.
    <lwa_bill_pre_data>-grp_prf = gs_contract_hdr-/cgdc/bill_prf.

    MOVE-CORRESPONDING <lwa_bill_pre_data> TO ls_clrqbi_brf.
    CLEAR: gv_grpid, gv_spltid.

    TRY.
        CALL FUNCTION '/CGDC/_CLRQ_GET_GRPID'
          EXPORTING
            is_clrqbi = ls_clrqbi_brf
          IMPORTING
            ev_grpid  = gv_grpid.

      CATCH cx_fdt INTO lx_fdt.

    ENDTRY.

    SELECT * FROM /cgdc/t_rtbbpsc
      WHERE bill_prf = @gs_contract_hdr-/cgdc/bill_prf
      INTO TABLE @lt_rtbbpsc.

    IF sy-subrc = 0.
      SORT lt_rtbbpsc BY char_odr.
      LOOP AT lt_rtbbpsc INTO DATA(ls_rtbbpsc).
        DATA(lv_tabix) = sy-tabix.
        ASSIGN COMPONENT ls_rtbbpsc-char_fld OF STRUCTURE  <lwa_bill_pre_data> TO <ls_fldval>.
        IF sy-subrc = 0.
          IF lv_tabix EQ 1.
            CONCATENATE gv_spltid <ls_fldval> INTO gv_spltid.
          ELSE.
            CONCATENATE gv_spltid <ls_fldval> INTO gv_spltid SEPARATED BY '/'.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    <lv_grpid>  = gv_grpid.
    <lv_spltid> = gv_spltid.

    READ TABLE gs_clrqdoc_infocus-x-crgprf ASSIGNING FIELD-SYMBOL(<ls_clrqgrp>)
    WITH KEY clrno     = <lv_clrno>
             bill_item = <lv_rtbbinr>.
    IF sy-subrc = 0.
      <ls_clrqgrp>-grp_prf = gs_contract_hdr-/cgdc/bill_prf.
      <ls_clrqgrp>-grpid   =  gv_grpid.
      <ls_clrqgrp>-splt_id = gv_spltid.
      <ls_clrqgrp>-updkz   = gc_updkz_update.
    ENDIF.

    READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING FIELD-SYMBOL(<ls_clrqbi>)
    WITH KEY clrno     = <lv_clrno>
             bill_item = <lv_rtbbinr>.
    IF sy-subrc = 0.
      <ls_clrqbi>-grp_prf = gs_contract_hdr-/cgdc/bill_prf.
      <ls_clrqbi>-updkz   = gc_updkz_update.
    ENDIF.

    gs_variables-calc_changed = abap_true.
    gs_variables-refresh_calc_req_items_grid = abap_true.
    gs_variables-refersh_bill_bp_grid = abap_true.


  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form reval_bill_blocks
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> I_VBELN
*&---------------------------------------------------------------------*
FORM reval_bill_blocks USING i_vbeln TYPE vbeln_va.

  DATA: lv_subrc               TYPE sy-subrc,
        lv_first_index         TYPE numc10 VALUE 1,
        lv_curr_index          TYPE numc10,
        lv_last_index          TYPE numc10,
        lt_clrit_key           TYPE TABLE OF /cgdc/s_clrqit_key,
        lt_clrqdoc_infocus     TYPE /cgdc/tt_clrq_doc,
        lt_clrqdoc_infocus_upd TYPE /cgdc/tt_clrq_doc.

  PERFORM select_clrqhd USING i_vbeln space.
*
*  PERFORM read_contract_details USING i_vbeln.
*
*  PERFORM enqueue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
*                                     gc_enq_mode-write
*                            CHANGING lv_subrc..

  PERFORM set_calc_request_doc_infocus USING gs_clrqdoc_infocus-x-crhdr-clrno.

  IF lv_subrc = 0.
    gs_variables-key_only = abap_true.
    PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno
                                       CHANGING gs_clrqdoc_infocus.

* based on   gs_variables-cmfrq, pass in lt_clrit_key
    DESCRIBE TABLE gs_clrqdoc_infocus-x-critm_key LINES DATA(lv_lines).

    WHILE lv_curr_index <> lv_lines.
* use a while to pass data in lt_clrit_key till gs_clrqdoc_infocus exhausted.
      lv_last_index = lv_last_index + gs_variables-cmfrq.

      IF lv_last_index > lv_lines.
        lv_last_index = lv_lines.
      ENDIF.

      APPEND LINES OF gs_clrqdoc_infocus-x-critm_key FROM lv_first_index TO lv_last_index TO lt_clrit_key.

      gs_variables-bill_blk_reval = abap_true.

      PERFORM set_calc_req_item_doc_infocus USING  lt_clrit_key
                                               CHANGING lv_subrc.

      APPEND gs_clrqdoc_infocus TO lt_clrqdoc_infocus.

      PERFORM bill_blocks_eval USING lv_first_index
                                     lv_last_index
                               CHANGING lt_clrqdoc_infocus.

      APPEND LINES OF lt_clrqdoc_infocus TO lt_clrqdoc_infocus_upd.

      lv_curr_index = lv_last_index.
      lv_first_index = lv_last_index + 1.

    ENDWHILE.

    CALL FUNCTION '/CGDC/CLRQ_SAVE'
      EXPORTING
        i_commit_work = 'X'              " Selection flag
      CHANGING
        ct_clrq_doc   = lt_clrqdoc_infocus_upd " CIS-AD: Calculation Request Complex Document
      EXCEPTIONS
        no_change     = 1
        OTHERS        = 2.

* evaluate blocks
* clrq_save
  ENDIF.
  gs_variables-exit_loop = abap_true.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: /CGDC/LCLRQMF0S
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0S.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form set_status
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_status.

  DATA: lt_fcodes_to_exclude LIKE TABLE OF sy-ucomm.

  PERFORM exclude_fcodes USING sy-dynnr
                      CHANGING lt_fcodes_to_exclude.

  CASE sy-dynnr.
    WHEN gc_screen-overview.
      SET PF-STATUS 'S100' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-item_subsequent_details.
      SET PF-STATUS 'S500' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-post_rej_price_scrn.
      SET PF-STATUS 'S302' EXCLUDING lt_fcodes_to_exclude.
    WHEN '0201'.
      SET PF-STATUS 'S201' EXCLUDING lt_fcodes_to_exclude.
    WHEN '0204'.
      SET PF-STATUS 'S204' EXCLUDING lt_fcodes_to_exclude.
    WHEN '0205'.
      SET PF-STATUS 'S205' EXCLUDING lt_fcodes_to_exclude.
    WHEN '0206'.
      SET PF-STATUS 'S206' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-post_rej_quan_scrn.
      SET PF-STATUS 'S301' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-reprice_scrn.
      SET PF-STATUS 'S900' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-messages_alv.
      SET PF-STATUS 'S901' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-save_scrn.
      SET PF-STATUS 'S998' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-calc_grp_cond_popup.
      SET PF-STATUS 'S152' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-calc_bill_cond_popup OR gc_screen-bill_partner_popup.
      SET PF-STATUS 'S301' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-dynamic_selscr.
      SET PF-STATUS 'S301' EXCLUDING lt_fcodes_to_exclude.
    WHEN gc_screen-disp_cafs_details.
      SET PF-STATUS 'S505'.
    WHEN gc_screen-fast_chg_popup.
      SET PF-STATUS 'S172'.
    WHEN gc_screen-constr_dt_popup OR gc_screen-set_constr_dt_popup.
      SET PF-STATUS 'S173'.
    WHEN gc_screen-rej_itm_lst.
      SET PF-STATUS 'S197'.
    WHEN gc_screen-reassign_popup .
      SET PF-STATUS 'S506'.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_title
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_title.

  CONSTANTS lc_tcode_crcu TYPE sy-tcode VALUE '/CGDC/CRCU'.

  CASE sy-dynnr.
    WHEN gc_screen-overview.

      IF gs_clrqdoc_infocus IS INITIAL.

        IF gs_variables-overview_mode EQ gc_mode_display.
          SET TITLEBAR 'T100'.
        ELSE.
          SET TITLEBAR 'T100A'.
        ENDIF.

      ELSE.

        IF gs_variables-document_mode EQ gc_mode_display.
          SET TITLEBAR 'T110' WITH gs_clrqdoc_infocus-x-crhdr-clrno.
        ELSEIF gs_variables-document_mode EQ gc_mode_change.
          SET TITLEBAR 'T110A' WITH gs_clrqdoc_infocus-x-crhdr-clrno.
        ENDIF.

      ENDIF.

    WHEN gc_screen-item_subsequent_details.

      SET TITLEBAR 'T500'.
    WHEN gc_screen-reprice_scrn.
      SET TITLEBAR 'T900'.
    WHEN gc_screen-post_rej_quan_scrn.
      IF gs_variables-itm_post_quan IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
        SET TITLEBAR 'T301'.
      ELSE.
        SET TITLEBAR 'T301_2'.
      ENDIF.
    WHEN gc_screen-post_rej_price_scrn.
      IF gs_variables-itm_post_amt IS NOT INITIAL OR gs_variables-itm_post_amt_un IS NOT INITIAL.
        SET TITLEBAR 'T302_2'.
      ELSE.
        SET TITLEBAR 'T302'.
      ENDIF.

    WHEN gc_screen-messages_alv.
      SET TITLEBAR 'T901'.
    WHEN gc_screen-sel_scr_0010.
      IF sy-tcode = lc_tcode_crcu.
        SET TITLEBAR 'T010'.
      ENDIF.
    WHEN gc_screen-man_itm.
      SET TITLEBAR 'T201'.
    WHEN gc_screen-prep_itm.
      SET TITLEBAR 'T204'.
    WHEN gc_screen-release_itm.
      SET TITLEBAR 'T205'.
    WHEN gc_screen-crt_bil_itm.
      SET TITLEBAR 'T206'.
    WHEN gc_screen-calc_grp_cond_popup.
      SET TITLEBAR 'T152'.
    WHEN gc_screen-disp_cafs_details.
      SET TITLEBAR 'T505'.
    WHEN gc_screen-fast_chg_popup.
      SET TITLEBAR 'T172'.
    WHEN gc_screen-constr_dt_popup OR gc_screen-set_constr_dt_popup.
      SET TITLEBAR 'T173'.
    WHEN gc_screen-rej_itm_lst.
      SET TITLEBAR 'T197'.
    WHEN gc_screen-reassign_popup.
      SET TITLEBAR 'T506'.
    WHEN gc_screen-bill_partner_popup.
      SET TITLEBAR 'T411'.
  ENDCASE.

ENDFORM.

FORM set_subscreen_area.

  DATA: lv_perform(30) VALUE 'SET_SUBSCREEN_AREA_'.

  CONCATENATE lv_perform sy-dynnr INTO lv_perform.
  PERFORM (lv_perform) IN PROGRAM (gc_program) IF FOUND.

ENDFORM.

FORM set_subscreen_area_0100.

  gs_variables-subscr_quick_info = gc_screen-dummy.
  gs_variables-subscr_hdr_details = gc_screen-dummy.
  gs_variables-subscr_itm_details = gc_screen-dummy.

  IF gs_clrqdoc_infocus IS NOT INITIAL.
    IF gs_variables-colps_quick_info IS INITIAL.
      gs_variables-subscr_quick_info = gc_screen-quick_info.
    ENDIF.
    CHECK NOT gs_clrqdoc_infocus-x-crhdr-clrno IS INITIAL.
    IF gs_variables-colps_hdr_info IS INITIAL.
      gs_variables-subscr_hdr_details = gc_screen-header_details.
    ENDIF.
    IF gs_variables-colps_itm_info IS INITIAL.
      gs_variables-subscr_itm_details = gc_screen-item_details.
    ENDIF.
  ENDIF.

ENDFORM.

FORM set_subscreen_area_0120.

  IF ts_hdr_details-activetab IS INITIAL.
    ts_hdr_details-activetab = gc_fcode-tab_general.
  ENDIF.

  CASE ts_hdr_details-activetab.
    WHEN gc_fcode-tab_general.
      gs_variables-subscr_hdr_details = gc_screen-general.
    WHEN gc_fcode-tab_hdr_partners.
      gs_variables-subscr_hdr_details = gc_screen-hdr_partners.
    WHEN gc_fcode-tab_hdr_conditions.
      gs_variables-subscr_hdr_details = gc_screen-hdr_conditions.
    WHEN gc_fcode-tab_hdr_aggregate.
      gs_variables-subscr_hdr_details = gc_screen-hdr_aggregate.
    WHEN gc_fcode-tab_billing_history.
      gs_variables-subscr_hdr_details = gc_screen-billing_history.
    WHEN gc_fcode-tab_calc_grps.
      gs_variables-subscr_hdr_details = gc_screen-calc_grp_alv.
  ENDCASE.

ENDFORM.

FORM set_subscreen_area_0500.
  DATA : lwa_calc_req_itm TYPE /cgdc/s_clrqit_fcat.
  IF ts_itm_details-activetab IS INITIAL.
    ts_itm_details-activetab = gc_fcode-tab_itm_subitem.
  ENDIF.

  CASE ts_itm_details-activetab.
    WHEN gc_fcode-tab_itm_partners.
      gs_variables-subscr_itm_details = gc_screen-itm_partners.
    WHEN gc_fcode-tab_itm_conditions.
      gs_variables-subscr_itm_details = gc_screen-itm_conditions.
    WHEN gc_fcode-tab_itm_ref_doc.
      READ TABLE gt_calc_req_items_fcat INTO lwa_calc_req_itm WITH KEY  clrit = gs_variables-item_infocus.
      IF sy-subrc = 0 AND lwa_calc_req_itm-itmty <> gc_clrq_itmty-bill_plan_line.
        gs_variables-subscr_itm_details = gc_screen-itm_ref_doc.
      ELSE.
        gs_variables-subscr_itm_details = gc_screen-subitm_scrn.
      ENDIF.
    WHEN gc_fcode-tab_itm_subitem.
      gs_variables-subscr_itm_details = gc_screen-subitm_scrn.
    WHEN gc_fcode-tab_itm_cost_sht.
      gs_variables-subscr_itm_details = gc_screen-itm_cost_sht.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_calc_request_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_calc_request_data.

  DATA: lwa_calc_req_type_text TYPE /cgdc/t_clrtypet.

  FIELD-SYMBOLS: <lwa_search_calc_req> TYPE /cgdc/s_clrq_wl.

  CLEAR: gt_search_calc_req[].

  SELECT *
    FROM /cgdc/_clrqhd                                                    ##too_many_itab_fields
    INTO CORRESPONDING FIELDS OF TABLE gt_search_calc_req
    WHERE clrqt IN so_crtyp[]
      AND vgbel IN so_conno[]
      AND clrno IN so_vbeln[].

  IF sy-subrc EQ 0 AND NOT gt_search_calc_req IS INITIAL.
    SORT gt_search_calc_req BY clrno.

    LOOP AT gt_search_calc_req ASSIGNING <lwa_search_calc_req>.

      READ TABLE gt_calc_req_type_text
      INTO lwa_calc_req_type_text
      WITH KEY clrqt = <lwa_search_calc_req>-clrqt.

      IF sy-subrc EQ 0.
        <lwa_search_calc_req>-cttxt = lwa_calc_req_type_text-descr.
      ELSE.
        DELETE gt_search_calc_req WHERE clrno = <lwa_search_calc_req>-clrno.
      ENDIF.

    ENDLOOP.

    IF gs_variables-wl_srch_more IS NOT INITIAL.
      APPEND LINES OF gt_search_calc_req TO gt_wl_calc_req.
    ELSE.
      gt_wl_calc_req = gt_search_calc_req[].
    ENDIF.
  ELSE.
    MESSAGE s005(/cgdc/clrq).
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form save_calc_req_doc_infocus
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> SPACE
*&---------------------------------------------------------------------*
FORM save_calc_req_doc_infocus USING lv_set_infocus.
* MISSING CODE
ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_calc_request_doc_infocus
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_VARIABLES_SELECTED_VBELN
*&---------------------------------------------------------------------*
FORM set_calc_request_doc_infocus USING VALUE(lv_vbeln).
  CONSTANTS : lc_pbd         TYPE char3 VALUE 'PBD',
              lc_msg_icon_0a TYPE char4 VALUE '@0A@',
              lc_msg_icon_09 TYPE char4 VALUE '@09@',
              lc_msg_icon_08 TYPE char4 VALUE '@08@',
              lc_char_r      TYPE char1 VALUE 'R',
              lc_char_d      TYPE char1 VALUE 'D'.
  DATA: lv_subrc  TYPE sy-subrc,
        lt_komv   TYPE komv_t,
        ls_komp   TYPE komp,
        lwa_komv  TYPE komv,
        lwa_crgrr TYPE /cgdc/s_clrqgrr,
        ls_msg    TYPE /cgdc/s_message.
  DATA : lv_valid TYPE flag.
  DATA : lv_invalid TYPE flag.
  FIELD-SYMBOLS: <lwa_crgrr> TYPE /cgdc/s_clrqgrr.
  DATA : lv_error TYPE c.
  CONSTANTS : lc_locked TYPE c VALUE '1'.
  CONSTANTS : lc_not_repriced TYPE c VALUE '2'.

*- Messages
  SELECT *
     FROM /cgdc/t_clrq_err
     INTO TABLE @DATA(lt_msg_confit).
  SELECT *
      FROM /cgdc/t_clrq_erh
      INTO TABLE @DATA(lt_msg_confh).

  PERFORM initialize_document_data.
  CHECK NOT lv_vbeln IS INITIAL.
  gs_variables-selected_vbeln = lv_vbeln.
  PERFORM read_calc_request_document USING lv_vbeln CHANGING gs_clrqdoc_infocus.
  PERFORM read_contract_details USING gs_clrqdoc_infocus-x-crhdr-vgbel.
  PERFORM select_calc_req_typ USING gs_clrqdoc_infocus-x-crhdr-clrqt.
  PERFORM select_realtime_billprf_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.
  gs_variables-document_mode = gs_variables-overview_mode.

  ""buffer CLRQHD for BE evaluation
  IF gs_be_crhdr_buffer IS INITIAL.
    gs_be_crhdr_buffer = gs_clrqdoc_infocus-x-crhdr.
  ENDIF.

  IF gs_variables-document_mode EQ gc_mode_change.

    IF lv_error IS INITIAL.
      PERFORM select_clrqpit USING gs_clrqdoc_infocus-x-crhdr-clrno
                             CHANGING lv_subrc.
      IF lv_subrc EQ 0.
        DATA(lt_clrqpit_t) = gt_clrqpit[].
        DELETE lt_clrqpit_t WHERE action_cd IS INITIAL.
        IF lt_clrqpit_t IS NOT INITIAL.
          lv_error = lc_not_repriced.
          PERFORM add_rprc_err CHANGING gs_clrqdoc_infocus-x-critm.
        ENDIF.
      ENDIF.
    ENDIF.

    IF lv_error EQ lc_locked.
      gs_variables-overview_mode = gs_variables-document_mode = gc_mode_display.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i007(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '007'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ELSEIF lv_error EQ lc_not_repriced.
      gs_variables-overview_mode = gs_variables-document_mode = gc_mode_display.
      IF gs_variables-call_from_ui EQ abap_false.
        CONCATENATE gs_variables-header_messages gc_objty-r INTO gs_variables-header_messages.
        CONDENSE gs_variables-header_messages NO-GAPS.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '059'.
        gs_messages-msgty = gc_message_type-warning.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ELSE.
      PERFORM enqueue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                         gc_enq_mode-write
                                   CHANGING lv_subrc.
      CLEAR gs_variables-partial_repr.
      REPLACE lc_char_r IN gs_variables-header_messages WITH space.
      CONDENSE gs_variables-header_messages NO-GAPS.
      READ TABLE lt_msg_confh INTO DATA(ls_msgh) WITH KEY msg_code = gc_objty-r.
      IF sy-subrc EQ 0.
        DELETE gt_messages_header WHERE msgid = ls_msgh-msgid.
      ENDIF.

    ENDIF.
  ELSEIF gs_variables-document_mode EQ gc_mode_display.
    "CHECK Authority Check for Display
    PERFORM check_clrq_authorization USING  gs_clrqdoc_infocus-x-crhdr-clrqt
                               gs_clrqdoc_infocus-x-crhdr-vkorg
                               gs_clrqdoc_infocus-x-crhdr-vtweg
                               gs_clrqdoc_infocus-x-crhdr-spart
                               '03'
                               ''
                         CHANGING lv_invalid.
    IF lv_invalid IS NOT INITIAL.
      IF gs_variables-call_from_ui IS INITIAL.
        MESSAGE i089(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-clrqt
                                              gs_clrqdoc_infocus-x-crhdr-vkorg
                                              gs_clrqdoc_infocus-x-crhdr-vtweg
                                              gs_clrqdoc_infocus-x-crhdr-spart.
      ELSE.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '089'.
        gs_messages-msgv1 = gs_clrqdoc_infocus-x-crhdr-clrqt.
        gs_messages-msgv2 = gs_clrqdoc_infocus-x-crhdr-vkorg.
        gs_messages-msgv3 = gs_clrqdoc_infocus-x-crhdr-vtweg.
        gs_messages-msgv4 = gs_clrqdoc_infocus-x-crhdr-spart.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
        CLEAR gs_messages.
      ENDIF.
      PERFORM initialize_document_data .
      RETURN.
    ENDIF.
  ENDIF.
  IF gs_clrqdoc_infocus-x-crhdr-msgcode IS NOT INITIAL.
    CONCATENATE gs_variables-header_messages gs_clrqdoc_infocus-x-crhdr-msgcode
     INTO gs_variables-header_messages.
    CONDENSE gs_variables-header_messages NO-GAPS.
  ENDIF.
  PERFORM select_clrqpit USING gs_clrqdoc_infocus-x-crhdr-clrno
                           CHANGING lv_subrc.
  IF lv_subrc EQ 0.

    IF gs_variables-call_from_ui EQ abap_false.
      CONCATENATE gs_variables-header_messages gc_objty-r INTO gs_variables-header_messages.
      CONDENSE gs_variables-header_messages NO-GAPS.
      gs_variables-partial_repr = abap_true.
    ENDIF.
  ELSE.
    CLEAR gs_variables-partial_repr.
    REPLACE 'R' IN gs_variables-header_messages WITH space.
    CONDENSE gs_variables-header_messages NO-GAPS.
    READ TABLE lt_msg_confh INTO ls_msgh WITH KEY msg_code = gc_objty-r.
    IF sy-subrc EQ 0.
      DELETE gt_messages_header WHERE msgid = ls_msgh-msgid.
    ENDIF.
  ENDIF.

  PERFORM check_missing_cost_lines.
*- check for open PBD
  SELECT SINGLE clrno
   FROM /cgdc/_clrqbi
   WHERE clrno = @gs_clrqdoc_infocus-clrno
     AND bstat NOT IN (' ','8','9')
   INTO @DATA(ls_clrbi).
  IF sy-subrc = 0.
    SELECT SINGLE clrno, sbqdc
     FROM /cgdc/_clrqdf
     WHERE clrno = @gs_clrqdoc_infocus-clrno
       AND sbdct = @lc_pbd
     INTO @DATA(ls_clrdf).
    IF sy-subrc EQ 0.
      CONCATENATE gs_variables-header_messages lc_char_d INTO gs_variables-header_messages.
      CONDENSE gs_variables-header_messages NO-GAPS.
      gs_variables-pbd_number = ls_clrdf-sbqdc.
    ENDIF.
  ENDIF.
  SELECT DISTINCT msg_code
       FROM /cgdc/c_clrqit
       INTO TABLE @DATA(lt_msg)
       WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno.
  IF sy-subrc EQ 0.
    READ TABLE lt_msg INTO DATA(ls_msg_code) INDEX 1.
*- Get items msg config
    CLEAR ls_msg_code.
    ls_msg_code-msg_code = gs_variables-header_messages.
    APPEND ls_msg_code-msg_code TO lt_msg.
    CLEAR ls_msg_code.
    LOOP AT lt_msg INTO ls_msg_code.
      DATA(lv_len) = strlen( ls_msg_code-msg_code ).
      IF lv_len GT 0.
        DATA(lv_n) = 0.
        DO lv_len TIMES.
          READ TABLE lt_msg_confit INTO DATA(ls_err) WITH KEY msg_code = ls_msg_code-msg_code+lv_n(1).
          IF sy-subrc EQ 0 .
            READ TABLE gt_messages_header INTO DATA(ls_msg_hdr) WITH KEY msgid = ls_err-msgclass
                                                                         msgnr = ls_err-msgid
                                                                         msgty = ls_err-msgty.
            IF sy-subrc NE 0.
              IF ls_err-header_msg_code IS NOT INITIAL.
                READ TABLE lt_msg_confh INTO DATA(ls_errh) WITH KEY msg_code = ls_err-header_msg_code.
                IF sy-subrc EQ 0.
                  ls_msg-msgid = ls_errh-msgclass.
                  ls_msg-msgnr = ls_errh-msgid.
                  ls_msg-msgty = ls_errh-msgty.
                  IF ls_msg-msgnr = '058'.
                    ls_msg-msgv1 = gs_variables-pbd_number.
                  ENDIF.
                  APPEND ls_msg TO gt_messages_header.
                ENDIF.
                CLEAR ls_msg.
              ENDIF.
            ENDIF.
            CASE  ls_errh-msgty.
              WHEN gc_message_type-error.
                gs_variables-header_light = lc_msg_icon_0a.
              WHEN gc_message_type-warning OR gc_message_type-information.
                IF gs_variables-header_light IS INITIAL.
                  gs_variables-header_light = lc_msg_icon_09.
                ENDIF.
              WHEN OTHERS.
                IF gs_variables-header_light IS INITIAL.
                  gs_variables-header_light = lc_msg_icon_08.
                ENDIF.
            ENDCASE.
          ENDIF.
        ENDDO.
      ENDIF.
    ENDLOOP.
  ELSE.
    gs_variables-header_light = lc_msg_icon_08.
  ENDIF.
  PERFORM prep_item_values.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_hdr_partner_subscreen
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_partner_data.

  DATA: lv_obj_key         TYPE swo_typeid,
        lv_posnr           TYPE posnr,
        lv_changes_allowed TYPE xfeld,
        ls_vbpa            TYPE vbpav,
        ls_tpar            TYPE tpar,
        ls_orgdata         TYPE sdorgdata,
        lwa_crptr          TYPE /cgdc/s_clrqpt.

  lv_obj_key = gs_clrqdoc_infocus-clrno.

  CALL FUNCTION 'SD_PARTNER_DATA_PUT'
    EXPORTING
      fic_objecttype              = 'BUS2096'
      fic_objectkey               = lv_obj_key
    TABLES
      frt_xvbpa                   = gt_x_vbpa[]
      frt_yvbpa                   = gt_y_vbpa[]
    EXCEPTIONS
      no_object_specified         = 1
      no_object_creation_possible = 2
      OTHERS                      = 3.
  IF sy-subrc <> 0.
  ENDIF.

  ls_orgdata-vkorg = gs_clrqdoc_infocus-x-crhdr-vkorg.
  ls_orgdata-vtweg = gs_clrqdoc_infocus-x-crhdr-vtweg.
  ls_orgdata-spart = gs_clrqdoc_infocus-x-crhdr-spart.
  lv_posnr = gs_posnr_mapping-dummy_posnr.

*  IF gs_variables-document_mode NE gc_mode_display.
*    lv_changes_allowed = abap_true.
*  ENDIF.
  lv_changes_allowed = abap_false.

  CALL FUNCTION 'SD_PARTNER_SUBSCREEN_1000_INIT'
    EXPORTING
      fif_active                   = lv_changes_allowed
      fif_telef                    = abap_true
      fif_faxf                     = space
      fif_master                   = abap_true
      fif_altern                   = abap_true
      fif_info                     = abap_true
      fif_determ_log               = abap_true
      fif_incompletion_log         = space
      fif_filter_lbox              = abap_true
      fif_act_filter               = 'PARALL'
      fif_pos                      = lv_posnr
      fif_var                      = 'VAR_1'
      fif_paproc_h                 = gs_clrqdoc_infocus-x-crhdr-pargr
      fif_paproc_i                 = gs_clrqdoc_infocus-x-crhdr-pargr
      fic_objecttype               = 'BUS2096'
      fic_objectkey                = lv_obj_key
      fis_sdorgdata                = ls_orgdata
    TABLES
      fit_filter                   = gt_filter[]
    EXCEPTIONS
      partner_proc_header_required = 1
      partner_procedures_required  = 2
      missing_required_values      = 3
      OTHERS                       = 4.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_hdr_pricing_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_pricing_data.

  DATA: lv_display_only,
        lv_crcon_tabix  TYPE sy-tabix,
        lv_cscon_tabix  TYPE sy-tabix,
        lv_no_display   TYPE x,
        lv_jxcd_active  TYPE xusvr_bkpf,
        lv_offset       TYPE i.

  DATA: ls_komk       TYPE komk,
        lt_komk_temp  TYPE /cgdc/tt_komk,
        lt_komv_temp  TYPE komv_t,
        ls_tvta       TYPE tvta,
        ls_tvko       TYPE tvko,
        lwa_komp      TYPE komp,
        lwa_critm     TYPE /cgdc/s_clrqit,
        lwa_critm_sub TYPE /cgdc/s_clrqit,
        lwa_crptr     TYPE /cgdc/s_clrqpt,
        lwa_crcon     TYPE /cgdc/s_clrqcn,
        lwa_cscon     TYPE /cgdc/s_clrqcscn,
        lwa_item_catg TYPE /cgdc/t_rtbic,
        lv_exrate     TYPE kurrf.

  DATA: lt_komv      TYPE komv OCCURS 0 WITH HEADER LINE.

  FIELD-SYMBOLS: <lwa_komk_key> TYPE any.
  FIELD-SYMBOLS: <lwa_komv> TYPE komv.

  CLEAR: gt_x_komp.

  IF NOT gs_variables-item_infocus IS INITIAL.
    READ TABLE gs_clrqdoc_infocus-x-critm INTO lwa_critm
    WITH KEY clrit = gs_variables-item_infocus.
  ENDIF.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt.
  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = lwa_critm-pstyv.

  IF gs_variables-document_mode EQ gc_mode_display.
    lv_display_only = abap_true.
  ENDIF.

  PERFORM fill_kurgv USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuagv USING gs_clrqdoc_infocus-x-crhdr.
  MOVE-CORRESPONDING gs_kurgv TO ls_komk.
  MOVE-CORRESPONDING gs_kuwev TO ls_komk.
  MOVE-CORRESPONDING gs_kuagv TO ls_komk.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komk.
  ls_komk-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_komk-belnr = gs_clrqdoc_infocus-x-crhdr-clrno.

  IF ls_komk-fbuda IS INITIAL.
    ls_komk-fbuda = sy-datum.
  ENDIF.

  PERFORM read_tvko USING gs_clrqdoc_infocus-x-crhdr-vkorg
                 CHANGING gs_tvko.

  ls_komk-boavo = gs_tvko-boavo.

  IF gs_tvko-boavo NE space
    AND gs_kurgv-bokre NE space.
    ls_komk-borel = abap_true.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  WITH KEY clrit = gc_posnr
  TRANSPORTING NO FIELDS.

  IF sy-subrc EQ 0.

    LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr FROM sy-tabix.

      IF lwa_crptr-clrit NE gc_posnr.
        EXIT.
      ENDIF.

      IF lwa_crptr-parvw EQ 'RE'.
        ls_komk-kunre = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'RG'.
        ls_komk-knrze = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'AG'.
        ls_komk-kunnr = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'WE'.
        ls_komk-kunwe = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'VE'.
        ls_komk-vrtnr = lwa_crptr-pernr.
      ELSEIF lwa_crptr-parvw EQ 'LF'.
        ls_komk-lifnr = lwa_crptr-lifnr.
      ENDIF.

    ENDLOOP.

  ENDIF.

  ls_komk-kappl = 'V'.
  ls_komk-mandt = sy-mandt.
  ls_komk-vbklt = '+'.

  PERFORM read_tvta USING gs_clrqdoc_infocus-x-crhdr-vkorg
                          gs_clrqdoc_infocus-x-crhdr-vtweg
                          gs_clrqdoc_infocus-x-crhdr-spart
                 CHANGING ls_tvta
                          ls_tvko.

  IF NOT ls_tvta-vtwko IS INITIAL.
    ls_komk-vtweg = ls_tvta-vtwko.
  ENDIF.

  IF NOT ls_tvta-spako IS INITIAL.
    ls_komk-spart = ls_tvta-spako.
  ENDIF.

  PERFORM read_t001 USING gs_clrqdoc_infocus-x-crhdr-bukrs
                 CHANGING gs_t001.

  ls_komk-hwaer = gs_t001-waers.

  IF ls_komk-hwaer IS INITIAL.
    ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  IF ls_komk-txjcd IS INITIAL
    AND ls_komk-aland NE ls_komk-land1.

    CALL FUNCTION 'CHECK_JURISDICTION_ACTIVE'
      EXPORTING
        i_land     = gs_t001-land1
        i_bukrs    = gs_t001-bukrs
      IMPORTING
        e_isactive = lv_jxcd_active.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT lv_jxcd_active IS INITIAL.
      ls_komk-txjcd = gs_t001-txjcd.
    ENDIF.

  ENDIF.

  ls_komk-boavo = gs_tvko-boavo.
  ls_komk-bokre = gs_kurgv-bokre.
  PERFORM prepare_temp_hdr_itm_no CHANGING lwa_critm .
  PERFORM fill_pricing_data USING lwa_critm
                                  space
                                  gs_clrqdoc_infocus
                         CHANGING ls_komk lwa_komp.

  IF ls_komk-waerk IS INITIAL.
    ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.
  ASSIGN COMPONENT 'KEY_UC' OF STRUCTURE ls_komk TO <lwa_komk_key>.

  IF sy-subrc EQ 0.

    READ TABLE gt_x_komk WITH KEY ('KEY_UC') = <lwa_komk_key>.

  ELSE.

    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <lwa_komk_key>.

    IF <lwa_komk_key> IS ASSIGNED.
      READ TABLE gt_x_komk WITH KEY <lwa_komk_key>.
    ENDIF.

  ENDIF.

  IF sy-subrc NE 0.
    APPEND ls_komk TO gt_x_komk.
    gt_x_komk-ix_komk = sy-tabix.
    MODIFY gt_x_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL.
    lwa_komp-ix_komk = gt_x_komk-ix_komk.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL.
    SET BIT 1 OF lv_no_display TO 1.
    SET BIT 2 OF lv_no_display TO 1.
  ENDIF.
  SORT gs_clrqdoc_infocus-x-critm BY clrno clrit clrsit clrdit.
  IF gs_variables-sel_rtbbinr IS NOT INITIAL.
    PERFORM prep_bill_cond_tb USING lwa_komp
                                        ls_komk
                                  CHANGING lt_komv[].

  ELSEIF gs_variables-subitem_infocus IS INITIAL OR ts_itm_details-activetab <> gc_fcode-tab_itm_subitem.
    IF NOT gs_variables-item_infocus IS INITIAL.

      READ TABLE gs_clrqdoc_infocus-x-critm
       WITH KEY clrit = gs_variables-item_infocus
                clrsit = '000000'
                clrdit = '000000'
       INTO lwa_critm.
      IF sy-subrc = 0.
        gs_clrit = lwa_critm.
        lwa_critm-tmphd = ls_komk-knumv.
        lwa_critm-tmpit = lwa_komp-kposn.

        LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm WHERE clrit = gs_variables-item_infocus.
          AT NEW clrsit.
            READ TABLE gs_clrqdoc_infocus-x-critm INTO lwa_critm_sub WITH KEY clrit = gs_variables-item_infocus
                                                                              clrsit = lwa_critm-clrsit
                                                                              istat = gc_ibill_stat-copied.
            IF sy-subrc = 0.
              CASE sy-dynnr.
                WHEN gc_screen-itm_conditions.
                  READ TABLE gs_clrqdoc_infocus-x-crcon
                          WITH KEY clrit = gs_variables-item_infocus
                                   clrsit = lwa_critm_sub-clrsit
                                   clrdit = lwa_critm_sub-clrdit
                          TRANSPORTING NO FIELDS.
                  IF sy-subrc EQ 0.
                    lv_crcon_tabix = sy-tabix.
                    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM lv_crcon_tabix.
                      IF lwa_crcon-clrit NE gs_variables-item_infocus
                         OR lwa_crcon-clrsit <> lwa_critm_sub-clrsit
                         OR lwa_crcon-clrdit <> lwa_critm_sub-clrdit.
                        EXIT.
                      ENDIF.
                      READ TABLE lt_komv ASSIGNING <lwa_komv> WITH KEY kschl = lwa_crcon-kschl.
                      IF sy-subrc <> 0.
                        CLEAR lt_komv.
                        MOVE-CORRESPONDING lwa_crcon TO lt_komv.
                        lt_komv-knumv = ls_komk-knumv.
                        lt_komv-kposn = lwa_komp-kposn.
                        APPEND lt_komv.
                      ELSE.
                        <lwa_komv>-kwert = <lwa_komv>-kwert + lwa_crcon-kwert.
                        <lwa_komv>-kbetr = <lwa_komv>-kbetr + lwa_crcon-kbetr.
                        <lwa_komv>-kawrt = <lwa_komv>-kawrt + lwa_crcon-kawrt.
                      ENDIF.
                    ENDLOOP.
                  ENDIF.

                WHEN gc_screen-itm_cost_sht.

                  IF lwa_item_catg-cs_bypass IS NOT INITIAL OR gs_rtbp-achin IS INITIAL.
                    gs_variables-cscon_prg_name = gc_program.
                    gs_variables-cscon_screen = gc_screen-cscon_msg_scrn.
                    RETURN.
                  ENDIF.

                  READ TABLE gs_clrqdoc_infocus-x-cscon
                          WITH KEY clrit = gs_variables-item_infocus
                                   clrsit = lwa_critm_sub-clrsit
                                   clrdit = lwa_critm_sub-clrdit
                          TRANSPORTING NO FIELDS.
                  IF sy-subrc EQ 0.
                    lv_cscon_tabix = sy-tabix.
                    LOOP AT gs_clrqdoc_infocus-x-cscon INTO lwa_cscon FROM lv_cscon_tabix.
                      IF lwa_cscon-clrit NE gs_variables-item_infocus
                         OR lwa_cscon-clrsit <> lwa_critm_sub-clrsit
                         OR lwa_cscon-clrdit <> lwa_critm_sub-clrdit.
                        EXIT.
                      ENDIF.
                      READ TABLE lt_komv ASSIGNING <lwa_komv> WITH KEY kschl = lwa_cscon-kschl.
                      IF sy-subrc <> 0.
                        CLEAR lt_komv.
                        MOVE-CORRESPONDING lwa_cscon TO lt_komv.
                        lt_komv-knumv = ls_komk-knumv.
                        lt_komv-kposn = lwa_komp-kposn.
                        APPEND lt_komv.
                      ELSE.
                        <lwa_komv>-kwert = <lwa_komv>-kwert + lwa_cscon-kwert.
                        <lwa_komv>-kawrt = <lwa_komv>-kawrt + lwa_cscon-kawrt.
                        IF lwa_cscon-krech <> 'A'.
                          <lwa_komv>-kbetr = <lwa_komv>-kbetr + lwa_cscon-kbetr.
                        ENDIF.
                      ENDIF.
                    ENDLOOP.
                  ENDIF.
                  gs_variables-cscon_prg_name = gc_sd_conds_program.
                  gs_variables-cscon_screen = gc_screen-sd_conditions.
                  "++ CS only displayed in Base currency for controlling area.
                  DATA(ls_tka01) = /cgdc/cl_clrq_set_buffer=>get_tka01_buff( iv_kokrs = lwa_critm_sub-kokrs ).
                  ls_komk-waerk = ls_tka01-waers.
                  ls_komk-hwaer = ls_tka01-waers.
                WHEN OTHERS.
              ENDCASE.

            ELSE.
              LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm_sub WHERE clrit = gs_variables-item_infocus
                                                                     AND  clrsit = lwa_critm-clrsit.

                IF ( lwa_critm_sub-istat = gc_ibill_stat-open OR lwa_critm_sub-istat = gc_ibill_stat-postponed
                   OR lwa_critm_sub-istat = gc_ibill_stat-rejected )
                   AND lwa_critm_sub-clrsit <> '000000'.

                  CASE sy-dynnr.
                    WHEN gc_screen-itm_conditions.
                      READ TABLE gs_clrqdoc_infocus-x-crcon
                            WITH KEY clrit = gs_variables-item_infocus
                                     clrsit = lwa_critm_sub-clrsit
                                     clrdit = lwa_critm_sub-clrdit
                            TRANSPORTING NO FIELDS.
                      IF sy-subrc EQ 0.
                        lv_crcon_tabix = sy-tabix.
                        LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM lv_crcon_tabix.
                          IF lwa_crcon-clrit NE gs_variables-item_infocus
                             OR lwa_crcon-clrsit <> lwa_critm_sub-clrsit
                             OR lwa_crcon-clrdit <> lwa_critm_sub-clrdit.
                            EXIT.
                          ENDIF.
                          READ TABLE lt_komv ASSIGNING <lwa_komv> WITH KEY kschl = lwa_crcon-kschl.
                          IF sy-subrc <> 0.
                            CLEAR lt_komv.
                            MOVE-CORRESPONDING lwa_crcon TO lt_komv.
                            lt_komv-knumv = ls_komk-knumv.
                            lt_komv-kposn = lwa_komp-kposn.
                            APPEND lt_komv.
                          ELSE.
                            <lwa_komv>-kwert = <lwa_komv>-kwert + lwa_crcon-kwert.
                            <lwa_komv>-kbetr = <lwa_komv>-kbetr + lwa_crcon-kbetr.
                            <lwa_komv>-kawrt = <lwa_komv>-kawrt + lwa_crcon-kawrt.
                          ENDIF.
                        ENDLOOP.
                      ENDIF.

                    WHEN gc_screen-itm_cost_sht.
                      IF lwa_item_catg-cs_bypass IS NOT INITIAL  OR gs_rtbp-achin IS INITIAL.
                        gs_variables-cscon_prg_name = gc_program.
                        gs_variables-cscon_screen = gc_screen-cscon_msg_scrn.

                        RETURN.
                      ENDIF.

                      READ TABLE gs_clrqdoc_infocus-x-cscon
                        WITH KEY clrit = gs_variables-item_infocus
                                 clrsit = lwa_critm_sub-clrsit
                                 clrdit = lwa_critm_sub-clrdit
                        TRANSPORTING NO FIELDS.
                      IF sy-subrc EQ 0.
                        lv_cscon_tabix = sy-tabix.
                        LOOP AT gs_clrqdoc_infocus-x-cscon INTO lwa_cscon FROM lv_cscon_tabix.
                          IF lwa_cscon-clrit NE gs_variables-item_infocus
                             OR lwa_cscon-clrsit <> lwa_critm_sub-clrsit
                             OR lwa_cscon-clrdit <> lwa_critm_sub-clrdit.
                            EXIT.
                          ENDIF.
                          READ TABLE lt_komv ASSIGNING <lwa_komv> WITH KEY kschl = lwa_cscon-kschl.
                          IF sy-subrc <> 0.
                            CLEAR lt_komv.
                            MOVE-CORRESPONDING lwa_cscon TO lt_komv.
                            lt_komv-knumv = ls_komk-knumv.
                            lt_komv-kposn = lwa_komp-kposn.
                            APPEND lt_komv.
                          ELSE.
                            <lwa_komv>-kwert = <lwa_komv>-kwert + lwa_cscon-kwert.
                            <lwa_komv>-kawrt = <lwa_komv>-kawrt + lwa_cscon-kawrt.
                            IF lwa_cscon-krech <> 'A'.
                              <lwa_komv>-kbetr = <lwa_komv>-kbetr + lwa_cscon-kbetr.
                            ENDIF.
                          ENDIF.
                        ENDLOOP.
                      ENDIF.
                      gs_variables-cscon_prg_name = gc_sd_conds_program.
                      gs_variables-cscon_screen = gc_screen-sd_conditions.

                      "++ CS only displayed in Base currency for controlling area.
                      ls_tka01 = /cgdc/cl_clrq_set_buffer=>get_tka01_buff( iv_kokrs = lwa_critm_sub-kokrs ).
                      ls_komk-waerk = ls_tka01-waers.
                      ls_komk-hwaer = ls_tka01-waers.
                    WHEN OTHERS.
                  ENDCASE.

                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDAT.
        ENDLOOP.
      ELSE.
      ENDIF.
    ELSE.

      CASE sy-dynnr.
        WHEN gc_screen-itm_conditions.
          LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon.
            CLEAR lt_komv.
            MOVE-CORRESPONDING lwa_crcon TO lt_komv.
            lt_komv-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
            lt_komv-kposn = lwa_crcon-clrit.
            APPEND lt_komv.
          ENDLOOP.

        WHEN gc_screen-itm_cost_sht.
          IF lwa_item_catg-cs_bypass IS NOT INITIAL  OR gs_rtbp-achin IS INITIAL.
            gs_variables-cscon_prg_name = gc_program.
            gs_variables-cscon_screen = gc_screen-cscon_msg_scrn.
            RETURN.
          ENDIF.
          LOOP AT gs_clrqdoc_infocus-x-cscon INTO lwa_cscon.
            CLEAR lt_komv.
            MOVE-CORRESPONDING lwa_cscon TO lt_komv.
            lt_komv-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
            lt_komv-kposn = lwa_cscon-clrit.
            APPEND lt_komv.
          ENDLOOP.
          gs_variables-cscon_prg_name = gc_sd_conds_program.
          gs_variables-cscon_screen = gc_screen-sd_conditions.

*          "++ CS only displayed in Base currency for controlling area.
*          DATA(ls_tka01) = /cgdc/cl_clrq_set_buffer=>get_tka01_buff( iv_kokrs = lwa_critm_sub-kokrs ).
*          ls_komk-waerk = ls_tka01-waers.
*          ls_komk-hwaer = ls_tka01-waers.
        WHEN OTHERS.
      ENDCASE.

    ENDIF.
  ELSE.

    "SUBITEM CONDITION TAB
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_variables-subitem_infocus
      IMPORTING
        output = gs_variables-subitem_infocus.
    IF sy-subrc <> 0.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_variables-delta_infocus
      IMPORTING
        output = gs_variables-delta_infocus.
    IF sy-subrc <> 0.
    ENDIF.

    CASE sy-dynnr.
      WHEN gc_screen-itm_conditions.
        LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE clrit = gs_variables-item_infocus
                                                           AND clrsit = gs_variables-subitem_infocus
                                                           AND clrdit = gs_variables-delta_infocus.
          CLEAR lt_komv.
          MOVE-CORRESPONDING lwa_crcon TO lt_komv.
          lt_komv-knumv = lwa_critm-tmphd.
          lt_komv-kposn = lwa_critm-tmpit.
          APPEND lt_komv.
        ENDLOOP.

      WHEN gc_screen-itm_cost_sht.
        IF lwa_item_catg-cs_bypass IS NOT INITIAL  OR gs_rtbp-achin IS INITIAL.
          gs_variables-cscon_prg_name = gc_program.
          gs_variables-cscon_screen = gc_screen-cscon_msg_scrn.

          RETURN.
        ENDIF.
        LOOP AT gs_clrqdoc_infocus-x-cscon INTO lwa_cscon WHERE clrit = gs_variables-item_infocus
                                                           AND clrsit = gs_variables-subitem_infocus
                                                           AND clrdit = gs_variables-delta_infocus.
          CLEAR lt_komv.
          MOVE-CORRESPONDING lwa_cscon TO lt_komv.
          lt_komv-knumv = lwa_critm-tmphd.
          lt_komv-kposn = lwa_critm-tmpit.
          APPEND lt_komv.
        ENDLOOP.
        gs_variables-cscon_prg_name = gc_sd_conds_program.
        gs_variables-cscon_screen = gc_screen-sd_conditions.
        "++ CS only displayed in Base currency for controlling area.
        ls_tka01 = /cgdc/cl_clrq_set_buffer=>get_tka01_buff( iv_kokrs = lwa_critm-kokrs ).
        ls_komk-waerk = ls_tka01-waers.
        ls_komk-hwaer = ls_tka01-waers.
      WHEN OTHERS.
    ENDCASE.

  ENDIF.

  CASE sy-dynnr.
    WHEN gc_screen-itm_cost_sht.
      ls_komk-kappl = 'KA'.
      ls_komk-kalsm = lwa_critm-csheet.
  ENDCASE.

  IF lt_komv[] IS INITIAL.
    CLEAR ls_komk-knumv.
  ENDIF.

  IF ts_hdr_details-activetab = gc_fcode-tab_hdr_conditions .
    CLEAR lt_komv[].
    TRY.
        SELECT *
             FROM /cgdc/c_clrq_header_cond( p_clrno = @gs_clrqdoc_infocus-x-crhdr-clrno )
             INTO TABLE @DATA(lt_komv_cds)
             WHERE clrno = @gs_clrqdoc_infocus-x-crhdr-clrno.
      CATCH cx_sy_open_sql_db.
    ENDTRY.

    IF lt_komv_cds IS NOT INITIAL.
      lt_komv[] = CORRESPONDING #( lt_komv_cds[] ).
    ENDIF.
  ENDIF.

  CALL FUNCTION 'PRICING_REFRESH'
    EXPORTING
      i_no_komv_refresh = abap_false
    TABLES
      tkomk             = lt_komk_temp
      tkomv             = lt_komv_temp.
  IF sy-subrc <> 0.
  ENDIF.

  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
  gs_clrit-csist = 'A'.

  LOOP AT lt_komv ASSIGNING FIELD-SYMBOL(<fs_komv>).
    <fs_komv>-knumv = ls_komk-knumv.
    <fs_komv>-kposn = lwa_komp-kposn.
  ENDLOOP.

  DATA lwa_konp TYPE konp.
  LOOP AT lt_komv ASSIGNING <lwa_komv>.
    CALL FUNCTION 'PRICING_CHECK'
      EXPORTING
        comm_head_i = ls_komk
        comm_item_i = lwa_komp
        komv_i      = <lwa_komv>
        preliminary = 'X'
      IMPORTING
        comm_head_e = ls_komk
        comm_item_e = lwa_komp
        komv_e      = <lwa_komv>
        konp_e      = lwa_konp
      EXCEPTIONS
        condition   = 1
        OTHERS      = 2.
    IF sy-subrc <> 0.
    ENDIF.

  ENDLOOP.

  DATA(lt_komv_disp) = lt_komv[].

  "Convert to CR currency
*  IF sy-uname = 'AMISHARMA'.
*      DATA(lv_komk_waerk) = ls_komk-waerk.    "to be used later.
*      ls_komk-waerk = gs_contract_hdr-waerk.
*
*      LOOP AT lt_komv ASSIGNING <lwa_komv>.
*        clear: lv_exrate.
*        IF <lwa_komv>-waers IS INITIAL.
*          DATA(lv_waers) = lv_komk_waerk.
*        ELSE.
*          lv_waers = <lwa_komv>-waers.
*        ENDIF.
*        CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
*          EXPORTING
*            date                   = sy-datum         " TBC - Posting date for cost
*            foreign_amount         = <lwa_komv>-kwert "amount in CO area currency
*            foreign_currency       = lv_waers "CO area currency
*            local_currency         = gs_contract_hdr-waerk "local currency for display
*         IMPORTING
*           EXCHANGE_RATE           = lv_exrate
*           LOCAL_AMOUNT            = <lwa_komv>-kwert "converted amount in local curr.
*         EXCEPTIONS
*           NO_RATE_FOUND           = 1
*           OVERFLOW                = 2
*           NO_FACTORS_FOUND        = 3
*           NO_SPREAD_FOUND         = 4
*           DERIVED_2_TIMES         = 5
*           OTHERS                  = 6.
*        IF sy-subrc <> 0.
** Implement suitable error handling here
*        ENDIF.
*
*        <lwa_komv>-kkurs = lv_exrate.
*      ENDLOOP.
**    ENDIF.
*  ENDIF.

  CALL FUNCTION 'PRICING_SUBSCREEN_SET_DATA'
    EXPORTING
      comm_head_i     = ls_komk
      comm_item_i     = lwa_komp
      trtyp_i         = gs_variables-document_mode
      display_only    = lv_display_only
      ctrl_no_display = lv_no_display
    TABLES
      tkomv           = lt_komv[]
      ykomv           = lt_komv_disp[]
    EXCEPTIONS
      error           = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM select_tvap     USING lv_pstyv TYPE pstyv
                  CHANGING ls_tvap  TYPE tvap.

  SELECT SINGLE * FROM tvap INTO ls_tvap
    WHERE pstyv = lv_pstyv.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_consolidation_prf_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_realtime_billprf_data USING lv_rtbpn TYPE /cgdc/rtbpn.

  DATA: lt_fcat_cns_char TYPE lvc_t_fcat,
        lref_data        TYPE REF TO data,
        lwa_fcat         TYPE lvc_s_fcat,
        ls_msg           TYPE /cgdc/s_message.

  FIELD-SYMBOLS: <lt_data> TYPE table.

  CHECK lv_rtbpn NE gs_rtbp-rtbpn.

  SELECT SINGLE * FROM /cgdc/t_rtbp
    INTO gs_rtbp
    WHERE rtbpn = lv_rtbpn.

  REFRESH: gt_rtbp_costelem_grp.

  PERFORM select_calc_group_data USING lv_rtbpn.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form search_worklist
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LT_SEARCH_CALC_REQ
*&---------------------------------------------------------------------*
FORM search_worklist.

  DATA: lwa_search_calc_req TYPE /cgdc/s_clrq_wl.
  IF gs_variables-wl_srch_more IS INITIAL.
    CLEAR : gt_wl_calc_req.
  ENDIF.
  CALL SELECTION-SCREEN '0010'.


  IF gt_wl_calc_req IS INITIAL.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE s005(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '005'.
      gs_messages-msgty = gc_message_type-succes.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

  DESCRIBE TABLE gt_wl_calc_req LINES sy-tfill.

  IF sy-tfill EQ 1.
    READ TABLE gt_wl_calc_req INTO lwa_search_calc_req INDEX 1.
    PERFORM set_calc_request_doc_infocus USING lwa_search_calc_req-clrno.
  ENDIF.

  gs_variables-refresh_worklist = abap_true.
  SORT gt_wl_calc_req BY clrno.
  DELETE ADJACENT DUPLICATES FROM gt_wl_calc_req COMPARING clrno.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_calc_req_type_txt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_calc_req_type_txt.

  SELECT *
    FROM /cgdc/t_clrtypet
    INTO TABLE gt_calc_req_type_text
    WHERE spras EQ sy-langu.

  CHECK NOT gt_calc_req_type_text IS INITIAL AND sy-subrc EQ 0.
  SORT gt_calc_req_type_text BY clrqt spras.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_pricing_fcode
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_pricing_fcode.

  DATA: lv_fcode LIKE t185f-fcode.

  lv_fcode = ok_code.

  CALL FUNCTION 'PRICING_PASS_FCODE'
    EXPORTING
      okcode = lv_fcode.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM select_contract_data USING lv_vbeln TYPE vbeln.

  PERFORM read_contract_header USING lv_vbeln.
  PERFORM read_contract_business_data USING lv_vbeln.
  PERFORM read_contract_items USING lv_vbeln.
  PERFORM read_contract_partners USING lv_vbeln.

ENDFORM.

FORM select_calc_req_typ USING lv_clrqt TYPE /cgdc/clrqt.

  DATA: lt_costsheet_condn TYPE /cgdc/tt_clrtcscc.

  CHECK gs_calc_req_type-clrqt NE lv_clrqt.

  SELECT SINGLE * FROM /cgdc/t_clrtype
    INTO gs_calc_req_type
    WHERE clrqt = lv_clrqt.
  IF gs_calc_req_type-psize <= 0.
    gs_calc_req_type-psize = 1.
  ENDIF.

  PERFORM select_costsheet_copy_cond USING lv_clrqt
                                  CHANGING lt_costsheet_condn.

  SELECT *
    FROM /cgdc/t_clrtbrcc
    INTO TABLE gt_br_cond_copy_control
    WHERE clrqt EQ lv_clrqt.

ENDFORM.

FORM select_tvak  USING lv_auart TYPE tvak-auart
               CHANGING ls_tvak  TYPE tvak.

  SELECT SINGLE * FROM tvak
    INTO ls_tvak
    WHERE auart = lv_auart.

ENDFORM.

FORM select_tpaer  USING lv_pargr TYPE pargr
                         lv_parvw TYPE parvw
                CHANGING ls_tpaer TYPE tpaer
                         lv_subrc TYPE sy-subrc.

  IF lv_pargr = space AND lv_parvw = space.
    EXIT.
  ENDIF.

  SELECT SINGLE * FROM tpaer
    INTO ls_tpaer
    WHERE pargr = lv_pargr
      AND parvw = lv_parvw.

  lv_subrc = sy-subrc.

ENDFORM.

FORM select_maapv CHANGING ls_clrq_itm TYPE /cgdc/s_clrqit
                           lv_subrc    TYPE sy-subrc.

  DATA: lv_spras TYPE sy-langu,
        lv_vtweg TYPE vbak-vtweg,
        ls_mtcor TYPE mtcor,
        ls_mtcom TYPE mtcom.

  CONSTANTS: lc_maapv TYPE kenng____1 VALUE 'MAAPV'.

  lv_spras = sy-langu.
  ls_mtcom-kenng = lc_maapv.
  ls_mtcom-matnr = ls_clrq_itm-matnr.
  ls_mtcom-vkorg = gs_clrqdoc_infocus-x-crhdr-vkorg.
  ls_mtcom-vtweg = gs_clrqdoc_infocus-x-crhdr-vtweg.
  ls_mtcom-spras = lv_spras.

  CALL FUNCTION 'MATERIAL_READ'
    EXPORTING
      schluessel = ls_mtcom
    IMPORTING
      matdaten   = gs_maapv
      return     = ls_mtcor
    EXCEPTIONS
      OTHERS     = 25.
  IF sy-subrc <> 0.
  ENDIF.

  IF ls_clrq_itm-zieme IS INITIAL.
    ls_clrq_itm-zieme = gs_maapv-zieme.
  ENDIF.

  IF ls_clrq_itm-spart IS INITIAL.
    ls_clrq_itm-spart = gs_maapv-spart.
  ENDIF.

  IF ls_clrq_itm-matkl IS INITIAL.
    ls_clrq_itm-matkl = gs_maapv-matkl.
  ENDIF.

  IF ls_clrq_itm-arktx IS INITIAL.
    ls_clrq_itm-arktx = gs_maapv-arktx.
  ENDIF.

  ls_clrq_itm-mtpos = gs_maapv-mtpos.
  ls_clrq_itm-mvgr1 = gs_maapv-mvgr1.
  ls_clrq_itm-mvgr2 = gs_maapv-mvgr2.
  ls_clrq_itm-mvgr3 = gs_maapv-mvgr3.
  ls_clrq_itm-mvgr4 = gs_maapv-mvgr4.
  ls_clrq_itm-mvgr5 = gs_maapv-mvgr5.

ENDFORM.

FORM select_plant_data USING lv_werks
                    CHANGING ls_t001w TYPE t001w.

  IF lv_werks IS NOT INITIAL.

    CALL FUNCTION 'AIP01_PLANT_DETERMINE'
      EXPORTING
        i_werks                   = lv_werks
      IMPORTING
        es_t001w                  = ls_t001w
      EXCEPTIONS
        invalid_import_parameters = 1
        plant_not_found           = 2
        vendor_not_found          = 3
        logsys_not_found          = 4
        rfcdest_not_found         = 5
        OTHERS                    = 6.
    IF sy-subrc <> 0.
    ENDIF.

    IF sy-subrc <> 0.
      CLEAR: ls_t001w.
    ENDIF.

  ENDIF.

ENDFORM.
FORM select_bill_pre_data USING lv_call_disp_bill TYPE flag.
  DATA:lv_viewname          TYPE string,
       lv_kposn             TYPE kposn,
       lt_bill_preview_cond TYPE komv_t,
       lt_fields            TYPE dfies_tab,
       lv_tabix             TYPE sy-tabix,
       lv_final_string      TYPE string,
       lv_from_table_string TYPE string,
       lv_billtype          TYPE /cgdc/bitype,
       lt_bill_pre_data     TYPE /cgdc/tt_clrqbi,
       lv_group_by          TYPE string,
       lwa_crbinr           TYPE /cgdc/s_clrqbi,
       lv_where             TYPE string,
       lv_skip              TYPE char1.

  FIELD-SYMBOLS : <lwa_data> TYPE any.
  FIELD-SYMBOLS : <lwa_value>  TYPE any,
                  <lv_clrno>   TYPE any,
                  <lv_rtbbinr> TYPE any,
                  <lv_bstat>   TYPE any,
                  <lv_popend>  TYPE any,
                  <lv_bldat>   TYPE any,
                  <lv_faksp>   TYPE any.

  IF gs_clrqdoc_infocus IS NOT INITIAL.

    PERFORM fill_bill_pre_data USING lv_call_disp_bill.

    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = gc_bill_pre_data_tabname
      TABLES
        dfies_tab      = lt_fields
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
    ENDIF.

    CLEAR: gt_bill_preview_cond[].
    IF sy-subrc = 0.
      LOOP AT gt_bill_pre_data ASSIGNING <lwa_data>.
        CLEAR lv_tabix.
        lv_tabix = sy-tabix.

        ASSIGN COMPONENT 'SRNO' OF STRUCTURE <lwa_data> TO <lwa_value>.
        IF <lwa_value> IS ASSIGNED.
          <lwa_value> = lv_tabix.
        ENDIF.

        ASSIGN COMPONENT 'CLRNO' OF STRUCTURE <lwa_data> TO <lv_clrno>.
        ASSIGN COMPONENT 'BILL_ITEM'OF STRUCTURE <lwa_data> TO <lv_rtbbinr>.
        IF <lv_clrno> IS ASSIGNED AND <lv_rtbbinr> IS ASSIGNED.
          READ TABLE gs_clrqdoc_infocus-x-crbinr TRANSPORTING NO FIELDS
                                                 WITH KEY clrno     = <lv_clrno>
                                                          bill_item = <lv_rtbbinr>
                                                          bstat     = gc_ibill_stat-pbd_in_progress.
          IF sy-subrc IS INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.

        lv_kposn = lv_tabix.
        UNASSIGN <lwa_value>.
        PERFORM prepare_billing_conditions USING <lwa_data>
                                                 lt_fields
                                                 lv_kposn
                                        CHANGING gt_bill_preview_cond.

      ENDLOOP.

    ENDIF.

  ENDIF.
  IF gs_variables-scheduler EQ abap_true.
*- filter data to be billed from output if called from scheduler
*- get preselections for scheduler
    PERFORM prep_contr_date.
    PERFORM select_chars_and_frequency.
    PERFORM select_doctyp_n_cptyp_grp_map.
    LOOP AT gt_bill_pre_data ASSIGNING FIELD-SYMBOL(<lfs_pre_data>).
*- determine if this line has to be billed or not
      ASSIGN COMPONENT 'FAKSP' OF STRUCTURE <lfs_pre_data> TO <lv_faksp>.
      ASSIGN COMPONENT 'BLDAT' OF STRUCTURE <lfs_pre_data> TO <lv_bldat>.
      IF <lv_faksp> = 'ZM' OR <lv_bldat> > sy-datum.
        DELETE TABLE gt_bill_pre_data FROM <lfs_pre_data>.
      ELSE.
        PERFORM determine_scheduler USING <lfs_pre_data> lv_skip.
        IF lv_skip EQ abap_true.
          DELETE TABLE gt_bill_pre_data FROM <lfs_pre_data>.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  ""SOC Block Authorization data buffer
  MOVE-CORRESPONDING gt_bill_pre_data TO gt_blk_auth_pre_data.
  ""EOC Block Authorization data buffer
ENDFORM.
FORM select_clrqhd USING lv_vbeln TYPE vbeln_va
                          lv_clrno TYPE /cgdc/clrqno.
  IF lv_vbeln IS NOT INITIAL.
    SELECT SINGLE *
     FROM /cgdc/_clrqhd
     INTO  gs_clrqdoc_infocus-x-crhdr
       WHERE vgbel = lv_vbeln.
  ELSEIF lv_clrno IS NOT INITIAL.
    SELECT SINGLE *
    FROM /cgdc/_clrqhd
    INTO  gs_clrqdoc_infocus-x-crhdr
    WHERE clrno = lv_clrno.
  ENDIF.
  IF sy-subrc = 0 AND ( lv_clrno IS NOT INITIAL OR lv_vbeln IS NOT INITIAL ) .
    PERFORM select_realtime_billprf_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.
    gs_clrqdoc_infocus-y-crhdr = gs_clrqdoc_infocus-x-crhdr.
    gs_clrqdoc_infocus-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  ENDIF.
ENDFORM.
FORM set_subscreen_area_0196.

  IF ts_subitem_dtl-activetab IS INITIAL.
    ts_subitem_dtl-activetab = gc_fcode-tab_subitm_conditions.
  ENDIF.

  CASE ts_subitem_dtl-activetab.
    WHEN gc_fcode-tab_subitm_conditions.
      gs_variables-subscr_subitem_dtl = gc_screen-itm_conditions.
    WHEN gc_fcode-tab_subitm_partners.
      gs_variables-subscr_subitem_dtl = gc_screen-subitm_partner.
    WHEN gc_fcode-tab_subitm_cost_sht.
      gs_variables-subscr_subitem_dtl = gc_screen-itm_cost_sht.
  ENDCASE.

ENDFORM.
FORM set_subscreen_area_0192.

  IF gs_variables-subitem_scrn_expnd IS INITIAL.
    gs_variables-subscr_subitem_dtl_sc = gc_screen-dummy.
  ELSE.
    gs_variables-subscr_subitem_dtl_sc = '0196'.
  ENDIF.
ENDFORM.
FORM select_bill_pricing_control USING lv_rtbpn TYPE /cgdc/rtbpn.
  SELECT *
    FROM /cgdc/t_rtbppc
    INTO TABLE gt_rtbppc
    WHERE rtbpn = lv_rtbpn.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_costsheet_copy_cond
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS_X_CRHDR_RTB
*&---------------------------------------------------------------------*
FORM select_costsheet_copy_cond  USING lv_clrqt TYPE /cgdc/clrqt
                              CHANGING lt_costsheet_condn TYPE /cgdc/tt_clrtcscc.
  DATA:
    lwa_costsheet_condn TYPE /cgdc/t_clrtcscc,
    lv_tabix            TYPE sy-tabix,
    lv_subrc            TYPE sy-subrc.


  READ TABLE gt_costingsheet_copy_contrl TRANSPORTING NO FIELDS
  WITH KEY clrqt = lv_clrqt
  BINARY SEARCH.
  lv_tabix = sy-tabix.
  lv_subrc = sy-subrc.

  IF  lv_subrc NE 0.
    SELECT * FROM /cgdc/t_clrtcscc
      INTO TABLE lt_costsheet_condn
      WHERE clrqt = lv_clrqt.

    SORT lt_costsheet_condn BY cscon.

    IF lv_subrc = 4.
      INSERT LINES OF lt_costsheet_condn INTO gt_costingsheet_copy_contrl INDEX lv_tabix.
    ELSEIF lv_subrc = 8.
      APPEND LINES OF lt_costsheet_condn TO gt_costingsheet_copy_contrl.
    ENDIF.

  ELSE.
    LOOP AT gt_costingsheet_copy_contrl INTO lwa_costsheet_condn FROM lv_tabix.
      IF lwa_costsheet_condn-clrqt NE lv_clrqt.
        EXIT.
      ENDIF.
      APPEND lwa_costsheet_condn  TO lt_costsheet_condn.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_pricingprocedure_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS_X_CRHDR_KAL
*&---------------------------------------------------------------------*
FORM select_pricingprocedure_data  USING lv_kalsm TYPE kalsm_d
                                CHANGING lt_procedure_data TYPE ty_t683s.
  DATA:
    lwa_procedure_data TYPE t683s,
    lv_tabix           TYPE sy-tabix,
    lv_subrc           TYPE sy-subrc.

  READ TABLE gt_procedure_data TRANSPORTING NO FIELDS
  WITH KEY kalsm = lv_kalsm
  BINARY SEARCH.
  lv_tabix = sy-tabix.
  lv_subrc = sy-subrc.

  IF lv_subrc NE 0.
    SELECT * FROM t683s
      INTO TABLE lt_procedure_data
      WHERE kalsm = lv_kalsm.
    SORT lt_procedure_data BY kschl.

    IF lv_subrc = 4.
      INSERT LINES OF lt_procedure_data INTO gt_procedure_data INDEX lv_tabix.
    ELSEIF lv_subrc = 8.
      APPEND LINES OF lt_procedure_data  TO gt_procedure_data .
    ENDIF.

  ELSE.
    LOOP AT gt_procedure_data INTO lwa_procedure_data FROM lv_tabix.
      IF lwa_procedure_data-kalsm NE lv_kalsm.
        EXIT.
      ENDIF.
      APPEND lwa_procedure_data TO lt_procedure_data.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM set_calc_req_item_doc_infocus USING lt_clritkey TYPE /cgdc/tt_clrqit_key
                                  CHANGING lv_subrc TYPE sysubrc.

  DATA: lwa_itemkey LIKE LINE OF lt_clritkey.
  DATA: lwa_message TYPE /cgdc/s_message.
  DATA: lt_clritkey_t TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA: lv_length TYPE i.
  DATA : lv_exit_do TYPE flag.
  DATA : lt_critm  TYPE /cgdc/tt_clrqit,
         lt_crcon  TYPE /cgdc/tt_clrqcn,
         lt_crbinr TYPE /cgdc/tt_clrqbi,
         lt_cscon  TYPE /cgdc/tt_clrqcscn, "/cgdc/tt_clrqcns, "--replaced. was causing a dump in FM call.
         lt_crptr  TYPE /cgdc/tt_clrqpt,
         lt_crblpl TYPE /cgdc/tt_clrqblpl.

  PERFORM initialize_document_data.
  CHECK NOT lt_clritkey IS INITIAL.
  READ TABLE lt_clritkey INTO lwa_itemkey INDEX 1.
  PERFORM prepare_calreqhdr USING '' lwa_itemkey-clrno ''.
  PERFORM read_contract_details USING gs_clrqdoc_infocus-x-crhdr-vgbel.
  PERFORM select_calc_req_typ USING gs_clrqdoc_infocus-x-crhdr-clrqt.
  PERFORM select_realtime_billprf_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.
  gs_variables-document_mode = gs_variables-overview_mode.

  IF gs_variables-document_mode EQ gc_mode_change OR gs_variables-bill_blk_reval EQ abap_true.
    PERFORM check_authority USING gs_clrqdoc_infocus-x-crhdr-clrqt
                                  gc_authority_activity-change
                     CHANGING     lv_subrc.
    IF lv_subrc NE 0.
      lwa_message-msgty = gc_message_type-information.
      lwa_message-msgnr = 007.
      lwa_message-msgid = gc_clrq_msg_cls.
      APPEND lwa_message TO gt_messages.
      lv_subrc = 1.
    ELSE.
      PERFORM enqueue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                         gc_enq_mode-write
                                   CHANGING lv_subrc.
      IF lv_subrc = 0 OR gs_variables-bg_prl_run IS NOT INITIAL OR gs_variables-bill_blk_reval EQ abap_true.

        DESCRIBE TABLE lt_clritkey LINES lv_length.
        IF gs_variables-cmfrq IS INITIAL OR lv_length <= gs_variables-cmfrq. "Read Item Data based on Block Size
          CALL FUNCTION '/CGDC/CLRQ_ITM_READ'
            EXPORTING
              i_clrno                = gs_clrqdoc_infocus-x-crhdr-clrno
              it_clrit               = lt_clritkey
              i_subitem              = ' '
            IMPORTING
              et_critm               = gs_clrqdoc_infocus-x-critm
              et_crcon               = gs_clrqdoc_infocus-x-crcon
              et_clrqcost            = gs_clrqdoc_infocus-x-crcost
              et_crptr               = gs_clrqdoc_infocus-x-crptr
              et_clrqblpl            = gs_clrqdoc_infocus-x-crblpl
              et_clrqbi              = gs_clrqdoc_infocus-x-crbinr
              et_cscon               = gs_clrqdoc_infocus-x-cscon
            EXCEPTIONS
              reached_max_char_limit = 1.
          IF sy-subrc <> 0.
          ENDIF.
        ELSE.
          DATA(lv_index_from) = 0.
          DATA(lv_index_to) = gs_variables-cmfrq.
          DO.
            CLEAR lt_clritkey_t.
            LOOP AT lt_clritkey INTO lwa_itemkey FROM lv_index_from TO lv_index_to.
              APPEND lwa_itemkey TO lt_clritkey_t.
            ENDLOOP.
            CALL FUNCTION '/CGDC/CLRQ_ITM_READ'
              EXPORTING
                i_clrno     = gs_clrqdoc_infocus-x-crhdr-clrno
                it_clrit    = lt_clritkey_t
                i_subitem   = ' '
              IMPORTING
                et_critm    = lt_critm
                et_crcon    = lt_crcon
                et_clrqcost = gs_clrqdoc_infocus-x-crcost
                et_crptr    = lt_crptr
                et_clrqblpl = lt_crblpl
                et_clrqbi   = lt_crbinr
                et_cscon    = lt_cscon.
            IF sy-subrc <> 0.
            ENDIF.
            APPEND LINES OF lt_critm TO gs_clrqdoc_infocus-x-critm.
            APPEND LINES OF lt_crcon TO gs_clrqdoc_infocus-x-crcon.
            APPEND LINES OF lt_crptr TO gs_clrqdoc_infocus-x-crptr.
            APPEND LINES OF lt_crblpl TO gs_clrqdoc_infocus-x-crblpl.
            APPEND LINES OF lt_crbinr TO gs_clrqdoc_infocus-x-crbinr.
            APPEND LINES OF lt_cscon TO gs_clrqdoc_infocus-x-cscon.
            IF lv_exit_do IS NOT INITIAL.
              EXIT.
            ENDIF.
            lv_index_from = lv_index_to + 1.
            lv_index_to = lv_index_to + gs_variables-cmfrq.
            IF lv_index_to > lv_length.
              lv_index_to = lv_length.
              lv_exit_do = abap_true.
            ENDIF.

          ENDDO.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM save_mass_documents USING lt_clrq_doc TYPE /cgdc/tt_clrq_doc
                         lv_commit_work.
  CALL FUNCTION '/CGDC/CLRQ_SAVE'
    EXPORTING
      i_commit_work = lv_commit_work
    CHANGING
      ct_clrq_doc   = lt_clrq_doc
    EXCEPTIONS
      no_change     = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
FORM set_subscreen_area_0301.
  IF gs_variables-itm_post_amt_un IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
    gs_variables-subscr_postpone_alv = gc_screen-postpone_alv.
  ELSE.
    gs_variables-subscr_postpone_alv = gc_screen-dummy.
  ENDIF.
ENDFORM.
FORM set_subscreen_area_0302.
  IF gs_variables-itm_post_amt_un IS NOT INITIAL OR gs_variables-itm_post_quan_un IS NOT INITIAL.
    gs_variables-subscr_postpone_alv = gc_screen-postpone_alv.
  ELSE.
    gs_variables-subscr_postpone_alv = gc_screen-dummy.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_clrqblnpl
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_BLP_DOC_X_BLPLN
*&      --> LOOP
*&      --> AT
*&      --> GS_BLP_DOC_X_BLPLN
*&      --> INTO
*&      --> LWA_BLPLN
*&---------------------------------------------------------------------*
FORM select_clrqblnpl  USING lt_blpln TYPE /cgdc/tt_blnpln.

  CLEAR: gt_clrq_blpl_exst, gt_clrqblpl, gt_clrqit_blp, gt_clrqbi_blp.
  CHECK gs_clrqdoc_infocus-x-crhdr-updkz NE gc_updkz_new.

  DATA : lt_critm TYPE TABLE OF /cgdc/s_clrqit.
  DATA : lt_critc TYPE TABLE OF /cgdc/s_clrqiC.
  DATA: lt_clrqbi TYPE TABLE OF /cgdc/s_clrqbi.
  DATA : lwa_critm TYPE /cgdc/s_clrqit.
  DATA : lwa_critc TYPE /cgdc/s_clrqic.
  DATA : lt_clrqbl TYPE TABLE OF /cgdc/s_clrqblpl.

  SELECT * FROM /cgdc/_clrqblpl
  INTO TABLE gt_clrq_blpl_exst
  WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  IF sy-subrc EQ 0.
    "Added By Nitin
    SORT gt_clrq_blpl_exst BY vbeln posnr billitem.
    lt_clrqbl = gt_clrq_blpl_exst.
    DELETE lt_clrqbl WHERE vbeln IS INITIAL AND posnr IS INITIAL AND billitem IS INITIAL.
    IF lt_clrqbl IS NOT INITIAL.
      SELECT * FROM /cgdc/_clrqblpl
        INTO TABLE gt_clrqblpl
        FOR ALL ENTRIES IN lt_clrqbl
        WHERE vbeln = lt_clrqbl-vbeln
          AND posnr = lt_clrqbl-posnr
          AND billitem = lt_clrqbl-billitem.

      SORT gt_clrqblpl BY vbeln posnr billitem.
    ENDIF.
  ENDIF.
*- get line items
  IF gt_clrqblpl IS NOT INITIAL.
*    SELECT * FROM /cgdc/_clrqit
*    INTO CORRESPONDING FIELDS OF TABLE lt_critm
*    FOR ALL ENTRIES IN gt_clrqblpl
*    WHERE clrno =  gt_clrqblpl-clrno
*      AND clrit = gt_clrqblpl-clrit.
    SELECT *
      FROM /cgdc/_clrqit AS a
       LEFT OUTER JOIN /cgdc/_clrqic AS b ON a~clrno = b~clrno
                AND  a~clrit = b~clrit
                AND a~clrsit = b~clrsit
                AND a~clrdit = b~clrdit
           INTO CORRESPONDING FIELDS OF TABLE lt_critm          ##too_many_itab_fields
           FOR ALL ENTRIES IN gt_clrqblpl
           WHERE a~clrno =  gt_clrqblpl-clrno
           AND a~clrit = gt_clrqblpl-clrit.

    IF sy-subrc = 0.
      "added by Nitin
      LOOP AT lt_critm INTO lwa_critm.
        READ TABLE gs_clrqdoc_infocus-x-critm TRANSPORTING NO FIELDS WITH KEY clrno = lwa_critm-clrno
                                                                              clrit = lwa_critm-clrit
                                                                              clrsit = lwa_critm-clrsit
                                                                              clrdit = lwa_critm-clrdit.
        IF sy-subrc <> 0.
          APPEND lwa_critm TO gs_clrqdoc_infocus-x-critm.
        ENDIF.
      ENDLOOP.
    ENDIF.

    SELECT *
              FROM /cgdc/_clrqbi
              INTO CORRESPONDING FIELDS OF TABLE lt_clrqbi
             WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno AND billscheditem NE ''.
    IF sy-subrc = 0.
      LOOP AT lt_clrqbi INTO DATA(lwa_clrqbi).
        READ TABLE gs_clrqdoc_infocus-x-crbinr TRANSPORTING NO FIELDS WITH KEY bill_item = lwa_clrqbi-bill_item.
        IF sy-subrc <> 0.
          APPEND lwa_clrqbi TO gs_clrqdoc_infocus-x-crbinr.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
  SORT gt_clrqit_blp BY clrno clrit.
  SORT  gt_clrqbi_blp BY bill_item.

*- Get billing type configuration
  SELECT * FROM /cgdc/t_bilitty
    INTO TABLE gt_bilitty .

ENDFORM.

FORM set_icon.

  DATA: lt_msg TYPE /cgdc/t_message,
        ls_msg TYPE /cgdc/s_message.

  CONSTANTS: lc_dynnr_0110 TYPE syst_dynnr VALUE '0110',
             lc_dmd_exce_r TYPE c VALUE 'R',
             lc_dmd_exce_y TYPE c VALUE 'Y',
             lc_dmd_exce_g TYPE c VALUE 'G',
             lc_msg_i      TYPE /cgdc/msg_id VALUE 'I',
             lc_msg_p      TYPE /cgdc/msg_id VALUE 'P',
             lc_msg_f      TYPE /cgdc/msg_id VALUE 'F'.

  IF sy-dynnr EQ lc_dynnr_0110.
    SELECT *
           FROM /cgdc/t_clrq_erh
           INTO TABLE @DATA(lt_errh).

    CASE gs_variables-max_on_dmd_excd.
      WHEN lc_dmd_exce_r.
        READ TABLE lt_errh INTO DATA(ls_errh) WITH KEY msg_code = lc_msg_i.
      WHEN lc_dmd_exce_y.
        READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = lc_msg_p.
      WHEN lc_dmd_exce_g.
        READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = lc_msg_f.
      WHEN OTHERS.
    ENDCASE.
    ls_msg-msgid = ls_errh-msgclass.
    ls_msg-msgnr = ls_errh-msgid.
    ls_msg-msgty = ls_errh-msgty.
    APPEND ls_msg TO gt_messages_header.
    CLEAR ls_msg.
*- get header messages
    DATA(lv_len) = strlen( gs_variables-header_messages ).
    IF lv_len GT 0.
      DATA(lv_n) = 0.
      DO lv_len TIMES.
        READ TABLE lt_errh INTO ls_errh WITH KEY msg_code = gs_variables-header_messages+lv_n(1).
        IF sy-subrc EQ 0.
          ls_msg-msgid = ls_errh-msgclass.
          ls_msg-msgnr = ls_errh-msgid.
          ls_msg-msgty = ls_errh-msgty.
          APPEND ls_msg TO gt_messages_header.
          CLEAR ls_msg.
        ENDIF.
        lv_n = lv_n + 1.
      ENDDO.
    ENDIF.

*- add message for blcok *-
    CALL METHOD /cgdc/cl_be_helper=>get_blocks_on_contract
      EXPORTING
        iv_vbeln  = gs_clrqdoc_infocus-x-crhdr-vgbel
      IMPORTING
        et_blocks = DATA(lt_blocks).
    IF lt_blocks IS NOT INITIAL.
      ls_msg-msgid = gc_clrq_msg_cls.
      ls_msg-msgnr = gc_msg_cls_msgnr-165.
      ls_msg-msgty = gc_message_type-error.
      APPEND ls_msg TO gt_messages_header.
      CLEAR ls_msg.
    ENDIF.
*- add message for blcok *-

    SORT gt_messages_header BY msgty.
    READ TABLE gt_messages_header INTO DATA(ls_msgh) WITH KEY msgty = gc_message_type-error.
    IF sy-subrc EQ 0.
      gs_variables-header_light = icon_red_light.
    ELSE.
      READ TABLE gt_messages_header INTO ls_msgh WITH KEY msgty = gc_message_type-warning.
      IF sy-subrc EQ 0 AND gv_light NE icon_red_light.
        gs_variables-header_light = icon_yellow_light.
      ELSE.
        READ TABLE gt_messages_header INTO ls_msgh WITH KEY msgty = gc_message_type-information.
        IF sy-subrc EQ 0 AND ( gv_light NE icon_red_light AND  gv_light NE icon_yellow_light ).
          gs_variables-header_light =  icon_yellow_light.
        ELSE.
          gs_variables-header_light =  icon_green_light.
        ENDIF.
      ENDIF.
    ENDIF.
    /cgdc/s_clrq_screenfields-clq_status = gs_variables-header_light.
  ENDIF.
ENDFORM.
FORM select_prps CHANGING lt_prps TYPE t_prps.

  DATA: lt_cont_item_temp      LIKE gt_contract_itm,
        lt_con_itm_new         LIKE gt_contract_itm,
        lt_prps_add_cc         TYPE TABLE OF prps,
        lt_prps_con_itm        TYPE TABLE OF prps,
        ls_con_itm_new         TYPE vbap,
        ls_add_cost_coll_pspnr TYPE s_add_cost_coll_pspnr,
        lwa_prps               TYPE prps,
        lwa_prps_tmp           TYPE prps,
        lwa_add_cost_collector LIKE LINE OF gt_add_cost_collector,
        lwa_cont_item_temp     LIKE LINE OF gt_contract_itm.

***Consider Add Cost Collectors
  PERFORM select_add_cost_collectors.
***
  "Fetch OBJNR
  lt_cont_item_temp = gt_contract_itm[].
***Consider Add Cost Collectors
  LOOP AT lt_cont_item_temp INTO lwa_cont_item_temp.

    CHECK NOT lwa_cont_item_temp-ps_psp_pnr IS INITIAL.

    LOOP AT gt_add_cost_coll_pspnr INTO ls_add_cost_coll_pspnr WHERE con_itm_pspnr EQ lwa_cont_item_temp-ps_psp_pnr.
      CLEAR ls_con_itm_new.
      ls_con_itm_new = lwa_cont_item_temp.
      ls_con_itm_new-ps_psp_pnr = ls_add_cost_coll_pspnr-cost_coll_pspnr.
      APPEND ls_con_itm_new TO lt_con_itm_new.
    ENDLOOP.

  ENDLOOP.

  APPEND LINES OF lt_con_itm_new TO lt_cont_item_temp.
***
  SORT lt_cont_item_temp BY ps_psp_pnr.
  DELETE ADJACENT DUPLICATES FROM lt_cont_item_temp COMPARING ps_psp_pnr.

  IF lt_cont_item_temp IS NOT INITIAL.
    SELECT *
      FROM /cgdc/_billelem
      INTO TABLE gt_billitem
      FOR ALL ENTRIES IN lt_cont_item_temp
      WHERE bpspnr = lt_cont_item_temp-ps_psp_pnr.
    IF sy-subrc = 0.
      SELECT pspnr posid objnr post1 fakkz FROM prps
      INTO CORRESPONDING FIELDS OF TABLE lt_prps
      FOR ALL ENTRIES IN gt_billitem
      WHERE pspnr = gt_billitem-pspnr.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_calc_group_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_calc_group_data USING lv_rtbpn TYPE /cgdc/rtbpn.

  DATA: lt_calc_group TYPE /cgdc/tt_rtbpcg,
        ls_calc_group TYPE /cgdc/s_rtbpcg,
        lt_asgncg     TYPE STANDARD TABLE OF /cgdc/t_asgncg,
        ls_asgncg     TYPE /cgdc/t_asgncg.

  REFRESH: lt_calc_group, lt_asgncg,
           gt_calc_group.
  SELECT a~* FROM
    /cgdc/t_rtbpcg AS a INNER JOIN /cgdc/t_asgncg AS b
    ON  a~clgrn = b~clgrn
    INTO TABLE @lt_calc_group
    WHERE b~rtbpn = @lv_rtbpn.
  IF sy-subrc EQ 0.
    SELECT * FROM /cgdc/t_asgncg
             INTO TABLE lt_asgncg
             WHERE rtbpn = lv_rtbpn.
    IF sy-subrc EQ 0.
      SORT lt_asgncg BY cgseq.
      CLEAR ls_asgncg.
      LOOP AT lt_asgncg INTO ls_asgncg.
        CLEAR ls_calc_group.
        READ TABLE lt_calc_group INTO ls_calc_group
                                 WITH KEY clgrn = ls_asgncg-clgrn.
        IF sy-subrc = 0.
          APPEND ls_calc_group TO gt_calc_group.
        ENDIF.
        CLEAR ls_asgncg.
      ENDLOOP.
    ENDIF.

  ENDIF.


***
  SELECT a~* FROM
    /cgdc/t_rtbpcgf AS a INNER JOIN /cgdc/t_asgncg AS b
    ON  a~clgrn = b~clgrn
    INTO TABLE @gt_calc_group_fun
    WHERE b~rtbpn = @lv_rtbpn.

  SELECT a~* FROM
    /cgdc/t_rtbpcgfc  AS a INNER JOIN /cgdc/t_asgncg AS b
    ON  a~clgrn = b~clgrn
    INTO TABLE @gt_calc_group_fun_src
    WHERE b~rtbpn = @lv_rtbpn.


ENDFORM.
FORM select_amounts_calc_grp_row USING ls_clrqhd  TYPE /cgdc/s_clrqhd
                                       lv_knumh   TYPE knumh
                                       ls_crgrr   TYPE /cgdc/_clrqgrr
                              CHANGING lv_source_kbetr TYPE kbetr
                                       lv_base_kbetr TYPE kbetr.

  DATA:lwa_crgrr              TYPE /cgdc/s_clrqgrr,
       lwa_calc_grp           TYPE /cgdc/s_rtbpcg,
       lwa_calc_group_fun_src TYPE /cgdc/s_rtbpcgfc,
       lwa_crgrrf             TYPE /cgdc/s_clrqgrrf,
       lv_select              TYPE string,
       lv_where               TYPE string,
       lv_date_where          TYPE string,
       lv_from_table          TYPE string.

  READ TABLE gs_clrqdoc_infocus-x-crgrr
  INTO lwa_crgrr
  WITH KEY clgrp_knumh = lv_knumh.

  CLEAR: lwa_calc_grp.
  READ TABLE gt_calc_group INTO lwa_calc_grp
  WITH KEY kschl_base = lwa_crgrr-clgrp_kschl.

  SELECT SINGLE kbetr FROM konp INTO lv_base_kbetr
    WHERE knumh = lv_knumh.

  LOOP AT gt_calc_group_fun_src INTO lwa_calc_group_fun_src.
    IF lv_select IS  INITIAL.
      CONCATENATE `SUM ( CASE WHEN ( C~KSCHL = '` lwa_calc_group_fun_src-kschl_src `'`  INTO lv_select.
    ELSE.
      CONCATENATE lv_select ` OR '` lwa_calc_group_fun_src-kschl_src `'` INTO lv_select.
    ENDIF.
  ENDLOOP.
  IF lv_select IS NOT INITIAL.
    CONCATENATE lv_select ` )`  ` THEN KWERT ELSE 0 END ) as KBETR ` INTO lv_select.
  ENDIF.

  CONCATENATE `/CGDC/_CLRQHD AS A `
    ` INNER JOIN /CGDC/_CLRQIT AS B `
    ` ON  A~CLRNO = B~CLRNO AND B~CLRSIT NE '000000' `
    ` INNER JOIN /CGDC/_CLRQCN AS C `
                 ` ON  B~CLRNO = C~CLRNO `
                 ` AND B~CLRIT = C~CLRIT `
                 ` AND B~CLRSIT = C~CLRSIT `
                 INTO lv_from_table.

  CONCATENATE lv_where ` A~CLRNO = '` ls_clrqhd-clrno `'` INTO lv_where.
  LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf
    WHERE clgrn = ls_crgrr-clgrn."  AND rowid = ls_crgrr-rowid. lpriyanka
    IF lwa_crgrrf-fcatg = 'HD'.
      CONCATENATE lv_where `AND A~` lwa_crgrrf-fname ` = '` lwa_crgrrf-fvalue `' ` INTO lv_where.
    ELSEIF lwa_crgrrf-fcatg = 'IT'.
      CONCATENATE lv_where `AND B~` lwa_crgrrf-fname ` = '` lwa_crgrrf-fvalue `' ` INTO lv_where.
    ENDIF.
    IF lwa_crgrrf-fname = 'DATAB' OR lwa_crgrrf-fname = 'DATBI'.
      IF lwa_crgrrf-fname = 'DATAB'.
        CONCATENATE lv_date_where `AND B~PRSDT >= '`  lwa_crgrrf-fvalue `' `  INTO lv_date_where.
      ENDIF.
      IF lwa_crgrrf-fname = 'DATBI'.
        CONCATENATE lv_date_where `AND B~PRSDT <= '`  lwa_crgrrf-fvalue `' `  INTO lv_date_where.
      ENDIF.
    ENDIF.
  ENDLOOP.

  lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Correction
  SELECT lv_select
    FROM (lv_from_table)
    INTO lv_source_kbetr
    WHERE (lv_where).
  ENDSELECT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_calc_grp_quick_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_calc_grp_quick_info .
  DATA: lwa_crgrr TYPE /cgdc/s_clrqgrr.
  READ TABLE gs_clrqdoc_infocus-x-crgrr INTO lwa_crgrr
  WITH KEY rowid = gs_variables-clcgrp_indx_infocus.

  MOVE-CORRESPONDING lwa_crgrr TO /cgdc/s_clrqgrr.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_calc_grp_pricing_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_calc_grp_pricing_data.

  DATA: lv_display_only,
        lv_crcon_tabix  TYPE sy-tabix,
        lv_no_display   TYPE x,
        lv_jxcd_active  TYPE xusvr_bkpf,
        ls_critm        TYPE /cgdc/s_clrqit,
        lwa_cgrcon      TYPE komv,
        lwa_komv        TYPE komv,
*        lwa_crcon TYPE /cgdc/s_clrqcn,
        lwa_crgrr       TYPE /cgdc/s_clrqgrr,
        lwa_crgrrf      TYPE /cgdc/s_clrqgrrf,
        lwa_calc_grp    TYPE /cgdc/t_rtbpcg,
        lv_offset       TYPE i.

  DATA: ls_komk      TYPE komk,
        ls_tvta      TYPE tvta,
        ls_tvko      TYPE tvko,
        lwa_komp     TYPE komp,
        lt_komk_temp TYPE /cgdc/tt_komk,
        lt_komv_temp TYPE komv_t,
        lwa_critm    TYPE /cgdc/s_clrqit,
        lwa_crptr    TYPE /cgdc/s_clrqpt,
        lt_crcon     TYPE /cgdc/tt_clrqcn,
        lwa_crcon    TYPE /cgdc/s_clrqcn.

  DATA: lt_komv TYPE komv OCCURS 0 WITH HEADER LINE.

  FIELD-SYMBOLS: <lv_value>     TYPE any,
                 <lwa_komk_key> TYPE any.

  CLEAR: gt_x_komp.

  IF NOT gs_variables-clcgrp_indx_infocus IS INITIAL.
    READ TABLE gs_clrqdoc_infocus-x-crgrr   INTO lwa_crgrr
    WITH KEY rowid = gs_variables-clcgrp_indx_infocus.
  ENDIF.

  IF gs_variables-document_mode EQ gc_mode_display.
    lv_display_only = abap_true.
  ENDIF.

  PERFORM fill_kurgv USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuagv USING gs_clrqdoc_infocus-x-crhdr.
  MOVE-CORRESPONDING gs_kurgv TO ls_komk.
  MOVE-CORRESPONDING gs_kuwev TO ls_komk.
  MOVE-CORRESPONDING gs_kuagv TO ls_komk.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komk.
  ls_komk-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_komk-belnr = gs_clrqdoc_infocus-x-crhdr-clrno.

  IF ls_komk-fbuda IS INITIAL.
    ls_komk-fbuda = sy-datum.
  ENDIF.

  PERFORM read_tvko USING gs_clrqdoc_infocus-x-crhdr-vkorg
                 CHANGING gs_tvko.

  ls_komk-boavo = gs_tvko-boavo.

  IF gs_tvko-boavo NE space
    AND gs_kurgv-bokre NE space.
    ls_komk-borel = abap_true.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  WITH KEY clrit = gc_posnr
  TRANSPORTING NO FIELDS.

  IF sy-subrc EQ 0.

    LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr FROM sy-tabix.

      IF lwa_crptr-clrit NE gc_posnr.
        EXIT.
      ENDIF.

      IF lwa_crptr-parvw EQ 'RE'.
        ls_komk-kunre = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'RG'.
        ls_komk-knrze = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'AG'.
        ls_komk-kunnr = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'WE'.
        ls_komk-kunwe = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ 'VE'.
        ls_komk-vrtnr = lwa_crptr-pernr.
      ELSEIF lwa_crptr-parvw EQ 'LF'.
        ls_komk-lifnr = lwa_crptr-lifnr.
      ENDIF.

    ENDLOOP.

  ENDIF.

  ls_komk-kappl = 'V'.
  ls_komk-mandt = sy-mandt.
  ls_komk-vbklt = '+'.

  "added By Nitin
  IF gt_calc_group IS INITIAL.
    PERFORM select_calc_group_data USING gs_clrqdoc_infocus-x-crhdr-rtbpn.
  ENDIF.
  READ TABLE gt_calc_group INTO lwa_calc_grp
  WITH KEY kschl_base = ls_critm-clgrp_kschl.
  IF sy-subrc = 0.
    ls_komk-kalsm = lwa_calc_grp-ckalsm.
  ELSE.
    ls_komk-kalsm = gs_clrqdoc_infocus-x-crhdr-kalsm.
  ENDIF.
  PERFORM read_tvta USING gs_clrqdoc_infocus-x-crhdr-vkorg
                          gs_clrqdoc_infocus-x-crhdr-vtweg
                          gs_clrqdoc_infocus-x-crhdr-spart
                 CHANGING ls_tvta
                          ls_tvko.

  IF NOT ls_tvta-vtwko IS INITIAL.
    ls_komk-vtweg = ls_tvta-vtwko.
  ENDIF.

  IF NOT ls_tvta-spako IS INITIAL.
    ls_komk-spart = ls_tvta-spako.
  ENDIF.

  PERFORM read_t001 USING gs_clrqdoc_infocus-x-crhdr-bukrs
                 CHANGING gs_t001.

  ls_komk-hwaer = gs_t001-waers.

  IF ls_komk-hwaer IS INITIAL.
    ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  IF ls_komk-txjcd IS INITIAL
    AND ls_komk-aland NE ls_komk-land1.

    CALL FUNCTION 'CHECK_JURISDICTION_ACTIVE'
      EXPORTING
        i_land     = gs_t001-land1
        i_bukrs    = gs_t001-bukrs
      IMPORTING
        e_isactive = lv_jxcd_active.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT lv_jxcd_active IS INITIAL.
      ls_komk-txjcd = gs_t001-txjcd.
    ENDIF.

  ENDIF.
*  IF lwa_crgrr-clrit IS INITIAL.
*    ls_komk-kalsm = lwa_calc_grp-ckalsm.
*  ELSE.
*    ls_komk-kalsm = gs_clrqdoc_infocus-x-crhdr-kalsm.
*  ENDIF.

  ls_komk-boavo = gs_tvko-boavo.
  ls_komk-bokre = gs_kurgv-bokre.

  MOVE-CORRESPONDING lwa_crgrr TO ls_critm.
  READ TABLE gt_calc_group INTO lwa_calc_grp
  WITH KEY clgrn = lwa_crgrr-clgrn.

  ls_komk-kalsm = lwa_calc_grp-ckalsm.

  IF lwa_crgrr-clrit IS INITIAL.
    ls_critm-clgrp_knumh = lwa_crgrr-clgrp_knumh.
    ls_critm-clgrp_kolnr = lwa_crgrr-clgrp_kolnr.
    ls_critm-clgrp_kotabnr = lwa_crgrr-clgrp_kotabnr.
    ls_critm-clgrp_kschl = lwa_crgrr-clgrp_kschl.
    ls_critm-matnr = lwa_calc_grp-matnr.
    ls_critm-itmty = gc_clrq_itmty-calc_grp_itm.
    ls_critm-clrno = gs_clrqdoc_infocus-clrno.
    gs_crgrr = lwa_crgrr.
    ls_critm-clrit = lwa_crgrr-rowid.

    ls_critm-prsdt = lwa_crgrr-datab.
    ls_critm-budat = lwa_crgrr-datab.
    ls_critm-/cgdc/orgh = gs_clrqdoc_infocus-x-crhdr-vgbel.

    LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf WHERE clgrn = lwa_crgrr-clgrn
                                                          AND rowid = lwa_crgrr-rowid "lpriyanka
                                                          AND clgrp_knumh = ls_critm-clgrp_knumh.

      ASSIGN COMPONENT lwa_crgrrf-fname OF STRUCTURE ls_critm TO <lv_value>.

      IF lwa_crgrrf-fname = 'POSNR'.
        ASSIGN COMPONENT 'CNTIT' OF STRUCTURE ls_critm TO <lv_value>.
      ENDIF.

      IF <lv_value> IS ASSIGNED.
        <lv_value> = lwa_crgrrf-fvalue.
        UNASSIGN <lv_value>.
      ENDIF.

    ENDLOOP.

  ELSE.
    READ TABLE gs_clrqdoc_infocus-x-critm INTO ls_critm
    WITH KEY clrno = gs_clrqdoc_infocus-clrno
             clrit = lwa_crgrr-clrit
             clrsit = '000000'.

    IF sy-subrc NE 0.
      SELECT SINGLE * FROM /cgdc/_clrqit
        INTO CORRESPONDING FIELDS OF ls_critm
        WHERE clrno = gs_clrqdoc_infocus-clrno
          AND clrit = lwa_crgrr-clrit
          AND clrsit = '000000'.
    ENDIF.
  ENDIF.

  PERFORM prepare_temp_hdr_itm_no CHANGING ls_critm.

  PERFORM fill_pricing_data USING ls_critm
                                  space
                                  gs_clrqdoc_infocus
                         CHANGING ls_komk
                                  lwa_komp.

  IF ls_komk-waerk IS INITIAL.
    ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  ASSIGN COMPONENT 'KEY_UC' OF STRUCTURE ls_komk TO <lwa_komk_key>.

  IF sy-subrc EQ 0.
    READ TABLE gt_x_komk WITH KEY ('KEY_UC') = <lwa_komk_key>.
  ELSE.
    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <lwa_komk_key>.

    IF <lwa_komk_key> IS ASSIGNED.
      READ TABLE gt_x_komk WITH KEY <lwa_komk_key>.
    ENDIF.
  ENDIF.

  IF sy-subrc NE 0.
    APPEND ls_komk TO gt_x_komk.
    gt_x_komk-ix_komk = sy-tabix.
    MODIFY gt_x_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ENDIF.

  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
  gs_crgrr = lwa_crgrr.
  CLEAR: gt_crgrrf.
  LOOP AT gs_clrqdoc_infocus-x-crgrrf INTO lwa_crgrrf
    WHERE clgrn = lwa_crgrr-clgrn
      AND rowid = lwa_crgrr-rowid   "lpriyanka
      AND clgrp_knumh = lwa_crgrr-clgrp_knumh
      AND wbsel = lwa_crgrr-wbsel.
    APPEND lwa_crgrrf TO gt_crgrrf.
  ENDLOOP.
  CLEAR:lt_komv.
  IF lwa_crgrr-clrit IS NOT INITIAL.
    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE clrit = lwa_crgrr-clrit.

      MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
      lwa_komv-knumv = ls_critm-tmphd.
      lwa_komv-kposn = lwa_komp-kposn.
      lwa_komv-kmeng = 1.
      lwa_komv-kappl = 'V'.
      APPEND lwa_komv TO  lt_komv.
    ENDLOOP.
    IF sy-subrc = 4.
      SELECT * FROM /cgdc/_clrqcn INTO TABLE lt_crcon
        WHERE clrno = gs_clrqdoc_infocus-clrno
          AND clrit = lwa_crgrr-clrit.

      LOOP AT lt_crcon INTO lwa_crcon WHERE clrit = lwa_crgrr-clrit.
        MOVE-CORRESPONDING lwa_crcon TO lwa_komv.
        lwa_komv-knumv = ls_critm-tmphd.
        lwa_komv-kposn = ls_critm-tmpit.
        lwa_komv-kmeng = 1.
        lwa_komv-kappl = 'V'.
        APPEND lwa_komv TO  lt_komv.
      ENDLOOP.
    ENDIF.
  ELSE.
    LOOP AT gs_clrqdoc_infocus-x-cgrcon INTO lwa_cgrcon WHERE kposn = lwa_crgrr-rowid.

      MOVE-CORRESPONDING lwa_cgrcon TO lwa_komv.
      lwa_komv-knumv = ls_critm-tmphd.
      lwa_komv-kposn = ls_critm-tmpit.
      lwa_komv-kmeng = 1.
      lwa_komv-kappl = 'V'.
      APPEND lwa_komv TO lt_komv.
    ENDLOOP.
  ENDIF.

  IF lt_komv[] IS INITIAL.
    CLEAR ls_komk-knumv.
  ENDIF.

*   Added for UI
  APPEND LINES OF lt_komv TO gt_komv .
  gs_komk = ls_komk.
  gwa_komp = lwa_komp.

  CALL FUNCTION 'PRICING_REFRESH'
    EXPORTING
      i_no_komv_refresh = abap_false
    TABLES
      tkomk             = lt_komk_temp[]
      tkomv             = lt_komv_temp[].
  IF sy-subrc <> 0.
  ENDIF.

  CALL FUNCTION 'PRICING_SUBSCREEN_SET_DATA'
    EXPORTING
      comm_head_i     = ls_komk
      comm_item_i     = lwa_komp
      trtyp_i         = gs_variables-document_mode
      display_only    = abap_true
      ctrl_no_display = lv_no_display
    TABLES
      tkomv           = lt_komv[]
    EXCEPTIONS
      error           = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_calc_grp_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_calc_grp_row_data USING lv_call_for_runtime.

  DATA: lv_subrc                TYPE sy-subrc,
        lt_komv                 TYPE komv_t,
        ls_komp                 TYPE komp,
        ls_total_cost_per_posnr TYPE s_total_cost_per_posnr,
        ls_total_cost_per_vbeln TYPE s_total_cost_per_vbeln,
        lwa_komv                TYPE komv,
        lwa_critm               TYPE /cgdc/s_clrqit,
        lwa_crgrr               TYPE /cgdc/s_clrqgrr.

  FIELD-SYMBOLS: <lwa_crgrr> TYPE /cgdc/s_clrqgrr.

  CLEAR: gs_clrqdoc_infocus-x-cgrcon, gt_total_cost_per_posnr, gt_clgrp_itm_buffer,
         gt_clgrp_cnd_buffer.

  LOOP AT gs_clrqdoc_infocus-x-crgrr ASSIGNING <lwa_crgrr>.
*    <lwa_crgrr>-rowid = sy-tabix.   "--AMISHARMA DCLM 6632
    CLEAR:lt_komv,
          ls_komp.

    PERFORM pricing_calc_grpup CHANGING <lwa_crgrr> ls_komp lt_komv.                       " DCLM 5764
    <lwa_crgrr>-netwr_pbp = ls_komp-netwr.                                                 " DCLM 5764
    <lwa_crgrr>-prsok = ls_komp-prsok.

    LOOP AT lt_komv INTO lwa_komv.
      lwa_komv-knumv = <lwa_crgrr>-clrno.
      lwa_komv-kposn = <lwa_crgrr>-rowid.
      APPEND lwa_komv TO gs_clrqdoc_infocus-x-cgrcon.
    ENDLOOP.
    PERFORM prepare_cr_group_items USING lv_call_for_runtime
                                         <lwa_crgrr>.

  ENDLOOP.
  IF lv_call_for_runtime IS NOT INITIAL.
    CLEAR: gt_clgrp_itm_buffer,
           gt_clgrp_cnd_buffer.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form set_hdr_pricing_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_bill_prev_pricing_data.

  DATA: lv_display_only,
        lv_crcon_tabix  TYPE sy-tabix,
        lv_no_display   TYPE x,
        lv_jxcd_active  TYPE xusvr_bkpf,
        lv_offset       TYPE i.

  DATA: ls_komk      TYPE komk,
        lt_komk_temp TYPE /cgdc/tt_komk,
        lt_komv_temp TYPE komv_t,
        ls_tvta      TYPE tvta,
        ls_tvko      TYPE tvko,
        lwa_komp     TYPE komp,
        lwa_data     TYPE /cgdc/s_clrqbi_fcat,
        lwa_critm    TYPE /cgdc/s_clrqit,
        lwa_crptr    TYPE /cgdc/s_clrqpt,
        lwa_crcon    TYPE /cgdc/s_clrqcn.

  DATA: lt_komv          TYPE komv OCCURS 0 WITH HEADER LINE,
        lwa_komv         TYPE komv,
        lt_selected_rows TYPE lvc_t_row,
        lv_lines         TYPE i.

  FIELD-SYMBOLS: <lwa_komk_key> TYPE any.
  FIELD-SYMBOLS: <lwa_komv> TYPE komv.
  CLEAR: gt_x_komp.

  IF NOT gs_variables-item_infocus IS INITIAL.
    READ TABLE gs_clrqdoc_infocus-x-critm INTO lwa_critm
    WITH KEY clrit = gs_variables-item_infocus.
  ENDIF.

  CALL METHOD go_grid_calc_req_bill_pre->get_selected_rows
    IMPORTING
      et_index_rows = lt_selected_rows[].
  lv_lines = lt_selected_rows[ 1 ]-index.
  IF gt_bill_pre_data_page IS NOT INITIAL.
    READ TABLE gt_bill_pre_data_page INTO lwa_data INDEX lv_lines.
    IF lwa_data IS NOT INITIAL.
      MOVE-CORRESPONDING lwa_data TO lwa_critm.
    ENDIF.
  ENDIF.

  IF gs_variables-document_mode EQ gc_mode_display.
    lv_display_only = abap_true.
  ENDIF.

  PERFORM fill_kurgv USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.
  PERFORM fill_kuagv USING gs_clrqdoc_infocus-x-crhdr.
  MOVE-CORRESPONDING gs_kurgv TO ls_komk.
  MOVE-CORRESPONDING gs_kuwev TO ls_komk.
  MOVE-CORRESPONDING gs_kuagv TO ls_komk.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_komk.
  ls_komk-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
  ls_komk-belnr = gs_clrqdoc_infocus-x-crhdr-clrno.

  IF ls_komk-fbuda IS INITIAL.
    ls_komk-fbuda = sy-datum.
  ENDIF.

  PERFORM read_tvko USING gs_clrqdoc_infocus-x-crhdr-vkorg
                 CHANGING gs_tvko.

  ls_komk-boavo = gs_tvko-boavo.

  IF gs_tvko-boavo NE space
    AND gs_kurgv-bokre NE space.
    ls_komk-borel = abap_true.
  ENDIF.

  READ TABLE gs_clrqdoc_infocus-x-crptr
  WITH KEY clrit = gc_posnr
  TRANSPORTING NO FIELDS.

  IF sy-subrc EQ 0.

    LOOP AT gs_clrqdoc_infocus-x-crptr INTO lwa_crptr FROM sy-tabix.

      IF lwa_crptr-clrit NE gc_posnr.
        EXIT.
      ENDIF.

      IF lwa_crptr-parvw EQ gc_partner_func-bill_to_party.
        ls_komk-kunre = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-payer.
        ls_komk-knrze = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-sold_to_party.
        ls_komk-kunnr = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-ship_to_party.
        ls_komk-kunwe = lwa_crptr-kunnr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-sales_emp.
        ls_komk-vrtnr = lwa_crptr-pernr.
      ELSEIF lwa_crptr-parvw EQ gc_partner_func-vendor.
        ls_komk-lifnr = lwa_crptr-lifnr.
      ENDIF.

    ENDLOOP.

  ENDIF.

  ls_komk-kappl = gc_kappl-sales.
  ls_komk-mandt = sy-mandt.
  ls_komk-vbklt = '+'.

  PERFORM read_tvta USING gs_clrqdoc_infocus-x-crhdr-vkorg
                          gs_clrqdoc_infocus-x-crhdr-vtweg
                          gs_clrqdoc_infocus-x-crhdr-spart
                 CHANGING ls_tvta
                          ls_tvko.

  IF NOT ls_tvta-vtwko IS INITIAL.
    ls_komk-vtweg = ls_tvta-vtwko.
  ENDIF.

  IF NOT ls_tvta-spako IS INITIAL.
    ls_komk-spart = ls_tvta-spako.
  ENDIF.

  PERFORM read_t001 USING gs_clrqdoc_infocus-x-crhdr-bukrs
                 CHANGING gs_t001.

  ls_komk-hwaer = gs_t001-waers.

  IF ls_komk-hwaer IS INITIAL.
    ls_komk-hwaer = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.

  IF ls_komk-txjcd IS INITIAL
    AND ls_komk-aland NE ls_komk-land1.

    CALL FUNCTION 'CHECK_JURISDICTION_ACTIVE'
      EXPORTING
        i_land     = gs_t001-land1
        i_bukrs    = gs_t001-bukrs
      IMPORTING
        e_isactive = lv_jxcd_active.
    IF sy-subrc <> 0.
    ENDIF.

    IF NOT lv_jxcd_active IS INITIAL.
      ls_komk-txjcd = gs_t001-txjcd.
    ENDIF.

  ENDIF.

  ls_komk-boavo = gs_tvko-boavo.
  ls_komk-bokre = gs_kurgv-bokre.
  PERFORM prepare_temp_hdr_itm_no CHANGING lwa_critm .
  PERFORM fill_pricing_data USING lwa_critm
                                  space
                                  gs_clrqdoc_infocus
                         CHANGING ls_komk lwa_komp.
  lwa_komp-prsfd = abap_true.

  IF ls_komk-waerk IS INITIAL.
    ls_komk-waerk = gs_clrqdoc_infocus-x-crhdr-waerk.
  ENDIF.
  ASSIGN COMPONENT gc_komk_field-key_uc OF STRUCTURE ls_komk TO <lwa_komk_key>.

  IF sy-subrc EQ 0.

    READ TABLE gt_x_komk WITH KEY (gc_komk_field-key_uc) = <lwa_komk_key>.

  ELSE.

    PERFORM get_komk_key_offset CHANGING lv_offset.
    ASSIGN ls_komk+0(lv_offset) TO <lwa_komk_key>.

    IF <lwa_komk_key> IS ASSIGNED.
      READ TABLE gt_x_komk WITH KEY <lwa_komk_key>.
    ENDIF.

  ENDIF.

  IF sy-subrc NE 0.
    APPEND ls_komk TO gt_x_komk.
    gt_x_komk-ix_komk = sy-tabix.
    MODIFY gt_x_komk INDEX sy-tabix TRANSPORTING ix_komk.
  ENDIF.

  IF NOT gs_variables-item_infocus IS INITIAL.
    lwa_komp-ix_komk = gt_x_komk-ix_komk.
  ENDIF.

*  PERFORM prep_bill_cond_tb USING lwa_komp
*                                        ls_komk
*                                  CHANGING lt_komv[].
*  IF NOT gs_variables-item_infocus IS INITIAL.
*    SET BIT 1 OF lv_no_display TO 1.
*    SET BIT 2 OF lv_no_display TO 1.
*  ENDIF.
*  IF gs_variables-subitem_infocus IS INITIAL OR ts_itm_details-activetab <> gc_fcode-tab_itm_subitem.
*    IF NOT gs_variables-item_infocus IS INITIAL.
*
*      READ TABLE gs_clrqdoc_infocus-x-critm
*       WITH KEY clrit = gs_variables-item_infocus
*                clrsit = '000000'
*                clrdit = '000000'
*       INTO lwa_critm.
*      gs_clrit = lwa_critm.
*      lwa_critm-tmphd = ls_komk-knumv.
*      lwa_critm-tmpit = lwa_komp-kposn.
*
*      IF sy-subrc = 0.
*        READ TABLE gs_clrqdoc_infocus-x-crcon
*        WITH KEY clrit = gs_variables-item_infocus
*                 clrdit = lwa_critm-ldetla
*        TRANSPORTING NO FIELDS.
*
*        IF sy-subrc EQ 0.
*
*          lv_crcon_tabix = sy-tabix.
*
*          LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon FROM lv_crcon_tabix.
*            READ TABLE lt_komv TRANSPORTING NO FIELDS WITH KEY kschl = lwa_crcon-kschl.
*            IF sy-subrc <> 0.
*              IF lwa_crcon-clrit NE gs_variables-item_infocus
*                OR lwa_crcon-clrdit <> lwa_critm-ldetla.
*                EXIT.
*              ENDIF.
*
*              CLEAR lt_komv.
*              MOVE-CORRESPONDING lwa_crcon TO lt_komv.
*              lt_komv-knumv = lwa_critm-tmphd.
*              lt_komv-kposn = lwa_critm-tmpit.
*              APPEND lt_komv.
*            ENDIF.
*          ENDLOOP.
*
*        ENDIF.
*      ENDIF.
*    ELSE.
*
*      LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon.
*        CLEAR lt_komv.
*        MOVE-CORRESPONDING lwa_crcon TO lt_komv.
*        lt_komv-knumv = gs_clrqdoc_infocus-x-crhdr-clrno.
*        lt_komv-kposn = lwa_crcon-clrit.
*        APPEND lt_komv.
*      ENDLOOP.
*
*    ENDIF.
*  ELSE.
*
*    "SUBITEM CONDITION TAB
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = gs_variables-subitem_infocus
*      IMPORTING
*        output = gs_variables-subitem_infocus.
*    IF sy-subrc <> 0.
*    ENDIF.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = gs_variables-delta_infocus
*      IMPORTING
*        output = gs_variables-delta_infocus.
*    IF sy-subrc <> 0.
*    ENDIF.
*
*    LOOP AT gs_clrqdoc_infocus-x-crcon INTO lwa_crcon WHERE clrit = gs_variables-item_infocus
*                                                           AND clrsit = gs_variables-subitem_infocus
*                                                           AND clrdit = gs_variables-delta_infocus.
*      CLEAR lt_komv.
*      MOVE-CORRESPONDING lwa_crcon TO lt_komv.
*      lt_komv-knumv = lwa_critm-tmphd.
*      lt_komv-kposn = lwa_critm-tmpit.
*      APPEND lt_komv.
*    ENDLOOP.
*  ENDIF.
*
*  IF lt_komv[] IS INITIAL.
*    CLEAR ls_komk-knumv.
*  ENDIF.
*
  CLEAR lt_komv[].
  DATA lv_posnr TYPE posnr.
  CLEAR lv_posnr.
  ASSIGN COMPONENT gc_clrqbi_field-srno OF STRUCTURE lwa_data TO FIELD-SYMBOL(<lv_snro>).
  lv_posnr = <lv_snro>.
  LOOP AT gt_bill_preview_cond INTO DATA(lwa_bill_cond) WHERE kposn = lv_posnr.
    MOVE lwa_bill_cond TO lwa_komv.
    lwa_komv-knumv = ls_komk-knumv.
    lwa_komv-kposn = lwa_komp-kposn.
    MOVE lwa_komv-kwert TO lwa_komv-kwert.
    APPEND lwa_komv TO lt_komv.
  ENDLOOP.

  CALL FUNCTION 'PRICING_REFRESH'
    EXPORTING
      i_no_komv_refresh = abap_false
    TABLES
      tkomk             = lt_komk_temp
      tkomv             = lt_komv_temp.
  IF sy-subrc <> 0.
  ENDIF.

  gs_clrhd = gs_clrqdoc_infocus-x-crhdr.
  gs_clrit-csist = gc_csist-acv_cost_sht.

  DATA lwa_konp TYPE konp.
  LOOP AT lt_komv ASSIGNING <lwa_komv>.
    CALL FUNCTION 'PRICING_CHECK'
      EXPORTING
        comm_head_i = ls_komk
        comm_item_i = lwa_komp
        komv_i      = <lwa_komv>
        preliminary = abap_true
      IMPORTING
        comm_head_e = ls_komk
        comm_item_e = lwa_komp
        komv_e      = <lwa_komv>
        konp_e      = lwa_konp
      EXCEPTIONS
        condition   = 1
        OTHERS      = 2.
    IF sy-subrc <> 0.
    ENDIF.
  ENDLOOP.

  DATA(lt_komv_disp) = lt_komv[].
  CALL FUNCTION 'PRICING_SUBSCREEN_SET_DATA'
    EXPORTING
      comm_head_i     = ls_komk
      comm_item_i     = lwa_komp
      trtyp_i         = gs_variables-document_mode
      display_only    = lv_display_only
      ctrl_no_display = lv_no_display
    TABLES
      tkomv           = lt_komv[]
      ykomv           = lt_komv_disp[]
    EXCEPTIONS
      error           = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.
FORM select_rtbic USING lv_pstyv TYPE /cgdc/clrq_pstyv
                   CHANGING ls_clrtic TYPE /cgdc/t_rtbic.
  CLEAR ls_clrtic.
  SELECT SINGLE *
    FROM /cgdc/t_rtbic
    INTO ls_clrtic
    WHERE pstyv = lv_pstyv.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_item_catgs
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS_X_CRHDR_CLR
*&---------------------------------------------------------------------*
FORM select_item_catgs  USING lv_clrqt TYPE /cgdc/clrqt.
  IF gt_item_catg IS INITIAL .
    SELECT *   FROM /cgdc/t_rtbic
      INTO TABLE gt_item_catg.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_msg_code
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_CRITM_FCAT
*&      <-- LV_ERR_LIGHT
*&      <-- LV_WAR_LIGHT
*&---------------------------------------------------------------------*
FORM set_msg_code  USING lt_msg_conf TYPE /cgdc/tt_clrq_msg_conf
                         lt_msg_confh TYPE /cgdc/tt_clrq_msg_confh
                   CHANGING ls_critm_fcat TYPE /cgdc/s_clrqit_fcat
                            lv_err_light TYPE boolean
                            lv_war_light TYPE boolean
                            lv_succ_light TYPE boolean.
  DATA: ls_err TYPE /cgdc/t_clrq_err,
        ls_msg TYPE /cgdc/s_message.

  CONSTANTS: lc_msg_icon_0a TYPE char4 VALUE '@0A@',
             lc_msg_icon_09 TYPE char4 VALUE '@09@',
             lc_msg_icon_08 TYPE char4 VALUE '@08@'.

  DATA(lv_len) = strlen( ls_critm_fcat-msg_code ).
  IF lv_len GT 0.
    DATA(lv_n) = 0.
    DO lv_len TIMES.
      LOOP AT lt_msg_conf INTO ls_err.
        IF ls_err-msg_code = ls_critm_fcat-msg_code+lv_n(1).
          IF sy-subrc EQ 0 .
            IF ls_err-header_msg_code IS NOT INITIAL.
              READ TABLE gt_messages_header INTO DATA(ls_msg_hdr) WITH KEY msgid = ls_err-msgclass
                                                                          msgnr = ls_err-msgid
                                                                          msgty = ls_err-msgty.
              IF sy-subrc NE 0.
                READ TABLE lt_msg_confh INTO DATA(ls_errh) WITH KEY msg_code = ls_err-header_msg_code.
                IF sy-subrc EQ 0.
                  ls_msg-msgid = ls_errh-msgclass.
                  ls_msg-msgnr = ls_errh-msgid.
                  ls_msg-msgty = ls_errh-msgty.
                  APPEND ls_msg TO gt_messages_header.
                  CLEAR ls_msg.
                ENDIF.
              ENDIF.
            ENDIF.
            CASE  ls_err-msgty.
              WHEN gc_message_type-error.
                ls_critm_fcat-msg_icon = lc_msg_icon_0a.
                lv_err_light = abap_true.
              WHEN gc_message_type-warning OR gc_message_type-information.
                IF ls_critm_fcat-msg_icon = lc_msg_icon_0a.
                ELSE.
                  ls_critm_fcat-msg_icon = lc_msg_icon_09.
                  lv_war_light = abap_true.
                ENDIF.
              WHEN ' '.
                IF ls_critm_fcat-msg_icon = lc_msg_icon_0a.
                ELSE.
                  ls_critm_fcat-msg_icon = lc_msg_icon_08.
                  lv_war_light = abap_true.
                ENDIF.
            ENDCASE.
          ELSE.
            ls_critm_fcat-msg_icon = lc_msg_icon_08.
            lv_succ_light = abap_true.
          ENDIF.
          lv_n = lv_n + 1.
        ENDIF.
      ENDLOOP.
    ENDDO.
  ELSE.
    ls_critm_fcat-msg_icon = lc_msg_icon_08.
    lv_succ_light = abap_true.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_add_cost_collectors
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_add_cost_collectors.

  DATA: lt_prps_add_cc         TYPE TABLE OF prps,
        lt_prps_con_itm        TYPE TABLE OF prps,
        ls_add_cost_coll_pspnr TYPE s_add_cost_coll_pspnr,
        lwa_prps               TYPE prps,
        lwa_prps_tmp           TYPE prps,
        lwa_add_cost_collector LIKE LINE OF gt_add_cost_collector.

  CLEAR: gt_add_cost_collector[], gt_add_cost_coll_pspnr[].

  SELECT *
    FROM /cgdc/_cafdaddcc
    INTO TABLE gt_add_cost_collector
    FOR ALL ENTRIES IN gt_contract_itm
    WHERE vbeln EQ gt_contract_itm-vbeln
    AND   deletion_ind = space.         "ignore deleted cc

  IF sy-subrc EQ 0.

    SELECT *
      FROM prps
      INTO TABLE lt_prps_add_cc
      FOR ALL ENTRIES IN gt_add_cost_collector
*      WHERE posid EQ gt_add_cost_collector-wbs_cost_col. "--DDIC change /cgdc/_cafdaddcc posid->pspnr
      WHERE pspnr EQ gt_add_cost_collector-wbs_cost_col.
    IF sy-subrc EQ 0.
      SORT lt_prps_add_cc BY pspnr.
    ENDIF.

    SELECT *
      FROM prps
      INTO TABLE lt_prps_con_itm
      FOR ALL ENTRIES IN gt_add_cost_collector
*      WHERE posid EQ gt_add_cost_collector-wbsel.        "--DDIC change /cgdc/_cafdaddcc posid->pspnr
      WHERE pspnr EQ gt_add_cost_collector-wbsel.
    IF sy-subrc EQ 0.
      SORT lt_prps_con_itm BY pspnr.
    ENDIF.

    LOOP AT gt_add_cost_collector INTO lwa_add_cost_collector.
      READ TABLE lt_prps_add_cc INTO lwa_prps WITH KEY pspnr = lwa_add_cost_collector-wbs_cost_col BINARY SEARCH.
      CHECK sy-subrc EQ 0.
      READ TABLE lt_prps_con_itm INTO lwa_prps_tmp WITH KEY pspnr = lwa_add_cost_collector-wbsel BINARY SEARCH.
      CHECK sy-subrc EQ 0.
      CLEAR ls_add_cost_coll_pspnr.
      ls_add_cost_coll_pspnr-cost_coll_pspnr = lwa_prps-pspnr.
      ls_add_cost_coll_pspnr-con_itm_pspnr = lwa_prps_tmp-pspnr.
      APPEND ls_add_cost_coll_pspnr TO gt_add_cost_coll_pspnr.
    ENDLOOP.

  ENDIF.

ENDFORM.
FORM select_clrqpit USING lv_clrno TYPE /cgdc/clrqno
                    CHANGING lv_subrc TYPE sysubrc.
*  IF 1 = 0.
  IF gt_clrqpit IS INITIAL.
    SELECT *
       FROM /cgdc/_clrqpit
       INTO TABLE gt_clrqpit
       WHERE clrno = lv_clrno.
    lv_subrc = sy-subrc.
  ELSE.
    lv_subrc = 0.
  ENDIF.
*  ENDIF.
*  lv_subrc = 3.
ENDFORM.

FORM select_reason_codes USING lv_rtbpn TYPE /cgdc/rtbpn
                                lv_rsn_fn TYPE /cgdc/rsn_func
                          CHANGING lt_rtbrpar TYPE /cgdc/tt_rtbrpar.
  CHECK lv_rtbpn IS NOT INITIAL AND lv_rsn_fn IS NOT INITIAL.
  SELECT SINGLE *
    FROM /cgdc/t_rtbp
    INTO @DATA(lwa_rtbp)
    WHERE rtbpn = @lv_rtbpn.
  IF sy-subrc = 0.
    SELECT SINGLE *
      FROM /cgdc/t_clrtype
      INTO @DATA(lwa_clrtype)
      WHERE clrqt = @lwa_rtbp-clrqt.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM /cgdc/t_rtbrp
        INTO @DATA(lwa_rtbrp)
        WHERE rsn_func = @lv_rsn_fn AND rsnpf = @lwa_clrtype-rsnprf_a.
      IF sy-subrc = 0.
        SELECT *
          FROM /cgdc/t_rtbrpar
          INTO TABLE lt_rtbrpar
          WHERE rsn_func = lv_rsn_fn AND rsnpf = lwa_rtbrp-rsnpf.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form select_doctyp_n_cptyp_grp_map
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM select_doctyp_n_cptyp_grp_map .
  SELECT *
    FROM /cgdc/t_rsdtmdtg
    INTO TABLE gt_doc_type_grp_mapping.

  IF sy-subrc EQ 0.
    SORT gt_doc_type_grp_mapping BY auart dtgrp.
  ENDIF.

  SELECT *
    FROM /cgdc/t_rsctmctg
    INTO TABLE gt_cp_type_grp_mapping.

  IF sy-subrc EQ 0.
    SORT gt_cp_type_grp_mapping BY ctype cptgrp.
  ENDIF.

  SELECT *
   FROM /cgdc/t_rtbscp
   INTO TABLE gt_chars_priority.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form split_pbp_cost_base
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LV_REGULAR_UPD
*&---------------------------------------------------------------------*
FORM split_pbp_cost_base USING ls_crgrr TYPE /cgdc/s_clrqgrr.

  DATA: BEGIN OF ls_clrqbi,
          clrno     TYPE /cgdc/clrqno,
          bill_item TYPE /cgdc/billitem_guid,
          bitype    TYPE /cgdc/bitype,
          bstat     TYPE /cgdc/clrqi_billstat,
        END OF ls_clrqbi.

  DATA: lv_total_postpone_amnt   TYPE netwr,
        lv_current_postpone_amnt TYPE netwr,
        lv_where                 TYPE string,
        ls_postpone_fcat         TYPE /cgdc/s_clrq_postpone,
        ls_clrq_itm_new          TYPE /cgdc/s_clrqit_fcat,
        lt_clrqbi                LIKE TABLE OF ls_clrqbi,
        lt_pbp_final_bpit_fifo   TYPE TABLE OF /cgdc/t_blnpln,
        lt_unbilled_crbinr       TYPE /cgdc/tt_clrqbi,
        lt_unbilled_bprqit       TYPE TABLE OF /cgdc/_clrqit,
        lt_unbilled_clrqic       TYPE TABLE OF /cgdc/_clrqic,
        lwa_total_cost_per_posnr LIKE LINE OF gt_total_cost_per_posnr.

  lv_total_postpone_amnt = abs( ls_crgrr-netwr_pbp ).

  IF gs_contract_hdr-/cgdc/pbplq EQ 'H'.
    lv_where = 'fsched IS NOT INITIAL AND bldat LE sy-datum AND faksp IS INITIAL AND bstat EQ space AND vgbel EQ ls_crgrr-conno'.
  ELSEIF gs_contract_hdr-/cgdc/pbplq EQ 'I'.
    lv_where = 'fsched IS NOT INITIAL AND bldat LE sy-datum AND faksp IS INITIAL AND bstat EQ space AND vgbel EQ ls_crgrr-conno AND vgpos EQ ls_crgrr-conitm'.
  ENDIF.

  IF lv_total_postpone_amnt IS NOT INITIAL.

    LOOP AT gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WHERE (lv_where). " fsched IS NOT INITIAL AND bldat LE sy-datum AND faksp IS INITIAL AND bstat EQ space.
      APPEND lwa_crbinr TO lt_unbilled_crbinr.
    ENDLOOP.

    IF lt_unbilled_crbinr IS NOT INITIAL.

      SELECT *
        FROM /cgdc/_clrqit
        INTO TABLE lt_unbilled_bprqit
        FOR ALL ENTRIES IN lt_unbilled_crbinr
        WHERE rtbbinr EQ lt_unbilled_crbinr-bill_item
          AND clrsit NE gc_sub_main.

      IF sy-subrc EQ 0.
        SORT lt_unbilled_bprqit DESCENDING BY bldat_bi billitem.
      ENDIF.

      IF NOT lt_unbilled_bprqit IS INITIAL.

        SELECT *
          FROM /cgdc/_clrqic
          INTO TABLE lt_unbilled_clrqic
          FOR ALL ENTRIES IN lt_unbilled_bprqit
          WHERE clrno EQ lt_unbilled_bprqit-clrno
            AND clrit EQ lt_unbilled_bprqit-clrit
            AND clrsit EQ gc_sub_main
            AND clrdit EQ gc_sub_main.

        IF sy-subrc EQ 0.
          SORT lt_unbilled_clrqic BY clrno clrit clrsit clrdit.
        ENDIF.

      ENDIF.

      LOOP AT lt_unbilled_bprqit INTO DATA(lwa_unbilled_bprqit).

        IF lv_total_postpone_amnt GE lwa_unbilled_bprqit-netwr.
          lv_current_postpone_amnt = lwa_unbilled_bprqit-netwr.
        ELSE.
          lv_current_postpone_amnt = lv_total_postpone_amnt.
        ENDIF.

        CLEAR: gs_variables-bit_num_gen, ls_clrq_itm_new, ls_postpone_fcat.
        MOVE-CORRESPONDING lwa_unbilled_bprqit TO ls_clrq_itm_new.
        CLEAR: ls_clrq_itm_new-clrsit, ls_clrq_itm_new-clrdit.
        ls_postpone_fcat-postp_amt = lv_current_postpone_amnt.
        ls_postpone_fcat-clrit = lwa_unbilled_bprqit-clrit.

        READ TABLE gt_pbp_eligible_bpit
        WITH KEY vbeln = lwa_unbilled_bprqit-/cgdc/orgh
                 posnr = lwa_unbilled_bprqit-/cgdc/orgi
                 billitem = lwa_unbilled_bprqit-billitem
        BINARY SEARCH
        INTO DATA(lwa_pbp_eligible_bpit).
        CHECK sy-subrc EQ 0.
        ls_clrq_itm_new-pop_stdt = lwa_pbp_eligible_bpit-svcstart.
        ls_clrq_itm_new-pop_enddt = lwa_pbp_eligible_bpit-svcend.
        gs_variables-itm_post_amt = abap_true.

        READ TABLE lt_unbilled_clrqic
        WITH KEY clrno = lwa_unbilled_bprqit-clrno
                 clrit = lwa_unbilled_bprqit-clrit
                 clrsit = gc_sub_main
                 clrdit = gc_sub_main
        BINARY SEARCH
        INTO DATA(lwa_unbilled_clrqic).
        CHECK sy-subrc EQ 0.
        ls_clrq_itm_new-ps_psp_pnr = lwa_unbilled_clrqic-ps_psp_pnr.
        PERFORM create_post_rej_line3 CHANGING ls_clrq_itm_new ls_postpone_fcat.
        lv_total_postpone_amnt = lv_total_postpone_amnt - lv_current_postpone_amnt.

      ENDLOOP.

    ENDIF.

  ENDIF.

*  IF gs_komp_pbp-netwr LT 0.
*
*    lv_total_postpone_amnt = abs( gs_komp_pbp-netwr ).
*
*    SELECT clrno bill_item bitype bstat
*        FROM /cgdc/_clrqbi
*        INTO TABLE lt_clrqbi
*        FOR ALL ENTRIES IN gt_pbp_eligible_bprqit
*        WHERE clrno EQ gs_clrqdoc_infocus-x-crhdr-clrno
*          AND bill_item EQ gt_pbp_eligible_bprqit-rtbbinr
*          AND bitype EQ gt_pbp_eligible_bprqit-bityp.
*
*    IF sy-subrc EQ 0.
*      SORT lt_clrqbi BY clrno bill_item bitype.
*    ENDIF.
*
*    LOOP AT gt_pbp_eligible_bpit INTO DATA(lwa_pbp_eligible_bpit).
*
*      READ TABLE gt_pbp_eligible_bprqit INTO DATA(lwa_pbp_eligible_bprqit)
*      WITH KEY /cgdc/orgh = lwa_pbp_eligible_bpit-vbeln
*               /cgdc/orgi = lwa_pbp_eligible_bpit-posnr
*               billitem = lwa_pbp_eligible_bpit-billitem
*      BINARY SEARCH.
*
*      IF sy-subrc EQ 0 AND lwa_pbp_eligible_bprqit-prsdt GE lwa_pbp_eligible_bpit-svcstart
*        AND lwa_pbp_eligible_bprqit-prsdt LE sy-datum.
*
*        READ TABLE lt_clrqbi
*        WITH KEY clrno = gs_clrqdoc_infocus-x-crhdr-clrno
*                 bill_item = lwa_pbp_eligible_bprqit-rtbbinr
*                 bitype = lwa_pbp_eligible_bprqit-bityp
*        BINARY SEARCH
*        INTO DATA(lwa_clrqbi).
*
*        IF sy-subrc EQ 0
*          AND lwa_clrqbi-bstat NE space.   " Not equal to open then go for next
*          CONTINUE.
*        ENDIF.
*
*        IF lv_total_postpone_amnt GT lwa_pbp_eligible_bprqit-netwr.
*          MOVE-CORRESPONDING lwa_pbp_eligible_bprqit TO ls_clrq_itm_new.
*          ls_postpone_fcat-postp_amt = lwa_pbp_eligible_bprqit-netwr.
*          PERFORM create_post_rej_line3 CHANGING ls_clrq_itm_new ls_postpone_fcat.
*        ENDIF.
*
*        lv_total_postpone_amnt = lv_total_postpone_amnt - lwa_pbp_eligible_bprqit-netwr.
*
*      ENDIF.
*
*    ENDLOOP.
*
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form split_pbp_country_funding_base
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM split_pbp_country_funding_base USING lt_messages          TYPE /cgdc/tt_cafd_clrqit_messages
                                          lt_clrqit_fin_open   TYPE /cgdc/tt_clrqit
                                          lt_clrqit_fin_postp  TYPE /cgdc/tt_clrqit.

  DATA: lv_subrc          TYPE sy-subrc,
        lv_tabix          TYPE sy-tabix,
        lt_clrqit_main    TYPE /cgdc/tt_clrqit,
        lt_clrqit         TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin     TYPE /cgdc/tt_clrqit,
        lt_clrqit_fin_tmp TYPE /cgdc/tt_clrqit,
        lt_clrqit_tmp     TYPE /cgdc/tt_clrqit,
        ls_clrq_doc       TYPE /cgdc/s_clrq_doc,
        ls_postpone_fcat  TYPE /cgdc/s_clrq_postpone,
        lt_clrq_doc       TYPE /cgdc/tt_clrq_doc,
        ls_clrqit         TYPE /cgdc/s_clrqit,
        ls_clrqit_tmp     TYPE /cgdc/s_clrqit,
        ls_clrqit_new     TYPE /cgdc/s_clrqit,
        lv_netwr          TYPE netwr_ap,
        lt_clrqbi         TYPE /cgdc/tt_clrqbi,
        lt_clrqic_fin     TYPE TABLE OF /cgdc/_clrqic,
        ls_clrqbi         TYPE /cgdc/s_clrqbi,
        ls_clrq_itm_new   TYPE /cgdc/s_clrqit_fcat,
        lwa_clrqit_fin    TYPE /cgdc/s_clrqit,
        lwa_message       TYPE /cgdc/s_cafd_clrqit_messages.

  FIELD-SYMBOLS: <lv_fsched>         TYPE any,
                 <lfs_cafs>          TYPE /cgdc/s_clrqcaf,
                 <lfs_bill_pre_data> TYPE data,
                 <lfs_clrqit>        TYPE /cgdc/s_clrqit.

  LOOP AT lt_messages INTO lwa_message WHERE pp_amount IS NOT INITIAL.

    READ TABLE lt_clrqit_fin_open
    WITH KEY clrno = lwa_message-clrno
             clrit = lwa_message-clrit
             clrsit = lwa_message-clrsit
             clrdit = lwa_message-clrdit
    INTO lwa_clrqit_fin.
    CHECK sy-subrc EQ 0.
    CLEAR: gs_variables-bit_num_gen, ls_clrq_itm_new, ls_postpone_fcat.
    MOVE-CORRESPONDING lwa_clrqit_fin TO ls_clrq_itm_new.
    CLEAR: ls_clrq_itm_new-clrsit, ls_clrq_itm_new-clrdit.

    READ TABLE lt_clrqit_fin_postp
    WITH KEY clrno = lwa_message-clrno
             clrit = lwa_message-clrit
    BINARY SEARCH
    TRANSPORTING NO FIELDS.
    lv_tabix = sy-tabix.
    lv_subrc = sy-subrc.

    IF lv_subrc EQ 0.

      LOOP AT lt_clrqit_fin_postp INTO DATA(lwa_clrqit_fin_postp) FROM lv_tabix.

        IF lwa_clrqit_fin_postp-clrno NE lwa_message-clrno
          OR lwa_clrqit_fin_postp-clrit NE lwa_message-clrit.
          EXIT.
        ENDIF.

        lwa_message-pp_amount = lwa_message-pp_amount + lwa_clrqit_fin_postp-netwr.

      ENDLOOP.

    ENDIF.

    ls_postpone_fcat-postp_amt = lwa_message-pp_amount.
    ls_postpone_fcat-clrit = ls_clrq_itm_new-clrit.

    READ TABLE gt_pbp_eligible_bpit
    WITH KEY vbeln = ls_clrq_itm_new-/cgdc/orgh
             posnr = ls_clrq_itm_new-/cgdc/orgi
             billitem = ls_clrq_itm_new-billitem
    BINARY SEARCH
    INTO DATA(lwa_pbp_eligible_bpit).
    CHECK sy-subrc EQ 0.
    ls_clrq_itm_new-pop_stdt = lwa_pbp_eligible_bpit-svcstart.
    ls_clrq_itm_new-pop_enddt = lwa_pbp_eligible_bpit-svcend.
    gs_variables-itm_post_amt = abap_true.
    PERFORM create_post_rej_line3 CHANGING ls_clrq_itm_new ls_postpone_fcat.

  ENDLOOP.

  CLEAR: lt_clrq_doc[].
  APPEND gs_clrqdoc_infocus TO lt_clrq_doc.

  CALL FUNCTION '/CGDC/CLRQ_SAVE'
    EXPORTING
      i_commit_work = abap_true
    CHANGING
      ct_clrq_doc   = lt_clrq_doc
    EXCEPTIONS
      no_change     = 1
      OTHERS        = 2.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: INCLUDE /CGDC/LCLRQMF0U
**********************************************************

*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMF0U
*&---------------------------------------------------------------------*
FORM update_clrq_header CHANGING ls_crrq_hdr TYPE /cgdc/s_clrqhd.

  PERFORM fill_calc_req_header CHANGING ls_crrq_hdr.

ENDFORM.

FORM update_clrq_item USING lv_call_for   " SPACE: Regular Infocus Upd, X: Run Time Items
                            ls_clrq_itm_old TYPE /cgdc/s_clrqit
                   CHANGING ls_clrq_itm     TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_subrc              TYPE sy-subrc,
        ls_clrq_itm_new       TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_tmp   TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_tcost TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_fcat  TYPE /cgdc/s_clrqit_fcat,
        ls_clrq_itm_new1      TYPE /cgdc/s_clrqit,
        ls_clrq_itm_status    TYPE /cgdc/s_clrqst,
        lwa_item_catg         TYPE /cgdc/t_rtbic,
        ls_tvap               TYPE tvap,
        lt_komv               TYPE komv_tab,
        lt_clrq_err           TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
        ls_clrq_err           TYPE /cgdc/t_clrq_err,
        lt_crcon              TYPE /cgdc/tt_clrqcn,
        lt_crcon_sched        TYPE /cgdc/tt_clrqcn,
        ls_crcon              TYPE /cgdc/s_clrqcn,
        ls_t001w              TYPE t001w,
        ls_bilitty            TYPE /cgdc/t_bilitty.
  DATA: ls_contract_business_data TYPE vbkd.
  DATA: ls_contract_itm         TYPE vbap,
        lwa_add_cost_coll_pspnr LIKE LINE OF gt_add_cost_coll_pspnr,
        lwa_billitem            TYPE /cgdc/_billelem.

  DATA: ls_clrcost       TYPE /cgdc/s_clrqcost,
        ls_clr_blpl      TYPE /cgdc/s_clrqblpl,
        lv_bill_typ      TYPE /cgdc/bitype,
        lv_pop_st        TYPE datum,
        lv_pop_end       TYPE datum,
        ls_bill_num_open TYPE /cgdc/_clrqbi,
        ls_bill_item     TYPE /cgdc/s_clrqbi,
        ls_bill_num      TYPE /cgdc/s_clrqbi,
        ls_bill_typ      TYPE /cgdc/t_bilitty,
        ls_message       TYPE /cgdc/s_message,
        ls_cafrdst       TYPE /cgdc/_cafrdst,
        ls_clrqcost      TYPE /cgdc/s_clrqcost,
        lv_billrel       TYPE rvari_val_255.

  DATA : ls_clrqhd_brf  TYPE /cgdc/s_clrqhd_brf,
         ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
         ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
         lt_clrq_msgs   TYPE /cgdc/tt_cafd_clrqit_messages,
         lt_mult_data   TYPE /cgdc/tt_cafd_clrqit_mult,
         ls_mult_data   TYPE /cgdc/s_cafd_clrqit_mult,
         lt_cafd_mult   TYPE STANDARD TABLE OF t_cafd_mult,
         lwa_calc_grp   TYPE /cgdc/t_rtbpcg,
         ls_cafd_mult   TYPE t_cafd_mult,
         lv_amount      TYPE /cgdc/cafd_funda,
         lv_call_bit_ex TYPE flag.

  DATA: ls_itmkey TYPE /cgdc/s_clrqit_key.

  FIELD-SYMBOLS: <lv_field> TYPE  data.
  FIELD-SYMBOLS: <lwa_clrqit>    TYPE /cgdc/s_clrqit,
                 <lwa_cafd_mult> TYPE t_cafd_mult.
  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.

  DATA: lv_cegrp    TYPE /cgdc/cegroup,
        lv_skfgrp   TYPE /cgdc/skfgrp,
        lv_atgrp    TYPE /cgdc/atgrp,
        lv_ccggrp   TYPE /cgdc/ccgrp,
        lv_msg_code TYPE /cgdc/err_msg,
        lv_msg_typ  TYPE symsgty.

  DATA : lwa_sum_char TYPE /cgdc/t_clrqbic,
         lv_line      TYPE string,
         lv_where     TYPE string.
  DATA: lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp TYPE /cgdc/t_bilitty.

  IF ls_clrq_itm-objnr IS NOT INITIAL.
    READ TABLE gt_prps INTO DATA(ls_pspnr) WITH KEY objnr = ls_clrq_itm-objnr.
    IF sy-subrc = 0.
      ls_clrq_itm_new-pspnr = ls_pspnr-pspnr.
    ELSE.
      DATA ls_prps TYPE prps.
      CLEAR ls_prps.

      SELECT SINGLE *
        FROM prps
        WHERE objnr = @ls_clrq_itm-objnr
        INTO CORRESPONDING FIELDS OF @ls_prps.
      IF sy-subrc = 0.
        APPEND ls_prps TO gt_prps.
        ls_clrq_itm_new-pspnr = ls_prps-pspnr.
        CLEAR ls_prps.
      ENDIF.
    ENDIF.
  ENDIF.

  IF ls_clrq_itm-itmty IS INITIAL.
    READ TABLE gt_billitem INTO lwa_billitem
    WITH KEY pspnr = ls_clrq_itm-objnr.
    CHECK sy-subrc = 0.
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY ps_psp_pnr = lwa_billitem-bpspnr.
    IF sy-subrc <> 0.
***Consider Add Cost Collectors
      CLEAR lwa_add_cost_coll_pspnr.
      READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
      INTO lwa_add_cost_coll_pspnr.

      IF sy-subrc EQ 0.

        READ TABLE gt_contract_itm INTO ls_contract_itm
        WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.

        IF sy-subrc NE 0.
          CLEAR ls_contract_itm.
        ENDIF.

      ENDIF.
    ENDIF.

    READ TABLE gt_contract_business_data INTO ls_contract_business_data
     WITH KEY vbeln = ls_contract_itm-vbeln
              posnr = ls_contract_itm-posnr.
    IF sy-subrc <> 0.
      CLEAR ls_contract_business_data.
    ENDIF.
  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-bill_plan_line.
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY posnr = ls_clrq_itm-vgpos.

    READ TABLE gt_contract_business_data INTO ls_contract_business_data
     WITH KEY vbeln = ls_contract_itm-vbeln
              posnr = ls_contract_itm-posnr.

  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-calc_grp_itm.
    IF ls_clrq_itm-/cgdc/orgi IS NOT INITIAL.
      READ TABLE gt_contract_itm INTO ls_contract_itm
      WITH KEY vbeln = gs_clrqdoc_infocus-x-crhdr-vgbel
               posnr = ls_clrq_itm-/cgdc/orgi.
    ENDIF.

  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-manual_line OR ls_clrq_itm-itmty <> gc_clrq_itmty-prepayment_item. "Manual Line item
    CLEAR ls_contract_itm.
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY ps_psp_pnr = ls_clrq_itm-ps_psp_pnr.
    IF sy-subrc NE 0.
***Consider Add Cost Collectors
      CLEAR lwa_add_cost_coll_pspnr.
      READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
      INTO lwa_add_cost_coll_pspnr.
      IF sy-subrc EQ 0.
        CLEAR ls_contract_itm.
        READ TABLE gt_contract_itm INTO ls_contract_itm
        WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.
        IF sy-subrc NE 0.
          CLEAR ls_contract_itm.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  MOVE-CORRESPONDING ls_clrq_itm TO ls_clrq_itm_new.

  READ TABLE gt_prps INTO ls_pspnr
  WITH KEY objnr = ls_clrq_itm-objnr.
  IF sy-subrc = 0.
    ls_clrq_itm_new-pspnr = ls_pspnr-pspnr.
  ENDIF.

***Consider Add Cost Collectors
  ls_clrq_itm_new-cc_pspnr = lwa_add_cost_coll_pspnr-cost_coll_pspnr.
***
  ls_clrq_itm_new-vgbel = ls_contract_itm-vbeln.
  ls_clrq_itm_new-vgpos = ls_contract_itm-posnr.
  ls_clrq_itm_new-/cgdc/orgh = ls_contract_itm-vbeln.
  ls_clrq_itm_new-/cgdc/orgi = ls_contract_itm-posnr.

***Enable liquidation grouping
  ls_clrq_itm_new-/cgdc/pbpgp = ls_contract_itm-/cgdc/pbpgp.
***
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm .
    ls_clrq_itm_new-vgbel =  gs_contract_hdr-vbeln.
    ls_clrq_itm_new-/cgdc/orgh = gs_contract_hdr-vbeln.
  ENDIF.

  IF ls_clrq_itm_new-zmeng IS INITIAL.
    ls_clrq_itm_new-zmeng =  ls_clrq_itm_new-kwmeng .
  ENDIF.
  IF gs_clrit_org IS INITIAL
  OR gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new.

  ENDIF.
  IF ls_clrq_itm_new-spart IS INITIAL.
    ls_clrq_itm_new-spart = gs_clrqdoc_infocus-x-crhdr-spart.
  ENDIF.
  IF ls_clrq_itm_new-fkdat IS INITIAL.
    ls_clrq_itm_new-fkdat = ls_clrq_itm_new-budat.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-bill_plan_line.
    ls_clrq_itm_new-ps_psp_pnr = ls_contract_itm-ps_psp_pnr.
  ENDIF.

  PERFORM update_material_determination USING ls_contract_itm
                                              ls_clrq_itm
                                     CHANGING ls_clrq_itm_new.

  PERFORM select_plant_data USING ls_clrq_itm_new-werks
                         CHANGING ls_t001w.

  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = ls_clrq_itm_new-pstyv.
  IF lwa_item_catg-qty_1 IS NOT INITIAL.
    ls_clrq_itm_new-zmeng = 1.
  ENDIF.
  IF lwa_item_catg-price_date_rule IS NOT INITIAL.
    ASSIGN COMPONENT lwa_item_catg-price_date_rule OF STRUCTURE ls_clrq_itm_new TO <lv_field>.
    IF <lv_field> IS ASSIGNED.
      ls_clrq_itm_new-prsdt = <lv_field>.
    ENDIF.
  ENDIF.

  IF lwa_item_catg-exchg_date_rule IS NOT INITIAL.
    IF <lv_field> IS ASSIGNED.
      UNASSIGN <lv_field>.
    ENDIF.
    ASSIGN COMPONENT lwa_item_catg-exchg_date_rule OF STRUCTURE ls_clrq_itm_new TO <lv_field>.
    ls_clrq_itm_new-exdat = <lv_field>.
  ELSE.
    "assign document date to exchange rate date if exchange rule not maintained
    ls_clrq_itm_new-exdat = ls_clrq_itm_new-bldat.
  ENDIF.
  ls_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

  ls_clrq_itm_new-ps_psp_pnr = ls_contract_itm-ps_psp_pnr.
  READ TABLE gs_clrqdoc_infocus-x-critm INTO DATA(ls_clrqit_blp) WITH KEY  clrno = ls_clrq_itm-clrno
                                                                            clrit = ls_clrq_itm-clrit
                                                                            clrsit = ls_clrq_itm-clrsit
                                                                            itmty = 1.
  IF sy-subrc NE 0 AND   ls_clrq_itm_old IS INITIAL.
    PERFORM generate_item_no CHANGING ls_clrq_itm_new.
    IF ls_clrq_itm_new-itmty EQ 1.
      DATA(lv_bill_sched_new) = abap_true.
    ENDIF.
  ELSE.
    DATA(lv_bill_sched) = abap_true.
  ENDIF.

  CLEAR: ls_clrq_itm_new-erdat,
         ls_clrq_itm_new-ernam,
         ls_clrq_itm_new-erzet,
         ls_clrq_itm_new-aedat.

  CLEAR: lt_komv.

  IF ls_clrq_itm_new-zmeng IS INITIAL.
    IF ( gs_clrit_org IS INITIAL
    OR gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new ).
      ls_clrq_itm_new-zmeng = 1.
    ENDIF.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm.  .
    ls_clrq_itm_new-bldat = ls_clrq_itm-budat.
  ENDIF.

  IF lv_bill_sched EQ abap_false.
    ls_clrq_itm_new-updkz = gc_updkz_new.
  ELSE.
    ls_clrq_itm_new-updkz = gc_updkz_update.
  ENDIF.

  IF ls_clrq_itm_new-istat IS INITIAL.
    ls_clrq_itm_new-istat = gc_ibill_stat-open.
  ENDIF.
  IF ls_clrq_itm_new-updkz EQ gc_updkz_new.
    ls_clrq_itm_new-istat = 'A'.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm .
    PERFORM get_calc_grp_row_amount USING ls_clrq_itm_new.
  ENDIF.

  PERFORM check_costingsheet USING ls_clrq_itm_new
                                   ls_clrq_itm_new-objnr
                                   gs_clrqdoc_infocus-x-crhdr-vgbel
                                   ls_clrq_itm_new-vgpos
                                   ls_clrq_itm_new-budat
                             CHANGING ls_clrq_itm_new-csist
                                      ls_clrq_itm_new-csheet
                                      ls_clrq_itm_new-zschl.
  CLEAR lv_call_bit_ex.
  PERFORM determine_billing_item USING    lv_bill_sched
                                          lv_bill_sched_new
                                 CHANGING ls_clrq_itm
                                          ls_clrq_itm_new
                                          lv_call_bit_ex.



  IF gs_variables-no_pricing EQ abap_false AND ls_clrq_itm_new-istat NE 'E'.
    DATA(lv_kbetr1) = ls_clrq_itm_new-kbetr1.
    PERFORM pricing USING lv_call_for CHANGING ls_clrq_itm
                                               ls_clrq_itm_new
                                               lt_komv.

*    Rounding issue fix
    IF gs_variables-itm_post_amt IS NOT INITIAL OR gs_variables-itm_post_amt_un IS NOT INITIAL.
      ls_clrq_itm_new-kbetr1 = lv_kbetr1.
    ENDIF.

    ls_clrq_itm_new-no_price = abap_false.
  ELSE.
    IF ls_clrq_itm_new-clrsit EQ '000001'.
      ls_clrq_itm_new-no_price = abap_true.
    ENDIF.
  ENDIF.


*****BOC - After pricing update amount on billing item*****************************
  IF <lwa_clrqbi> IS ASSIGNED.
    UNASSIGN <lwa_clrqbi>.
  ENDIF.

  SELECT *
      FROM /cgdc/t_bilitty
      INTO TABLE @lt_bilityp.

  READ TABLE gs_clrqdoc_infocus-x-crbinr
  ASSIGNING <lwa_clrqbi>
  WITH KEY clrno     = ls_clrq_itm_new-clrno
           bill_item = ls_clrq_itm_new-rtbbinr.
  IF sy-subrc = 0.
    IF lv_call_bit_ex = abap_true.

      READ TABLE lt_bilityp INTO lwa_bilityp
        WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15.
          <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.

      <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + ls_clrq_itm_new-kzwi6.
      "++SOC - decimal precision fields
      <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields
    ELSE.
      READ TABLE lt_bilityp INTO lwa_bilityp
       WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15..
          <lwa_clrqbi>-zmeng =  ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.
      <lwa_clrqbi>-netwr = ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = ls_clrq_itm_new-kzwi6.
      "++SOC - decimal precision fields
      <lwa_clrqbi>-netwr24 = ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields
    ENDIF.

    IF <lwa_clrqbi>-updkz IS INITIAL.
      <lwa_clrqbi>-updkz = gc_updkz_update.
    ENDIF.
  ENDIF.

  IF gs_cafdac-vbeln NE gs_contract_hdr-vbeln.
    SELECT SINGLE * FROM /cgdc/_cafdac
      INTO gs_cafdac
      WHERE vbeln = gs_contract_hdr-vbeln.

    IF sy-subrc NE 0.
      gs_cafdac-vbeln = gs_contract_hdr-vbeln.
    ENDIF.
  ENDIF.
  IF gs_cafdac-alcrc IS NOT INITIAL.
    IF ls_clrq_itm_new-/cgdc/cline  IS INITIAL.
      CONCATENATE 'G' ls_clrq_itm_new-msg_code INTO ls_clrq_itm_new-msg_code.
    ENDIF.
  ENDIF.

  CLEAR ls_clrq_itm_new-bstat.
  IF gs_clrit_org IS  INITIAL OR gs_clrit_org-istat IS NOT INITIAL.
    IF gs_clrit_org-istat IS NOT INITIAL.
      ls_clrq_itm_new-istat = gs_clrit_org-istat.
    ENDIF.

    IF ls_clrq_itm_new-ldetla IS INITIAL.
      ls_clrq_itm_new-ldetla = '000000'.
    ENDIF.
    IF lv_call_for IS INITIAL.
      ls_clrq_itm_new1 = ls_clrq_itm_new.
      IF ls_clrq_itm_new-clrsit = '000001' AND ls_clrq_itm_new-clrdit = '000000' AND ls_clrq_itm_new-updkz EQ gc_updkz_new .
        ls_clrq_itm_new1-clrsit = '000000'.
        ls_clrq_itm_new1-ldetla = '000000'.
        APPEND ls_clrq_itm_new1 TO gs_clrqdoc_infocus-x-critm.
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO ls_itmkey.
        APPEND ls_itmkey TO gs_clrqdoc_infocus-x-critm_key.

      ELSEIF ls_clrq_itm_new-csheet <> ls_clrq_itm-csheet OR ls_clrq_itm_new-csist <> ls_clrq_itm-csist
              OR ls_clrq_itm_new-zschl <> ls_clrq_itm-zschl AND ls_clrq_itm_new-updkz EQ gc_updkz_new.
        ls_clrq_itm_new1-clrsit = '000000'.
        ls_clrq_itm_new1-clrdit = '000000'.
        ls_clrq_itm_new1-lclrsit = ls_clrq_itm_new-clrsit.
        ls_clrq_itm_new1-updkz = gc_updkz_update.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY clrno = ls_clrq_itm_new1-clrno
                                                                              clrit = ls_clrq_itm_new1-clrit
                                                                              clrsit = ls_clrq_itm_new1-clrsit.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
        ENDIF.

      ENDIF.
*- read billing scheduler lines
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY  clrno = ls_clrq_itm_new1-clrno
                                                                                clrit = ls_clrq_itm_new1-clrit
                                                                                clrsit = ls_clrq_itm_new1-clrsit.
      IF sy-subrc EQ 0 AND ls_clrq_itm_old IS NOT INITIAL .
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
      ELSE.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY  clrno = ls_clrq_itm_new1-clrno
                                                                             clrit = ls_clrq_itm_new1-clrit.

        IF sy-subrc EQ 0 AND ls_clrq_itm_old IS NOT INITIAL .
          MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
          <lwa_clrqit>-clrsit = ls_clrqit_blp-clrsit.
        ENDIF.
      ENDIF.
    ENDIF.
    IF lv_call_for IS INITIAL.
*- billing schedule
      IF lv_bill_sched IS NOT INITIAL OR lv_bill_sched_new IS NOT INITIAL.
        CLEAR ls_crcon.
        REFRESH : lt_crcon.
*- clear condition table data and update the lines again with new amount
        LOOP AT gs_clrqdoc_infocus-x-crcon INTO ls_crcon WHERE clrno = ls_clrq_itm_new-clrno
                                                               AND   clrit = ls_clrq_itm_new-clrit.
          APPEND ls_crcon TO lt_crcon.
          CLEAR ls_crcon.
        ENDLOOP.

        DELETE gs_clrqdoc_infocus-x-crcon WHERE clrno = ls_clrq_itm_new-clrno
                                          AND   clrit = ls_clrq_itm_new-clrit.

      ENDIF.

      APPEND ls_clrq_itm_new TO gs_clrqdoc_infocus-x-critm.

*- update billign sched line item after CLIN/ACRN func
      IF lt_crcon IS NOT INITIAL.
        LOOP AT lt_crcon INTO ls_crcon.
          ls_crcon-kbetr  = ls_clrq_itm_new-kbetr1.
          ls_crcon-kwert  = ls_clrq_itm_new-kbetr1.
          ls_crcon-clrsit = ls_clrq_itm_new-clrsit.
          ls_crcon-updkz  = gc_updkz_update.
          APPEND ls_crcon TO gs_clrqdoc_infocus-x-crcon.
        ENDLOOP.
      ENDIF.

      IF ls_clrq_itm_new-clgrp_kschl IS NOT INITIAL.
        APPEND ls_clrq_itm_new TO gt_clgrp_itm_buffer.
      ENDIF.
    ELSE.
      APPEND ls_clrq_itm_new TO gt_clgrp_itm_buffer.
    ENDIF.

    ls_clrq_itm-clrsit = ls_clrq_itm_new-clrsit.
    ls_clrq_itm-clrit  = ls_clrq_itm_new-clrit.
    ls_clrq_itm-clrno  = ls_clrq_itm_new-clrno.
    ls_clrq_itm-clrdit = ls_clrq_itm_new-clrdit.
    ls_clrq_itm-zmeng  = ls_clrq_itm_new-zmeng.
    ls_clrq_itm-netwr  = ls_clrq_itm_new-netwr.
    ls_clrq_itm-bityp  = ls_clrq_itm_new-bityp.

  ENDIF.
  IF ls_clrq_itm_new-clrsit = '000001' AND ls_clrq_itm_new-clrdit = '000000'.
    IF ls_clrq_itm-itmty IS INITIAL.
      MOVE-CORRESPONDING ls_clrq_itm TO ls_clrcost.
      ls_clrcost-cbelnr = ls_clrq_itm-belnr.
      ls_clrcost-cdocln = ls_clrq_itm-docln.
      ls_clrcost-cgjahr = ls_clrq_itm-gjahr.
      ls_clrcost-crbukrs = ls_clrq_itm-rbukrs.
      ls_clrcost-crldnr = ls_clrq_itm-rldnr.
      ls_clrcost-cbuzei = ls_clrq_itm-buzei.

      ls_clrcost-clrit = ls_clrq_itm_new-clrit.
      ls_clrcost-updkz = gc_updkz_new.
      APPEND ls_clrcost TO gs_clrqdoc_infocus-x-crcost.
    ELSE.
      IF lv_bill_sched EQ abap_false."bill schedule line item created
        MOVE-CORRESPONDING ls_clrq_itm TO ls_clr_blpl.
        ls_clr_blpl-vbeln = ls_clrq_itm-vgbel.
        ls_clr_blpl-posnr = ls_clrq_itm-vgpos.
        ls_clr_blpl-billitem = ls_clrq_itm-billitem.
        ls_clr_blpl-updkz = gc_updkz_new.

        APPEND ls_clr_blpl TO gs_clrqdoc_infocus-x-crblpl.
      ENDIF.
    ENDIF.
  ENDIF.
  CLEAR lv_bill_sched.
  MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrq_itm.
ENDFORM.

"++ Replacement routine for configured sources
FORM update_clrq_item01 USING lv_call_for   " SPACE: Regular Infocus Upd, X: Run Time Items
                            ls_linktab_data TYPE /cgdc/s_crlink
                            ls_clrq_itm_old TYPE /cgdc/s_clrqit
                   CHANGING ls_clrq_itm     TYPE /cgdc/s_clrqit_fcat.

  DATA: lv_subrc              TYPE sy-subrc,
        ls_clrq_itm_new       TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_tmp   TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_tcost TYPE /cgdc/s_clrqit,
        ls_clrq_itm_new_fcat  TYPE /cgdc/s_clrqit_fcat,
        ls_clrq_itm_new1      TYPE /cgdc/s_clrqit,
        ls_clrq_itm_status    TYPE /cgdc/s_clrqst,
        lwa_item_catg         TYPE /cgdc/t_rtbic,
        ls_tvap               TYPE tvap,
        lt_komv               TYPE komv_tab,
        lt_clrq_err           TYPE STANDARD TABLE OF /cgdc/t_clrq_err,
        ls_clrq_err           TYPE /cgdc/t_clrq_err,
        lt_crcon              TYPE /cgdc/tt_clrqcn,
        lt_crcon_sched        TYPE /cgdc/tt_clrqcn,
        ls_crcon              TYPE /cgdc/s_clrqcn,
        ls_t001w              TYPE t001w,
        ls_bilitty            TYPE /cgdc/t_bilitty.
  DATA: ls_contract_business_data TYPE vbkd.
  DATA: ls_contract_itm         TYPE vbap,
        lwa_add_cost_coll_pspnr LIKE LINE OF gt_add_cost_coll_pspnr,
        lwa_billitem            TYPE /cgdc/_billelem.

  DATA: ls_clrcost       TYPE /cgdc/s_clrqcost,
        ls_clr_blpl      TYPE /cgdc/s_clrqblpl,
        lv_bill_typ      TYPE /cgdc/bitype,
        lv_pop_st        TYPE datum,
        lv_pop_end       TYPE datum,
        ls_bill_num_open TYPE /cgdc/_clrqbi,
        ls_bill_item     TYPE /cgdc/s_clrqbi,
        ls_bill_num      TYPE /cgdc/s_clrqbi,
        ls_bill_typ      TYPE /cgdc/t_bilitty,
        ls_message       TYPE /cgdc/s_message,
        ls_cafrdst       TYPE /cgdc/_cafrdst,
        ls_clrqcost      TYPE /cgdc/s_clrqcost,
        lv_billrel       TYPE rvari_val_255.

  DATA : ls_clrqhd_brf  TYPE /cgdc/s_clrqhd_brf,
         ls_clrqit_brf  TYPE /cgdc/s_clrqit_brf,
         ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf,
         lt_clrq_msgs   TYPE /cgdc/tt_cafd_clrqit_messages,
         lt_mult_data   TYPE /cgdc/tt_cafd_clrqit_mult,
         ls_mult_data   TYPE /cgdc/s_cafd_clrqit_mult,
         lt_cafd_mult   TYPE STANDARD TABLE OF t_cafd_mult,
         lwa_calc_grp   TYPE /cgdc/t_rtbpcg,
         ls_cafd_mult   TYPE t_cafd_mult,
         lv_amount      TYPE /cgdc/cafd_funda,
         lv_call_bit_ex TYPE flag.

  DATA: ls_itmkey TYPE /cgdc/s_clrqit_key.

  FIELD-SYMBOLS: <lv_field> TYPE  data.
  FIELD-SYMBOLS: <lwa_clrqit>    TYPE /cgdc/s_clrqit,
                 <lwa_cafd_mult> TYPE t_cafd_mult.
  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.

  DATA: lv_cegrp    TYPE /cgdc/cegroup,
        lv_skfgrp   TYPE /cgdc/skfgrp,
        lv_atgrp    TYPE /cgdc/atgrp,
        lv_ccggrp   TYPE /cgdc/ccgrp,
        lv_msg_code TYPE /cgdc/err_msg,
        lv_msg_typ  TYPE symsgty.

  DATA : lwa_sum_char TYPE /cgdc/t_clrqbic,
         lv_line      TYPE string,
         lv_where     TYPE string.
  DATA: lwa_clrit_key TYPE /cgdc/s_clrqit_key.

  DATA: lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp TYPE /cgdc/t_bilitty.

  FIELD-SYMBOLS: <lfs_lnk_data> TYPE any,
                 <lfs_lnk_new>  TYPE table,
                 <lv_data>      TYPE any.

  IF ls_clrq_itm-objnr IS NOT INITIAL.
    READ TABLE gt_prps INTO DATA(ls_pspnr) WITH KEY objnr = ls_clrq_itm-objnr.
    IF sy-subrc = 0.
      ls_clrq_itm_new-pspnr = ls_pspnr-pspnr.
    ELSE.
      DATA ls_prps TYPE prps.
      CLEAR ls_prps.

      SELECT SINGLE *
        FROM prps
        WHERE objnr = @ls_clrq_itm-objnr
        INTO CORRESPONDING FIELDS OF @ls_prps.
      IF sy-subrc = 0.
        APPEND ls_prps TO gt_prps.
        ls_clrq_itm_new-pspnr = ls_prps-pspnr.
        CLEAR ls_prps.
      ENDIF.
    ENDIF.
  ENDIF.

  IF ls_clrq_itm_new-ps_psp_pnr IS INITIAL and
     ls_clrq_itm-ps_psp_pnr IS NOT INITIAL.            "read from pspnr
    READ TABLE gt_prps INTO ls_pspnr WITH KEY pspnr = ls_clrq_itm-ps_psp_pnr.
    IF sy-subrc = 0.
      ls_clrq_itm_new-ps_psp_pnr = ls_pspnr-pspnr.
    ELSE.
      CLEAR ls_prps.

      SELECT SINGLE *
        FROM prps
        WHERE pspnr = @ls_clrq_itm-ps_psp_pnr
        INTO CORRESPONDING FIELDS OF @ls_prps.
      IF sy-subrc = 0.
        APPEND ls_prps TO gt_prps.
        ls_clrq_itm_new-ps_psp_pnr = ls_prps-pspnr.
        CLEAR ls_prps.
      ENDIF.
    ENDIF.
  ENDIF.

  IF ls_clrq_itm-itmty IS INITIAL.
    READ TABLE gt_billitem INTO lwa_billitem
    WITH KEY pspnr = ls_clrq_itm-objnr.
    IF sy-subrc = 0.
      READ TABLE gt_contract_itm INTO ls_contract_itm
      WITH KEY ps_psp_pnr = lwa_billitem-bpspnr.
      IF sy-subrc <> 0.
***Consider Add Cost Collectors
        CLEAR lwa_add_cost_coll_pspnr.
        READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
        INTO lwa_add_cost_coll_pspnr.

        IF sy-subrc EQ 0.

          READ TABLE gt_contract_itm INTO ls_contract_itm
          WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.

          IF sy-subrc NE 0.
            CLEAR ls_contract_itm.
          ENDIF.

        ENDIF.
      ENDIF.

      IF ls_clrq_itm-vgbel IS NOT INITIAL AND
         ls_clrq_itm-vgpos IS NOT INITIAL.
        "always use passed reference, if available.
        READ TABLE gt_contract_itm INTO ls_contract_itm
          WITH KEY vbeln = ls_clrq_itm-vgbel
                   posnr = ls_clrq_itm-vgpos.
        IF sy-subrc NE 0.
          CLEAR ls_contract_itm.
        ELSE.
          "find correct add. cost collector and contract line
          DATA(ls_cost_coll) = VALUE #( gt_add_cost_collector[ vbeln =  ls_contract_itm-vbeln
                                        wbs_cost_col = lwa_billitem-bpspnr ] OPTIONAL ).
          IF ls_cost_coll IS NOT INITIAL.
            lwa_add_cost_coll_pspnr-con_itm_pspnr   = ls_cost_coll-wbsel.
            lwa_add_cost_coll_pspnr-cost_coll_pspnr = ls_cost_coll-wbs_cost_col.
          ENDIF.
        ENDIF.
      ENDIF.
*      ENDIF.

      READ TABLE gt_contract_business_data INTO ls_contract_business_data
       WITH KEY vbeln = ls_contract_itm-vbeln
                posnr = ls_contract_itm-posnr.
      IF sy-subrc <> 0.
        CLEAR ls_contract_business_data.
      ENDIF.
    ENDIF.
  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-bill_plan_line.
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY posnr = ls_clrq_itm-vgpos.

    READ TABLE gt_contract_business_data INTO ls_contract_business_data
     WITH KEY vbeln = ls_contract_itm-vbeln
              posnr = ls_contract_itm-posnr.

  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-calc_grp_itm.
    IF ls_clrq_itm-/cgdc/orgi IS NOT INITIAL.
      READ TABLE gt_contract_itm INTO ls_contract_itm
      WITH KEY vbeln = gs_clrqdoc_infocus-x-crhdr-vgbel
               posnr = ls_clrq_itm-/cgdc/orgi.
    ENDIF.

  ELSEIF ls_clrq_itm-itmty = gc_clrq_itmty-manual_line OR ls_clrq_itm-itmty <> gc_clrq_itmty-prepayment_item. "Manual Line item

    CLEAR ls_contract_itm.
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY ps_psp_pnr = ls_clrq_itm-ps_psp_pnr.
    IF sy-subrc NE 0.
***Consider Add Cost Collectors
      CLEAR lwa_add_cost_coll_pspnr.
      READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
      INTO lwa_add_cost_coll_pspnr.
      IF sy-subrc EQ 0.
        CLEAR ls_contract_itm.
        READ TABLE gt_contract_itm INTO ls_contract_itm
        WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.
        IF sy-subrc NE 0.
          CLEAR ls_contract_itm.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  " determine contract item from ref. doc value, if not already determined.
  IF ls_contract_itm IS INITIAL AND ls_clrq_itm-itmty <> gc_clrq_itmty-prepayment_item. "condition added 3.5.24
    READ TABLE gt_contract_itm INTO ls_contract_itm
    WITH KEY vbeln = ls_clrq_itm-vgbel
             posnr = ls_clrq_itm-vgpos.
    IF sy-subrc <> 0.
      CLEAR ls_contract_itm.
      READ TABLE gt_contract_subitm INTO ls_contract_itm
      WITH KEY vbeln = ls_clrq_itm-vgbel
               posnr = ls_clrq_itm-vgpos.
    ENDIF.
    READ TABLE gt_contract_business_data INTO ls_contract_business_data
     WITH KEY vbeln = ls_contract_itm-vbeln
              posnr = ls_contract_itm-posnr.

    IF ls_contract_itm IS INITIAL.
      "can't identify corresponding item
      RETURN.
    ENDIF.
  ENDIF.



  MOVE-CORRESPONDING ls_clrq_itm TO ls_clrq_itm_new.


  READ TABLE gt_prps INTO ls_pspnr
  WITH KEY objnr = ls_clrq_itm-objnr.
  IF sy-subrc = 0.
    ls_clrq_itm_new-pspnr = ls_pspnr-pspnr.
  ENDIF.

***Consider Add Cost Collectors
  "++ SOC Multi payer - Find allocation percentage for Source WBS.
  DATA(ls_src_wbs) = VALUE #( gt_add_cost_collector[ vbeln =  ls_contract_itm-vbeln
                              wbs_cost_col = lwa_add_cost_coll_pspnr-cost_coll_pspnr
                              wbsel = lwa_add_cost_coll_pspnr-con_itm_pspnr ] OPTIONAL ).

  IF ls_src_wbs IS NOT INITIAL.
    IF ls_src_wbs-multi_payer_ind = abap_true.
      "allocated amount
      ls_clrq_itm_new-wbs_allocation = ls_src_wbs-allocation.
    ELSE.
      "full amount
      ls_clrq_itm_new-wbs_allocation = CONV #( 100 ).
    ENDIF.
  ELSE.
    "full amount
    ls_clrq_itm_new-wbs_allocation = CONV #( 100 ).
  ENDIF.

  "++ EOC Multi payer - Find allocation percentage for Source WBS.

  ls_clrq_itm_new-cc_pspnr = lwa_add_cost_coll_pspnr-cost_coll_pspnr.
***
  ls_clrq_itm_new-vgbel = ls_contract_itm-vbeln.
  ls_clrq_itm_new-vgpos = ls_contract_itm-posnr.
  ls_clrq_itm_new-/cgdc/orgh = ls_contract_itm-vbeln.
  ls_clrq_itm_new-/cgdc/orgi = ls_contract_itm-posnr.
***Enable liquidation grouping
  ls_clrq_itm_new-/cgdc/pbpgp = ls_contract_itm-/cgdc/pbpgp.
***
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm .
    ls_clrq_itm_new-vgbel =  gs_contract_hdr-vbeln.
    ls_clrq_itm_new-/cgdc/orgh = gs_contract_hdr-vbeln.
  ENDIF.

  IF ls_clrq_itm_new-zmeng IS INITIAL.
    ls_clrq_itm_new-zmeng =  ls_clrq_itm_new-kwmeng .
  ENDIF.
  IF gs_clrit_org IS INITIAL
  OR gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new.

  ENDIF.
  IF ls_clrq_itm_new-spart IS INITIAL.
    ls_clrq_itm_new-spart = gs_clrqdoc_infocus-x-crhdr-spart.
  ENDIF.
  IF ls_clrq_itm_new-fkdat IS INITIAL.
    ls_clrq_itm_new-fkdat = ls_clrq_itm_new-budat.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-bill_plan_line.
    ls_clrq_itm_new-ps_psp_pnr = ls_contract_itm-ps_psp_pnr.

  ENDIF.

  PERFORM update_material_determination USING ls_contract_itm
                                              ls_clrq_itm
                                     CHANGING ls_clrq_itm_new.

  PERFORM select_plant_data USING ls_clrq_itm_new-werks
                         CHANGING ls_t001w.

  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = ls_clrq_itm_new-pstyv.
  IF lwa_item_catg-qty_1 IS NOT INITIAL.
    ls_clrq_itm_new-zmeng = 1.
  ENDIF.
  IF lwa_item_catg-price_date_rule IS NOT INITIAL.
    ASSIGN COMPONENT lwa_item_catg-price_date_rule OF STRUCTURE ls_clrq_itm_new TO <lv_field>.
    IF <lv_field> IS ASSIGNED.
      ls_clrq_itm_new-prsdt = <lv_field>.
    ENDIF.
  ENDIF.

  IF lwa_item_catg-exchg_date_rule IS NOT INITIAL.
    IF <lv_field> IS ASSIGNED.
      UNASSIGN <lv_field>.
    ENDIF.
    ASSIGN COMPONENT lwa_item_catg-exchg_date_rule OF STRUCTURE ls_clrq_itm_new TO <lv_field>.
    ls_clrq_itm_new-exdat = <lv_field>.
  ELSE.
    "assign document date to exchange rate date if exchange rule not maintained
    ls_clrq_itm_new-exdat = ls_clrq_itm_new-bldat.
  ENDIF.

  ls_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

  ls_clrq_itm_new-ps_psp_pnr = ls_contract_itm-ps_psp_pnr.
  READ TABLE gs_clrqdoc_infocus-x-critm INTO DATA(ls_clrqit_blp) WITH KEY  clrno = ls_clrq_itm-clrno
                                                                            clrit = ls_clrq_itm-clrit
                                                                            clrsit = ls_clrq_itm-clrsit
                                                                            itmty = 1.
  IF sy-subrc NE 0 AND   ls_clrq_itm_old IS INITIAL.
    PERFORM generate_item_no CHANGING ls_clrq_itm_new.
    IF ls_clrq_itm_new-itmty EQ 1.
      DATA(lv_bill_sched_new) = abap_true.
    ENDIF.
  ELSE.
    DATA(lv_bill_sched) = abap_true.
  ENDIF.

  CLEAR: ls_clrq_itm_new-erdat,
         ls_clrq_itm_new-ernam,
         ls_clrq_itm_new-erzet,
         ls_clrq_itm_new-aedat.

  CLEAR: lt_komv.

  IF ls_clrq_itm_new-zmeng IS INITIAL.
    IF ( gs_clrit_org IS INITIAL
    OR gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_new ).
      ls_clrq_itm_new-zmeng = 1.
    ENDIF.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm.  .
    ls_clrq_itm_new-bldat = ls_clrq_itm-budat.
  ENDIF.
  IF lv_bill_sched EQ abap_false.
    ls_clrq_itm_new-updkz = gc_updkz_new.
  ELSE.
    ls_clrq_itm_new-updkz = gc_updkz_update.
  ENDIF.

  IF ls_clrq_itm_new-istat IS INITIAL.
    ls_clrq_itm_new-istat = gc_ibill_stat-open.
  ENDIF.
  IF ls_clrq_itm_new-updkz EQ gc_updkz_new.
    ls_clrq_itm_new-istat = 'A'.
  ENDIF.
  IF ls_clrq_itm_new-itmty = gc_clrq_itmty-calc_grp_itm .
    PERFORM get_calc_grp_row_amount USING ls_clrq_itm_new.
  ENDIF.

  PERFORM check_costingsheet USING ls_clrq_itm_new
                                   ls_clrq_itm_new-objnr
                                   gs_clrqdoc_infocus-x-crhdr-vgbel
                                   ls_clrq_itm_new-vgpos
                                   ls_clrq_itm_new-budat
                             CHANGING ls_clrq_itm_new-csist
                                      ls_clrq_itm_new-csheet
                                      ls_clrq_itm_new-zschl.

  CLEAR lv_call_bit_ex.
  PERFORM determine_billing_item USING    lv_bill_sched
                                          lv_bill_sched_new
                                 CHANGING ls_clrq_itm
                                          ls_clrq_itm_new
                                          lv_call_bit_ex.

  ls_clrq_itm_new-rtb_source = ls_linktab_data-source.
  IF gs_variables-no_pricing EQ abap_false AND ls_clrq_itm_new-istat NE 'E'.
    DATA(lv_kbetr1) = ls_clrq_itm_new-kbetr1.
    PERFORM pricing USING lv_call_for CHANGING ls_clrq_itm
                                               ls_clrq_itm_new
                                               lt_komv.

*    Rounding issue fix
    IF gs_variables-itm_post_amt IS NOT INITIAL OR gs_variables-itm_post_amt_un IS NOT INITIAL.
      ls_clrq_itm_new-kbetr1 = lv_kbetr1.
    ENDIF.

    ls_clrq_itm_new-no_price = abap_false.
  ELSE.
    IF ls_clrq_itm_new-clrsit EQ '000001'.
      ls_clrq_itm_new-no_price = abap_true.
    ENDIF.
  ENDIF.

  " ADDED BY NITIN
  READ TABLE gt_cnt_iflow INTO DATA(lwa_cnt_iflow) WITH KEY posnr = ls_clrq_itm_new-vgpos.
  IF sy-subrc = 0.
    ls_clrq_itm_new-/cgdc/defin = lwa_cnt_iflow-/cgdc/defin.
  ENDIF.

*****BOC - After pricing update amount on billing item*****************************
  IF <lwa_clrqbi> IS ASSIGNED.
    UNASSIGN <lwa_clrqbi>.
  ENDIF.
  SELECT *
           FROM /cgdc/t_bilitty
           INTO  TABLE @lt_bilityp.

  READ TABLE gs_clrqdoc_infocus-x-crbinr
  ASSIGNING <lwa_clrqbi>
  WITH KEY clrno     = ls_clrq_itm_new-clrno
           bill_item = ls_clrq_itm_new-rtbbinr.
  IF sy-subrc = 0 AND ( gs_clrit_org-istat = gc_ibill_stat-open  OR ls_clrq_itm_new-clrsit = '000001' ).
    IF lv_call_bit_ex = abap_true.

      READ TABLE lt_bilityp INTO lwa_bilityp
       WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15..
          <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.

      <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + ls_clrq_itm_new-kzwi6.
      <lwa_clrqbi>-waerk = ls_clrq_itm_new-waerk.
      "++SOC - decimal precision fields
      <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields
      IF <lwa_clrqbi>-updkz IS INITIAL.
        <lwa_clrqbi>-updkz = gc_updkz_update.
      ENDIF.

    ELSE.
      READ TABLE lt_bilityp INTO lwa_bilityp
       WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

      IF sy-subrc = 0.
        IF lwa_bilityp-qty_1 = abap_true.
          <lwa_clrqbi>-zmeng = 1.
        ELSEIF lwa_item_catg-blkcumul_qty = abap_false.  "RTB24-15.
          <lwa_clrqbi>-zmeng =  ls_clrq_itm_new-zmeng.
        ENDIF.
      ENDIF.
      <lwa_clrqbi>-netwr = ls_clrq_itm_new-netwr.
      <lwa_clrqbi>-wavwr = ls_clrq_itm_new-wavwr.
      <lwa_clrqbi>-kzwi1 = ls_clrq_itm_new-kzwi1.
      <lwa_clrqbi>-kzwi2 = ls_clrq_itm_new-kzwi2.
      <lwa_clrqbi>-kzwi3 = ls_clrq_itm_new-kzwi3.
      <lwa_clrqbi>-kzwi4 = ls_clrq_itm_new-kzwi4.
      <lwa_clrqbi>-kzwi5 = ls_clrq_itm_new-kzwi5.
      <lwa_clrqbi>-kzwi6 = ls_clrq_itm_new-kzwi6.
      <lwa_clrqbi>-waerk = ls_clrq_itm_new-waerk.
      "++SOC - Decimal precision fields
      <lwa_clrqbi>-netwr24 = ls_clrq_itm_new-netwr24.
      <lwa_clrqbi>-kzwi1_24 = ls_clrq_itm_new-kzwi1_24.
      <lwa_clrqbi>-kzwi2_24 = ls_clrq_itm_new-kzwi2_24.
      <lwa_clrqbi>-kzwi3_24 = ls_clrq_itm_new-kzwi3_24.
      <lwa_clrqbi>-kzwi4_24 = ls_clrq_itm_new-kzwi4_24.
      <lwa_clrqbi>-kzwi5_24 = ls_clrq_itm_new-kzwi5_24.
      <lwa_clrqbi>-kzwi6_24 = ls_clrq_itm_new-kzwi6_24.
      "++EOC - decimal precision fields

    ENDIF.


  ENDIF.
*****EOC - After pricing update amount on billing item*****************************


  IF gs_cafdac-vbeln NE gs_contract_hdr-vbeln.
    SELECT SINGLE * FROM /cgdc/_cafdac
      INTO gs_cafdac
      WHERE vbeln = gs_contract_hdr-vbeln.

    IF sy-subrc NE 0.
      gs_cafdac-vbeln = gs_contract_hdr-vbeln.
    ENDIF.
  ENDIF.
  IF gs_cafdac-alcrc IS NOT INITIAL.
    IF ls_clrq_itm_new-/cgdc/cline IS INITIAL.
      CONCATENATE 'G' ls_clrq_itm_new-msg_code INTO ls_clrq_itm_new-msg_code.
    ENDIF.
  ENDIF.

  CLEAR ls_clrq_itm_new-bstat.
  IF gs_clrit_org IS  INITIAL OR gs_clrit_org-istat IS NOT INITIAL.
    IF gs_clrit_org-istat IS NOT INITIAL.
      ls_clrq_itm_new-istat = gs_clrit_org-istat.
    ENDIF.
    IF ls_clrq_itm_new-ldetla IS INITIAL.
      ls_clrq_itm_new-ldetla = '000000'.
    ENDIF.
    ls_clrq_itm_new-rtb_source = ls_linktab_data-source.
    IF lv_call_for IS INITIAL.
      ls_clrq_itm_new1 = ls_clrq_itm_new.
      IF ls_clrq_itm_new-clrsit = '000001' AND ls_clrq_itm_new-clrdit = '000000' AND ls_clrq_itm_new-updkz EQ gc_updkz_new .
        ls_clrq_itm_new1-clrsit = '000000'.
        ls_clrq_itm_new1-ldetla = '000000'.
        APPEND ls_clrq_itm_new1 TO gs_clrqdoc_infocus-x-critm.
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO ls_itmkey.
        APPEND ls_itmkey TO gs_clrqdoc_infocus-x-critm_key.
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO lwa_clrit_key.
        APPEND lwa_clrit_key TO gt_bg_crt_keys.

      ELSEIF ls_clrq_itm_new-csheet <> ls_clrq_itm-csheet OR ls_clrq_itm_new-csist <> ls_clrq_itm-csist
              OR ls_clrq_itm_new-zschl <> ls_clrq_itm-zschl AND ls_clrq_itm_new-updkz EQ gc_updkz_new.
        ls_clrq_itm_new1-clrsit = '000000'.
        ls_clrq_itm_new1-clrdit = '000000'.
        ls_clrq_itm_new1-lclrsit = ls_clrq_itm_new-clrsit.
        ls_clrq_itm_new1-updkz = gc_updkz_update.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY clrno = ls_clrq_itm_new1-clrno
                                                                              clrit = ls_clrq_itm_new1-clrit
                                                                              clrsit = ls_clrq_itm_new1-clrsit.
        IF sy-subrc = 0.
*          MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
          <lwa_clrqit>-csist = ls_clrq_itm_new1-csist.
          <lwa_clrqit>-csheet = ls_clrq_itm_new1-csheet.
          <lwa_clrqit>-zschl = ls_clrq_itm_new1-zschl.
          <lwa_clrqit>-updkz = ls_clrq_itm_new1-updkz.
        ENDIF.

      ENDIF.
*- read billing scheduler lines
      READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY  clrno = ls_clrq_itm_new1-clrno
                                                                                clrit = ls_clrq_itm_new1-clrit
                                                                                clrsit = ls_clrq_itm_new1-clrsit.
      IF sy-subrc EQ 0 AND ls_clrq_itm_old IS NOT INITIAL .
        MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
      ELSE.
        READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit> WITH KEY  clrno = ls_clrq_itm_new1-clrno
                                                                             clrit = ls_clrq_itm_new1-clrit.

        IF sy-subrc EQ 0 AND ls_clrq_itm_old IS NOT INITIAL .
          MOVE-CORRESPONDING ls_clrq_itm_new1 TO <lwa_clrqit>.
          <lwa_clrqit>-clrsit = ls_clrqit_blp-clrsit.
        ENDIF.
      ENDIF.
    ENDIF.
    IF lv_call_for IS INITIAL.
*- billing schedule
      APPEND ls_clrq_itm_new TO gs_clrqdoc_infocus-x-critm. "added by Nitin 28

      IF ls_clrq_itm_new-clgrp_kschl IS NOT INITIAL.
        APPEND ls_clrq_itm_new TO gt_clgrp_itm_buffer.
      ENDIF.
    ELSE.
      APPEND ls_clrq_itm_new TO gt_clgrp_itm_buffer.
    ENDIF.

    ls_clrq_itm-clrsit = ls_clrq_itm_new-clrsit.
    ls_clrq_itm-clrit  = ls_clrq_itm_new-clrit.
    ls_clrq_itm-clrno  = ls_clrq_itm_new-clrno.
    ls_clrq_itm-clrdit = ls_clrq_itm_new-clrdit.
    ls_clrq_itm-zmeng  = ls_clrq_itm_new-zmeng.
    ls_clrq_itm-netwr  = ls_clrq_itm_new-netwr.
    ls_clrq_itm-bityp  = ls_clrq_itm_new-bityp.

  ENDIF.
  IF ls_clrq_itm_new-clrsit = '000001' AND ls_clrq_itm_new-clrdit = '000000'.
    IF ls_clrq_itm-itmty IS INITIAL.

      "-- update to new table. below structure not required.

      "++ replacement configure sources
      ASSIGN ls_linktab_data-crlink_tab->* TO <lfs_lnk_data>.
      IF <lfs_lnk_data> IS ASSIGNED.

        READ TABLE gs_clrqdoc_infocus-x-crlink ASSIGNING FIELD-SYMBOL(<lfs_crlink>)
                                               WITH KEY link_table = ls_linktab_data-link_table
                                                        updkz      = gc_updkz_new.
        IF sy-subrc = 0 AND <lfs_crlink> IS ASSIGNED.

          "if records exist for linktab, append to table.
          ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
          IF <lfs_lnk_new> IS ASSIGNED.

            APPEND INITIAL LINE TO <lfs_lnk_new> ASSIGNING FIELD-SYMBOL(<lfs_row>).
            MOVE-CORRESPONDING <lfs_lnk_data> TO <lfs_row>.
            ASSIGN COMPONENT 'CLRNO' OF STRUCTURE  <lfs_row> TO <lv_data>.
            IF <lv_data> IS ASSIGNED.
              <lv_data> = ls_clrq_itm_new-clrno.
            ENDIF.
            "add clrq item
            UNASSIGN <lv_data>.
            ASSIGN COMPONENT 'CLRIT' OF STRUCTURE  <lfs_row> TO <lv_data>.
            IF <lv_data> IS ASSIGNED.
              <lv_data> = ls_clrq_itm_new-clrit.
            ENDIF.

            <lfs_crlink>-updkz = gc_updkz_new.

          ENDIF.
        ELSE.

          "else append New line for Link tab and data reference
          APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-crlink ASSIGNING <lfs_crlink>.
          <lfs_crlink>-link_table    = ls_linktab_data-link_table.
          <lfs_crlink>-lnktab_upd_fm = ls_linktab_data-lnktab_upd_fm.

          CREATE DATA <lfs_crlink>-crlink_tab TYPE TABLE OF (ls_linktab_data-link_table).
          ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
          IF <lfs_lnk_new> IS ASSIGNED.

            APPEND INITIAL LINE TO <lfs_lnk_new> ASSIGNING <lfs_row>.
            MOVE-CORRESPONDING <lfs_lnk_data> TO <lfs_row>.

            "add clrq no
            ASSIGN COMPONENT 'CLRNO' OF STRUCTURE  <lfs_row> TO <lv_data>.
            IF <lv_data> IS ASSIGNED.
              <lv_data> = ls_clrq_itm_new-clrno.
            ENDIF.
            "add clrq item
            UNASSIGN <lv_data>.
            ASSIGN COMPONENT 'CLRIT' OF STRUCTURE  <lfs_row> TO <lv_data>.
            IF <lv_data> IS ASSIGNED.
              <lv_data> = ls_clrq_itm_new-clrit.
            ENDIF.

            <lfs_crlink>-updkz = gc_updkz_new.

          ENDIF.
        ENDIF.
      ENDIF.
      "++ replacement configure sources
    ELSE.
      IF lv_bill_sched EQ abap_false."bill schedule line item created
        MOVE-CORRESPONDING ls_clrq_itm TO ls_clr_blpl.
        ls_clr_blpl-vbeln = ls_clrq_itm-vgbel.
        ls_clr_blpl-posnr = ls_clrq_itm-vgpos.
        ls_clr_blpl-billitem = ls_clrq_itm-billitem.
        ls_clr_blpl-updkz = gc_updkz_new.

        APPEND ls_clr_blpl TO gs_clrqdoc_infocus-x-crblpl.
      ENDIF.
    ENDIF.
  ENDIF.
  CLEAR lv_bill_sched.
  MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrq_itm.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_material_determination
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_CLRQ_ITM_NEW
*&---------------------------------------------------------------------*
FORM update_material_determination USING ls_contract_itm TYPE vbap
                                          ls_clrq_itm TYPE /cgdc/s_clrqit_fcat
                                CHANGING ls_clrq_itm_new TYPE /cgdc/s_clrqit.

  DATA: lv_variable_name TYPE rvari_vnam,
        lv_subrc         TYPE sy-subrc,
        lv_tabix         TYPE sy-tabix,
        lv_kokrs         TYPE ps_pkokr,
        lwa_prps         TYPE prps,
        lt_cost_element  TYPE TABLE OF selopt,
        lr_cost_element  TYPE RANGE OF kstar.
  DATA : ls_clrqhd_brf  TYPE /cgdc/s_clrqhd_brf,
         ls_clrqit_brf  TYPE /cgdc/s_clrqitbrf,
         ls_clrcost_brf TYPE /cgdc/s_clrqcost_brf.
  DATA: lv_cegrp    TYPE /cgdc/cegroup,
        lv_skfgrp   TYPE /cgdc/skfgrp,
        lv_atgrp    TYPE /cgdc/atgrp,
        lv_ccggrp   TYPE /cgdc/ccgrp,
        lv_msg_code TYPE /cgdc/err_msg,
        lv_msg_typ  TYPE symsgty,
        lv_matnr    TYPE matnr.

  MOVE-CORRESPONDING gs_clrqdoc_infocus-x-crhdr TO ls_clrqhd_brf.
  MOVE-CORRESPONDING ls_clrq_itm_new TO ls_clrqit_brf.
  MOVE-CORRESPONDING ls_clrq_itm TO ls_clrcost_brf.

  CLEAR lv_matnr.
  lv_matnr = ls_clrq_itm_new-matnr.

  "No material determination to be run for CGRR items.
  IF gs_variables-cgrr_itm_crt IS INITIAL AND
     ls_clrq_itm_new-itmty <> gc_clrq_itmty-manual_line
    AND  ls_clrq_itm_new-itmty <> gc_clrq_itmty-bill_plan_line.   "++and No mat. detm. for Manual items
    CALL FUNCTION '/CGDC/_CLRQ_DETERMINE_MATNR'
      EXPORTING
        is_clrqhd   = ls_clrqhd_brf
        is_clrqit   = ls_clrqit_brf
        is_clrqcost = ls_clrcost_brf
      IMPORTING
        ev_cegrp    = ls_clrq_itm_new-cegroup
        ev_skfgrp   = ls_clrq_itm_new-skfgrp
        ev_atgrp    = ls_clrq_itm_new-atgrp
        ev_ccgrp    = ls_clrq_itm_new-ccgrp
        ev_matnr    = ls_clrq_itm_new-matnr
        ev_msg_code = lv_msg_code.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.

  IF ls_clrq_itm_new-matnr IS INITIAL.
    ls_clrq_itm_new-matnr = lv_matnr.
  ENDIF.
  IF lv_msg_code IS INITIAL.
    IF ls_clrq_itm_new-msg_code IS NOT INITIAL.
      REPLACE 'C' IN ls_clrq_itm_new-msg_code WITH space.
      REPLACE 'E' IN ls_clrq_itm_new-msg_code WITH space.
      REPLACE 'A' IN ls_clrq_itm_new-msg_code WITH space.
      REPLACE 'S' IN ls_clrq_itm_new-msg_code WITH space.
      REPLACE 'M' IN ls_clrq_itm_new-msg_code WITH space.
      CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.
    ENDIF.
  ENDIF.
  ls_clrq_itm_new-msg_code =  ls_clrq_itm_new-msg_code && lv_msg_code.
  CONDENSE ls_clrq_itm_new-msg_code NO-GAPS.

  PERFORM select_maapv CHANGING ls_clrq_itm_new
                                lv_subrc.

  PERFORM read_customer_material USING ls_clrq_itm_new.

****Verify Plant
  IF ls_clrq_itm_new-matnr EQ gs_knmt-matnr.

    IF ls_clrq_itm_new-werks IS INITIAL.
      ls_clrq_itm_new-werks = gs_knmt-werks.
    ENDIF.

  ENDIF.

  IF ls_clrq_itm_new-werks IS INITIAL.

    PERFORM fill_kuwev USING gs_clrqdoc_infocus-x-crhdr.

    IF gs_kuwev-dwerk IS NOT  INITIAL.
      ls_clrq_itm_new-werks = gs_kuwev-dwerk.
    ENDIF.

  ENDIF.

  IF
    ls_clrq_itm_new-matnr IS NOT INITIAL .
    PERFORM determine_pstyv USING ls_contract_itm
                            CHANGING ls_clrq_itm_new.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_costingsheet_conditions
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_CLRQ_ITM_FCAT
*&      <-- LT_KOMV
*&---------------------------------------------------------------------*
FORM update_costingsheet_conditions  USING ls_clrq_itm_fcat TYPE /cgdc/s_clrqit_fcat
                                  CHANGING ls_clrq_itm      TYPE /cgdc/s_clrqit
                                           ls_komk          TYPE komk
                                           ls_komp          TYPE komp
                                           lt_komv          TYPE komv_tab
                                           lt_komv_cost     TYPE komv_tab
                                           lt_komv_cost_add     TYPE /cgdc/tt_clrq_cs_con_data.

  DATA: lv_costing_sheet_activate,
        lwa_coep                  TYPE coep,
        lt_coep                   TYPE tt_coep,
        lt_coep_export            TYPE tt_coep,
        lt_cobk                   TYPE ttcobk,
        lwa_konp                  TYPE konp,
        lwa_item_catg             TYPE /cgdc/t_rtbic,
        lt_komv_clrq              TYPE komv_tab,
        lwa_komv_temp             TYPE komv,
        lwa_komv                  TYPE komv,
        ls_cobk                   TYPE cobk,
        ls_cscon                  TYPE /cgdc/s_clrqcscn,
        lv_wtgbtr                 TYPE wtgxxx.

  FIELD-SYMBOLS: <lwa_coep> TYPE coep.

  CHECK ls_clrq_itm-csist = gc_costingsheet_status-active.

  READ TABLE gt_item_catg INTO lwa_item_catg
  WITH KEY pstyv = ls_clrq_itm-pstyv.
  IF sy-subrc = 0 .
    CHECK lwa_item_catg-cs_bypass IS INITIAL.
  ENDIF.

  IF /cgdc/cl_clrq_set_buffer=>gt_cobk IS NOT INITIAL.
    lt_cobk = /cgdc/cl_clrq_set_buffer=>gt_cobk.
    READ TABLE lt_cobk INTO ls_cobk INDEX 1.
  ELSEIF gt_cobk IS NOT INITIAL.
    READ TABLE gt_cobk INTO  ls_cobk
    WITH KEY belnr = ls_clrq_itm_fcat-belnr
    BINARY SEARCH.
    IF ls_cobk IS INITIAL.
      SELECT SINGLE * FROM cobk
        INTO ls_cobk
        WHERE belnr = ls_clrq_itm_fcat-belnr.
    ENDIF.
  ELSE.
    SELECT SINGLE * FROM cobk
      INTO ls_cobk
      WHERE belnr = ls_clrq_itm_fcat-belnr.
  ENDIF.

  IF /cgdc/cl_clrq_set_buffer=>gt_coep IS NOT INITIAL.
    lt_coep = /cgdc/cl_clrq_set_buffer=>gt_coep.
    DELETE lt_coep WHERE NOT ( belnr EQ ls_clrq_itm_fcat-belnr
                     AND buzei EQ ls_clrq_itm_fcat-buzei ).
    LOOP AT lt_coep ASSIGNING <lwa_coep>.
      <lwa_coep>-wrttp = '04'.
    ENDLOOP.
  ELSEIF gt_coep IS NOT INITIAL.
    READ TABLE gt_coep
    INTO lwa_coep
    WITH KEY belnr = ls_clrq_itm_fcat-belnr
             buzei = ls_clrq_itm_fcat-buzei
             BINARY SEARCH.
    IF lwa_coep IS INITIAL.
      SELECT SINGLE * FROM coep
        INTO lwa_coep
        WHERE belnr = ls_clrq_itm_fcat-belnr
          AND buzei = ls_clrq_itm_fcat-buzei.
    ENDIF.
    APPEND lwa_coep TO lt_coep.

  ELSE.

    SELECT SINGLE * FROM coep
      INTO lwa_coep
      WHERE belnr = ls_clrq_itm_fcat-belnr
        AND buzei = ls_clrq_itm_fcat-buzei.

    APPEND lwa_coep TO lt_coep.
  ENDIF.



  IF lt_coep IS NOT INITIAL.
    READ TABLE lt_coep ASSIGNING <lwa_coep>
    INDEX 1.

    "get TKA01
    DATA(ls_tka01) = /cgdc/cl_clrq_set_buffer=>get_tka01_buff( <lwa_coep>-kokrs ).

    <lwa_coep>-wtgbtr = ls_clrq_itm_fcat-kbetr1.

    "convert amount to object currency
    CALL FUNCTION 'CONVERT_AMOUNT_TO_CURRENCY'
      EXPORTING
        date             = ls_cobk-wsdat       "Exchange rate date
        foreign_currency = <lwa_coep>-twaer    "posting currency
        foreign_amount   = <lwa_coep>-wtgbtr   "posting amount
        local_currency   = <lwa_coep>-owaer    "object curreny
      IMPORTING
        local_amount     = <lwa_coep>-wogbtr   "posting amount in object currency
      EXCEPTIONS
        error            = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
      CLEAR: <lwa_coep>-wogbtr.
    ENDIF.

    "convert amount to Controlling Area currency
    CALL FUNCTION 'CONVERT_AMOUNT_TO_CURRENCY'
      EXPORTING
        date             = ls_cobk-wsdat       "Exchange rate date
        foreign_currency = <lwa_coep>-twaer    "posting currency
        foreign_amount   = <lwa_coep>-wtgbtr   "posting amount
        local_currency   = ls_tka01-waers      "object curreny TBC ->change to CO area currency.
      IMPORTING
        local_amount     = <lwa_coep>-wkgbtr
      EXCEPTIONS
        error            = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
      CLEAR: <lwa_coep>-wkgbtr.
    ENDIF.
  ENDIF.

  IF lt_coep IS NOT INITIAL AND ls_cobk IS NOT INITIAL.
    CALL FUNCTION '/CGDC/CLRQ_COST_SHEET_PREPARE'
      EXPORTING
        it_coep           = lt_coep
      IMPORTING
        et_coep           = lt_coep_export
      CHANGING
        cs_cobk           = ls_cobk
      EXCEPTIONS
        validation_error  = 1
        calculation_error = 2
        OTHERS            = 3.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.

  CALL METHOD /cgdc/cl_clrq_process=>get_costsheet_conditions
    IMPORTING
      et_komv          = lt_komv_cost
      et_komv_add_data = lt_komv_cost_add.

  PERFORM convert_cost_cond USING lt_komv_cost
                         CHANGING ls_clrq_itm-csist
                                  lt_komv_clrq .

  LOOP AT lt_komv_clrq INTO lwa_komv_temp.
    CLEAR:lwa_komv.
    IF lwa_komv_temp-kwert IS NOT INITIAL.

      lwa_komv-knumv = ls_clrq_itm-tmphd.
      lwa_komv-kposn = ls_clrq_itm-tmpit.
      lwa_komv-kbetr = lwa_komv_temp-kwert.    "will be set through routine
      lwa_komv-kschl = lwa_komv_temp-kschl.
*      lwa_komv-waers = ls_komk-waerk.
      lwa_komv-waers = COND #( WHEN ( lwa_komv_temp-waers IS NOT INITIAL )
                               THEN lwa_komv_temp-waers
                               ELSE ls_tka01-waers ) .   "use costing sheet unit
      lwa_komv-kpein = ls_komp-mgame.
      lwa_komv-kmein = ls_komp-vrkme.

      DATA(ls_komk1) = ls_komk.
      ls_komk1-hwaer  = ls_tka01-waers.
      ls_komk1-waerk  = ls_tka01-waers.

      CALL FUNCTION 'PRICING_CHECK'
        EXPORTING
          comm_head_i = ls_komk1
          comm_item_i = ls_komp
          komv_i      = lwa_komv
          preliminary = abap_true
        IMPORTING
          comm_head_e = ls_komk1
          comm_item_e = ls_komp
          komv_e      = lwa_komv
          konp_e      = lwa_konp
        EXCEPTIONS
          condition   = 1
          OTHERS      = 2.
      IF sy-subrc <> 0.
      ENDIF.

      APPEND lwa_komv TO lt_komv.

    ENDIF.
  ENDLOOP.
  CALL METHOD /cgdc/cl_clrq_process=>set_clrq_costsheet_conditions
    EXPORTING
      it_komv  = lt_komv_clrq
      is_tka01 = ls_tka01.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_billing_plan_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IS_BLP_DOC
*&---------------------------------------------------------------------*
FORM update_billing_plan_item  USING lv_vbeln TYPE vbeln
                                     lt_vbap  TYPE /cgdc/tt_vbap
                                     lv_process.

  DATA: lwa_blpln                TYPE /cgdc/s_blnpln,
        lwa_clrq_itm_new         TYPE /cgdc/s_clrqit_fcat,
        lwa_clrq_itm             TYPE /cgdc/s_clrqit,
        lv_add,
        lv_regular_upd,
        lwa_blpln_type           TYPE /cgdc/t_bplnty,

        lwa_clrq_itm_new1        TYPE /cgdc/s_clrqit_fcat,
        lwa_total_cost_per_posnr TYPE s_total_cost_per_posnr,
        ls_postpone_fcat         TYPE /cgdc/s_clrq_postpone,

        ls_bill_item             TYPE /cgdc/s_clrqbi,
        lv_line_blocked          TYPE abap_bool.
  DATA lt_clrit_key_delete TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA lwa_clrit_key TYPE  /cgdc/s_clrqit_key.
  DATA: lwa_critm  TYPE /cgdc/s_clrqit,
        lwa_critm1 TYPE /cgdc/s_clrqit,
        lv_rprc    TYPE flag.
  FIELD-SYMBOLS : <lwa_critm> TYPE /cgdc/s_clrqit.
  DATA: ls_link_data TYPE /cgdc/s_crlink.   "Link tab update row

  DATA: ls_clr_blpl TYPE /cgdc/s_clrqblpl,
        lv_faksp_zm TYPE faksp_ap VALUE 'ZM'.
  FIELD-SYMBOLS : <lwa_clrq_itm_old>         TYPE /cgdc/s_clrqit.
  DATA: lt_clrqpit TYPE TABLE OF /cgdc/_clrqpit.

  SELECT *
    FROM /cgdc/_clrqpit
    INTO TABLE lt_clrqpit
    WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
  IF lv_process = gc_process_type-calc_req_hdr_crt.
    gs_variables-rprc_bp = 'X'.
    CALL FUNCTION '/CGDC/BLP_DATA_GET'
      IMPORTING
        is_blp_doc = gs_blp_doc.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  IF gs_blp_doc IS  INITIAL.
    CALL FUNCTION '/CGDC/BLP_VIEW'
      EXPORTING
        i_vbeln    = lv_vbeln
      IMPORTING
        es_blp_doc = gs_blp_doc.
    IF sy-subrc <> 0.
    ENDIF.
  ENDIF.
  gs_variables-key_only = ''.
  gs_variables-overview_mode = 'V'.

  PERFORM select_clrqblnpl USING gs_blp_doc-x-blpln.

  LOOP AT gs_blp_doc-x-blpln INTO lwa_blpln.

    "++check Sched bill blocks on line item before update
    CLEAR: lv_line_blocked.
    PERFORM check_schd_bill_blk_on_itm USING lwa_blpln-vbeln
                                             lwa_blpln-posnr
                                             lt_vbap
                                       CHANGING lv_line_blocked.
    IF lv_line_blocked = abap_true.
      CONTINUE.
    ENDIF.

    PERFORM read_blnpl_item_type_data USING lwa_blpln-type
                                            lwa_blpln-pstyv
                                   CHANGING lwa_blpln_type.
    CLEAR:lv_add.
    PERFORM check_blnpl_item_exists USING lwa_blpln
                                  CHANGING lv_add.
    READ TABLE gt_bilitty INTO DATA(ls_bill) WITH KEY bilitmtyp = lwa_blpln_type-bitype.
    IF sy-subrc NE 0.
      CLEAR ls_bill.
    ENDIF.
    IF lwa_blpln_type-prtyp EQ '1' .
      IF lwa_blpln-type IS NOT INITIAL.
        READ TABLE gt_clrq_blpl_exst INTO DATA(ls_blpln_old)
           WITH KEY vbeln = lwa_blpln-vbeln
                    posnr = lwa_blpln-posnr
                    billitem = lwa_blpln-billitem.
        IF sy-subrc EQ 0.
          DATA(lv_change) = abap_true.
          READ TABLE gt_clrqblpl INTO DATA(ls_clrqblpl) WITH KEY  vbeln = lwa_blpln-vbeln
                                                                   posnr = lwa_blpln-posnr
                                                                   billitem = lwa_blpln-billitem.
          IF sy-subrc EQ 0.
            SORT gs_clrqdoc_infocus-x-critm BY clrno clrit clrsit clrdit.
            LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm> WHERE  clrno =  ls_clrqblpl-clrno
                                                                                    AND clrit = ls_clrqblpl-clrit
                                                                                    AND  updkz IS INITIAL.
              CLEAR lv_rprc.
              lwa_critm1 = <lwa_critm>.
              READ TABLE lt_clrqpit TRANSPORTING NO FIELDS WITH KEY clrno = lwa_critm1-clrno
                                                                    clrit = lwa_critm1-clrit
                                                                    clrsit = lwa_critm1-clrsit.
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.

              AT NEW clrsit.
                IF lwa_critm1-clrsit = '000000'.
                  CONTINUE.
                ELSE.
                  READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrq_itm_old> WITH KEY clrno = lwa_critm1-clrno
                                                                                              clrit = lwa_critm1-clrit
                                                                                              clrsit = lwa_critm1-clrsit
                                                                                              clrdit = lwa_critm1-ldetla
                                                          .

                  IF  sy-subrc = 0 AND <lwa_clrq_itm_old>-istat = gc_ibill_stat-open.
                    PERFORM reprocess_bill_plan_itm USING lwa_blpln
                                                          lwa_blpln_type
                                                    CHANGING <lwa_clrq_itm_old>
                                                              lv_rprc.
                  ENDIF.
                ENDIF.
              ENDAT.
              IF lv_rprc IS NOT INITIAL.
                <lwa_critm>-ldetla = <lwa_critm>-ldetla + 1.
              ENDIF.
            ENDLOOP.
          ENDIF.
          CONTINUE.
        ELSEIF lv_process = gc_process_type-background OR lv_process = gc_process_type-calc_req_hdr_crt.
          gs_variables-bit_num_gen = abap_true.
          "This End If should Extend to 1554 only for when no clrqit exist for BLPLN
        ENDIF.
        MOVE-CORRESPONDING lwa_blpln TO lwa_clrq_itm_new.
        lwa_clrq_itm_new-kbetr1 = lwa_blpln-billamt.
        lwa_clrq_itm_new-netwr = lwa_blpln-billamt.
        lwa_clrq_itm_new-matnr = ls_bill-bilmatnr.
        lwa_clrq_itm_new-itmty = gc_clrq_itmty-bill_plan_line.
        CLEAR:lwa_clrq_itm_new-pstyv.
        lwa_clrq_itm_new-budat = lwa_blpln-billdate.
        lwa_clrq_itm_new-vgbel = lwa_blpln-vbeln.
        lwa_clrq_itm_new-vgpos = lwa_blpln-posnr.
        lwa_clrq_itm_new-zmeng = 1.
        lwa_clrq_itm_new-fkdat = lwa_blpln-billdate.
        lwa_clrq_itm_new-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
        lwa_clrq_itm_new-billitem = lwa_blpln-billitem.
        lwa_clrq_itm_new-rtbusage =  lwa_blpln_type-vwpos.
        lwa_clrq_itm_new-/cgdc/eline = lwa_blpln-/cgdc/eline. " added by nitin
***DCLM 5764
        lwa_clrq_itm_new-fsched = lwa_blpln_type-fsched.
        lwa_clrq_itm_new-/cgdc/cline = lwa_blpln-clin.
        lwa_clrq_itm_new-/cgdc/acrns = lwa_blpln-/cgdc/acrn.
        lwa_clrq_itm_new-/cgdc/eline = lwa_blpln-/cgdc/eline.
        lwa_clrq_itm_new-/cgdc/fmsck = lwa_blpln-fmsck.
***
        lwa_clrq_itm_new-srvc_date = lwa_blpln-svcstart.
        lwa_clrq_itm_new-pop_stdt = lwa_blpln-svcstart.
        lwa_clrq_itm_new-pop_enddt  = lwa_blpln-svcend.
        lwa_clrq_itm_new-bldat_bi  = lwa_blpln-billdate.
        lwa_clrq_itm_new-bldat  = lwa_blpln-billdate.
        lwa_clrq_itm_new-bilmatnr =  ls_bill-bilmatnr.
        lwa_clrq_itm_new-bpln_type = lwa_blpln_type-bpln_type.
        lwa_clrq_itm_new-bityp = lwa_blpln_type-bitype.
        lwa_clrq_itm_new-billitem = lwa_blpln-billitem.
        lwa_clrq_itm_new-bp_prtyp = lwa_blpln_type-prtyp.
        lwa_clrq_itm_new-/cgdc/cline = lwa_blpln-clin.

        PERFORM update_clrq_item01 USING space ls_link_data lwa_clrq_itm
                                CHANGING lwa_clrq_itm_new.
      ENDIF.
    ELSEIF lwa_blpln_type-prtyp EQ '2' ..
      DATA(lv_only_bill) = abap_true.
    ENDIF.

    IF lv_only_bill EQ abap_true.

      READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING FIELD-SYMBOL(<lfs_bill_item>) WITH KEY billscheditem = lwa_blpln-billitem.
      IF sy-subrc NE 0.

        APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-crbinr ASSIGNING <lfs_bill_item>.

        <lfs_bill_item>-updkz     = gc_updkz_new.
      ELSE.
        <lfs_bill_item>-updkz     = gc_updkz_update.
      ENDIF.
      <lfs_bill_item>-clrno = gs_clrqdoc_infocus-x-crhdr-clrno.
      <lfs_bill_item>-bitype = lwa_clrq_itm_new-bityp.
      <lfs_bill_item>-pop_stdt   = lwa_blpln-svcstart.
      <lfs_bill_item>-pop_enddt  = lwa_blpln-svcend.
      <lfs_bill_item>-bldat   = lwa_blpln-billdate.
      <lfs_bill_item>-milestone = lwa_blpln-milestone.
      <lfs_bill_item>-fsched = lwa_blpln_type-fsched.                   " DCLM 5764
      <lfs_bill_item>-bitype = ls_bill-bilitmtyp.
      <lfs_bill_item>-bilmatnr = ls_bill-bilmatnr.
      <lfs_bill_item>-vgbel =  lv_vbeln.
      <lfs_bill_item>-fkrel = abap_true.
      IF lwa_blpln-milestone IS NOT INITIAL.
        <lfs_bill_item>-faksp = lv_faksp_zm.
      ENDIF.
      <lfs_bill_item>-milestone_rule = lwa_blpln-fpfix.
      <lfs_bill_item>-billscheditem = lwa_blpln-billitem.
      <lfs_bill_item>-vgpos = lwa_blpln-posnr.
      IF <lfs_bill_item>-updkz     = gc_updkz_new.
        TRY.
            cl_system_uuid=>if_system_uuid_static~create_uuid_c22(
              RECEIVING
                uuid = <lfs_bill_item>-bill_item ).
          CATCH cx_uuid_error INTO DATA(lo_expn).
        ENDTRY.
        " Populate CIS-AD: Link Billing Plan Items To Calculation Request
        ls_clr_blpl-clrno = <lfs_bill_item>-clrno.
        ls_clr_blpl-clrit = <lfs_bill_item>-bill_item.
        ls_clr_blpl-vbeln = <lfs_bill_item>-vgbel.
        ls_clr_blpl-posnr = <lfs_bill_item>-vgpos.
        ls_clr_blpl-billitem = <lfs_bill_item>-billscheditem.
        ls_clr_blpl-updkz = gc_updkz_new.
        APPEND ls_clr_blpl TO gs_clrqdoc_infocus-x-crblpl.
      ENDIF.

      CLEAR ls_clr_blpl.



    ENDIF.

    CLEAR lv_change.
    CLEAR: lwa_clrq_itm_new.
    UNASSIGN : <lwa_clrq_itm_old>.
    CLEAR lv_only_bill.
  ENDLOOP.

  "DELETE CLRQIT IF BLPLN IS DELETED
  PERFORM select_clrqblnpl USING gs_blp_doc-y-blpln.
  LOOP AT gs_blp_doc-y-blpln INTO lwa_blpln WHERE updkz = gc_updkz_delete.
    READ TABLE gt_clrqblpl INTO ls_clrqblpl WITH KEY  vbeln = lwa_blpln-vbeln
                                                                posnr = lwa_blpln-posnr
                                                                billitem = lwa_blpln-billitem.
    READ TABLE gs_clrqdoc_infocus-x-critm TRANSPORTING NO FIELDS WITH KEY clrno = ls_clrqblpl-clrno  clrit = ls_clrqblpl-clrit.
    IF sy-subrc = 0.
      LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm FROM sy-tabix.
        IF NOT ( lwa_critm-clrno = ls_clrqblpl-clrno AND lwa_critm-clrit = ls_clrqblpl-clrit ).
          EXIT.
        ELSE.
          READ TABLE gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WITH KEY bill_item = lwa_critm-rtbbinr.
          IF sy-subrc = 0 AND lwa_crbinr-bstat IS NOT INITIAL. "IF ITS Billed dont delete
            DELETE lt_clrit_key_delete WHERE clrit = lwa_critm-clrit.
            EXIT.
          ENDIF.
          lwa_clrit_key-clrno = lwa_critm-clrno.
          lwa_clrit_key-clrit = lwa_critm-clrit.
          lwa_clrit_key-clrsit = lwa_critm-clrsit.
          lwa_clrit_key-clrdit = lwa_critm-clrdit.
          APPEND lwa_clrit_key TO lt_clrit_key_delete.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  IF lt_clrit_key_delete IS NOT INITIAL.
    PERFORM delete_calc_req USING gs_clrqdoc_infocus-x-crhdr-clrno
                                      lt_clrit_key_delete
                                      '1'.
  ENDIF.
ENDFORM.


FORM update_items_on_clrq .

  DATA: lv_ans    TYPE c,
        lv_vbeln  TYPE vbeln_va,
        lv_clrqno TYPE /cgdc/clrqno,
        lv_ques   TYPE string.

  DATA: lv_icon_1 TYPE iconname VALUE 'ICON_CHECKED',
        lv_icon_2 TYPE iconname VALUE 'ICON_CANCEL'.

  CLEAR: lv_ans,
         lv_vbeln,
         lv_clrqno,
         lv_ques.

  lv_vbeln  = gs_clrqdoc_infocus-x-crhdr-vgbel.
  lv_clrqno = gs_clrqdoc_infocus-x-crhdr-clrno.

  IF NOT gs_variables-calc_changed IS INITIAL.
    PERFORM popup_to_confirm_for_on_demand USING TEXT-054
                                                 TEXT-055
                                                 TEXT-065
                                                 lv_icon_1
                                                 TEXT-066
                                                 lv_icon_2
                                                 abap_true
                                           CHANGING lv_ans.
    IF sy-subrc EQ 0 AND lv_ans EQ '1'.
      CLEAR: lv_ans.
      PERFORM document_save USING gs_clrqdoc_infocus
                                  abap_true.
      PERFORM update_calc_req USING lv_vbeln.
    ELSEIF sy-subrc EQ 0 AND lv_ans EQ '2'.
      CLEAR lv_ans.
      PERFORM dequeue_calc_request USING lv_clrqno
                                         gc_enq_mode-write.
      PERFORM update_calc_req USING lv_vbeln.
    ELSE.
      "No action required
    ENDIF.
  ELSE.
    PERFORM dequeue_calc_request USING lv_clrqno
                                       gc_enq_mode-write.
    PERFORM update_calc_req USING lv_vbeln.
  ENDIF.

  PERFORM set_calc_request_doc_infocus USING lv_clrqno.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_calc_manaul_itm
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_calc_manaul_itm .
  CALL FUNCTION '/CGDC/CLRQ_GET_MANU_ITM_DATA'
    EXPORTING
      is_data = /cgdc/s_clrq_man_itm.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.

FORM update_calc_req_background  USING lv_vbeln TYPE vbeln_va.
  TYPES: lty_params    TYPE RANGE OF vbeln_va.
  DATA: lv_jobnumber TYPE tbtcjob-jobcount,
        lv_params    TYPE lty_params,
        lv_jobname   TYPE tbtcjob-jobname,
        ls_jobip     TYPE tbtcstrt,
        ls_jobop     TYPE tbtcstrt,
        lv_message   TYPE string,
        lv_jobrel    TYPE btch0000-char1.

  CONSTANTS: lc_strtyp_d TYPE btcstdttyp VALUE 'D',
             lc_stdt_y   TYPE btch0000-char1 VALUE 'Y'.

  CLEAR: lv_jobnumber,
         lv_params,
         lv_jobname,
         ls_jobip,
         ls_jobop,
         lv_message,
         lv_jobrel.

  lv_params = VALUE lty_params( ( sign = gc_range_tbl_sign-include option = gc_operator-equal low = lv_vbeln ) ).
  CONCATENATE gc_job_name '_' sy-datum sy-uzeit INTO lv_jobname.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_jobname
    IMPORTING
      jobcount         = lv_jobnumber
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.
    SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                              WITH r_crt EQ abap_true
                              VIA JOB lv_jobname NUMBER lv_jobnumber
                              AND RETURN.
    IF sy-subrc EQ 0.
      CALL FUNCTION 'BP_START_DATE_EDITOR'
        EXPORTING
          stdt_dialog                    = lc_stdt_y
          stdt_input                     = ls_jobip
          stdt_opcode                    = 14
        IMPORTING
          stdt_output                    = ls_jobop
        EXCEPTIONS
          fcal_id_not_defined            = 1
          incomplete_last_startdate      = 2
          incomplete_startdate           = 3
          invalid_dialog_type            = 4
          invalid_eventid                = 5
          invalid_opcode                 = 6
          invalid_opmode_name            = 7
          invalid_periodbehaviour        = 8
          invalid_predecessor_jobname    = 9
          last_startdate_in_the_past     = 10
          no_period_data_given           = 11
          no_startdate_given             = 12
          period_and_predjob_no_way      = 13
          period_too_small_for_limit     = 14
          predecessor_jobname_not_unique = 15
          startdate_interval_too_large   = 16
          startdate_in_the_past          = 17
          startdate_is_a_holiday         = 18
          startdate_out_of_fcal_range    = 19
          stdt_before_holiday_in_past    = 20
          unknown_fcal_error_occured     = 21
          no_workday_nr_given            = 22
          invalid_workday_countdir       = 23
          invalid_workday_nr             = 24
          notbefore_stdt_missing         = 25
          workday_starttime_missing      = 26
          no_eventid_given               = 27
          OTHERS                         = 28.
      IF sy-subrc EQ 0.
        IF ls_jobop-startdttyp EQ lc_strtyp_d.
          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              jobcount             = lv_jobnumber
              jobname              = lv_jobname
              sdlstrtdt            = ls_jobop-sdlstrtdt
              sdlstrttm            = ls_jobop-sdlstrttm
            IMPORTING
              job_was_released     = lv_jobrel
            EXCEPTIONS
              cant_start_immediate = 1
              invalid_startdate    = 2
              jobname_missing      = 3
              job_close_failed     = 4
              job_nosteps          = 5
              job_notex            = 6
              lock_failed          = 7
              invalid_target       = 8
              invalid_time_zone    = 9
              OTHERS               = 10.
          IF sy-subrc EQ 0.
            CASE lv_jobrel.
              WHEN abap_true.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i022(/cgdc/clrq) WITH lv_jobname
                                                lv_jobnumber.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '022'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
              WHEN OTHERS.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i023(/cgdc/clrq) WITH lv_jobname
                                                lv_jobnumber
                                           DISPLAY LIKE gc_message_type-information.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '023'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
            ENDCASE.

          ENDIF.
        ELSE.
          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              jobcount             = lv_jobnumber
              jobname              = lv_jobname
              strtimmed            = abap_true
            IMPORTING
              job_was_released     = lv_jobrel
            EXCEPTIONS
              cant_start_immediate = 1
              invalid_startdate    = 2
              jobname_missing      = 3
              job_close_failed     = 4
              job_nosteps          = 5
              job_notex            = 6
              lock_failed          = 7
              invalid_target       = 8
              invalid_time_zone    = 9
              OTHERS               = 10.
          IF sy-subrc EQ 0.
            CASE lv_jobrel.
              WHEN abap_true.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i022(/cgdc/clrq) WITH lv_jobname
                                                lv_jobnumber.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '022'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
              WHEN OTHERS.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE e023(/cgdc/clrq) WITH lv_jobname
                                                lv_jobnumber
                                           DISPLAY LIKE gc_message_type-information.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '023'.
                  gs_messages-msgty = gc_message_type-error.
                  gs_messages-msgv1 = lv_jobname.
                  gs_messages-msgv2 = lv_jobnumber.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
            ENDCASE.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e024(/cgdc/clrq) WITH lv_jobname
                                 DISPLAY LIKE gc_message_type-information.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '024'.
        gs_messages-msgty = gc_message_type-error.
        gs_messages-msgv1 = lv_jobname.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e025(/cgdc/clrq) WITH lv_jobname
                               DISPLAY LIKE gc_message_type-information.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '025'.
      gs_messages-msgty = gc_message_type-error.
      gs_messages-msgv1 = lv_jobname.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_calcgrp_items
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_calcgrp_items USING ls_crrq_hdr TYPE /cgdc/s_clrqhd.

  DATA: lv_kntyp        TYPE kntyp,
        lwa_calc_grp    TYPE /cgdc/s_rtbpcg,
        lv_cds_viewname TYPE string,
        lv_where        TYPE char100,
        lt_whitelist    TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line,
        lt_konp         TYPE konp_t,
        lt_packages     TYPE string_hashed_table.

***DCLM 5764
  PERFORM read_pbp_eligible_items.
***
  CONCATENATE lv_where `VBELN = '` gs_contract_hdr-vbeln `' AND KNTYP = '` lv_kntyp `'`
  INTO  lv_where.

  lv_cds_viewname = gs_rtbp-incds.

  IF lv_cds_viewname IS NOT INITIAL.     " DCLM 5764
***ATC Errors
    INSERT lv_cds_viewname INTO TABLE lt_whitelist.

    TRY.
        lv_cds_viewname = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_cds_viewname whitelist = lt_whitelist ).
        lv_cds_viewname = cl_abap_dyn_prg=>check_table_name_tab( val = lv_cds_viewname packages = lt_packages ).
      CATCH cx_abap_not_in_whitelist.
        EXIT.
      CATCH cx_abap_not_a_table.
        EXIT.
      CATCH cx_abap_not_in_package.
    ENDTRY.
***
    lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Correction
    SELECT knumh , kschl , loevm_ko
      INTO CORRESPONDING FIELDS OF TABLE @lt_konp
      FROM (lv_cds_viewname)
      WHERE (lv_where).

    CLEAR:gt_contract_funding.

    LOOP AT gt_calc_group INTO lwa_calc_grp.
***New Billing Func Related Changes

      PERFORM prep_calc_group_item_data USING lt_konp
                                              lwa_calc_grp.
    ENDLOOP.
***DCLM 5764
  ELSEIF NOT gt_pbp_bpit_per_posnr IS INITIAL
    OR NOT gt_pbp_bpit_per_vbeln IS INITIAL.

    LOOP AT gt_calc_group INTO lwa_calc_grp.
      PERFORM prep_calc_group_item_data USING lt_konp lwa_calc_grp.
    ENDLOOP.

  ENDIF.
***
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_cost_lines_in_parallel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IS_PARALLEL
*&---------------------------------------------------------------------*
FORM update_cost_lines_in_parallel  USING ls_parallel_process TYPE /cgdc/s_parallel_process
                                          lv_vbeln            TYPE vbeln.

  DATA:lt_objnr               TYPE /cgdc/t_objnr,
       lwa_objnr              TYPE /cgdc/s_objnr,
       lt_objnr_temp          TYPE /cgdc/t_objnr,
       lt_prps                TYPE TABLE OF s_prps,
       lv_no_attempt          TYPE num4,
       lv_max_attempts        TYPE num4,
       lv_max_attempt_failure TYPE c,
       lwa_clrqsrc            TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc             TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc1            TYPE /cgdc/s_clrq_cost_keys,
       lt_clrqsrc             TYPE /cgdc/tt_clrq_cost_keys,
       lv_row_count           TYPE sy-tabix.

  PERFORM select_prps CHANGING lt_prps.
  MOVE-CORRESPONDING lt_prps TO lt_objnr.
  IF lt_objnr IS NOT INITIAL.
  ENDIF.
  DO.
    gs_parallel_porcess-total_session_count = gs_parallel_porcess-total_session_count + 1.
    CLEAR lv_no_attempt.
    IF gt_clrqsrc IS INITIAL.
      EXIT.
    ENDIF.
    DO.
      CLEAR: lv_row_count,
             lwa_objnr,
             lt_objnr_temp,
             lt_clrqsrc.

      LOOP AT gt_clrqsrc INTO lwa_clrqsrc .
        lv_row_count = lv_row_count + 1.
        IF lv_row_count  GT gs_variables-cmfrq .
          EXIT.
        ENDIF.
        APPEND lwa_clrqsrc TO lt_clrqsrc.
        DELETE gt_clrqsrc .
        IF lwa_objnr-objnr NE lwa_clrqsrc-objnr.
          READ TABLE lt_objnr_temp
          TRANSPORTING NO FIELDS
          WITH KEY objnr = lwa_clrqsrc-objnr
          BINARY SEARCH.
          IF sy-subrc = 4.
            lwa_objnr-objnr = lwa_clrqsrc-objnr.
            INSERT lwa_objnr INTO lt_objnr_temp INDEX sy-tabix.
          ELSEIF sy-subrc = 8.
            lwa_objnr-objnr = lwa_clrqsrc-objnr.
            APPEND lwa_objnr TO lt_objnr_temp.
          ENDIF.
        ENDIF.

      ENDLOOP.
      CALL FUNCTION '/CGDC/CLRQ_RTB_PRL_PROCESS'
        STARTING NEW TASK gs_parallel_porcess-total_session_count
        DESTINATION IN GROUP ls_parallel_process-server_group
        PERFORMING post_parallel_update_calc_item
        ON END OF TASK
        EXPORTING
          i_vbeln               = lv_vbeln
          it_clrqsrc            = lt_clrqsrc
          it_objnr              = lt_objnr_temp
          i_no_pricing          = gs_variables-no_pricing
          i_commit              = abap_true
          i_update_task         = abap_true
        EXCEPTIONS
          communication_failure = 1
          system_failure        = 2
          resource_failure      = 3
          OTHERS                = 4.
      IF sy-subrc NE 0.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE s012(/cgdc/rtbp) WITH gs_parallel_porcess-total_session_count
                                        lv_no_attempt.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_rtbp_msg_cls.
          gs_messages-msgnr = '012'.
          gs_messages-msgty = gc_message_type-succes.
          gs_messages-msgv1 = gs_parallel_porcess-total_session_count.
          gs_messages-msgv2 = lv_no_attempt.
          APPEND gs_messages TO gt_messages.
        ENDIF.

        lv_no_attempt = lv_no_attempt + 1.
        IF lv_no_attempt GE ls_parallel_process-retrie.
          lv_max_attempt_failure = abap_true.
          EXIT.
        ELSE.
          WAIT UP TO ls_parallel_process-max_wait SECONDS.
        ENDIF.

      ELSE.
        gs_parallel_porcess-active_session_count = gs_parallel_porcess-active_session_count + 1.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE s013(/cgdc/rtbp) WITH gs_parallel_porcess-total_session_count.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_rtbp_msg_cls.
          gs_messages-msgnr = '013'.
          gs_messages-msgty = gc_message_type-succes.
          gs_messages-msgv1 = gs_parallel_porcess-total_session_count.
          APPEND gs_messages TO gt_messages.
        ENDIF.
        EXIT.
      ENDIF.
    ENDDO.

    IF NOT lv_max_attempt_failure IS INITIAL.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE s011(/cgdc/rtbp).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_rtbp_msg_cls.
        gs_messages-msgnr = '011'.
        gs_messages-msgty = gc_message_type-succes.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      EXIT.
    ENDIF.

    WAIT UNTIL gs_parallel_porcess-active_session_count LT ls_parallel_process-max_process.
  ENDDO.
  WAIT UNTIL gs_parallel_porcess-active_session_count EQ 0.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form update_cost_lines_in_parallel_01
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IS_PARALLEL
*&---------------------------------------------------------------------*
"replacement routine for Configure sources 5144.
FORM update_lines_in_parallel_01  USING ls_parallel_process TYPE /cgdc/s_parallel_process
                                        lv_vbeln            TYPE vbeln
                                        ls_src_dyn          TYPE ty_src_data.

  DATA:lt_objnr               TYPE /cgdc/t_objnr,
       lwa_objnr              TYPE /cgdc/s_objnr,
       lt_objnr_temp          TYPE /cgdc/t_objnr,
       lt_prps                TYPE TABLE OF s_prps,
       lv_no_attempt          TYPE num4,
       lv_max_attempts        TYPE num4,
       lv_max_attempt_failure TYPE c,
       lwa_clrqsrc            TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc             TYPE /cgdc/s_clrq_cost_keys,
       ls_clrqsrc1            TYPE /cgdc/s_clrq_cost_keys,
       lt_clrqsrc             TYPE /cgdc/tt_clrq_cost_keys,
       lv_row_count           TYPE sy-tabix,
       lv_memory_id           TYPE char20,
       lv_memory_id_3         TYPE char22.

  TYPES: BEGIN OF lty_idx,
           idx TYPE i,
         END OF lty_idx,

         ltt_idx TYPE STANDARD TABLE OF lty_idx.

  DATA: lt_del_idx TYPE ltt_idx,
        lv_offset  TYPE i VALUE 0,
        lv_max_wp  TYPE i,
        lv_free_wp TYPE i.

  DATA: lt_source TYPE REF TO data.

  FIELD-SYMBOLS: <lt_table>   TYPE table,
                 <lt_src_tab> TYPE table.

  ASSIGN ls_src_dyn-data->* TO <lt_src_tab>.
  IF <lt_src_tab> IS ASSIGNED.

    IF gs_wp IS INITIAL.
      " check no. of available wp
      CALL FUNCTION 'SPBT_INITIALIZE'
        EXPORTING
          group_name                     = ls_parallel_process-server_group
        IMPORTING
          max_pbt_wps                    = gs_wp-max_wp
          free_pbt_wps                   = gs_wp-free_wp
        EXCEPTIONS
          invalid_group_name             = 1
          internal_error                 = 2
          pbt_env_already_initialized    = 3
          currently_no_resources_avail   = 4
          no_pbt_resources_found         = 5
          cant_init_different_pbt_groups = 6
          OTHERS                         = 7.
      IF sy-subrc = 3.
        "PBT initialized already, check free WP
        CALL FUNCTION 'SPBT_GET_CURR_RESOURCE_INFO' "try to get free work processes
          IMPORTING
            free_pbt_wps                = gs_wp-free_wp
          EXCEPTIONS
            internal_error              = 1
            pbt_env_not_initialized_yet = 2
            OTHERS                      = 3.
        IF sy-subrc <> 0.
          "process sequentially
          gs_wp-free_wp = 0.
        ENDIF.
      ELSEIF sy-subrc <> 0.
        "process sequentially
        gs_wp-free_wp = 0.
      ENDIF.
    ENDIF.

    DO.
      gs_parallel_porcess-total_session_count = gs_parallel_porcess-total_session_count + 1.
      CLEAR lv_no_attempt.
      IF <lt_src_tab> IS INITIAL.
        EXIT.
      ENDIF.
      DO.
        CLEAR: lv_row_count,
               lt_del_idx,
               lwa_objnr,
               lt_objnr_temp,
               lt_clrqsrc.

        "++ SOC export to DB as can't pass reference to RFC call.

        "replace with guid
        TRY.
            cl_system_uuid=>if_system_uuid_static~create_uuid_c22( RECEIVING uuid = DATA(lv_guid) ).
          CATCH cx_uuid_error INTO DATA(lo_expn).
        ENDTRY.
        lv_memory_id_3 = lv_guid.

        "get CDS view name
        DATA(ls_view) = /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc( iv_rtbsrc = CONV #( ls_src_dyn-source ) ).
        DATA(lv_cds_name) = ls_view-cds_view.

        "create data of CDS type.
        CREATE DATA lt_source TYPE TABLE OF (lv_cds_name).
        ASSIGN lt_source->* TO <lt_table>.
        IF <lt_table> IS ASSIGNED.
          LOOP AT <lt_src_tab> ASSIGNING FIELD-SYMBOL(<lfs_src_tab>).
            lv_row_count = lv_row_count + 1.
            IF lv_row_count GT gs_variables-cmfrq .                "limit processing to block size.
              EXIT.
            ENDIF.

            APPEND <lfs_src_tab> TO <lt_table>.

            "Initialize deletion idx table
            APPEND INITIAL LINE TO lt_del_idx ASSIGNING FIELD-SYMBOL(<lfs_idx>).
            <lfs_idx>-idx = lv_row_count.
          ENDLOOP.

          "export data
          EXPORT <lt_table> TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id_3.

        ENDIF.
        "++ EOC export to DB as can't pass reference to RFC call.

        CALL FUNCTION '/CGDC/CLRQ_RTB_PRL_PROCESS'
          STARTING NEW TASK gs_parallel_porcess-total_session_count
          DESTINATION IN GROUP ls_parallel_process-server_group
          PERFORMING post_parallel_update_calc_item
          ON END OF TASK
          EXPORTING
            i_vbeln               = lv_vbeln
            i_no_pricing          = gs_variables-no_pricing
            i_commit              = abap_true
            i_update_task         = abap_true
            i_memory_id           = lv_memory_id_3
            i_rtb_src             = CONV /cgdc/rtbsource( ls_src_dyn-source )
            i_rtbpn               = CONV /cgdc/rtbpn( ls_src_dyn-/cgdc/rtbpn )
          EXCEPTIONS
            communication_failure = 1
            system_failure        = 2
            resource_failure      = 3
            OTHERS                = 4.
        IF sy-subrc NE 0.

          "delete data from DB index as FM call failed. Data will be reinitialized for next attempt.
          DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id_3.

          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE s012(/cgdc/rtbp) WITH gs_parallel_porcess-total_session_count
                                          lv_no_attempt.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_rtbp_msg_cls.
            gs_messages-msgnr = '012'.
            gs_messages-msgty = gc_message_type-succes.
            gs_messages-msgv1 = gs_parallel_porcess-total_session_count.
            gs_messages-msgv2 = lv_no_attempt.
            APPEND gs_messages TO gt_messages.
          ENDIF.

          lv_no_attempt = lv_no_attempt + 1.
          IF lv_no_attempt GE ls_parallel_process-retrie.
            lv_max_attempt_failure = abap_true.
            EXIT.
          ELSE.
            WAIT UP TO ls_parallel_process-max_wait SECONDS.
          ENDIF.

        ELSE.
          gs_parallel_porcess-active_session_count = gs_parallel_porcess-active_session_count + 1.

          "++ SOC delete processed records from source tab
          lv_offset = 0.
          LOOP AT lt_del_idx ASSIGNING <lfs_idx>.
            DATA(lv_idx) = <lfs_idx>-idx - lv_offset.
            DELETE <lt_src_tab> INDEX lv_idx.
            lv_offset += 1.             "Table line idxs change after deletion so use offset
          ENDLOOP.
          CLEAR: lt_del_idx.            "ready for next run
          "++ EOC delete processed records from source tab


          IF gs_variables-call_from_ui EQ abap_false.
            MESSAGE s013(/cgdc/rtbp) WITH gs_parallel_porcess-total_session_count.
          ELSE.
            CLEAR gs_messages.
            gs_messages-msgid = gc_rtbp_msg_cls.
            gs_messages-msgnr = '013'.
            gs_messages-msgty = gc_message_type-succes.
            gs_messages-msgv1 = gs_parallel_porcess-total_session_count.
            APPEND gs_messages TO gt_messages.
          ENDIF.
          EXIT.
        ENDIF.
      ENDDO.

      IF NOT lv_max_attempt_failure IS INITIAL.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE s011(/cgdc/rtbp).
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_rtbp_msg_cls.
          gs_messages-msgnr = '011'.
          gs_messages-msgty = gc_message_type-succes.
          APPEND gs_messages TO gt_messages.
        ENDIF.
        EXIT.
      ENDIF.

      WAIT UNTIL gs_parallel_porcess-active_session_count LT gs_wp-free_wp. "--ls_parallel_process-max_process.
    ENDDO.
    WAIT UNTIL gs_parallel_porcess-active_session_count EQ 0.

    CLEAR /cgdc/cl_be_helper=>mv_parallel_process_enabled.

  ENDIF.
ENDFORM.

*-- Replacement routine for 5144: configured sources integration
*&---------------------------------------------------------------------*
*& Form update_cost_line_prl_bcg01
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> I_MEMORY_ID
*&      --> I_VBELN
*&---------------------------------------------------------------------*
FORM update_cost_line_prl_bcg01  USING    lv_memory_id TYPE char22
                                          lv_rtb_src   TYPE /cgdc/rtbsource
                                          lv_rtbpn     TYPE /cgdc/rtbpn
                                          lv_vbeln     TYPE vbeln.

  DATA: lt_objnr_temp TYPE /cgdc/t_objnr,
        lv_subrc      TYPE sy-subrc,
        lt_clrqsrc    TYPE /cgdc/tt_clrq_cost_keys,

        lt_source     TYPE REF TO data,
        lv_viewname   TYPE viewname.

  FIELD-SYMBOLS: <lt_table> TYPE table.

  FIELD-SYMBOLS <lt_src_data> TYPE ANY TABLE .
  FIELD-SYMBOLS <lwa_srcdata> TYPE ty_src_data.
  DATA: lwa_objnr   TYPE /cgdc/s_objnr,
        lt_clrq_doc TYPE TABLE OF /cgdc/s_clrq_doc.
  gs_variables-bg_prl_run = abap_true.
  "import

  "get cds view
  DATA(ls_view) = /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc( lv_rtb_src ).
  DATA(lv_cdsview_name) = ls_view-cds_view.

  IF lv_cdsview_name IS NOT INITIAL.
    CREATE DATA lt_source TYPE TABLE OF (lv_cdsview_name).
    ASSIGN lt_source->* TO <lt_table>.
    IF <lt_table> IS ASSIGNED.
      IMPORT <lt_table> FROM DATABASE  /cgdc/_clrq_indx(cr) ID lv_memory_id.
    ENDIF.

    DELETE FROM DATABASE /cgdc/_clrq_indx(cr) ID  lv_memory_id.

    APPEND INITIAL LINE TO gt_src_dyn ASSIGNING <lwa_srcdata>.
    <lwa_srcdata>-/cgdc/rtbpn = lv_rtbpn.
    <lwa_srcdata>-source      = lv_rtb_src.
    CREATE DATA <lwa_srcdata>-data  TYPE TABLE OF (lv_cdsview_name).
    ASSIGN <lwa_srcdata>-data->* TO <lt_src_data>.

    <lt_src_data> = <lt_table>.

    PERFORM modify_source_data CHANGING <lt_src_data>.
    PERFORM read_contract_details USING lv_vbeln. "Read Contract Details
    PERFORM prepare_calreqhdr USING lv_vbeln
                                    ' '
                                    ''.
    CHECK lv_subrc IS INITIAL.

    PERFORM prepare_calc_req_item_01.
    EXPORT gt_bg_crt_keys TO DATABASE /cgdc/_clrq_indx(cr) ID lv_memory_id. "export recetly made Items
    CLEAR gt_bg_crt_keys.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_bill_pre_grid_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_bill_pre_grid_data .
  DATA : lv_modified TYPE c,
         lv_valid    TYPE c.

  CHECK gs_variables-document_mode NE gc_mode_display.

  IF go_grid_calc_req_bill_pre IS BOUND.

    go_grid_calc_req_bill_pre->check_changed_data(
      IMPORTING
        e_valid = lv_valid
    ).

    IF lv_valid IS INITIAL .
      CLEAR ok_code.
      EXIT.
    ENDIF.
    PERFORM update_bill_pre_data USING gt_bill_pre_mod_rows
                         CHANGING gs_variables-calc_changed
                                  gs_variables-refersh_bill_bp_grid .
    CLEAR: lv_valid, gt_bill_pre_mod_rows.   .

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_bill_pre_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GT_BILL_PRE_MOD_ROWS
*&      <-- GS_VARIABLES_DATA_CHANGED
*&      <-- GS_VARIABLES_REFRESH_RTBCLNMCS
*&---------------------------------------------------------------------*
FORM update_bill_pre_data  USING    lt_mod_rows TYPE lvc_t_modi
                           CHANGING lv_data_changed
                                    lv_refresh_grid.

  DATA : lv_tabix          TYPE sy-tabix,
         lv_date           TYPE datum,
         lwa_mod_row       TYPE lvc_s_modi,
         lwa_clrqbi        TYPE /cgdc/s_clrqbi,
         lwa_bilitty       TYPE /cgdc/t_bilitty,
         lt_clrq_err       TYPE t_clrq_err,
         lwa_clrqpit       TYPE /cgdc/s_clrqpit,
         lwa_parallel_proc TYPE /cgdc/s_parallel_process,
         lv_clrno          TYPE /cgdc/clrqno,
         lt_bilitty        TYPE TABLE OF  /cgdc/t_bilitty,
         ls_bilitty        TYPE /cgdc/t_bilitty,
         lwa_clrq_err      TYPE /cgdc/t_clrq_err.

  FIELD-SYMBOLS : <bitype>             TYPE /cgdc/_clrqbi-bitype,
                  <lv_clrno>           TYPE /cgdc/clrqno,
                  <lv_rtbbinr>         TYPE /cgdc/billitem_guid,
                  <lv_bilmatnr>        TYPE /cgdc/_clrqbi-bilmatnr,
                  <lv_pspnr>           TYPE /cgdc/ps_psp_pnr,
                  <lv_bstat>           TYPE /cgdc/_clrqbi-bstat,
                  <lv_faksp>           TYPE /cgdc/_clrqbi-faksp,
                  <lv_bldat>           TYPE /cgdc/clrq_bldat,
                  <lv_pop_end>         TYPE /cgdc/pop_end,
                  <lv_pop_start>       TYPE /cgdc/pop_start,
                  <lv_exdat>           TYPE /cgdc/xrtdate,
                  <lwa_crbinr>         TYPE /cgdc/s_clrqbi,
                  <lwa_clrqit>         TYPE /cgdc/s_clrqit,
                  <lwa_clrqit_fcat>    TYPE /cgdc/s_clrqit_fcat,
                  <lwa_clrqbi_fcat>    TYPE /cgdc/s_clrqbi_fcat,
                  <lwa_bill_data_page> TYPE any,
                  <lwa_bill_data>      TYPE any,
                  <lv_srno>            TYPE any,
                  <lwa_data>           TYPE data.

*****************Begin - Logic to check POP End date & Billing date**************************
  IF NOT lt_mod_rows IS INITIAL.

    SELECT * FROM /cgdc/t_clrq_err
           INTO TABLE lt_clrq_err.
    SELECT *
      FROM /CGDC/t_BILITTY
      INTO table lt_bilitty.
      CLEAR lwa_mod_row.
      LOOP AT lt_mod_rows INTO lwa_mod_row WHERE fieldname = 'POP_ENDDT'
                                           OR    fieldname = 'POP_STDT'
                                           OR    fieldname = 'BLDAT'
                                           OR    fieldname = 'EXDAT'
                                           OR    fieldname = 'FAKSP'.
        IF <lwa_data> IS ASSIGNED.
          UNASSIGN <lwa_data>.
        ENDIF.

        READ TABLE gt_bill_pre_data_page
        ASSIGNING <lwa_bill_data_page>
        INDEX lwa_mod_row-row_id.

        ASSIGN COMPONENT 'SRNO' OF STRUCTURE <lwa_bill_data_page> TO <lv_srno>.

        READ TABLE gt_bill_pre_data ASSIGNING
        <lwa_bill_data>
        WITH KEY ('SRNO') = <lv_srno> .

        IF sy-subrc IS INITIAL.
          ASSIGN COMPONENT 'BITYPE'      OF STRUCTURE <lwa_bill_data> TO <bitype>.
          ASSIGN COMPONENT 'BILL_ITEM'   OF STRUCTURE <lwa_bill_data> TO <lv_rtbbinr>.
          ASSIGN COMPONENT 'CLRNO'       OF STRUCTURE <lwa_bill_data> TO <lv_clrno>.
          ASSIGN COMPONENT 'BILMATNR'    OF STRUCTURE <lwa_bill_data> TO <lv_bilmatnr>.
          ASSIGN COMPONENT 'PS_PSP_PNR'  OF STRUCTURE <lwa_bill_data> TO <lv_pspnr>.
          ASSIGN COMPONENT 'POP_ENDDT'   OF STRUCTURE <lwa_bill_data_page> TO <lv_pop_end>.
          ASSIGN COMPONENT 'POP_STDT'    OF STRUCTURE <lwa_bill_data_page> TO <lv_pop_start>.
          ASSIGN COMPONENT 'BLDAT'       OF STRUCTURE <lwa_bill_data_page> TO <lv_bldat>.
          ASSIGN COMPONENT 'EXDAT'       OF STRUCTURE <lwa_bill_data_page> TO <lv_exdat>.

          CLEAR lv_clrno.
          lv_clrno = gs_clrqdoc_infocus-x-crhdr-clrno.

          IF <lwa_crbinr> IS ASSIGNED.
            UNASSIGN <lwa_crbinr>.
          ENDIF.

          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                          bill_item = <lv_rtbbinr>.
          IF sy-subrc EQ 0.
            /cgdc/cl_clrq_process=>validate_popend_date(
              EXPORTING
                iv_vbeln        = <lwa_crbinr>-vgbel
                iv_posnr        = <lwa_crbinr>-vgpos
              CHANGING
                cv_pop_end_date = <lv_pop_end> ).
          ENDIF.

          "Get the billing item type
          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                          bill_item = <lv_rtbbinr>
                                          bstat     = space.
          IF sy-subrc NE 0.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i086(/cgdc/clrq) WITH <lv_rtbbinr>.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '086'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = <lv_rtbbinr>.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            RETURN.
          ENDIF.
          READ TABLE lt_bilitty WITH KEY bilitmtyp = <bitype> INTO ls_bilitty.
          IF sy-subrc = 0 AND ls_bilitty-bilcreate_type = 'MANU'.
            IF <lwa_crbinr>-bldat NE <lv_bldat>.
              IF <lv_pop_end> GT <lv_bldat> OR <lv_bldat> LT sy-datum.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i073(/cgdc/clrq) WITH <lv_bldat>.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '073'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = <lv_bldat>.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
                RETURN.
              ENDIF.
            ENDIF.
          ENDIF.
          IF <lv_pop_start> GT <lv_pop_end>.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i109(/cgdc/clrq) WITH <lv_pop_start>
                                            <lv_pop_end>.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '109'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = <lv_pop_start>.
              gs_messages-msgv2 = <lv_pop_end>.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            RETURN.
          ENDIF.

          IF <lwa_crbinr> IS ASSIGNED.
            UNASSIGN <lwa_crbinr>.
          ENDIF.
          "Get the billing item type
          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                          bill_item = <lv_rtbbinr>.
          IF sy-subrc EQ 0.
            IF <lv_pop_end> NE <lwa_crbinr>-pop_enddt.
              LOOP AT gs_clrqdoc_infocus-x-crbinr
              INTO lwa_clrqbi WHERE clrno      EQ <lv_clrno>
                              AND   bitype     EQ <lwa_crbinr>-bitype
                              AND   bill_item  NE <lwa_crbinr>-bill_item
                              AND   bilmatnr   EQ <lv_bilmatnr>
                              AND   ps_psp_pnr EQ <lv_pspnr>
                              AND   bstat      EQ space
                              AND   pop_stdt   LE <lv_pop_end>
                              AND   pop_enddt  GE <lv_pop_end>.       "++DCLM 6352 date lies in interval
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i072(/cgdc/clrq) WITH lwa_clrqbi-bill_item.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '072'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lwa_clrqbi-bill_item.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
                RETURN.
              ENDLOOP.

              CLEAR lwa_bilitty.
              READ TABLE gt_bilitty INTO lwa_bilitty
                                    WITH KEY bilitmtyp = <lwa_crbinr>-bitype.
              IF sy-subrc EQ 0.
                PERFORM update_calc_req_items_binr USING <lv_pop_end>
                                                         <lv_clrno>
                                                         <lv_rtbbinr>
                                                         <lwa_bill_data_page>
                                                         lwa_bilitty
                                                         lt_clrq_err.
              ENDIF.
              gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
              gs_clrqdoc_infocus-updkz = abap_true.
            ENDIF.

            IF <lv_pop_start> NE <lwa_crbinr>-pop_stdt.
              CLEAR: lwa_clrqbi.
              LOOP AT gs_clrqdoc_infocus-x-crbinr
              INTO lwa_clrqbi WHERE clrno      EQ <lv_clrno>
                              AND   bitype     EQ <lwa_crbinr>-bitype
                              AND   bill_item  NE <lwa_crbinr>-bill_item
                              AND   bilmatnr   EQ <lv_bilmatnr>
                              AND   ps_psp_pnr EQ <lv_pspnr>
                              AND   bstat      EQ space
                              AND   pop_stdt   LE <lv_pop_start>
                              AND   pop_enddt  GE <lv_pop_start>.
                IF gs_variables-call_from_ui EQ abap_false.
                  MESSAGE i108(/cgdc/clrq) WITH lwa_clrqbi-bill_item.
                ELSE.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '108'.
                  gs_messages-msgty = gc_message_type-information.
                  gs_messages-msgv1 = lwa_clrqbi-bill_item.
                  APPEND gs_messages TO gt_messages.
                ENDIF.
                RETURN.
              ENDLOOP.

              <lwa_crbinr>-pop_stdt  = <lv_pop_start>.
              <lwa_crbinr>-pop_enddt = <lv_pop_end>.
              <lwa_crbinr>-bldat     = <lv_bldat>.
              <lwa_crbinr>-exdat     = <lv_exdat>.
              <lwa_crbinr>-updkz     = gc_updkz_update.

              IF <lwa_clrqit> IS ASSIGNED.
                UNASSIGN <lwa_clrqit>.
              ENDIF.
              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                                 WHERE clrno   EQ <lv_clrno>
                                                 AND   rtbbinr EQ <lv_rtbbinr>.
                <lwa_clrqit>-bldat_bi  = <lv_bldat>.
                <lwa_clrqit>-exdat     = <lv_exdat>.
                <lwa_clrqit>-updkz     = gc_updkz_update.
              ENDLOOP.

              gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
              gs_clrqdoc_infocus-updkz = abap_true.
            ENDIF.

            IF <lv_bldat> NE <lwa_crbinr>-bldat.
              <lwa_crbinr>-bldat     = <lv_bldat>.
              <lwa_crbinr>-pop_enddt = <lv_pop_end>.
              <lwa_crbinr>-pop_stdt  = <lv_pop_start>.
              <lwa_crbinr>-exdat     = <lv_exdat>.
              <lwa_crbinr>-updkz = gc_updkz_update.

              IF <lwa_clrqit> IS ASSIGNED.
                UNASSIGN <lwa_clrqit>.
              ENDIF.
              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                                 WHERE clrno   EQ <lv_clrno>
                                                 AND   rtbbinr EQ <lv_rtbbinr>.
                <lwa_clrqit>-bldat_bi  = <lv_bldat>.
                <lwa_clrqit>-exdat     = <lv_exdat>.
                <lwa_clrqit>-updkz     = gc_updkz_update.
              ENDLOOP.

              gs_clrqdoc_infocus-updkz = abap_true.
            ENDIF.

            IF <lv_exdat> NE <lwa_crbinr>-exdat.
              <lwa_crbinr>-pop_stdt  = <lv_pop_start>.
              <lwa_crbinr>-pop_enddt = <lv_pop_end>.
              <lwa_crbinr>-bldat     = <lv_bldat>.
              <lwa_crbinr>-exdat     = <lv_exdat>.
              <lwa_crbinr>-updkz     = gc_updkz_update.

              REFRESH: gt_clrqpit.
              IF <lwa_clrqit> IS ASSIGNED.
                UNASSIGN <lwa_clrqit>.
              ENDIF.
              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit>
                                                 WHERE clrno   EQ <lv_clrno>
                                                 AND   rtbbinr EQ <lv_rtbbinr>.
                <lwa_clrqit>-bldat_bi  = <lv_bldat>.
                <lwa_clrqit>-exdat     = <lv_exdat>.
                <lwa_clrqit>-updkz     = gc_updkz_update.

                CLEAR lwa_clrq_err.
                IF NOT gs_rtbp-pnptb IS INITIAL.
                  READ TABLE lt_clrq_err INTO lwa_clrq_err
                  WITH KEY msgid    = '130'
                           msgclass = gc_clrq_msg_cls.
                  IF sy-subrc = 0.
                    <lwa_clrqit>-msg_code = lwa_clrq_err-msg_code.
                    <lwa_clrqit>-msg_icon = '@09@'.
                  ENDIF.
                ENDIF.

                IF <lwa_clrqit>-clrsit NE gc_sub_main.
                  CLEAR lwa_clrqpit.
                  lwa_clrqpit-mandt  = sy-mandt.
                  lwa_clrqpit-clrno  = <lwa_clrqit>-clrno.
                  lwa_clrqpit-clrit  = <lwa_clrqit>-clrit.
                  lwa_clrqpit-clrsit = <lwa_clrqit>-clrsit.
                  lwa_clrqpit-updkz  = gc_updkz_new.
                  APPEND lwa_clrqpit TO gt_clrqpit.
                ENDIF.

                IF <lwa_clrqit_fcat> IS ASSIGNED.
                  UNASSIGN <lwa_clrqit_fcat>.
                ENDIF.
                READ TABLE gt_calc_req_items_fcat ASSIGNING <lwa_clrqit_fcat>
                WITH KEY clrno  = <lwa_clrqit>-clrno
                         clrit  = <lwa_clrqit>-clrit
                         clrsit = <lwa_clrqit>-clrsit
                         clrdit = <lwa_clrqit>-clrdit.
                IF sy-subrc = 0.
                  <lwa_clrqit_fcat>-bldat_bi  = <lv_bldat>.
                  <lwa_clrqit_fcat>-exdat     = <lv_exdat>.
                  <lwa_clrqit_fcat>-pop_stdt  = <lv_pop_start>.
                  <lwa_clrqit_fcat>-pop_enddt = <lv_pop_end>.

                  IF NOT lwa_clrq_err IS INITIAL.
                    <lwa_clrqit_fcat>-msg_code = lwa_clrq_err-msg_code.
                    <lwa_clrqit_fcat>-msg_icon = '@09@'.
                  ENDIF.

                ENDIF.
              ENDLOOP.

              IF <lwa_clrqbi_fcat> IS ASSIGNED.
                UNASSIGN <lwa_clrqbi_fcat>.
              ENDIF.
              READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_clrqbi_fcat>
              WITH KEY srno = <lv_srno>.
              IF sy-subrc = 0.
                <lwa_clrqbi_fcat>-bldat     = <lv_bldat>.
                <lwa_clrqbi_fcat>-exdat     = <lv_exdat>.
                <lwa_clrqbi_fcat>-pop_stdt  = <lv_pop_start>.
                <lwa_clrqbi_fcat>-pop_enddt = <lv_pop_end>.
              ENDIF.

              IF <lwa_clrqbi_fcat> IS ASSIGNED.
                UNASSIGN <lwa_clrqbi_fcat>.
              ENDIF.
              READ TABLE gt_bill_pre_data ASSIGNING <lwa_clrqbi_fcat>
              WITH KEY srno = <lv_srno>.
              IF sy-subrc = 0.
                <lwa_clrqbi_fcat>-bldat     = <lv_bldat>.
                <lwa_clrqbi_fcat>-exdat     = <lv_exdat>.
                <lwa_clrqbi_fcat>-pop_stdt  = <lv_pop_start>.
                <lwa_clrqbi_fcat>-pop_enddt = <lv_pop_end>.
              ENDIF.

              gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
              gs_clrqdoc_infocus-updkz = abap_true.

              IF NOT gt_clrqpit IS INITIAL.
                IF NOT gs_rtbp-pnptb IS INITIAL.
                  CALL FUNCTION '/CGDC/CLRQ_CLRQPRS_UPDATE_DB' IN UPDATE TASK
                    EXPORTING
                      it_clrqpit = gt_clrqpit.
                  IF sy-subrc <> 0.
                  ENDIF.
                ELSE.
                  CLEAR lwa_parallel_proc.
                  CALL FUNCTION '/CGDC/CLRQ_REPRICE_UPDATE'
                    EXPORTING
                      iv_rp_flag          = space
                      i_vbeln             = gs_clrqdoc_infocus-x-crhdr-vgbel
                      is_parallel_process = lwa_parallel_proc.
                ENDIF.
              ENDIF.
              gs_variables-refersh_bill_bp_grid        = abap_true.
              gs_variables-refresh_calc_req_items_grid = abap_true.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
*******************End - Logic to check POP Start date, End date & Billing date*********************
    IF gs_clrqdoc_infocus-x-critm IS INITIAL.
      IF NOT gs_clrqdoc_infocus-x-critm_key IS INITIAL.
        SELECT * FROM /cgdc/_clrqit
        INTO CORRESPONDING FIELDS OF TABLE gs_clrqdoc_infocus-x-critm
        FOR ALL ENTRIES IN gs_clrqdoc_infocus-x-critm_key
        WHERE clrno = gs_clrqdoc_infocus-x-critm_key-clrno
        AND   clrit = gs_clrqdoc_infocus-x-critm_key-clrit.
        ELSE.
          SELECT * FROM /cgdc/_clrqit
          INTO CORRESPONDING FIELDS OF TABLE gs_clrqdoc_infocus-x-critm
          WHERE clrno = lv_clrno.
          ENDIF.

        ENDIF.
        SORT gs_clrqdoc_infocus-x-crbinr.
        LOOP AT lt_mod_rows INTO lwa_mod_row WHERE NOT ( fieldname = 'POP_ENDDT'
                                                   OR    fieldname = 'POP_STDT'
                                                   OR    fieldname = 'BLDAT' ).
          lv_tabix = sy-tabix.

          READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_bill_data_page> INDEX lwa_mod_row-row_id.
          ASSIGN COMPONENT 'SRNO' OF STRUCTURE <lwa_bill_data_page> TO <lv_srno>.
          READ TABLE gt_bill_pre_data ASSIGNING <lwa_bill_data> WITH KEY ('SRNO') = <lv_srno> .
          LOOP AT gt_bill_pre_data ASSIGNING <lwa_data> FROM <lv_srno> .
            CLEAR lv_tabix.

            ASSIGN COMPONENT 'CLRNO'     OF STRUCTURE <lwa_data> TO <lv_clrno>.
            ASSIGN COMPONENT 'BILMATNR'  OF STRUCTURE <lwa_data> TO <lv_bilmatnr>.
            ASSIGN COMPONENT 'BSTAT'     OF STRUCTURE <lwa_data> TO <lv_bstat>.
            ASSIGN COMPONENT 'FAKSP'     OF STRUCTURE <lwa_data> TO <lv_faksp>.
            ASSIGN COMPONENT 'POP_ENDDT' OF STRUCTURE <lwa_data> TO <lv_pop_end>.
            ASSIGN COMPONENT 'BLDAT'  OF STRUCTURE <lwa_data> TO <lv_bldat>.
            ASSIGN COMPONENT 'BILL_ITEM'   OF STRUCTURE <lwa_data> TO <lv_rtbbinr>.
            IF <lv_clrno> IS ASSIGNED AND <lv_bilmatnr> IS ASSIGNED
              AND <lv_bstat> IS ASSIGNED.
              READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lwa_crbinr>
                                                       WITH KEY clrno     = <lv_clrno>
                                                                bill_item = <lv_rtbbinr>
                                                                bilmatnr  = <lv_bilmatnr>
                                                                bstat     = <lv_bstat>.
              IF sy-subrc = 0.
                <lwa_crbinr>-faksp     = <lv_faksp>.
                <lwa_crbinr>-pop_enddt = <lv_pop_end>.
                <lwa_crbinr>-bldat     = <lv_bldat>.
                <lwa_crbinr>-updkz     = gc_updkz_update.
                IF <lwa_clrqit> IS ASSIGNED.
                  UNASSIGN <lwa_clrqit>.
                ENDIF.
                LOOP AT gs_clrqdoc_infocus-x-critm
                ASSIGNING <lwa_clrqit> WHERE clrno   EQ <lwa_crbinr>-clrno
                                       AND   rtbbinr EQ <lwa_crbinr>-bill_item.

                  <lwa_clrqit>-bldat_bi  = <lv_bldat>.
                  <lwa_clrqit>-updkz     = gc_updkz_update.
                ENDLOOP.
                gs_variables-calc_changed = abap_true.
                gs_variables-refersh_bill_bp_grid  = abap_true.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDLOOP.

ENDFORM.
FORM update_calc_req_background_ui  USING lv_vbeln TYPE vbeln_va lv_flag TYPE char1.
  TYPES: lty_params    TYPE RANGE OF vbeln_va.
  DATA: lv_jobnumber TYPE tbtcjob-jobcount,
        lv_params    TYPE lty_params,
        lv_jobname   TYPE tbtcjob-jobname,
        ls_jobip     TYPE tbtcstrt,
        ls_jobop     TYPE tbtcstrt,
        lv_message   TYPE string,
        lv_jobrel    TYPE btch0000-char1.

  CLEAR: lv_jobnumber,
         lv_params,
         lv_jobname,
         ls_jobip,
         ls_jobop,
         lv_message,
         lv_jobrel.

  lv_params = VALUE lty_params( ( sign = gc_range_tbl_sign-include option = gc_operator-equal low = lv_vbeln ) ).
  CONCATENATE gc_job_name '_' sy-datum sy-uzeit INTO lv_jobname.

  CALL FUNCTION 'JOB_OPEN'
    EXPORTING
      jobname          = lv_jobname
    IMPORTING
      jobcount         = lv_jobnumber
    EXCEPTIONS
      cant_create_job  = 1
      invalid_job_data = 2
      jobname_missing  = 3
      OTHERS           = 4.
  IF sy-subrc EQ 0.
    IF lv_flag IS INITIAL.
      SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                                WITH r_crt EQ abap_true
                                VIA JOB lv_jobname NUMBER lv_jobnumber
                                AND RETURN.
    ELSE.
      SUBMIT /cgdc/clrq_process WITH so_vbeln IN lv_params
                           WITH r_crt   = ''
                           WITH r_reprc = ''
                           WITH r_repfl = abap_true
                           VIA JOB lv_jobname NUMBER lv_jobnumber
                           AND RETURN.
    ENDIF.
    IF sy-subrc EQ 0.

      ls_jobop-sdlstrtdt = sy-datum.
      ls_jobop-sdlstrttm = sy-timlo + 000060.
      CALL FUNCTION 'JOB_CLOSE'
        EXPORTING
          jobcount             = lv_jobnumber
          jobname              = lv_jobname
          strtimmed            = abap_true
        IMPORTING
          job_was_released     = lv_jobrel
        EXCEPTIONS
          cant_start_immediate = 1
          invalid_startdate    = 2
          jobname_missing      = 3
          job_close_failed     = 4
          job_nosteps          = 5
          job_notex            = 6
          lock_failed          = 7
          invalid_target       = 8
          invalid_time_zone    = 9
          OTHERS               = 10.
      IF sy-subrc EQ 0.
        CASE lv_jobrel.
          WHEN abap_true.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i022(/cgdc/clrq) WITH lv_jobname
                                          lv_jobnumber.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '022'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_jobname.
              gs_messages-msgv2 = lv_jobnumber.
              APPEND gs_messages TO gt_messages.
            ENDIF.
          WHEN OTHERS.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i023(/cgdc/clrq) WITH lv_jobname
                                             lv_jobnumber
                                       DISPLAY LIKE gc_message_type-information.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '023'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_jobname.
              gs_messages-msgv2 = lv_jobnumber.
              APPEND gs_messages TO gt_messages.

            ENDIF.
        ENDCASE.

      ENDIF.
    ELSE.
      CALL FUNCTION 'JOB_CLOSE'
        EXPORTING
          jobcount             = lv_jobnumber
          jobname              = lv_jobname
          strtimmed            = abap_true
        IMPORTING
          job_was_released     = lv_jobrel
        EXCEPTIONS
          cant_start_immediate = 1
          invalid_startdate    = 2
          jobname_missing      = 3
          job_close_failed     = 4
          job_nosteps          = 5
          job_notex            = 6
          lock_failed          = 7
          invalid_target       = 8
          invalid_time_zone    = 9
          OTHERS               = 10.
      IF sy-subrc EQ 0.
        CASE lv_jobrel.
          WHEN abap_true.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i022(/cgdc/clrq) WITH lv_jobname
                                            lv_jobnumber.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '022'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_jobname.
              gs_messages-msgv2 = lv_jobnumber.
              APPEND gs_messages TO gt_messages.
            ENDIF.

          WHEN OTHERS.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE e023(/cgdc/clrq) WITH lv_jobname
                                           lv_jobnumber
                                       DISPLAY LIKE gc_message_type-information.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '023'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_jobname.
              gs_messages-msgv2 = lv_jobnumber.
              APPEND gs_messages TO gt_messages.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.

  ELSE.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e025(/cgdc/clrq) WITH lv_jobname
                               DISPLAY LIKE gc_message_type-information.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '025'.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = lv_jobname.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form upd_inv_billed_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LT_CLRIT_KEY_DEL_BILLED
*&---------------------------------------------------------------------*
FORM upd_inv_billed_item  USING   lt_clrit_key_del_billed TYPE /cgdc/tt_clrqit_key.
  DATA: lwa_clrit_key TYPE /cgdc/s_clrqit_key.
  FIELD-SYMBOLS : <lwa_clrqit_neg_delta> TYPE /cgdc/s_clrqit,
                  <lwa_clrit>            TYPE /cgdc/s_clrqit,
                  <lwa_clrsit>           TYPE /cgdc/s_clrqit.
  DATA : lv_clrsit  TYPE /cgdc/clrq_sitmno,
         lwa_clrqbi TYPE /cgdc/s_clrqbi.
  DATA: lt_clrq_doc TYPE /cgdc/tt_clrq_doc.
  DATA : lwa_clrqit_fcat TYPE /cgdc/s_clrqit_fcat.
  DATA : lt_komv TYPE komv_tab.
  DATA : lv_flag TYPE flag.
  DATA: lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
        lwa_bilityp TYPE /cgdc/t_bilitty,
        ls_clrtic   TYPE /cgdc/t_rtbic.
  FIELD-SYMBOLS : <lwa_clrqbi> TYPE /cgdc/s_clrqbi.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  CLEAR gs_variables-key_only.        "++AMISHARMA - CR Selection was not working due to this flag.
  PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno
                                    CHANGING gs_clrqdoc_infocus.
  SORT gs_clrqdoc_infocus-x-critm BY clrno clrit clrsit clrdit.
  LOOP AT lt_clrit_key_del_billed INTO lwa_clrit_key.
    READ TABLE gs_clrqdoc_infocus-x-critm TRANSPORTING NO FIELDS WITH KEY clrno = lwa_clrit_key-clrno
                                                                          clrit = lwa_clrit_key-clrit.
    IF sy-subrc = 0.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrit> FROM sy-tabix.
        IF  <lwa_clrit>-clrno <> lwa_clrit_key-clrno OR <lwa_clrit>-clrit <> lwa_clrit_key-clrit OR <lwa_clrit>-updkz = gc_updkz_new.
          DATA(lv_exit) = abap_true.
        ELSE.
          IF <lwa_clrit>-clrsit = '000000'.
            lv_clrsit = <lwa_clrit>-lclrsit.
            READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrsit> WITH KEY clrno = lwa_clrit_key-clrno
                                                                                             clrit = lwa_clrit_key-clrit
                                                                                             clrsit = lv_clrsit.
            IF sy-subrc = 0 AND <lwa_clrsit> IS ASSIGNED.
              APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_clrqit_neg_delta>.
              <lwa_clrqit_neg_delta> = <lwa_clrsit>.
              <lwa_clrsit>-ldetla = <lwa_clrsit>-ldetla + 1.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = <lwa_clrsit>-ldetla
                IMPORTING
                  output = <lwa_clrsit>-ldetla.
              IF sy-subrc <> 0.
              ENDIF.

              <lwa_clrqit_neg_delta>-clrdit = <lwa_clrsit>-ldetla.
              <lwa_clrqit_neg_delta>-updkz = gc_updkz_new.
              <lwa_clrqit_neg_delta>-istat =  gc_ibill_stat-open. "gc_ibill_stat-not_relevant.

              CLEAR <lwa_clrqit_neg_delta>-netwr.
              CLEAR <lwa_clrqit_neg_delta>-netwr24.

              "mark as reversed
              <lwa_clrit>-reversed = abap_true.
              <lwa_clrit>-reversal_refitm = |{ <lwa_clrqit_neg_delta>-clrit }{ <lwa_clrqit_neg_delta>-clrsit }{ <lwa_clrqit_neg_delta>-clrdit }|.
              <lwa_clrit>-updkz = gc_updkz_update.
              "Made KOMV using CUEPOS
*

            ENDIF.
          ELSE.

            IF <lwa_clrit>-istat = gc_ibill_stat-open.  "( Postpone Reject = No Relevant)
              <lwa_clrqit_neg_delta>-netwr = ( ( -1 ) * <lwa_clrit>-netwr ) - <lwa_clrqit_neg_delta>-netwr.
              <lwa_clrqit_neg_delta>-netwr24 = ( ( -1 ) * <lwa_clrit>-netwr24 ) - <lwa_clrqit_neg_delta>-netwr24.
              <lwa_clrqit_neg_delta>-cuepos =  <lwa_clrsit>-clrsit.
              <lwa_clrqit_neg_delta>-duepos =  <lwa_clrsit>-clrdit.
              <lwa_clrqit_neg_delta>-inv_itm =  abap_true.


              PERFORM prep_conc_komv USING <lwa_clrsit>
                                    CHANGING <lwa_clrqit_neg_delta>
                                      lt_komv.

              "update net value on main item
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_item>)
                                                    WITH KEY clrno = lwa_clrit_key-clrno
                                                    clrit = lwa_clrit_key-clrit
                                                    clrsit = '000000'.
              IF sy-subrc = 0 AND <lwa_item> IS ASSIGNED.
                <lwa_item>-netwr = <lwa_item>-netwr - <lwa_clrit>-netwr.
                <lwa_item>-netwr24 = <lwa_item>-netwr24 - <lwa_clrit>-netwr24.
                <lwa_item>-kzwi1 = <lwa_item>-kzwi1 - <lwa_clrit>-kzwi1.

                <lwa_item>-wbs_allocation = 0.
              ENDIF.
              "update status
              <lwa_clrsit>-istat = gc_ibill_stat-delta.
              <lwa_clrsit>-updkz = gc_updkz_update.
            ENDIF.
            IF <lwa_clrit>-istat = gc_ibill_stat-open. "Open Check Billed or not( Not Billed No Relevant)
              READ TABLE gs_clrqdoc_infocus-x-crbinr INTO lwa_clrqbi WITH KEY bitype = <lwa_clrit>-bityp
                                                                              bill_item = <lwa_clrit>-rtbbinr.
              IF sy-subrc = 0 AND lwa_clrqbi-bstat IS INITIAL.
                <lwa_clrit>-istat = gc_ibill_stat-not_relevant.
                <lwa_clrit>-updkz = gc_updkz_update.
              ENDIF.
            ELSEIF <lwa_clrit>-istat = gc_ibill_stat-postponed OR <lwa_clrit>-istat = gc_ibill_stat-rejected.
              "update net value on main item
              READ TABLE gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_item>
                                                    WITH KEY clrno = lwa_clrit_key-clrno
                                                    clrit = lwa_clrit_key-clrit
                                                    clrsit = '000000'.
              IF sy-subrc = 0 AND <lwa_item> IS ASSIGNED.
                <lwa_item>-netwr = <lwa_item>-netwr - <lwa_clrit>-netwr.
                <lwa_item>-netwr24 = <lwa_item>-netwr24 - <lwa_clrit>-netwr24.
                <lwa_item>-kzwi1 = <lwa_item>-kzwi1 - <lwa_clrit>-kzwi1.
                <lwa_item>-wbs_allocation = 0.
              ENDIF.

              <lwa_clrit>-updkz = gc_updkz_update.
              <lwa_clrit>-istat = gc_ibill_stat-not_relevant.
            ENDIF.
          ENDIF.
        ENDIF.
        AT END OF clrit.
          IF <lwa_clrqit_neg_delta> IS ASSIGNED.
            MOVE-CORRESPONDING <lwa_clrqit_neg_delta> TO lwa_clrqit_fcat.
            CLEAR lwa_clrqit_fcat-rtbbinr.
            CLEAR lwa_clrqit_fcat-bityp.
            gs_variables-bit_num_gen = 'X'.
            PERFORM determine_billing_item USING '' ''
                                           CHANGING lwa_clrqit_fcat <lwa_clrqit_neg_delta> lv_flag.

*****boc - After pricing UPDATE amount ON billing item*****************************
            IF <lwa_clrqbi> IS ASSIGNED.
              UNASSIGN <lwa_clrqbi>.
            ENDIF.
            SELECT *
                     FROM /cgdc/t_bilitty
                     INTO  TABLE @lt_bilityp.

              READ TABLE gs_clrqdoc_infocus-x-crbinr
              ASSIGNING <lwa_clrqbi>
              WITH KEY clrno     = lwa_clrqit_fcat-clrno
                       bill_item = lwa_clrqit_fcat-rtbbinr.
              IF sy-subrc = 0.
                IF lv_flag = abap_true.
                  READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = lwa_clrqit_fcat-pstyv. "RTB24-15

                  READ TABLE lt_bilityp INTO lwa_bilityp
                   WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

                  IF sy-subrc = 0.
                    IF lwa_bilityp-qty_1 = abap_true.
                      <lwa_clrqbi>-zmeng = 1.
                    ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                      <lwa_clrqbi>-zmeng = <lwa_clrqbi>-zmeng + lwa_clrqit_fcat-zmeng.
                    ENDIF.
                  ENDIF.

                  <lwa_clrqbi>-netwr = <lwa_clrqbi>-netwr + lwa_clrqit_fcat-netwr.
                  <lwa_clrqbi>-wavwr = <lwa_clrqbi>-wavwr + lwa_clrqit_fcat-wavwr.
                  <lwa_clrqbi>-kzwi1 = <lwa_clrqbi>-kzwi1 + lwa_clrqit_fcat-kzwi1.
                  <lwa_clrqbi>-kzwi2 = <lwa_clrqbi>-kzwi2 + lwa_clrqit_fcat-kzwi2.
                  <lwa_clrqbi>-kzwi3 = <lwa_clrqbi>-kzwi3 + lwa_clrqit_fcat-kzwi3.
                  <lwa_clrqbi>-kzwi4 = <lwa_clrqbi>-kzwi4 + lwa_clrqit_fcat-kzwi4.
                  <lwa_clrqbi>-kzwi5 = <lwa_clrqbi>-kzwi5 + lwa_clrqit_fcat-kzwi5.
                  <lwa_clrqbi>-kzwi6 = <lwa_clrqbi>-kzwi6 + lwa_clrqit_fcat-kzwi6.
                  <lwa_clrqbi>-waerk = lwa_clrqit_fcat-waerk.
                  "++SOC - decimal precision fields
                  <lwa_clrqbi>-netwr24 = <lwa_clrqbi>-netwr24 + lwa_clrqit_fcat-netwr24.
                  <lwa_clrqbi>-kzwi1_24 = <lwa_clrqbi>-kzwi1_24 + lwa_clrqit_fcat-kzwi1_24.
                  <lwa_clrqbi>-kzwi2_24 = <lwa_clrqbi>-kzwi2_24 + lwa_clrqit_fcat-kzwi2_24.
                  <lwa_clrqbi>-kzwi3_24 = <lwa_clrqbi>-kzwi3_24 + lwa_clrqit_fcat-kzwi3_24.
                  <lwa_clrqbi>-kzwi4_24 = <lwa_clrqbi>-kzwi4_24 + lwa_clrqit_fcat-kzwi4_24.
                  <lwa_clrqbi>-kzwi5_24 = <lwa_clrqbi>-kzwi5_24 + lwa_clrqit_fcat-kzwi5_24.
                  <lwa_clrqbi>-kzwi6_24 = <lwa_clrqbi>-kzwi6_24 + lwa_clrqit_fcat-kzwi6_24.
                  "++EOC - decimal precision fields


                ELSE.
                  READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = lwa_clrqit_fcat-pstyv. "RTB24-15

                  READ TABLE lt_bilityp INTO lwa_bilityp
                   WITH KEY bilitmtyp = <lwa_clrqbi>-bitype.

                  IF sy-subrc = 0.
                    IF lwa_bilityp-qty_1 = abap_true.
                      <lwa_clrqbi>-zmeng = 1.
                    ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                      <lwa_clrqbi>-zmeng =  lwa_clrqit_fcat-zmeng.
                    ENDIF.
                  ENDIF.
                  <lwa_clrqbi>-netwr = lwa_clrqit_fcat-netwr.
                  <lwa_clrqbi>-wavwr = lwa_clrqit_fcat-wavwr.
                  <lwa_clrqbi>-kzwi1 = lwa_clrqit_fcat-kzwi1.
                  <lwa_clrqbi>-kzwi2 = lwa_clrqit_fcat-kzwi2.
                  <lwa_clrqbi>-kzwi3 = lwa_clrqit_fcat-kzwi3.
                  <lwa_clrqbi>-kzwi4 = lwa_clrqit_fcat-kzwi4.
                  <lwa_clrqbi>-kzwi5 = lwa_clrqit_fcat-kzwi5.
                  <lwa_clrqbi>-kzwi6 = lwa_clrqit_fcat-kzwi6.
                  <lwa_clrqbi>-waerk = lwa_clrqit_fcat-waerk.
                  "++SOC - Decimal precision fields
                  <lwa_clrqbi>-netwr24 = lwa_clrqit_fcat-netwr24.
                  <lwa_clrqbi>-kzwi1_24 = lwa_clrqit_fcat-kzwi1_24.
                  <lwa_clrqbi>-kzwi2_24 = lwa_clrqit_fcat-kzwi2_24.
                  <lwa_clrqbi>-kzwi3_24 = lwa_clrqit_fcat-kzwi3_24.
                  <lwa_clrqbi>-kzwi4_24 = lwa_clrqit_fcat-kzwi4_24.
                  <lwa_clrqbi>-kzwi5_24 = lwa_clrqit_fcat-kzwi5_24.
                  <lwa_clrqbi>-kzwi6_24 = lwa_clrqit_fcat-kzwi6_24.
                  "++EOC - decimal precision fields

                ENDIF.

                IF <lwa_clrqbi>-updkz IS INITIAL.
                  <lwa_clrqbi>-updkz = gc_updkz_update.
                ENDIF.
              ENDIF.
*****EOC - After pricing update amount on billing item*****************************
              UNASSIGN <lwa_clrqit_neg_delta>.
            ENDIF.
          ENDAT.
          IF lv_exit IS NOT INITIAL.
            CLEAR lv_exit.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.


    " update link table record as excluded.
    PERFORM upd_linktab_del_itm USING lt_clrit_key_del_billed.
    IF gs_clrqdoc_infocus-x-crhdr-msgcode CA gc_msg_code-v OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'Q' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'W' OR
       gs_clrqdoc_infocus-x-crhdr-msgcode CA 'U' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'T'.
      REPLACE gc_msg_code-v INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
      REPLACE 'Q' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
      REPLACE 'W' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
      REPLACE 'U' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
      REPLACE 'T' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
      CONDENSE gs_clrqdoc_infocus-x-crhdr-msgcode NO-GAPS.
      gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
    ENDIF.
    APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
    CALL FUNCTION '/CGDC/CLRQ_SAVE'
      EXPORTING
        i_set_update_task = abap_true
        i_commit_work     = ' '
      CHANGING
        ct_clrq_doc       = lt_clrq_doc
      EXCEPTIONS
        no_change         = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
      "error handling
    ENDIF.
ENDFORM.
FORM upd_linktab_del_itm  USING   lt_clrit_key_del_billed TYPE /cgdc/tt_clrqit_key.

  FIELD-SYMBOLS: <lt_src_line> TYPE table,
                 <lfs_lnk_new> TYPE table,
                 <lv_data>     TYPE any.
  LOOP AT lt_clrit_key_del_billed ASSIGNING FIELD-SYMBOL(<lfs_clrit_key>).
    READ TABLE gs_clrqdoc_infocus-x-clrit_link ASSIGNING FIELD-SYMBOL(<lfs_clrit_link>)
                                               WITH KEY clrno = <lfs_clrit_key>-clrno
                                                        clrit = <lfs_clrit_key>-clrit.
    IF sy-subrc = 0.
      ASSIGN <lfs_clrit_link>-data->* TO <lt_src_line>.
      IF <lt_src_line> IS ASSIGNED.
        READ TABLE <lt_src_line> ASSIGNING FIELD-SYMBOL(<lfs_src_line>) INDEX 1.
        IF sy-subrc = 0 AND <lfs_src_line> IS ASSIGNED. "NOT INITIAL.
          READ TABLE gs_clrqdoc_infocus-x-crlink ASSIGNING FIELD-SYMBOL(<lfs_crlink>)
                                                   WITH KEY link_table = <lfs_clrit_link>-link_tb
                                                            updkz      = 'U'. "gc_updkz_update.
          IF sy-subrc = 0 AND <lfs_crlink> IS ASSIGNED.
            "if records exist for linktab, append to table.
            ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
            IF <lfs_lnk_new> IS ASSIGNED.

              APPEND INITIAL LINE TO <lfs_lnk_new> ASSIGNING FIELD-SYMBOL(<lfs_row>).
              MOVE-CORRESPONDING <lfs_src_line> TO <lfs_row>.
              ASSIGN COMPONENT 'CLRNO' OF STRUCTURE  <lfs_row> TO <lv_data>.
              IF <lv_data> IS ASSIGNED.
                <lv_data> = <lfs_clrit_key>-clrno.
              ENDIF.
              "add clrq item
              UNASSIGN <lv_data>.
              ASSIGN COMPONENT 'CLRIT' OF STRUCTURE  <lfs_row> TO <lv_data>.
              IF <lv_data> IS ASSIGNED.
                <lv_data> = <lfs_clrit_key>-clrit.
              ENDIF.
              "add exclude flag
              UNASSIGN <lv_data>.
              ASSIGN COMPONENT 'EXCLUDED' OF STRUCTURE  <lfs_row> TO <lv_data>.
              IF <lv_data> IS ASSIGNED.
                <lv_data> = abap_true.
              ENDIF.
              "add clrq item
              UNASSIGN <lv_data>.
              ASSIGN COMPONENT 'EXCL_STATE' OF STRUCTURE  <lfs_row> TO <lv_data>.
              IF <lv_data> IS ASSIGNED.
                <lv_data> = '1'.
              ENDIF.
              <lfs_crlink>-updkz = 'U'. "gc_updkz_update.
            ENDIF.
          ELSE.

            "else append New line for Link tab and data reference
            CALL METHOD /cgdc/cl_rtb_src_db=>find_linktab_by_table
              EXPORTING
                iv_table     = <lfs_clrit_link>-prim_tb
              IMPORTING
                ev_update_fm = DATA(lv_update_fm).
            IF lv_update_fm IS NOT INITIAL.
              APPEND INITIAL LINE TO gs_clrqdoc_infocus-x-crlink ASSIGNING <lfs_crlink>.
              <lfs_crlink>-source        = <lfs_clrit_link>-source.
              <lfs_crlink>-prim_table    = <lfs_clrit_link>-prim_tb.
              <lfs_crlink>-link_table    = <lfs_clrit_link>-link_tb.
              <lfs_crlink>-lnktab_upd_fm = lv_update_fm.

              CREATE DATA <lfs_crlink>-crlink_tab TYPE TABLE OF (<lfs_clrit_link>-link_tb).
              ASSIGN <lfs_crlink>-crlink_tab->* TO <lfs_lnk_new>.
              IF <lfs_lnk_new> IS ASSIGNED.

                APPEND INITIAL LINE TO <lfs_lnk_new> ASSIGNING <lfs_row>.
                MOVE-CORRESPONDING <lfs_src_line> TO <lfs_row>.

                "add clrq no
                ASSIGN COMPONENT 'CLRNO' OF STRUCTURE  <lfs_row> TO <lv_data>.
                IF <lv_data> IS ASSIGNED.
                  <lv_data> = <lfs_clrit_key>-clrno.
                ENDIF.
                "add clrq item
                UNASSIGN <lv_data>.
                ASSIGN COMPONENT 'CLRIT' OF STRUCTURE  <lfs_row> TO <lv_data>.
                IF <lv_data> IS ASSIGNED.
                  <lv_data> = <lfs_clrit_key>-clrit.
                ENDIF.
                "add exclude flag
                UNASSIGN <lv_data>.
                ASSIGN COMPONENT 'EXCLUDED' OF STRUCTURE  <lfs_row> TO <lv_data>.
                IF <lv_data> IS ASSIGNED.
                  <lv_data> = abap_true.
                ENDIF.
                "add clrq item
                UNASSIGN <lv_data>.
                ASSIGN COMPONENT 'EXCL_STATE' OF STRUCTURE  <lfs_row> TO <lv_data>.
                IF <lv_data> IS ASSIGNED.
                  <lv_data> = '1'.
                ENDIF.

                <lfs_crlink>-updkz = 'U'. "gc_updkz_update.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    "delete entries for bill plan items, if any.
    READ TABLE gs_clrqdoc_infocus-x-crblpl ASSIGNING FIELD-SYMBOL(<lfs_blpl>)
                                           WITH KEY clrno = <lfs_clrit_key>-clrno
                                                    clrit = <lfs_clrit_key>-clrit.
    IF sy-subrc = 0.
      <lfs_blpl>-updkz = gc_updkz_delete.
      APPEND <lfs_blpl> TO gs_clrqdoc_infocus-y-crblpl.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_calc_req_items_binr
*&---------------------------------------------------------------------*
FORM update_calc_req_items_binr  USING    lv_date           TYPE datum
                                          lv_clrno          TYPE /cgdc/clrqno
                                          lv_rtbbinr        TYPE /cgdc/billitem_guid
                                          ls_bill_data_page
                                          ls_bilitty        TYPE /cgdc/t_bilitty
                                          lt_clrq_err       TYPE t_clrq_err.

  DATA: lv_where         TYPE string,
        ls_bill_item     TYPE /cgdc/s_clrqbi,
        ls_bill_num_open TYPE /cgdc/_clrqbi,
        ls_bill_typ      TYPE /cgdc/t_bilitty,
        ls_clrq_itm_fcat TYPE /cgdc/s_clrqit_fcat,
        ls_clrq_err      TYPE /cgdc/t_clrq_err,
        ls_clrqcost      TYPE /cgdc/s_clrqcost,
        ls_clrtic        TYPE /cgdc/t_rtbic,
        lv_pop_st        TYPE datum,
        lv_pop_end       TYPE datum,
        lv_binr          TYPE string,
        lv_calc          TYPE string,
        lv_date_val      TYPE string,
        lv_bilmatnr      TYPE /cgdc/bilmatnr.

  FIELD-SYMBOLS: <lfs_clrqit> TYPE /cgdc/s_clrqit,
                 <lfs_clrqbi> TYPE /cgdc/s_clrqbi,
                 <lv_pop_st>  TYPE /cgdc/pop_start,
                 <lv_bldat>   TYPE /cgdc/clrq_bldat,
                 <lv_exdat>   TYPE /cgdc/xrtdate.


  ASSIGN COMPONENT 'POP_STDT' OF STRUCTURE ls_bill_data_page TO <lv_pop_st>.
  ASSIGN COMPONENT 'BLDAT' OF STRUCTURE ls_bill_data_page TO <lv_bldat>.
  ASSIGN COMPONENT 'EXDAT'    OF STRUCTURE ls_bill_data_page TO <lv_exdat>.


  IF <lv_bldat> LT lv_date.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i073(/cgdc/clrq) WITH lv_date.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '073'.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = lv_date.
      APPEND gs_messages TO gt_messages.
    ENDIF.
    RETURN.
  ENDIF.

  IF lv_date LT <lv_pop_st>.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE i109(/cgdc/clrq) WITH <lv_pop_st>
                                    lv_date.
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '109'.
      gs_messages-msgty = gc_message_type-information.
      gs_messages-msgv1 = <lv_pop_st>.
      gs_messages-msgv2 = lv_date.
      APPEND gs_messages TO gt_messages.
    ENDIF.
    RETURN.
  ENDIF.

  PERFORM select_item_catgs USING gs_clrqdoc_infocus-x-crhdr-clrqt. "RTB24-15

  IF <lfs_clrqbi> IS ASSIGNED.
    UNASSIGN <lfs_clrqbi>.
  ENDIF.
  READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lfs_clrqbi>
                                         WITH KEY clrno = lv_clrno
                                                  bill_item = lv_rtbbinr.
  IF sy-subrc EQ 0.
    IF <lfs_clrqbi>-pop_enddt LT lv_date.

      <lfs_clrqbi>-pop_enddt = lv_date.
      <lfs_clrqbi>-updkz     = gc_updkz_update.
      <lfs_clrqbi>-pop_stdt  = <lv_pop_st>.
      <lfs_clrqbi>-bldat     = <lv_bldat>.
      <lfs_clrqbi>-exdat     = <lv_exdat>.

      IF <lfs_clrqit> IS ASSIGNED.
        UNASSIGN <lfs_clrqit>.
      ENDIF.
      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lfs_clrqit>
                                         WHERE clrno   EQ lv_clrno
                                         AND   rtbbinr EQ lv_rtbbinr.

        <lfs_clrqit>-bldat_bi  = <lv_bldat>.
        <lfs_clrqit>-exdat     = <lv_exdat>.
        <lfs_clrqit>-updkz     = gc_updkz_update.

        IF /cgdc/cl_clrq_process=>gv_no_new_bill_item IS NOT INITIAL.
          APPEND VALUE #(  msgid = gc_clrq_msg_cls
                           msgnr = '114'
                           msgty = gc_message_type-warning
                           fieldname = 'RTBBINR' ) TO gt_messages.
          READ TABLE lt_clrq_err INTO ls_clrq_err
          WITH KEY msgclass = gc_clrq_msg_cls
                   msgid = '114'.
          IF sy-subrc EQ 0.
            <lfs_clrqit>-msg_code = <lfs_clrqit>-msg_code && ls_clrq_err-msg_code.
            CONDENSE <lfs_clrqit>-msg_code NO-GAPS.
          ENDIF.
        ENDIF.

      ENDLOOP.

      UNASSIGN: <lv_pop_st>, <lv_bldat>.
      gs_clrqdoc_infocus-updkz = abap_true.
    ELSE.

      CLEAR lv_binr.
      CONCATENATE `'` lv_rtbbinr `'` INTO lv_binr.

      CLEAR lv_calc.
      CONCATENATE `'` lv_clrno `'` INTO lv_calc.

      CLEAR lv_date_val.
      CONCATENATE `'` lv_date `'` INTO lv_date_val.

      CLEAR lv_where.
      CONCATENATE 'CLRNO EQ'   lv_clrno 'AND'
                  'RTBBINR EQ' lv_binr  'AND' INTO lv_where SEPARATED BY space.

      CASE ls_bilitty-pop_src_date.
        WHEN 'DOCU'.
          CONCATENATE lv_where 'BLDAT GT' lv_date_val INTO lv_where SEPARATED BY space.
        WHEN 'POST'.
          CONCATENATE lv_where 'BUDAT GT' lv_date_val INTO lv_where SEPARATED BY space.
        WHEN OTHERS.
      ENDCASE.

      lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Check Fix

      LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lfs_clrqit>
                                         WHERE (lv_where).
        CLEAR: <lfs_clrqit>-rtbbinr, <lfs_clrqit>-bldat_bi,
               <lfs_clrqit>-exdat.

        <lfs_clrqit>-updkz = gc_updkz_update.

        CLEAR ls_bill_item.
        ls_bill_item-bitype     = <lfs_clrqit>-bityp.
        ls_bill_item-vgbel      = <lfs_clrqit>-vgbel.
        ls_bill_item-vgpos      = <lfs_clrqit>-vgpos.
        ls_bill_item-ps_psp_pnr = <lfs_clrqit>-ps_psp_pnr.



        PERFORM get_performance_dates USING ls_bill_item
                                            <lfs_clrqit>
                                      CHANGING lv_pop_st
                                               lv_pop_end.
        lv_pop_st = lv_date + 1.
        ls_bill_typ = ls_bilitty.

        IF <lfs_clrqbi> IS ASSIGNED.
          UNASSIGN <lfs_clrqbi>.
        ENDIF.

        IF NOT ls_bilitty-bilmatnr IS INITIAL.
          lv_bilmatnr = ls_bilitty-bilmatnr.
        ELSE.
          lv_bilmatnr = <lfs_clrqit>-matnr.
        ENDIF.

        DATA: lt_bilityp  TYPE TABLE OF /cgdc/t_bilitty,
              lwa_bilityp TYPE /cgdc/t_bilitty.

        SELECT *
           FROM /cgdc/t_bilitty
           INTO  TABLE @lt_bilityp.

          LOOP AT gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lfs_clrqbi> WHERE clrno     = <lfs_clrqit>-clrno
                                 AND bitype      = <lfs_clrqit>-bityp
                                 AND bilmatnr    = lv_bilmatnr "ls_bilitty-bilmatnr
                                 AND ps_psp_pnr  = <lfs_clrqit>-ps_psp_pnr
                                 AND bstat       = space
                                 AND bill_item   <> lv_rtbbinr
                                 AND pop_stdt    <= lv_pop_st
                                 AND pop_enddt   >= lv_pop_end
                                 AND /cgdc/cline = <lfs_clrqit>-/cgdc/cline.
            EXIT.
          ENDLOOP.
          IF <lfs_clrqbi> IS ASSIGNED.
            <lfs_clrqbi>-exdat = <lv_exdat>.
            MOVE-CORRESPONDING <lfs_clrqbi> TO ls_bill_num_open.
            PERFORM assign_exist_bill_item USING ls_bill_num_open
                                                 ls_bill_typ
                                                 '1'
                                           CHANGING <lfs_clrqit>
                                                    ls_clrq_itm_fcat.

            READ TABLE gt_item_catg INTO ls_clrtic WITH KEY pstyv = <lfs_clrqit>-pstyv. "RTB24-15

            READ TABLE lt_bilityp INTO lwa_bilityp
                   WITH KEY bilitmtyp = <lfs_clrqbi>-bitype.

            IF sy-subrc = 0.
              IF lwa_bilityp-qty_1 = abap_true.
                <lfs_clrqbi>-zmeng = 1.
              ELSEIF ls_clrtic-blkcumul_qty = abap_false.  "RTB24-15.
                <lfs_clrqbi>-zmeng = <lfs_clrqbi>-zmeng + <lfs_clrqit>-zmeng.
              ENDIF.
            ENDIF.
            <lfs_clrqbi>-netwr = <lfs_clrqbi>-netwr + <lfs_clrqit>-netwr.
            <lfs_clrqbi>-wavwr = <lfs_clrqbi>-wavwr + <lfs_clrqit>-wavwr.
            <lfs_clrqbi>-kzwi1 = <lfs_clrqbi>-kzwi1 + <lfs_clrqit>-kzwi1.
            <lfs_clrqbi>-kzwi2 = <lfs_clrqbi>-kzwi2 + <lfs_clrqit>-kzwi2.
            <lfs_clrqbi>-kzwi3 = <lfs_clrqbi>-kzwi3 + <lfs_clrqit>-kzwi3.
            <lfs_clrqbi>-kzwi4 = <lfs_clrqbi>-kzwi4 + <lfs_clrqit>-kzwi4.
            <lfs_clrqbi>-kzwi5 = <lfs_clrqbi>-kzwi5 + <lfs_clrqit>-kzwi5.
            <lfs_clrqbi>-kzwi6 = <lfs_clrqbi>-kzwi6 + <lfs_clrqit>-kzwi6.
            "++SOC - Decimal precision changes
            <lfs_clrqbi>-netwr24 = <lfs_clrqbi>-netwr24 + <lfs_clrqit>-netwr24.
            <lfs_clrqbi>-kzwi1_24 = <lfs_clrqbi>-kzwi1_24 + <lfs_clrqit>-kzwi1_24.
            <lfs_clrqbi>-kzwi2_24 = <lfs_clrqbi>-kzwi2_24 + <lfs_clrqit>-kzwi2_24.
            <lfs_clrqbi>-kzwi3_24 = <lfs_clrqbi>-kzwi3_24 + <lfs_clrqit>-kzwi3_24.
            <lfs_clrqbi>-kzwi4_24 = <lfs_clrqbi>-kzwi4_24 + <lfs_clrqit>-kzwi4_24.
            <lfs_clrqbi>-kzwi5_24 = <lfs_clrqbi>-kzwi5_24 + <lfs_clrqit>-kzwi5_24.
            <lfs_clrqbi>-kzwi6_24 = <lfs_clrqbi>-kzwi6_24 + <lfs_clrqit>-kzwi6_24.
            "++EOC - Decimal precision changes
            IF <lfs_clrqbi>-updkz NE gc_updkz_new.
              <lfs_clrqbi>-updkz = gc_updkz_update.
            ENDIF.

          ELSE.
            CASE ls_bilitty-bilcreate_type.
              WHEN 'AUTO' OR 'AUMA'.
                IF /cgdc/cl_clrq_process=>gv_no_new_bill_item IS INITIAL.
                  CLEAR ls_clrq_itm_fcat.
                  ls_clrq_itm_fcat = CORRESPONDING #( <lfs_clrqit> ).

                  SELECT SINGLE  crbukrs, cgjahr,
                                 cbelnr, cbuzei FROM /cgdc/_clrqcost
                            INTO ( @ls_clrq_itm_fcat-rbukrs, @ls_clrq_itm_fcat-gjahr,
                                   @ls_clrq_itm_fcat-belnr,  @ls_clrq_itm_fcat-buzei )
                            WHERE clrno EQ @<lfs_clrqit>-clrno
                            AND   clrit EQ @<lfs_clrqit>-clrit.

                    PERFORM generate_billing_item_number USING ls_bill_typ
                                                               ls_clrq_itm_fcat
                                                         CHANGING <lfs_clrqit>.

                    IF <lfs_clrqbi> IS ASSIGNED.
                      UNASSIGN <lfs_clrqbi>.
                    ENDIF.
                    READ TABLE gs_clrqdoc_infocus-x-crbinr
                    ASSIGNING <lfs_clrqbi>
                    WITH KEY bill_item = <lfs_clrqit>-rtbbinr.
                    IF sy-subrc EQ 0.
                      <lfs_clrqbi>-pop_stdt = lv_pop_st.
                      <lfs_clrqbi>-exdat    = <lv_exdat>.
                    ENDIF.

                  ELSE.
                    APPEND VALUE #(  msgid = gc_clrq_msg_cls
                                     msgnr = '114'
                                     msgty = gc_message_type-warning
                                     fieldname = 'RTBBINR' ) TO gt_messages.
                    READ TABLE lt_clrq_err INTO ls_clrq_err
                    WITH KEY msgclass = gc_clrq_msg_cls
                             msgid = '114'.
                    IF sy-subrc EQ 0.
                      <lfs_clrqit>-msg_code = <lfs_clrqit>-msg_code && ls_clrq_err-msg_code.
                      CONDENSE <lfs_clrqit>-msg_code NO-GAPS.
                    ENDIF.
                  ENDIF.

                WHEN OTHERS.
                  CLEAR gs_messages.
                  gs_messages-msgid = gc_clrq_msg_cls.
                  gs_messages-msgnr = '056'.
                  gs_messages-msgty = gc_message_type-warning.
                  gs_messages-msgv1 = ls_bilitty-bilitmtyp.
                  gs_messages-fieldname = 'RTBBINR'.
                  APPEND gs_messages TO gt_messages.

                  CLEAR ls_clrq_err.
                  READ TABLE lt_clrq_err INTO ls_clrq_err
                  WITH KEY msgclass = gc_clrq_msg_cls
                           msgid = '056'.
                  IF sy-subrc EQ 0.
                    <lfs_clrqit>-msg_code = <lfs_clrqit>-msg_code && ls_clrq_err-msg_code.
                    CONDENSE <lfs_clrqit>-msg_code NO-GAPS.
                    IF <lfs_clrqit>-msg_code IS NOT INITIAL.
                      <lfs_clrqit>-msg_icon = '@09@'.
                    ELSE.
                      <lfs_clrqit>-msg_icon = '@08@'.
                    ENDIF.
                  ELSE.
                    <lfs_clrqit>-msg_icon = '@09@'.
                  ENDIF.
              ENDCASE.
            ENDIF.
          ENDLOOP.

          CLEAR lv_binr.
          CONCATENATE `'` lv_rtbbinr `'` INTO lv_binr.

          CLEAR lv_calc.
          CONCATENATE `'` lv_clrno `'` INTO lv_calc.

          CLEAR lv_date_val.
          CONCATENATE `'` lv_date `'` INTO lv_date_val.

          CLEAR lv_where.
          CONCATENATE 'CLRNO EQ'   lv_clrno 'AND'
                      'RTBBINR EQ' lv_binr  'AND' INTO lv_where SEPARATED BY space.

          CASE ls_bilitty-pop_src_date.
            WHEN 'DOCU'.
              CONCATENATE lv_where 'BLDAT LE' lv_date_val INTO lv_where SEPARATED BY space.
            WHEN 'POST'.
              CONCATENATE lv_where 'BUDAT LE' lv_date_val INTO lv_where SEPARATED BY space.
            WHEN OTHERS.
          ENDCASE.

          READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING <lfs_clrqbi>
                                                   WITH KEY clrno     = lv_clrno
                                                            bill_item = lv_rtbbinr.
          IF sy-subrc EQ 0.
            <lfs_clrqbi>-pop_enddt = lv_date.

            ASSIGN COMPONENT 'POP_STDT' OF STRUCTURE ls_bill_data_page TO <lv_pop_st>.
            <lfs_clrqbi>-pop_stdt = <lv_pop_st>.

            ASSIGN COMPONENT 'BLDAT' OF STRUCTURE ls_bill_data_page TO <lv_bldat>.
            <lfs_clrqbi>-bldat = <lv_bldat>.

            "++SOC - Save fails for new records when BLDAT is edited for to be Inserted records

            IF <lfs_clrqbi>-updkz <> gc_updkz_new.      "skip setting flag for New records
              <lfs_clrqbi>-updkz = gc_updkz_update.
            ENDIF.
            "++EOC - Save fails for new records when BLDAT is edited for to be Inserted records

          ENDIF.

          lv_where = cl_abap_dyn_prg=>escape_quotes_str( lv_where ). "ATC Check Fix

          LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING <lfs_clrqit>
                                                 WHERE (lv_where).
            <lfs_clrqit>-bldat_bi  = <lv_bldat>.
            "++SOC - Save fails for new records when BLDAT is edited for to be Inserted records

            IF <lfs_clrqit>-updkz <> gc_updkz_new.      "skip setting flag for New records
              <lfs_clrqit>-updkz     = gc_updkz_update.
            ENDIF.
            "++EOC - Save fails for new records when BLDAT is edited for to be Inserted records
          ENDLOOP.

          gs_clrqdoc_infocus-updkz = abap_true.
        ENDIF.
      ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_fast_chg
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_fast_chg .  " Edited by Srishti Shetty
  "updates billing block/billing date
  DATA: lt_selected_rows TYPE lvc_t_row,
        lt_clrq_err      TYPE t_clrq_err,
        lwa_selected_row TYPE lvc_s_row,
        lwa_clrqbi       TYPE /cgdc/s_clrqbi,
        lwa_bilitty      TYPE /cgdc/t_bilitty,
        lv_date          TYPE datum,
        lwa_critm        TYPE /cgdc/s_clrqit.

  FIELD-SYMBOLS:
    <lwa_critm>          TYPE /cgdc/s_clrqit,
    <lv_clrno>           TYPE /cgdc/_clrqbi-clrno,
    <lwa_crbinr>         TYPE /cgdc/s_clrqbi,
    <lv_pspnr>           TYPE /cgdc/ps_psp_pnr,
    <lv_rtbbinr>         TYPE /cgdc/billitem_guid,
    <lv_bldat>           TYPE /cgdc/clrq_bldat,
    <lv_pop_end>         TYPE /cgdc/pop_end,
    <lv_pop_stdt>        TYPE /cgdc/pop_start,
    <lv_faksp>           TYPE faksp_ap,
    <lv_updkz>           TYPE updkz_d,
    <lwa_bill_data_page> TYPE any,
    <lv_srno>            TYPE any,
    <lv_bilmatnr>        TYPE /cgdc/_clrqbi-bilmatnr,
    <lv_billscheditm>    TYPE /cgdc/billitem.



  LOOP AT gt_bill_pre_selected_rows INTO lwa_selected_row.
    READ TABLE gt_bill_pre_data_page ASSIGNING <lwa_bill_data_page> INDEX lwa_selected_row-index.
    ASSIGN COMPONENT 'SRNO' OF STRUCTURE <lwa_bill_data_page> TO <lv_srno>.
    READ TABLE gt_bill_pre_data ASSIGNING FIELD-SYMBOL(<lwa_bill_pre_data>) WITH KEY ('SRNO') =  <lv_srno>.
    ASSIGN COMPONENT 'BILL_ITEM'    OF STRUCTURE <lwa_bill_pre_data> TO <lv_rtbbinr>.
    ASSIGN COMPONENT 'CLRNO'      OF STRUCTURE <lwa_bill_pre_data> TO <lv_clrno>.
    ASSIGN COMPONENT 'PS_PSP_PNR' OF STRUCTURE <lwa_bill_pre_data> TO <lv_pspnr>.
    ASSIGN COMPONENT 'BILMATNR'   OF STRUCTURE <lwa_bill_pre_data> TO <lv_bilmatnr>.
    ASSIGN COMPONENT 'BILLSCHEDITEM'   OF STRUCTURE <lwa_bill_pre_data> TO <lv_billscheditm>.


    IF <lwa_crbinr> IS ASSIGNED.
      UNASSIGN <lwa_crbinr>.
    ENDIF.

    SELECT *
      FROM /cgdc/_clrqit
      INTO TABLE @DATA(lt_critm)
      WHERE clrno   = @<lv_clrno> AND
            rtbbinr = @<lv_rtbbinr>.

      READ TABLE gs_clrqdoc_infocus-x-crbinr
      ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                      bill_item = <lv_rtbbinr>
                                      bstat     = space.
      IF sy-subrc <> 0.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE i086(/cgdc/clrq) WITH <lv_rtbbinr>.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = '086'.
          gs_messages-msgty = gc_message_type-information.
          gs_messages-msgv1 = <lv_rtbbinr>.
          APPEND gs_messages TO gt_messages.
        ENDIF.
        RETURN.
      ENDIF.

      CASE gs_variables-dyn_selscr_ucomm.
        WHEN gc_fcode-bill_dt.
          CLEAR lv_date.
          lv_date = /cgdc/s_clrqbi_scrnfld-bldat.

          IF <lv_billscheditm> IS ASSIGNED AND <lv_billscheditm> IS NOT INITIAL.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i158(/cgdc/clrq).
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '158'.
              gs_messages-msgty = gc_message_type-information.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            RETURN.

          ENDIF.


          ASSIGN COMPONENT 'POP_ENDDT' OF STRUCTURE <lwa_bill_pre_data> TO <lv_pop_end>.
          IF lv_date LT <lv_pop_end>.
            IF gs_variables-call_from_ui EQ abap_false.
              MESSAGE i073(/cgdc/clrq) WITH lv_date.
            ELSE.
              CLEAR gs_messages.
              gs_messages-msgid = gc_clrq_msg_cls.
              gs_messages-msgnr = '073'.
              gs_messages-msgty = gc_message_type-information.
              gs_messages-msgv1 = lv_date.
              APPEND gs_messages TO gt_messages.
            ENDIF.
            RETURN.
          ENDIF.


          IF <lwa_crbinr> IS ASSIGNED.
            UNASSIGN <lwa_crbinr>.
          ENDIF.

          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                          bill_item = <lv_rtbbinr>.


          <lwa_crbinr>-bldat = lv_date.
          <lwa_crbinr>-updkz = gc_updkz_update.

          ASSIGN COMPONENT 'BLDAT' OF STRUCTURE <lwa_bill_pre_data> TO <lv_bldat>.
          <lv_bldat> = lv_date.
          UNASSIGN <lv_bldat>.


          IF <lwa_critm> IS ASSIGNED.
            UNASSIGN <lwa_critm>.
          ENDIF.

          LOOP AT lt_critm INTO lwa_critm.
            READ TABLE gs_clrqdoc_infocus-x-critm
            ASSIGNING <lwa_critm>
            WITH KEY clrno    = lwa_critm-clrno
                     clrit  = lwa_critm-clrit
                     clrsit = lwa_critm-clrsit
                     clrdit = lwa_critm-clrdit.
            IF sy-subrc = 0.
              ASSIGN COMPONENT 'BLDAT_BI' OF STRUCTURE <lwa_critm> TO <lv_bldat>.
              ASSIGN COMPONENT 'UPDKZ'    OF STRUCTURE <lwa_critm> TO <lv_updkz>.
              <lv_bldat> = lv_date.
              <lv_updkz> = gc_updkz_update.
            ELSE.
              APPEND lwa_critm TO gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm>.
              ASSIGN COMPONENT 'BLDAT_BI' OF STRUCTURE <lwa_critm> TO <lv_bldat>.
              ASSIGN COMPONENT 'UPDKZ'    OF STRUCTURE <lwa_critm> TO <lv_updkz>.
              <lv_bldat> = lv_date.
              <lv_updkz> = gc_updkz_update.
            ENDIF.

          ENDLOOP.

        WHEN gc_fcode-bill_blk.

          IF <lwa_crbinr> IS ASSIGNED.
            UNASSIGN <lwa_crbinr>.
          ENDIF.
          READ TABLE gs_clrqdoc_infocus-x-crbinr
          ASSIGNING <lwa_crbinr> WITH KEY clrno     = <lv_clrno>
                                          bill_item = <lv_rtbbinr>.

          <lwa_crbinr>-faksp = /cgdc/s_clrqbi_scrnfld-faksp.
          <lwa_crbinr>-updkz = gc_updkz_update.


          ASSIGN COMPONENT 'FAKSP' OF STRUCTURE <lwa_bill_pre_data> TO <lv_faksp>.
          <lv_faksp> = /cgdc/s_clrqbi_scrnfld-faksp.
          UNASSIGN <lv_faksp>.

          IF <lwa_critm> IS ASSIGNED.
            UNASSIGN <lwa_critm>.
          ENDIF.

          LOOP AT lt_critm INTO lwa_critm.
            READ TABLE gs_clrqdoc_infocus-x-critm
            ASSIGNING <lwa_critm>
            WITH KEY clrno    = lwa_critm-clrno
                     clrit  = lwa_critm-clrit
                     clrsit = lwa_critm-clrsit
                     clrdit = lwa_critm-clrdit.
            IF sy-subrc = 0.
              ASSIGN COMPONENT 'FAKSP' OF STRUCTURE <lwa_critm> TO <lv_faksp>.
              ASSIGN COMPONENT 'UPDKZ'    OF STRUCTURE <lwa_critm> TO <lv_updkz>.
              <lv_faksp> = /cgdc/s_clrqbi_scrnfld-faksp.
              <lv_updkz> = gc_updkz_update.
            ELSE.
              APPEND lwa_critm TO gs_clrqdoc_infocus-x-critm ASSIGNING <lwa_critm>.
              ASSIGN COMPONENT 'FAKSP' OF STRUCTURE <lwa_critm> TO <lv_faksp>.
              ASSIGN COMPONENT 'UPDKZ'    OF STRUCTURE <lwa_critm> TO <lv_updkz>.
              <lv_faksp> = /cgdc/s_clrqbi_scrnfld-faksp.
              <lv_updkz> = gc_updkz_update.
            ENDIF.

          ENDLOOP.

      ENDCASE.

      IF <lwa_crbinr>-updkz = gc_updkz_update.
        gs_variables-refresh_calc_req_items_grid = abap_true.
        gs_variables-refersh_bill_bp_grid = abap_true.
        gs_variables-calc_changed = abap_true.

      ENDIF.

    ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_contract_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> I_VBELN
*&---------------------------------------------------------------------*
FORM update_contract_data  USING  lv_vbeln TYPE vbeln_va.
  DATA: lt_clrqpit  TYPE TABLE OF /cgdc/s_clrqpit,
        lwa_clrqpit TYPE /cgdc/s_clrqpit.
  DATA : lt_clrit_key TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA : lt_clrit_key_temp TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA : lv_subrc TYPE sysubrc.
  DATA : lt_con_it_flow  TYPE TABLE OF /cgdc/cf_sd_it,
         lwa_con_it_flow TYPE /cgdc/cf_sd_it.
  DATA: lv_length TYPE i.
*
  PERFORM select_clrqhd USING lv_vbeln ''.

  SELECT *
    FROM /cgdc/_clrqpit
    INTO CORRESPONDING FIELDS OF TABLE lt_clrit_key
    WHERE clrno = gs_clrqdoc_infocus-x-crhdr-clrno AND cont_fld_upd = abap_true.
    "To Update Fields CLRITMS Should be in PRocess Table
    IF lt_clrit_key IS NOT INITIAL.
      SELECT *
                FROM /cgdc/cf_sd_it
                INTO TABLE lt_con_it_flow
                WHERE vbeln = lv_vbeln.

        DO.
          CLEAR lt_clrit_key_temp.
          LOOP AT lt_clrit_key INTO DATA(lwa_clrit_key) FROM lv_Length.
            APPEND lwa_clrit_key TO lt_clrit_key_temp.
            lv_length = lv_length + 1.
            IF lv_length MOD gs_variables-cmfrq = 0.
              EXIT.
            ENDIF.
          ENDLOOP.

          .IF lt_clrit_key_temp IS NOT INITIAL.
            gs_variables-overview_mode = gc_mode_change.
            PERFORM set_calc_req_item_doc_infocus USING lt_clrit_key_temp CHANGING lv_subrc.
            IF lv_subrc IS INITIAL.


              LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lwa_critm>).
                IF <lwa_critm>-istat = gc_ibill_stat-open AND ( <lwa_critm>-itmty IS INITIAL OR <lwa_critm>-itmty = gc_clrq_itmty-bill_plan_line ).
                  READ TABLE gs_clrqdoc_infocus-x-crbinr INTO DATA(lwa_crbinr) WITH KEY bitype = <lwa_critm>-bityp
                                                                                        bill_item = <lwa_critm>-rtbbinr.
                  IF ( sy-subrc = 0 AND lwa_crbinr-bstat IS INITIAL ) OR <lwa_critm>-clrsit = '000000'.
                    READ TABLE gt_contract_itm INTO DATA(lwa_vbap) WITH KEY vbeln = <lwa_critm>-vgbel
                                                              posnr = <lwa_critm>-vgpos.
                    IF sy-subrc = 0.
                      <lwa_critm>-/cgdc/pbpgp = lwa_vbap-/cgdc/pbpgp.
                      <lwa_critm>-updkz = gc_updkz_update.
                    ENDIF.
                    READ TABLE lt_con_it_flow INTO lwa_con_it_flow WITH KEY vbeln = <lwa_critm>-vgbel
                                                                            posnr = <lwa_critm>-vgpos.
                    IF sy-subrc = 0.
                      <lwa_critm>-/cgdc/defin = lwa_con_it_flow-/cgdc/defin.
                      <lwa_critm>-updkz = gc_updkz_update.
                    ENDIF.
                  ENDIF.
                ENDIF.
                lwa_clrqpit-clrno = <lwa_critm>-clrno.
                lwa_clrqpit-clrit = <lwa_critm>-clrit.
                lwa_clrqpit-clrsit = <lwa_critm>-clrsit.
                lwa_clrqpit-updkz = gc_updkz_new.
                APPEND lwa_clrqpit TO lt_clrqpit.
              ENDLOOP.
              IF lt_clrqpit IS NOT INITIAL.
                CALL FUNCTION '/CGDC/CLRQ_CLRQPRS_UPDATE_DB'
                  EXPORTING
                    it_clrqpit = lt_clrqpit
*                   IT_CLRQPCN =
                  .
                CLEAR lt_clrqpit.
              ENDIF.
              PERFORM document_save USING gs_clrqdoc_infocus ' '.
            ELSE.
*          gs_messages- "Request is locked
              "message coming from SET INFOCUS
            ENDIF.
          ELSE.
            EXIT.
          ENDIF.
        ENDDO.
      ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_schd_bill_blk_on_itm
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LWA_BLPLN_VBELN
*&      --> LWA_BLPLN_POSNR
*&      <-- LV_LINE_BLOCKED
*&---------------------------------------------------------------------*
FORM check_schd_bill_blk_on_itm  USING    p_vbeln TYPE vbeln_va
                                          p_posnr TYPE posnr_va
                                          lt_vbap TYPE /cgdc/tt_vbap
                                 CHANGING p_line_blocked TYPE abap_bool.

  TYPES: BEGIN OF lty_blkobj,
           blkid TYPE /cgdc/blkid,
         END OF lty_blkobj.

  DATA: lv_var    TYPE rvari_vnam,
        lt_blkobj TYPE STANDARD TABLE OF lty_blkobj.


  "check contract line item block code
  READ TABLE lt_vbap INTO DATA(ls_vbap)
                             WITH KEY vbeln = p_vbeln
                                      posnr = p_posnr.
  IF sy-subrc = 0 AND ls_vbap-faksp IS NOT INITIAL.

    "find all applicable blocks from current eval.
    CALL METHOD /cgdc/cl_be_helper=>get_blocks_on_contr_realtime
      IMPORTING
        et_blocks         = DATA(lt_blocks)
        ev_block_realtime = DATA(lv_block_realtime).      "date set from block log hook
    IF lv_block_realtime = abap_false.
      "read from DB
      CALL METHOD /cgdc/cl_be_helper=>get_blocks_on_contract
        EXPORTING
          iv_vbeln  = p_vbeln
        IMPORTING
          et_blocks = lt_blocks.

    ENDIF.

    IF lt_blocks IS NOT INITIAL.
      "Block engine object exists for this contract
      "find critical schedule bill item blocks for block engine.
      CALL FUNCTION '/CGDC/VAR_SEARCH'
        EXPORTING
          iv_bukrs          = '*'
          iv_usage          = 'RT013'
          iv_clnt_dep       = abap_true
          iv_var_type       = 'S'
        IMPORTING
          ev_var_name       = lv_var
        EXCEPTIONS
          no_variable_found = 1
          OTHERS            = 2.
      IF sy-subrc EQ 0.
        SELECT low
         FROM tvarvc
        INTO TABLE @lt_blkobj      "block objects
         WHERE name = @lv_var.
          IF sy-subrc = 0 AND lt_blkobj IS NOT INITIAL.
            "is there a critical block on the item?
            LOOP AT lt_blkobj ASSIGNING FIELD-SYMBOL(<lfs_blkobj>).
              IF line_exists( lt_blocks[ vbeln = p_vbeln posnr = p_posnr blkid = <lfs_blkobj>-blkid ] ).
                p_line_blocked = abap_true.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: INCLUDE /CGDC/LCLRQMF0V
**********************************************************

*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMF0V
*&---------------------------------------------------------------------*
FORM validate_postpone_alv CHANGING lv_error TYPE flag.
  DATA: lwa_postpone_fcat TYPE /cgdc/s_clrq_postpone.
  DATA : lv_valid TYPE c.
  DATA : lv_index TYPE i.
  DATA : lwa_style      TYPE lvc_s_styl,
         lv_fname_psdat TYPE lvc_fname VALUE 'PSDAT'.

  PERFORM get_reason_code_pp_un.

  IF go_postpone_grid IS BOUND.
    CALL METHOD go_postpone_grid->check_changed_data
      IMPORTING
        e_valid = lv_valid.
  ENDIF.
  LOOP AT gt_item_postponed_fcat INTO lwa_postpone_fcat.
    lv_index = sy-tabix.

*// Validate the reason code input
    IF lwa_postpone_fcat-rsncd IS NOT INITIAL.
      READ TABLE gt_reason_codes TRANSPORTING NO FIELDS WITH KEY rsncd = lwa_postpone_fcat-rsncd.
      IF sy-subrc NE 0.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE e113(/cgdc/clrq) WITH lwa_postpone_fcat-rsncd.
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = '113'.
          gs_messages-msgty = gc_message_type-error.
          gs_messages-msgv1 = lwa_postpone_fcat-rsncd.
          APPEND gs_messages TO gt_messages.
        ENDIF.
        lv_error = abap_true.
        EXIT.
      ENDIF.
    ENDIF.

    READ TABLE lwa_postpone_fcat-style INTO lwa_style WITH KEY fieldname = lv_fname_psdat.
    IF lwa_style-style = cl_gui_alv_grid=>mc_style_enabled AND lwa_postpone_fcat-psdat IS NOT INITIAL
      AND lwa_postpone_fcat-psdat < sy-datum.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i077(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '077'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      lv_error = abap_true.
      EXIT.
    ENDIF.
    IF lwa_postpone_fcat-psdat IS INITIAL AND
      ( lwa_postpone_fcat-postp_qty IS NOT INITIAL OR lwa_postpone_fcat-postp_amt IS NOT INITIAL ).
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i078(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '078'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      lv_error = abap_true.
      EXIT.

    ELSEIF lwa_postpone_fcat-psdat IS NOT INITIAL AND
      ( lwa_postpone_fcat-postp_qty IS NOT INITIAL OR lwa_postpone_fcat-postp_amt IS NOT INITIAL )..
      READ TABLE gt_item_postponed_fcat TRANSPORTING NO FIELDS WITH KEY psdat = lwa_postpone_fcat-psdat.
      IF  sy-subrc = 0 AND lv_index <> sy-tabix.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE i079(/cgdc/clrq).
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = '079'.
          gs_messages-msgty = gc_message_type-information.
          APPEND gs_messages TO gt_messages.
        ENDIF.
        lv_error = abap_true.
        EXIT.
      ENDIF.
    ENDIF.
    IF lwa_postpone_fcat-postp_amt < 0 AND gs_variables-itm_post_amt_un IS NOT INITIAL.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i081(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '081'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      lv_error = abap_true.
      EXIT.
    ELSEIF lwa_postpone_fcat-postp_qty < 0 AND gs_variables-itm_post_quan_un IS NOT INITIAL.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE i080(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '080'.
        gs_messages-msgty = gc_message_type-information.
        APPEND gs_messages TO gt_messages.
      ENDIF.
      lv_error = abap_true.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form validate_manual_itm_input
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM validate_manual_itm_type_input.

  CONSTANTS: lc_cont201 TYPE sy-ucomm VALUE 'CONT201',
             lc_cont204 TYPE sy-ucomm VALUE 'CONT204'.

  IF ok_code = lc_cont201 OR ok_code = lc_cont204.
    IF /cgdc/t_rtbmit-mityp IS INITIAL
         OR gs_man_itm-rsncd IS INITIAL.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e026(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '026'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.

    IF /cgdc/t_rtbmit-mityp IS NOT INITIAL
         OR gs_man_itm-rsncd IS NOT INITIAL.
      SELECT SINGLE @abap_true
         FROM /cgdc/t_rtbmit AS mit
         INNER JOIN /cgdc/t_rtbrpar AS par
         ON par~rsnpf = mit~rsnprf
         WHERE mit~mityp = @/cgdc/t_rtbmit-mityp
         AND par~rsncd = @gs_man_itm-rsncd
         INTO @DATA(lv_exist).
      IF sy-subrc <> 0.
        IF gs_variables-call_from_ui EQ abap_false.
          MESSAGE e076(/cgdc/clrq).
        ELSE.
          CLEAR gs_messages.
          gs_messages-msgid = gc_clrq_msg_cls.
          gs_messages-msgnr = '076'.
          gs_messages-msgty = gc_message_type-error.
          APPEND gs_messages TO gt_messages.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
FORM validate_manual_itm_input .

  IF  gs_man_itm-matnr IS INITIAL
      OR gs_man_itm-fkdat IS INITIAL
      OR gs_man_itm-kwmeng IS INITIAL
      OR gs_man_itm-vrkme IS INITIAL
      OR gs_man_itm-waerk IS INITIAL
      OR gs_man_itm-ps_psp_pnr IS INITIAL
      OR gs_man_itm-kbetr1 IS INITIAL.

    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e026(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '026'.
      gs_messages-msgty = gc_message_type-error.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

  IF gs_man_itm-matnr IS NOT INITIAL.
    READ TABLE gt_matnr_desc WITH KEY matnr = gs_man_itm-matnr TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e075(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '075'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
FORM validate_calc_req USING lv_vbeln TYPE vbeln_va.
  DATA lt_kstar_range TYPE ty_kstar_range.
  DATA lv_kstar TYPE kstar.
  DATA lwa_critm TYPE /cgdc/s_clrqit.
  DATA lv_subrc TYPE sysubrc.
  DATA lv_valid TYPE flag.
  DATA lv_billed TYPE flag.
  DATA lwa_clrit_key TYPE /cgdc/s_clrqit_key.
  DATA lt_clrit_key TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA lt_clrit_key_delete TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA lt_clrit_key_del_billed TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA: lt_clrq_doc TYPE /cgdc/tt_clrq_doc.

  PERFORM select_clrqhd USING lv_vbeln ''. "Select CLRQ HDR Details
  PERFORM read_contract_details USING lv_vbeln.
  PERFORM enqueue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                                       gc_enq_mode-write
                                                 CHANGING lv_subrc.
  IF lv_subrc = 0.
    gs_variables-key_only = abap_true.
    PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno
                                       CHANGING gs_clrqdoc_infocus.
    lt_clrit_key = gs_clrqdoc_infocus-x-critm_key.
    gs_variables-overview_mode = gc_mode_change.
    PERFORM set_calc_req_item_doc_infocus USING  lt_clrit_key
                                                 CHANGING lv_subrc.
*    PERFORM select_clrqpit USING gs_clrqdoc_infocus-x-crhdr-clrno.
    CLEAR  lt_clrit_key.
    IF lv_subrc = 0.
      LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm.
        CLEAR : lv_billed,
                lv_valid,
                lv_kstar.
        lv_kstar = lwa_critm-kstar.
        AT NEW clrit.
          PERFORM check_item_billed USING lwa_critm-clrno
                                          lwa_critm-clrit
                                 CHANGING lv_billed.
          PERFORM check_cost_element_group_v2
                                                      TABLES
                                                          lt_kstar_range
                                                      USING
                                                          gs_contract_hdr-bukrs_vf
                                                          gs_contract_hdr-kokrs
                                                          gs_clrqdoc_infocus-x-crhdr-rtbpn
                                                          lv_kstar
                                                          space
                                                       CHANGING
                                                          lv_valid.
          IF lv_billed IS INITIAL AND lv_valid IS INITIAL.
            lwa_clrit_key-clrno = lwa_critm-clrno.
            lwa_clrit_key-clrit = lwa_critm-clrit.
            APPEND lwa_clrit_key TO lt_clrit_key_delete. "delete
            CLEAR lwa_clrit_key.
          ELSEIF lv_valid IS INITIAL.
            lwa_clrit_key-clrno = lwa_critm-clrno.
            lwa_clrit_key-clrit = lwa_critm-clrit.
            APPEND lwa_clrit_key TO lt_clrit_key_del_billed. "delete
            CLEAR lwa_clrit_key.
          ENDIF.
        ENDAT.
      ENDLOOP.
      IF lt_clrit_key_delete IS NOT INITIAL.
        PERFORM delete_calc_req USING gs_clrqdoc_infocus-x-crhdr-clrno
                                      lt_clrit_key_delete
                                      '1'.
      ENDIF.
      IF lt_clrit_key_del_billed IS NOT INITIAL.
        PERFORM upd_inv_billed_item USING lt_clrit_key_del_billed.
      ENDIF.
      IF gs_clrqdoc_infocus-x-crhdr-msgcode CA gc_msg_code-v.
        REPLACE gc_mode_change INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        CONDENSE gs_clrqdoc_infocus-x-crhdr-msgcode NO-GAPS.
        gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
        APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
        CALL FUNCTION '/CGDC/CLRQ_SAVE'
          EXPORTING
            i_set_update_task = abap_true
            i_commit_work     = ' '
          CHANGING
            ct_clrq_doc       = lt_clrq_doc
          EXCEPTIONS
            no_change         = 1
            OTHERS            = 2.
        IF sy-subrc <> 0.
          "error handling
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
  gs_variables-exit_loop = abap_true.
  PERFORM initialize_document_data.
ENDFORM.
"-- replacement routine for Configure sources - 5144.
FORM validate_calc_req_01 USING lv_vbeln TYPE vbeln_va.
  DATA lt_kstar_range TYPE ty_kstar_range.
  DATA lv_kstar TYPE kstar.
  DATA lwa_critm TYPE /cgdc/s_clrqit.
  DATA lv_subrc TYPE sysubrc.
  DATA lv_valid TYPE flag.
  DATA lv_billed TYPE flag.
  DATA lwa_clrit_key TYPE /cgdc/s_clrqit_key.
  DATA lt_clrit_key TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA lt_clrit_key_delete TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA lt_clrit_key_del_billed TYPE TABLE OF /cgdc/s_clrqit_key.
  DATA: lt_clrq_doc TYPE /cgdc/tt_clrq_doc,
        lv_cr_upd   TYPE abap_bool.

  FIELD-SYMBOLS: <lt_src_tmp>  TYPE table,
                 <lwa_src_tmp> TYPE data.

  PERFORM select_clrqhd USING lv_vbeln ''. "Select CLRQ HDR Details
  PERFORM read_contract_details USING lv_vbeln.
  PERFORM select_add_cost_collectors.
  PERFORM enqueue_calc_request USING gs_clrqdoc_infocus-x-crhdr-clrno
                                                       gc_enq_mode-write
                                                 CHANGING lv_subrc.
  IF lv_subrc = 0.
    gs_variables-key_only = abap_true.
    PERFORM read_calc_request_document USING gs_clrqdoc_infocus-x-crhdr-clrno
                                       CHANGING gs_clrqdoc_infocus.
    lt_clrit_key = gs_clrqdoc_infocus-x-critm_key.
    gs_variables-overview_mode = gc_mode_change.
    ""ADDED BY NITIN.
    PERFORM select_clrqpit USING gs_clrqdoc_infocus-x-crhdr-clrno CHANGING lv_subrc.
    CLEAR lv_subrc.
    "Added By Nitin
    PERFORM set_calc_req_item_doc_infocus USING  lt_clrit_key
                                                 CHANGING lv_subrc.

    "++ SOC - Read Source Data for all selected items.

    " Source record for each item
    PERFORM get_src_data_by_link USING    gs_clrqdoc_infocus-x-critm
                                 CHANGING gs_clrqdoc_infocus-x-clrit_link.

    " All source records
    DATA(lo_src) = NEW /cgdc/cl_rtb_source_util( ).
    CALL METHOD lo_src->source_get_data_all
      EXPORTING
        iv_rtbpn     = gs_contract_hdr-/cgdc/rtbpn
        iv_vbeln     = gs_contract_hdr-vbeln
        it_item      = gt_contract_itm
        iv_bukrs     = gs_contract_hdr-bukrs_vf
        iv_kokrs     = gs_contract_hdr-kokrs
      IMPORTING
        iv_exit_loop = DATA(lv_exit)
        it_srcdata   = DATA(lt_srcdata).
*    ENDIF.

    "++ EOC - Read Source Data for all selected items.

    CLEAR  lt_clrit_key.
    IF lv_subrc = 0.
      LOOP AT gs_clrqdoc_infocus-x-critm INTO lwa_critm.
        CLEAR : lv_billed,
                lv_valid,
                lv_kstar.
        lv_kstar = lwa_critm-kstar.

        ""ADDED BY NITIN
*        READ TABLE gt_clrqpit TRANSPORTING NO FIELDS WITH KEY clrno = lwa_critm-clrno
*                                                              clrit = lwa_critm-clrit
*                                                              action_cd = 'WBS'.
*        IF sy-subrc = 0.
*          lwa_clrit_key-clrno = lwa_critm-clrno.
*          lwa_clrit_key-clrit = lwa_critm-clrit.
*          APPEND lwa_clrit_key TO lt_clrit_key_delete. "delete
*          CLEAR lwa_clrit_key.
*          CONTINUE.
*        ENDIF.

        DATA(lwa_critm_tmp) = lwa_critm.      "AT NEW will overwrite all fields with * in lwa_critm
        AT NEW clrit.
          "if already reversed, skip
          IF lwa_critm_tmp-reversed = abap_true.
            CONTINUE.
          ENDIF.

          PERFORM check_item_billed USING lwa_critm-clrno
                                          lwa_critm-clrit
                                 CHANGING lv_billed.

          "++ SOC - Read Source Data for all selected items.
          IF lwa_critm_tmp-rtb_source IS NOT INITIAL.
            "validate based on source output and source ref
            READ TABLE gs_clrqdoc_infocus-x-clrit_link ASSIGNING FIELD-SYMBOL(<lfs_clrit_link>)
                                             WITH KEY clrno = lwa_critm_tmp-clrno
                                                      clrit = lwa_critm_tmp-clrit.
            IF sy-subrc = 0.
              "1. Validate if line is still relevant by comparing with source selection
              READ TABLE lt_srcdata ASSIGNING FIELD-SYMBOL(<lfs_srcdata>)
                                    WITH KEY /cgdc/rtbpn = gs_contract_hdr-/cgdc/rtbpn
                                             source      = lwa_critm_tmp-rtb_source.
              IF sy-subrc = 0.
                ASSIGN <lfs_clrit_link>-data->* TO <lt_src_tmp>.
                CALL METHOD /cgdc/cl_rtb_source_util=>exists_in_src_data
                  EXPORTING
                    iv_rtbsource   = <lfs_srcdata>-source
                    it_critm_ref   = REF #( <lt_src_tmp> )
                    it_source_data = <lfs_srcdata>-data
                  RECEIVING
                    rv_exists      = lv_valid.
              ENDIF.
            ENDIF.
          ELSE.
            "Validate non reference items against Contract Line item.
            DATA(ls_contr_itm) = VALUE #( gt_contract_itm[ vbeln = lwa_critm_tmp-vgbel
                                                           posnr = lwa_critm_tmp-vgpos ] OPTIONAL ).
            DATA(ls_contr_subitm) = VALUE #( gt_contract_subitm[ vbeln = lwa_critm_tmp-vgbel
                                                           posnr = lwa_critm_tmp-vgpos ] OPTIONAL ).
            IF ls_contr_itm-ps_psp_pnr = lwa_critm_tmp-ps_psp_pnr OR
               ls_contr_subitm-ps_psp_pnr = lwa_critm_tmp-ps_psp_pnr.
              lv_valid = abap_true.
            ENDIF.
          ENDIF.

          "re-determine ref. document data for the item
          IF lv_valid = abap_true.          "validate contract reference, else they'll be adjusted
            PERFORM determine_ref_con_item CHANGING lwa_critm_tmp.
            DATA(ls_item) = VALUE #( gs_clrqdoc_infocus-x-critm[ clrno = lwa_critm_tmp-clrno
                                                                 clrit = lwa_critm_tmp-clrit ] OPTIONAL ).
            IF ls_item-vgbel <> lwa_critm_tmp-vgbel OR
               ls_item-vgpos <> lwa_critm_tmp-vgpos.
              lv_valid = abap_false.
            ENDIF.
            "update reference on item
*            LOOP AT gs_clrqdoc_infocus-x-critm ASSIGNING FIELD-SYMBOL(<lfs_itm>)
*                                                     WHERE clrno = lwa_critm_tmp-clrno AND
*                                                           clrit = lwa_critm_tmp-clrit.
*              <lfs_itm>-vgbel = lwa_critm_tmp-vgbel.
*              <lfs_itm>-vgpos = lwa_critm_tmp-vgpos.
*              <lfs_itm>-updkz = gc_updkz_update.
*              "update reference on item
*              READ TABLE gs_clrqdoc_infocus-x-crbinr ASSIGNING FIELD-SYMBOL(<lfs_crbinr>)
*                                                     WITH KEY clrno = lwa_critm_tmp-clrno
*                                                              bill_item = lwa_critm_tmp-rtbbinr
*                                                              bitype    = lwa_critm_tmp-bityp.
*              IF sy-subrc = 0.
*                <lfs_crbinr>-vgbel = lwa_critm_tmp-vgbel.
*                <lfs_crbinr>-vgpos = lwa_critm_tmp-vgpos.
*                <lfs_crbinr>-updkz = gc_updkz_update.
*              ENDIF.
*              lv_cr_upd = abap_true.
*            ENDLOOP.
          ENDIF.
          "++EOC - validate source records based on configured sources

          IF lv_billed IS INITIAL AND lv_valid IS INITIAL.
            lwa_clrit_key-clrno = lwa_critm-clrno.
            lwa_clrit_key-clrit = lwa_critm-clrit.
            APPEND lwa_clrit_key TO lt_clrit_key_delete. "delete
            CLEAR lwa_clrit_key.
          ELSEIF lv_valid IS INITIAL.
            lwa_clrit_key-clrno = lwa_critm-clrno.
            lwa_clrit_key-clrit = lwa_critm-clrit.
            APPEND lwa_clrit_key TO lt_clrit_key_del_billed. "delete
            CLEAR lwa_clrit_key.
          ENDIF.
        ENDAT.
      ENDLOOP.
      IF lt_clrit_key_delete IS NOT INITIAL.
        PERFORM delete_calc_req USING gs_clrqdoc_infocus-x-crhdr-clrno
                                      lt_clrit_key_delete
                                      '1'.
      ENDIF.
      IF lt_clrit_key_del_billed IS NOT INITIAL.
        PERFORM upd_inv_billed_item USING lt_clrit_key_del_billed.
      ENDIF.
      IF gs_clrqdoc_infocus-x-crhdr-msgcode CA gc_msg_code-v OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'Q' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'W' OR
         gs_clrqdoc_infocus-x-crhdr-msgcode CA 'U' OR gs_clrqdoc_infocus-x-crhdr-msgcode CA 'T'.
        REPLACE gc_msg_code-v INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        REPLACE 'Q' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        REPLACE 'W' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        REPLACE 'U' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        REPLACE 'T' INTO gs_clrqdoc_infocus-x-crhdr-msgcode WITH space.
        CONDENSE gs_clrqdoc_infocus-x-crhdr-msgcode NO-GAPS.
        gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
        APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
      ELSEIF lv_cr_upd = abap_true."some items for update - cont ref changes
        gs_clrqdoc_infocus-x-crhdr-updkz = gc_updkz_update.
        APPEND gs_clrqdoc_infocus TO lt_clrq_doc.
      ENDIF.

      IF lt_clrq_doc IS NOT INITIAL.
        CALL FUNCTION '/CGDC/CLRQ_SAVE'
          EXPORTING
            i_set_update_task = abap_true
            i_commit_work     = ' '
          CHANGING
            ct_clrq_doc       = lt_clrq_doc
          EXCEPTIONS
            no_change         = 1
            OTHERS            = 2.
        IF sy-subrc <> 0.
          "error handling
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
  gs_variables-exit_loop = abap_true.
  PERFORM initialize_document_data.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_reason_code
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM validate_reason_code .

  CONSTANTS: lc_okcode_cont301 TYPE sy-ucomm VALUE 'CONT301',
             lc_okcode_cont302 TYPE sy-ucomm VALUE 'CONT302'.

  CHECK ok_code = lc_okcode_cont301 OR ok_code = lc_okcode_cont302.

  IF /cgdc/s_clrq_screenfields-rsncd IS INITIAL AND
     gs_variables-itm_post_amt_un IS INITIAL AND
     gs_variables-itm_post_quan_un IS INITIAL.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e026(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '026'.
      gs_messages-msgty = gc_message_type-error.
      APPEND gs_messages TO gt_messages.
    ENDIF.

  ELSE.
    IF gs_variables-itm_post_amt IS NOT INITIAL OR
      gs_variables-itm_post_quan IS NOT INITIAL. "postpone screen

      SELECT SINGLE @abap_true
          FROM /cgdc/t_clrtype AS a
          INNER JOIN /cgdc/t_rtbrpar AS b
          ON b~rsnpf = a~rsnprf_p
          WHERE b~rsncd = @/cgdc/s_clrq_screenfields-rsncd
          INTO @DATA(lv_exist).
    ELSEIF gs_variables-itm_rej_amt IS NOT INITIAL OR
      gs_variables-itm_rej_quan IS NOT INITIAL. "Rejection screen

      SELECT SINGLE @abap_true
      FROM /cgdc/t_clrtype AS a
      INNER JOIN /cgdc/t_rtbrpar AS b
      ON b~rsnpf = a~rsnprf_r
      WHERE b~rsncd = @/cgdc/s_clrq_screenfields-rsncd
      INTO @lv_exist.
    ENDIF.
    IF sy-subrc <> 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e076(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '076'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_popend_date
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_ITEM
*&      <-- LV_POP_END
*&---------------------------------------------------------------------*
FORM validate_popend_date  USING   lv_vbeln TYPE vgbel
                                   lv_posnr TYPE vgpos
                           CHANGING lv_pop_end TYPE datum.

  CONSTANTS lc_n TYPE /cgdc/bcopop VALUE 'N'.

  CLEAR: gs_variables-no_new_bill_item.
  PERFORM read_contract_items USING lv_vbeln.

  SELECT SINGLE /cgdc/fendat
        FROM /cgdc/cf_sd_it
        INTO @DATA(lv_cf_pop_end)
        WHERE vbeln = @lv_vbeln
          AND posnr = @lv_posnr.

  READ TABLE gt_contract_itm INTO DATA(lwa_contract_itm)
         WITH KEY vbeln = lv_vbeln
                  posnr = lv_posnr.
  IF sy-subrc EQ 0.
    IF lwa_contract_itm-/cgdc/bcopop IS INITIAL OR
      lwa_contract_itm-/cgdc/bcopop EQ lc_n.
      IF lv_pop_end GT lv_cf_pop_end.
        lv_pop_end = lv_cf_pop_end.
        gs_variables-no_new_bill_item = abap_true.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_frequency
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> LS_CHAR_AND_FREQ
*&      --> LS_OGROUP_CHAR_AND_FREQ
*&      <-- LV_SKIP
*&---------------------------------------------------------------------*
FORM validate_frequency  USING lv_call_for                   " 1: Scheduler Group, 2: Contract Override Group
                              ls_char_and_freq        TYPE /cgdc/t_rtbsc
                              ls_ogroup_char_and_freq TYPE /cgdc/_rtbsogc
                     CHANGING lv_skip.

  DATA: lv_days                TYPE /cgdc/freq_period,
        lv_calendarid          TYPE btccalid,
        lv_group_name(8),
        lv_next_working_day    TYPE /cgdc/next_wrk_day,
        lv_freq_type           TYPE /cgdc/freq_type,
        lv_start_date          TYPE /cgdc/rrbs_sdate,
        lv_period              TYPE dlydy,
        lv_dummy_period        TYPE dlydy,           " Dummy
        lv_next_date           TYPE /cgdc/rrbs_ldate,
        lv_last_date           TYPE /cgdc/rrbs_ldate,
        ls_next_date_per_group TYPE gs_next_date_per_group,
        ls_group_log           TYPE /cgdc/_rtbsgl.

  IF lv_call_for EQ '1'.
    lv_freq_type = ls_char_and_freq-ftype.
    MOVE ls_char_and_freq-fperd TO lv_period.
    lv_start_date = ls_char_and_freq-sdate.
    lv_group_name = ls_char_and_freq-sgrpn.
    lv_calendarid = ls_char_and_freq-calendarid.
    lv_next_working_day = ls_char_and_freq-next_wrk_day.
  ELSE.
    lv_freq_type = ls_ogroup_char_and_freq-ftype.
    MOVE ls_ogroup_char_and_freq-fperd TO lv_period.
    lv_start_date = ls_ogroup_char_and_freq-sdate.
    lv_group_name = ls_ogroup_char_and_freq-cogrp.
    lv_calendarid = ls_ogroup_char_and_freq-calendarid.
    lv_next_working_day = ls_ogroup_char_and_freq-next_wrk_day.
  ENDIF.

  IF gt_group_log IS INITIAL.

    SELECT *
      FROM /cgdc/_rtbsgl
      INTO TABLE gt_group_log.

    IF NOT gt_group_log IS INITIAL.
      SORT gt_group_log BY sgrpn cogrp ASCENDING tstamp DESCENDING.
    ENDIF.

  ENDIF.

  IF gt_group_clin_log_old IS INITIAL.

    SELECT *
      FROM /cgdc/_rtbsgcl
      INTO TABLE gt_group_clin_log_old.

    IF NOT gt_group_clin_log_old IS INITIAL.
      SORT gt_group_clin_log_old BY sgrpn cogrp vbeln posnr ASCENDING tstamp DESCENDING.
    ENDIF.

  ENDIF.

  CLEAR lv_skip.

  IF lv_start_date EQ sy-datum.


    lv_skip = abap_true.

  ELSE.

    IF lv_call_for EQ '1'.
      READ TABLE gt_group_log
      WITH KEY sgrpn = ls_char_and_freq-sgrpn
      BINARY SEARCH
      INTO ls_group_log.
    ELSE.
      READ TABLE gt_group_log
      WITH KEY sgrpn = space
               cogrp = ls_ogroup_char_and_freq-cogrp
      BINARY SEARCH
      INTO ls_group_log.
    ENDIF.

    IF sy-subrc EQ 0.
      lv_next_date = ls_group_log-ndate.
    ENDIF.

    WHILE ( lv_next_date LT sy-datum
        OR lv_next_date IS INITIAL )
      AND ( lv_start_date LT sy-datum ).

      CASE lv_freq_type.
        WHEN gc_freq_type-daily.

          CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
            EXPORTING
*             date      = lwa_group_log-ldate
              date      = lv_start_date
              days      = lv_period
              months    = lv_dummy_period
              years     = lv_dummy_period
            IMPORTING
              calc_date = lv_next_date.

        WHEN gc_freq_type-weekly.

          lv_next_date = lv_start_date.
          lv_days = 7 * lv_period.
          ADD lv_days TO lv_next_date.

        WHEN gc_freq_type-monthly.

          CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
            EXPORTING
              date      = lv_start_date
              months    = lv_period
              days      = lv_dummy_period
              years     = lv_dummy_period
            IMPORTING
              calc_date = lv_next_date.

      ENDCASE.

      PERFORM check_holiday_date USING lv_calendarid lv_next_working_day
                              CHANGING lv_next_date.
* To prevent system from going in infinite loop, when start date is in the past and freq type is daily - 2
* and the next date falls on a holiday twice
      IF lv_start_date EQ lv_next_date
        AND lv_start_date LT sy-datum.
        lv_next_date = lv_next_date + 1.
      ENDIF.
***
      lv_start_date = lv_next_date.

    ENDWHILE.

    IF lv_next_date EQ sy-datum.
      lv_skip = abap_true.
    ENDIF.

    IF NOT lv_next_date IS INITIAL.

      READ TABLE gt_next_date_per_group
      WITH KEY group = lv_group_name
      TRANSPORTING NO FIELDS.

      IF sy-subrc NE 0.
        ls_next_date_per_group-group = lv_group_name.
        ls_next_date_per_group-next_date = lv_next_date.
        APPEND ls_next_date_per_group TO gt_next_date_per_group.
      ENDIF.

    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form read_dyn_source_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> IS_VBAK_VBELN
*&      --> IT_VBAP
*&---------------------------------------------------------------------*
FORM read_dyn_source_data  USING    p_is_vbak_vbeln TYPE vbeln_va
                                    p_it_vbap TYPE /cgdc/tt_vbap.
  TYPES: BEGIN OF ty_srcdata,
           /cgdc/rtbpn TYPE /cgdc/rtbpn,
           source      TYPE /cgdc/rtbsource,
           data        TYPE REF TO data,
         END OF ty_srcdata.

  DATA: lt_srcdata TYPE TABLE OF ty_srcdata,
        ls_srcdata TYPE ty_srcdata,
        lv_itm_ind TYPE sytabix.

  DATA: lvc_class TYPE REF TO /cgdc/cl_rtb_source_util.
  FIELD-SYMBOLS: <ft_srcdata>   TYPE table. "lt_srcdata.

  ASSIGN lt_srcdata TO <ft_srcdata>.

  CREATE OBJECT lvc_class.
  CALL METHOD lvc_class->source_get_data
    EXPORTING
      iv_rtbpn     = gs_contract_hdr-/cgdc/rtbpn
      iv_clrno     = gs_clrqdoc_infocus-x-crhdr-clrno
      iv_vbeln     = gs_contract_hdr-vbeln
      it_item      = gt_contract_itm
      iv_cmfrq     = gs_variables-cmfrq
      iv_bukrs     = gs_contract_hdr-bukrs_vf
      iv_kokrs     = gs_contract_hdr-kokrs
    IMPORTING
      iv_exit_loop = gs_variables-exit_loop
      it_srcdata   = <ft_srcdata>.

  gt_src_dyn = lt_srcdata.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_billblk_hdr
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM validate_billblk_hdr .
  DATA:lv_manual_curr   TYPE xfeld,
       lv_auth_curr     TYPE abap_bool,
       lv_blk_desc_curr TYPE vtext.

  IF /cgdc/_clrqhd-faksk NE gs_be_crhdr_buffer-faksk AND gs_be_crhdr_buffer-faksk <> ' '.
    "" check prvs & current block stats
    DATA(lv_prvs_faksk) = gs_be_crhdr_buffer-faksk.
    DATA(lv_curr_faksk) = /cgdc/_clrqhd-faksk.

    "" check if prvs block can be changed manually
    /cgdc/cl_be_helper=>get_blkobj_by_blkcd(
      EXPORTING
        im_blkcd  = lv_prvs_faksk
      IMPORTING
        re_blkobj = DATA(lv_prvs_blkobj)
    ).

    /cgdc/cl_be_helper=>get_instance(
      EXPORTING
        iv_blkid  = lv_prvs_blkobj
        iv_blktyp = /cgdc/cl_be_helper=>gc_block_type-billing_block
      RECEIVING
        ro_blkobj = DATA(lo_prvs_blkobj)
    ).

    /cgdc/cl_be_helper=>get_blkcd_descr(
      EXPORTING
        iv_blkcd = lv_prvs_faksk
      RECEIVING
        re_descr = DATA(lv_faksk_descr)
    ).

    lo_prvs_blkobj->get_block_info(
      IMPORTING
        es_blkobjhdr  = DATA(ls_blkobjhdr)
    ).

    IF ls_blkobjhdr-manual <> abap_true.
      "" if auto bill block changed manually

      /cgdc/_clrqhd-faksk = gs_be_crhdr_buffer-faksk. "" reset the block

      MESSAGE i116(/cgdc/blk) WITH gs_clrqdoc_infocus-clrno
                                   lv_prvs_faksk
                                   lv_faksk_descr.

    ELSE.
      "" if manual block, check auth to remove
      lo_prvs_blkobj->check_auth(
        EXPORTING
          im_action     = '1'
        RECEIVING
          rv_authorised = DATA(lv_auth)
      ).

      IF lv_auth <> abap_true.
        /cgdc/_clrqhd-faksk = gs_be_crhdr_buffer-faksk. "" reset the block
        MESSAGE i116(/cgdc/blk) WITH gs_clrqdoc_infocus-clrno
                                     lv_prvs_faksk
                                     lv_faksk_descr.
      ELSE.

        IF lv_curr_faksk <> ' '.
          "" check if current block can be applied manually
          PERFORM check_curr_blk_auth USING lv_curr_faksk
                                      CHANGING lv_auth_curr.
          IF lv_auth_curr = abap_true.
            gs_clrqdoc_infocus-x-crhdr-faksk = /cgdc/_clrqhd-faksk.
            CALL METHOD /cgdc/cl_be_helper=>skip_eval_register
              EXPORTING
                iv_blkcd = /cgdc/_clrqhd-faksk " Billing Block for header
                iv_clrno = /cgdc/_clrqhd-clrno. " CIS-AD: Calculation Request Number
          ENDIF.
        ELSE.
          gs_clrqdoc_infocus-x-crhdr-faksk = lv_curr_faksk.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSEIF /cgdc/_clrqhd-faksk EQ gs_be_crhdr_buffer-faksk AND /cgdc/_clrqhd-faksk = ' ' AND gs_be_crhdr_buffer-faksk = ' '.
    CALL METHOD /cgdc/cl_be_helper=>skip_eval_register
      EXPORTING
        iv_blkcd = /cgdc/_clrqhd-faksk " Billing Block for header
        iv_clrno = /cgdc/_clrqhd-clrno. " CIS-AD: Calculation Request Number

  ELSEIF /cgdc/_clrqhd-faksk NE gs_be_crhdr_buffer-faksk AND /cgdc/_clrqhd-faksk <> ' ' AND gs_be_crhdr_buffer-faksk = ' '.
    PERFORM check_curr_blk_auth USING /cgdc/_clrqhd-faksk
                                CHANGING lv_auth_curr.
    IF lv_auth_curr = abap_true.
      gs_clrqdoc_infocus-x-crhdr-faksk = /cgdc/_clrqhd-faksk.
      /cgdc/cl_be_helper=>mv_cr_blk_set = abap_true.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_src_data_by_link
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_CLRQDOC_INFOCUS_X_CLTIT_LIN
*&---------------------------------------------------------------------*
FORM get_src_data_by_link  USING    it_clrit         TYPE /cgdc/tt_clrqit
                           CHANGING ct_clrit_link    TYPE /cgdc/tt_clrqlink_data.

  TYPES: BEGIN OF lty_src_clritm,
           source TYPE /cgdc/rtbsource,
           clrno  TYPE /cgdc/clrqno,
           clrit  TYPE /cgdc/clrq_itmno,
         END OF lty_src_clritm.

  DATA: lt_crlink     TYPE /cgdc/tt_crlink,
        lt_src_clritm TYPE STANDARD TABLE OF lty_src_clritm,
        lv_cond1      TYPE string,
        lv_cond2      TYPE string,
        lt_whitelist  TYPE HASHED TABLE OF string WITH UNIQUE KEY table_line..

  FIELD-SYMBOLS: <lt_linktab> TYPE table,
                 <lt_srcdata> TYPE table,
                 <lt_tab>     TYPE table,
                 <lfs_data>   TYPE data.

  "consolidate request items by source
  lt_src_clritm = VALUE #( FOR ls_clrit IN it_clrit ( source = ls_clrit-rtb_source
                                                      clrno = ls_clrit-clrno
                                                      clrit = ls_clrit-clrit
                                                       ) ).

  DATA(lt_sources) = lt_src_clritm[].

  SORT lt_src_clritm BY clrno clrit.
  DELETE ADJACENT DUPLICATES FROM lt_src_clritm COMPARING clrno clrit.

  SORT lt_sources BY source.
  DELETE ADJACENT DUPLICATES FROM lt_sources COMPARING source.

  "read full src data for all corresponding items into clrqlink
  LOOP AT lt_sources ASSIGNING FIELD-SYMBOL(<lfs_source>).
    DATA(lt_clritm_key) = VALUE /cgdc/tt_clrqit_key( FOR ls_itm IN lt_src_clritm WHERE ( source = <lfs_source>-source )
                                                     ( clrno = ls_itm-clrno clrit = ls_itm-clrit ) ).

    " find source CDS for RTB Source
    DATA(ls_view) = /cgdc/cl_rtb_src_db=>read_view_by_rtbsrc( <lfs_source>-source ).

    "find link tab for RTB source
    CALL METHOD /cgdc/cl_rtb_src_db=>find_linktab_by_table
      EXPORTING
        iv_table   = ls_view-primtab
      IMPORTING
        ev_linktab = DATA(lv_linktab).

    "link tab data
    CALL METHOD /cgdc/cl_rtb_src_db=>read_linktab_by_critm
      EXPORTING
        iv_link_table = lv_linktab
        it_clrqit_key = lt_clritm_key
      IMPORTING
        et_data       = DATA(lt_link_tab).

    "Source data
    CALL METHOD /cgdc/cl_rtb_src_db=>read_src_data_by_critm
      EXPORTING
        iv_rtbsource = <lfs_source>-source
        it_clrqit    = lt_clritm_key
      IMPORTING
        et_result    = DATA(lt_result).

    "segregate into source record per CR item
    LOOP AT lt_clritm_key ASSIGNING FIELD-SYMBOL(<lfs_critm_key>).
      ASSIGN lt_link_tab->* TO <lt_linktab>.
      IF <lt_linktab> IS ASSIGNED.
        "for CR item - find link table record
        lv_cond1 = |clrno = '{ cl_abap_dyn_prg=>escape_quotes( <lfs_critm_key>-clrno ) }' AND clrit = '{ cl_abap_dyn_prg=>escape_quotes( <lfs_critm_key>-clrit ) }' |.

        LOOP AT <lt_linktab> ASSIGNING FIELD-SYMBOL(<lfs_link>) WHERE (lv_cond1).
          "for linktable record - find source record
          ASSIGN lt_result->* TO <lt_srcdata>.
          IF <lt_srcdata> IS ASSIGNED.

            "generate where clause based on link table
            lv_cond2 = /cgdc/cl_rtb_source_util=>gen_srcline_where_clause( iv_link_table   = lv_linktab
                                                                           is_linktab_line = REF #( <lfs_link> ) ).

            CLEAR lt_whitelist.
            INSERT lv_cond2 INTO TABLE lt_whitelist .
            TRY.
                lv_cond2  = cl_abap_dyn_prg=>check_whitelist_tab( val = lv_cond2 whitelist = lt_whitelist ).
              CATCH cx_abap_not_in_whitelist.

            ENDTRY.

            LOOP AT <lt_srcdata> ASSIGNING FIELD-SYMBOL(<lfs_src_line>) WHERE (lv_cond2).
              "append to ct_clrit_link
              APPEND INITIAL LINE TO ct_clrit_link ASSIGNING FIELD-SYMBOL(<lfs_clrit_link>).
              CREATE DATA <lfs_clrit_link>-data TYPE TABLE OF (ls_view-cds_view).
              ASSIGN <lfs_clrit_link>-data->* TO <lt_tab>.
              IF <lt_tab> IS ASSIGNED.
                <lfs_clrit_link>-clrno  = <lfs_critm_key>-clrno.
                <lfs_clrit_link>-clrit  = <lfs_critm_key>-clrit.
                <lfs_clrit_link>-source = <lfs_source>-source.
                <lfs_clrit_link>-prim_tb = ls_view-primtab.
                <lfs_clrit_link>-link_tb = lv_linktab.

                APPEND <lfs_src_line> TO <lt_tab>.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form determine_ref_con_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM determine_ref_con_item CHANGING ls_vld_clrit TYPE /cgdc/s_clrqit.
  "This is used to redetermine Contract item reference for CR item, just in case it has changed
  "due to any changes in the system.

  IF ls_vld_clrit-itmty IS INITIAL.
    "Usual CR item
    READ TABLE gt_billitem INTO DATA(lwa_billitem)
    WITH KEY pspnr = ls_vld_clrit-objnr.
    IF sy-subrc = 0.
      READ TABLE gt_contract_itm INTO DATA(ls_contract_itm)
      WITH KEY ps_psp_pnr = lwa_billitem-bpspnr.
      IF sy-subrc <> 0.
***Consider Add Cost Collectors
        READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
        INTO DATA(lwa_add_cost_coll_pspnr).

        IF sy-subrc EQ 0.

          READ TABLE gt_contract_itm INTO ls_contract_itm
          WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.

          IF sy-subrc NE 0.
            CLEAR ls_contract_itm.
          ENDIF.

        ENDIF.
      ENDIF.
    ELSE.
***Consider Add Cost Collectors
      READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = ls_vld_clrit-pspnr
      INTO lwa_add_cost_coll_pspnr.
      IF sy-subrc EQ 0.
        READ TABLE gt_contract_itm INTO ls_contract_itm
        WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.
        IF sy-subrc NE 0.
          CLEAR ls_contract_itm.
        ENDIF.
      ENDIF.
    ENDIF.

  ELSEIF ls_vld_clrit-itmty = gc_clrq_itmty-bill_plan_line OR
         ls_vld_clrit-itmty = gc_clrq_itmty-calc_grp_itm   OR
         ls_vld_clrit-itmty = gc_clrq_itmty-manual_line    OR
         ls_vld_clrit-itmty <> gc_clrq_itmty-prepayment_item.
    "all non source scenarios, use WBS to find the right line
    READ TABLE gt_billitem INTO lwa_billitem
    WITH KEY pspnr = ls_vld_clrit-objnr.
    IF sy-subrc = 0.
      READ TABLE gt_contract_itm INTO ls_contract_itm
      WITH KEY ps_psp_pnr = ls_vld_clrit-ps_psp_pnr.
      IF sy-subrc NE 0.
***Consider Add Cost Collectors
        CLEAR lwa_add_cost_coll_pspnr.
        READ TABLE gt_add_cost_coll_pspnr WITH KEY cost_coll_pspnr = lwa_billitem-bpspnr
        INTO lwa_add_cost_coll_pspnr.
        IF sy-subrc EQ 0.
          CLEAR ls_contract_itm.
          READ TABLE gt_contract_itm INTO ls_contract_itm
          WITH KEY ps_psp_pnr = lwa_add_cost_coll_pspnr-con_itm_pspnr.
          IF sy-subrc NE 0.
            CLEAR ls_contract_itm.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.

  IF ls_contract_itm-vbeln IS INITIAL AND
     ls_contract_itm-posnr IS INITIAL.
    "can't identify corresponding item. return error
    clear: ls_vld_clrit-vgbel, ls_vld_clrit-vgpos.
    RETURN.
  ELSE.
    ls_vld_clrit-vgbel = ls_contract_itm-vbeln.
    ls_vld_clrit-vgpos = ls_contract_itm-posnr.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form validate_constr_dt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM validate_constr_dt .
  IF ( gs_clrqdoc_infocus-x-crhdr-rel_calc_dt IS NOT INITIAL AND
    gs_variables-rel_constr_dt < gs_clrqdoc_infocus-x-crhdr-rel_calc_dt )
     .
    MESSAGE e166(/cgdc/clrq) WITH gs_clrqdoc_infocus-x-crhdr-rel_calc_dt.
  ENDIF.

  IF gs_variables-rel_constr_dt > sy-datum.
    MESSAGE e169(/cgdc/clrq).
  ENDIF.

ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2022] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-211COINCGDC (CIS-AD S/4 Hana 2021)
*
* DESCRIPTION: /CGDC/LCLRQMF0W
**********************************************************

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0W.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form wait_for_full_unlock
*&---------------------------------------------------------------------*
FORM wait_for_full_unlock  USING lv_clrno TYPE /cgdc/clrqno.

  DATA: lv_check TYPE flag.
  CLEAR lv_check.
  IF gs_variables-overview_mode EQ gc_mode_display.
    WHILE lv_check IS INITIAL.
      CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
        EXPORTING
          mode_/cgdc/_clrqhd = gc_enq_mode-check
          mandt              = sy-mandt
          clrno              = lv_clrno
        EXCEPTIONS
          foreign_lock       = 1
          system_failure     = 2
          OTHERS             = 3.
      IF sy-subrc EQ 0.
        lv_check = abap_true.
      ENDIF.
    ENDWHILE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form subgroup_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_WHERE_GRP
*&---------------------------------------------------------------------*
FORM subgroup_data  USING    ls_clgrn TYPE /cgdc/s_clrqgrr
                             p_where_grp TYPE string
                             lt_temp_clrqgrrf TYPE /cgdc/tt_clrqgrrf
                    CHANGING lt_s_clrqit TYPE /cgdc/tt_clrqit.

  DATA: ls_clrqgrrf         TYPE /cgdc/s_clrqgrrf.
  DATA: lt_sel_list        TYPE TABLE OF edpline,
        ls_sel_list        TYPE edpline,
        lv_from_table_clrq TYPE string.

  CONSTANTS: lc_eapp TYPE char1 VALUE 'E',
             lc_bapp TYPE char1 VALUE 'B'.

  FIELD-SYMBOLS: <lv_value>    TYPE any.


  SELECT * FROM /cgdc/t_rtbsubgp INTO TABLE @DATA(lt_subgrp) WHERE clgrn = @ls_clgrn-clgrn.

  LOOP AT lt_subgrp INTO DATA(ls_subgrp).
    READ TABLE gt_item_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = ls_subgrp-fname.
    IF sy-subrc = 0.
      CONCATENATE lc_bapp '~' ls_subgrp-fname INTO ls_subgrp-fname.
    ENDIF.

    READ TABLE gt_itemc_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = ls_subgrp-fname.
    IF sy-subrc = 0.
      CONCATENATE lc_eapp '~' ls_subgrp-fname INTO ls_subgrp-fname.
    ENDIF.

    IF lt_sel_list IS INITIAL.
      ls_sel_list =  ls_subgrp-fname .
    ELSE.
      ls_sel_list =  ',' && ls_subgrp-fname .
    ENDIF.
    APPEND ls_sel_list TO lt_sel_list.
  ENDLOOP.

  CONCATENATE `/CGDC/_CLRQHD AS A `
         ` INNER JOIN /CGDC/_CLRQIT AS B `
         ` ON  A~CLRNO = B~CLRNO AND B~CLRSIT <> '000000' `
*         ` INNER JOIN /CGDC/_CLRQCN AS C `
*                      ` ON  B~CLRNO = C~CLRNO `
*                      ` AND B~CLRIT = C~CLRIT `
*                      ` AND B~CLRSIT = C~CLRSIT `
*                      ` AND B~CLRDIT = C~CLRDIT `
*                      ` AND C~KINAK = SPACE `
         ` INNER JOIN /CGDC/_CLRQBI AS D `
                      ` ON  B~CLRNO = D~CLRNO `
                      ` AND B~RTBBINR = D~BILL_ITEM `
                      ` AND B~BITYP = D~BITYPE `
                      ` AND D~FAKSP = ' '`
                      ` AND D~BLDAT <= SY-DATUM `
         ` LEFT OUTER JOIN /CGDC/_CLRQIC AS E `
                      ` ON  B~CLRNO = E~CLRNO`
                      ` AND B~CLRIT = E~CLRIT `
                      ` AND B~CLRSIT = E~CLRSIT `
                      ` AND B~CLRDIT = E~CLRDIT `
                      INTO lv_from_table_clrq.
FIELD-SYMBOLS : <ft_table> TYPE ANY TABLE.
  IF lt_subgrp IS NOT INITIAL.
    ASSIGN lt_s_clrqit to <ft_table>.
     p_where_grp = cl_abap_dyn_prg=>escape_quotes_str( p_where_grp ). "ATC Corrections
    SELECT DISTINCT (lt_sel_list)
               FROM (lv_from_table_clrq)
              INTO CORRESPONDING FIELDS OF TABLE <ft_table>
              WHERE (p_where_grp).

    LOOP AT lt_s_clrqit INTO DATA(ls_clrqit).
      IF sy-tabix GT 1.
        gv_index = gv_index  + 1.
        ls_clgrn-rowid = gv_index.
        APPEND ls_clgrn TO gs_clrqdoc_infocus-x-crgrr.
        LOOP AT lt_temp_clrqgrrf INTO ls_clrqgrrf.
        ls_clrqgrrf-rowid = gv_index.
        APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
      ENDLOOP.
      ENDIF.
      MOVE-CORRESPONDING ls_clgrn TO ls_clrqgrrf.
      LOOP AT  lt_subgrp INTO ls_subgrp.
        ASSIGN COMPONENT ls_subgrp-fname OF STRUCTURE ls_clrqit TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          ls_clrqgrrf-fname = ls_subgrp-fname.
          ls_clrqgrrf-fvalue = <lv_value>.
*          IF ls_clrqgrrf-fvalue IS INITIAL.
*            CONTINUE.
*          ENDIF.
          IF ls_clrqgrrf-fname = 'VGPOS'.
            ls_clrqgrrf-fname = 'CNTIT'.
          ENDIF.

          READ TABLE gt_item_fields
          TRANSPORTING NO FIELDS
          WITH KEY fieldname = ls_subgrp-fname.
          IF sy-subrc = 0.
            ls_clrqgrrf-fcatg = 'IT'.
          ELSE.
            READ TABLE gt_header_fields
            TRANSPORTING NO FIELDS
            WITH KEY fieldname = ls_subgrp-fname.
            IF sy-subrc = 0.
              ls_clrqgrrf-fcatg = 'HD'.
            ENDIF.
          ENDIF.

          APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.

          IF ls_clrqgrrf-fname = 'CNTIT'.

            ls_clrqgrrf-fname = '/CGDC/ORGI'.
            ls_clrqgrrf-fcatg = 'IT'.

            APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
          ENDIF.

          UNASSIGN <lv_value>.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

*    IF gv_index GT 1 AND LT_S_CLRQIT IS NOT INITIAL.  "SEND THE ALL THE charatersitc along with subgroups only when index is greater than 1.
*      LOOP AT lt_temp_clrqgrrf INTO ls_clrqgrrf.
*        ls_clrqgrrf-rowid = gv_index.
*        APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
*      ENDLOOP.
*    ENDIF.
  ENDIF.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2022] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-211COINCGDC (CIS-AD S/4 Hana 2021)
*
* DESCRIPTION: /CGDC/LCLRQMF0W
**********************************************************

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMF0W.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form wait_for_full_unlock
*&---------------------------------------------------------------------*
FORM wait_for_full_unlock  USING lv_clrno TYPE /cgdc/clrqno.

  DATA: lv_check TYPE flag.
  CLEAR lv_check.
  IF gs_variables-overview_mode EQ gc_mode_display.
    WHILE lv_check IS INITIAL.
      CALL FUNCTION 'ENQUEUE_/CGDC/E_CLRQ'
        EXPORTING
          mode_/cgdc/_clrqhd = gc_enq_mode-check
          mandt              = sy-mandt
          clrno              = lv_clrno
        EXCEPTIONS
          foreign_lock       = 1
          system_failure     = 2
          OTHERS             = 3.
      IF sy-subrc EQ 0.
        lv_check = abap_true.
      ENDIF.
    ENDWHILE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form subgroup_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_WHERE_GRP
*&---------------------------------------------------------------------*
FORM subgroup_data  USING    ls_clgrn TYPE /cgdc/s_clrqgrr
                             p_where_grp TYPE string
                             lt_temp_clrqgrrf TYPE /cgdc/tt_clrqgrrf
                    CHANGING lt_s_clrqit TYPE /cgdc/tt_clrqit.

  DATA: ls_clrqgrrf         TYPE /cgdc/s_clrqgrrf.
  DATA: lt_sel_list        TYPE TABLE OF edpline,
        ls_sel_list        TYPE edpline,
        lv_from_table_clrq TYPE string.

  CONSTANTS: lc_eapp TYPE char1 VALUE 'E',
             lc_bapp TYPE char1 VALUE 'B'.

  FIELD-SYMBOLS: <lv_value>    TYPE any.


  SELECT * FROM /cgdc/t_rtbsubgp INTO TABLE @DATA(lt_subgrp) WHERE clgrn = @ls_clgrn-clgrn.

  LOOP AT lt_subgrp INTO DATA(ls_subgrp).
    READ TABLE gt_item_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = ls_subgrp-fname.
    IF sy-subrc = 0.
      CONCATENATE lc_bapp '~' ls_subgrp-fname INTO ls_subgrp-fname.
    ENDIF.

    READ TABLE gt_itemc_fields
              TRANSPORTING NO FIELDS
              WITH KEY fieldname = ls_subgrp-fname.
    IF sy-subrc = 0.
      CONCATENATE lc_eapp '~' ls_subgrp-fname INTO ls_subgrp-fname.
    ENDIF.

    IF lt_sel_list IS INITIAL.
      ls_sel_list =  ls_subgrp-fname .
    ELSE.
      ls_sel_list =  ',' && ls_subgrp-fname .
    ENDIF.
    APPEND ls_sel_list TO lt_sel_list.
  ENDLOOP.

  CONCATENATE `/CGDC/_CLRQHD AS A `
         ` INNER JOIN /CGDC/_CLRQIT AS B `
         ` ON  A~CLRNO = B~CLRNO AND B~CLRSIT <> '000000' `
*         ` INNER JOIN /CGDC/_CLRQCN AS C `
*                      ` ON  B~CLRNO = C~CLRNO `
*                      ` AND B~CLRIT = C~CLRIT `
*                      ` AND B~CLRSIT = C~CLRSIT `
*                      ` AND B~CLRDIT = C~CLRDIT `
*                      ` AND C~KINAK = SPACE `
         ` INNER JOIN /CGDC/_CLRQBI AS D `
                      ` ON  B~CLRNO = D~CLRNO `
                      ` AND B~RTBBINR = D~BILL_ITEM `
                      ` AND B~BITYP = D~BITYPE `
                      ` AND D~FAKSP = ' '`
                      ` AND D~BLDAT <= SY-DATUM `
         ` LEFT OUTER JOIN /CGDC/_CLRQIC AS E `
                      ` ON  B~CLRNO = E~CLRNO`
                      ` AND B~CLRIT = E~CLRIT `
                      ` AND B~CLRSIT = E~CLRSIT `
                      ` AND B~CLRDIT = E~CLRDIT `
                      INTO lv_from_table_clrq.
FIELD-SYMBOLS : <ft_table> TYPE ANY TABLE.
  IF lt_subgrp IS NOT INITIAL.
    ASSIGN lt_s_clrqit to <ft_table>.
     p_where_grp = cl_abap_dyn_prg=>escape_quotes_str( p_where_grp ). "ATC Corrections
    SELECT DISTINCT (lt_sel_list)
               FROM (lv_from_table_clrq)
              INTO CORRESPONDING FIELDS OF TABLE <ft_table>
              WHERE (p_where_grp).

    LOOP AT lt_s_clrqit INTO DATA(ls_clrqit).
      IF sy-tabix GT 1.
        gv_index = gv_index  + 1.
        ls_clgrn-rowid = gv_index.
        APPEND ls_clgrn TO gs_clrqdoc_infocus-x-crgrr.
        LOOP AT lt_temp_clrqgrrf INTO ls_clrqgrrf.
        ls_clrqgrrf-rowid = gv_index.
        APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
      ENDLOOP.
      ENDIF.
      MOVE-CORRESPONDING ls_clgrn TO ls_clrqgrrf.
      LOOP AT  lt_subgrp INTO ls_subgrp.
        ASSIGN COMPONENT ls_subgrp-fname OF STRUCTURE ls_clrqit TO <lv_value>.
        IF <lv_value> IS ASSIGNED.
          ls_clrqgrrf-fname = ls_subgrp-fname.
          ls_clrqgrrf-fvalue = <lv_value>.
*          IF ls_clrqgrrf-fvalue IS INITIAL.
*            CONTINUE.
*          ENDIF.
          IF ls_clrqgrrf-fname = 'VGPOS'.
            ls_clrqgrrf-fname = 'CNTIT'.
          ENDIF.

          READ TABLE gt_item_fields
          TRANSPORTING NO FIELDS
          WITH KEY fieldname = ls_subgrp-fname.
          IF sy-subrc = 0.
            ls_clrqgrrf-fcatg = 'IT'.
          ELSE.
            READ TABLE gt_header_fields
            TRANSPORTING NO FIELDS
            WITH KEY fieldname = ls_subgrp-fname.
            IF sy-subrc = 0.
              ls_clrqgrrf-fcatg = 'HD'.
            ENDIF.
          ENDIF.

          APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.

          IF ls_clrqgrrf-fname = 'CNTIT'.

            ls_clrqgrrf-fname = '/CGDC/ORGI'.
            ls_clrqgrrf-fcatg = 'IT'.

            APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
          ENDIF.

          UNASSIGN <lv_value>.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

*    IF gv_index GT 1 AND LT_S_CLRQIT IS NOT INITIAL.  "SEND THE ALL THE charatersitc along with subgroups only when index is greater than 1.
*      LOOP AT lt_temp_clrqgrrf INTO ls_clrqgrrf.
*        ls_clrqgrrf-rowid = gv_index.
*        APPEND ls_clrqgrrf TO gs_clrqdoc_infocus-x-crgrrf.
*      ENDLOOP.
*    ENDIF.
  ENDIF.
ENDFORM.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: Include /CGDC/LCLRQMI01
**********************************************************
*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMI01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  PROCESS_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE process_exit INPUT.

  PERFORM process_exit.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PROCESS_FCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE process_fcode INPUT.

  PERFORM process_fcode.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  SET_PRICING_FCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE set_pricing_fcode INPUT.

  PERFORM set_pricing_fcode.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_MATNR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_matnr INPUT.
  PERFORM f4_matnr.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_REASON_CODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_reason_code INPUT.
  PERFORM f4_reason_code.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  UPDATE_CALC_MANAUL_ITM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE update_calc_manaul_itm INPUT.
  PERFORM update_calc_manaul_itm.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_WBS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_wbs INPUT.
  PERFORM f4_wbs.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_FKDAT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_fkdat INPUT.
  PERFORM f4_fkdat.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  user_command_171 INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_171 INPUT.

  IF sy-ucomm+0(4) = '%_GC'.
    gv_ent_flag = abap_true.
    CALL METHOD cl_gui_cfw=>dispatch.
  ELSE.
    PERFORM process_f4_fcode.
  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0191  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0191 INPUT.
  PERFORM update_bill_pre_grid_data.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_INPUT_MANUAL_ITM_TYPE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_input_manual_itm_type INPUT.
  PERFORM validate_manual_itm_type_input.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_INPUT_MANUAL_ITM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_input_manual_itm INPUT.
  PERFORM validate_manual_itm_input.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_REASON_CODE_CLRTYP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_reason_code_clrtyp INPUT.
  PERFORM f4_reason_code_clrtyp.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_REASON_CODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_reason_code INPUT.
  PERFORM validate_reason_code.
ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  VALIDATE_BILLBLK_HDR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_billblk_hdr INPUT.
  PERFORM validate_billblk_hdr.
ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0902  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0902 INPUT.
*-Handle user actions in screen 0902
  gv_ucomm = gv_okcode.

  CLEAR gv_okcode.

  CASE gv_ucomm.
    WHEN gc_chlog-ch_yes OR gc_chlog-ch_no. "On yes or no ->close modal screen 0070 , go back to main screen 0010
      CLEAR gv_ucomm.
      LEAVE TO SCREEN 0.

    WHEN gc_chlog-ch_hdr. "On click on header strip ->show header chlog table strip
      gv_chlog_act_scr          = gc_chlog-hdr_scr.
      tc_chlog_tstrip-activetab = gc_chlog-ch_hdr.

    WHEN gc_chlog-ch_bi."On click on comment strip ->show billing item chlog table strip
      gv_chlog_act_scr          = gc_chlog-bi_scr.
      tc_chlog_tstrip-activetab = gc_chlog-ch_bi.

    WHEN gc_chlog-ch_pt."On click on commodity strip ->show partners chlog table strip
      gv_chlog_act_scr          = gc_chlog-pt_scr.
      tc_chlog_tstrip-activetab = gc_chlog-ch_pt.

    WHEN gc_chlog-ch_it."On click on comment strip ->show item chlog table strip
      gv_chlog_act_scr          = gc_chlog-it_scr.
      tc_chlog_tstrip-activetab = gc_chlog-ch_it.

    WHEN gc_chlog-ch_ic."On click on commodity strip ->show IC chlog table strip
      gv_chlog_act_scr          = gc_chlog-ic_scr.
      tc_chlog_tstrip-activetab = gc_chlog-ch_ic.

    WHEN OTHERS.
  ENDCASE.

  CLEAR gv_ucomm.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  F4_CONSTR_DT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE f4_constr_dt INPUT.
  PERFORM f4_constr_dt.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_CONSTR_DT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_constr_dt INPUT.
  PERFORM validate_constr_dt.
ENDMODULE.

*----------------------------------------------------------------------*
***INCLUDE /CGDC/LCLRQMO01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Module INIT_TRANSACTION OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE init_transaction OUTPUT.

  PERFORM init_transaction.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_STATUS OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_status OUTPUT.

  PERFORM set_status.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_TITLE OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_title OUTPUT.

  PERFORM set_title.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_SUBSCREEN_AREA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_subscreen_area OUTPUT.

  PERFORM set_subscreen_area.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module DISPLAY_CONTROLS OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE display_controls OUTPUT.

  PERFORM display_controls.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module DISPLAY_CALC_REQ_QUICK_INFO OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE display_calc_req_quick_info OUTPUT.

  PERFORM display_calc_req_header_data.



ENDMODULE.
*&---------------------------------------------------------------------*
*& Module PREPARE_HDR_PARTNERS OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE prepare_hdr_partners OUTPUT.

*  PERFORM prepare_partner_data USING '1'.
  PERFORM prepare_partner_data01 USING '1'.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module PREPARE_ITM_PARTNERS OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE prepare_itm_partners OUTPUT.

*  PERFORM prepare_partner_data USING '2'.
  PERFORM prepare_partner_data01 USING '2'.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_HDR_PARTNER_SUBSCREEN OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_hdr_partner_data OUTPUT.

  PERFORM set_partner_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_ITM_PARTNER_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_itm_partner_data OUTPUT.

  PERFORM set_partner_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_HDR_PRICING_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_hdr_pricing_data OUTPUT.

  PERFORM set_pricing_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_ITM_PRICING_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_itm_pricing_data OUTPUT.

  PERFORM set_pricing_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module DISPLAY_ITEM_QUICK_INFO OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE display_item_quick_info OUTPUT.

  PERFORM display_item_quick_info.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module MODIFY_SCREEN OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE modify_screen OUTPUT.

  PERFORM modify_screen.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module DISPLAY_HEADER_GENERAL_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE display_header_general_data OUTPUT.

  PERFORM display_calc_req_header_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_CLRQCOST OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_clrqcost OUTPUT.
  PERFORM read_clrqcost.
ENDMODULE.

*&---------------------------------------------------------------------*
*& Module CALC_GRP_QUICK_INFO OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_calc_grp_quick_info OUTPUT.
  PERFORM set_calc_grp_quick_info.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_CALC_GRP_PRICING_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_calc_grp_pricing_data OUTPUT.
  PERFORM set_calc_grp_pricing_data.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_ITM_PRICING_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_bill_prev_pricing_data OUTPUT.

  PERFORM set_bill_prev_pricing_data.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CREATE_DROPDOWN_RCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE create_dropdown_rcode INPUT.
  PERFORM create_dropdown_rcode.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDATE_BITYPE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validate_input INPUT.

  SELECT COUNT(*) FROM /cgdc/t_bilitty
                  WHERE bilitmtyp EQ /cgdc/s_clrqbi_scrnfld-bitype.
  IF sy-subrc NE 0.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e088(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '088'.
      gs_messages-msgty = gc_message_type-error.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

  IF NOT /cgdc/s_clrqbi_scrnfld-pop_stdt IS INITIAL.
    SELECT COUNT(*) FROM /cgdc/_clrqbi
                    WHERE clrno     EQ gs_clrqdoc_infocus-x-crhdr-clrno
                    AND   bitype    EQ /cgdc/s_clrqbi_scrnfld-bitype
                    AND   pop_stdt  LE /cgdc/s_clrqbi_scrnfld-pop_stdt
                    AND   pop_enddt GE /cgdc/s_clrqbi_scrnfld-pop_stdt
                    AND   bstat     EQ space.
    IF sy-subrc EQ 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e110(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '110'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT /cgdc/s_clrqbi_scrnfld-pop_enddt IS INITIAL.
    SELECT COUNT(*) FROM /cgdc/_clrqbi
                    WHERE clrno     EQ gs_clrqdoc_infocus-x-crhdr-clrno
                    AND   bitype    EQ /cgdc/s_clrqbi_scrnfld-bitype
                    AND   pop_stdt  LE /cgdc/s_clrqbi_scrnfld-pop_enddt
                    AND   pop_enddt GE /cgdc/s_clrqbi_scrnfld-pop_enddt
                    AND   bstat     EQ space.
    IF sy-subrc EQ 0.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e110(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '110'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

  IF /cgdc/s_clrqbi_scrnfld-rcode IS NOT INITIAL AND
    /cgdc/s_clrqbi_scrnfld-bitype IS NOT INITIAL.

    SELECT SINGLE @abap_true
           FROM /cgdc/t_bilitty AS bill
           INNER JOIN /cgdc/t_rtbrpar AS par
           ON par~rsnpf = bill~rsnprf
           WHERE bill~bilitmtyp = @/cgdc/s_clrqbi_scrnfld-bitype
           AND par~rsncd = @/cgdc/s_clrqbi_scrnfld-rcode
           INTO @DATA(lv_exist).
    IF sy-subrc <> 0 .
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e076(/cgdc/clrq).
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '076'.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.
  IF NOT /cgdc/s_clrqbi_scrnfld-bldat IS INITIAL.
    IF /cgdc/s_clrqbi_scrnfld-bldat < sy-datum.
      IF gs_variables-call_from_ui EQ abap_false.
        MESSAGE e173(/cgdc/clrq) with /cgdc/s_clrqbi_scrnfld-bldat.
      ELSE.
        CLEAR gs_messages.
        gs_messages-msgid = gc_clrq_msg_cls.
        gs_messages-msgnr = '173'.
        gs_messages-msgv1 = /cgdc/s_clrqbi_scrnfld-bldat.
        gs_messages-msgty = gc_message_type-error.
        APPEND gs_messages TO gt_messages.
      ENDIF.
    ENDIF.
  ENDIF.

  IF /cgdc/s_clrqbi_scrnfld-rcode IS INITIAL.
    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e076(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '076'.
      gs_messages-msgty = gc_message_type-error.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.

  IF /cgdc/s_clrqbi_scrnfld-ps_psp_pnr IS INITIAL AND /cgdc/s_clrqbi_scrnfld-bitype IS NOT INITIAL.

    IF gs_variables-call_from_ui EQ abap_false.
      MESSAGE e150(/cgdc/clrq).
    ELSE.
      CLEAR gs_messages.
      gs_messages-msgid = gc_clrq_msg_cls.
      gs_messages-msgnr = '150'.
      gs_messages-msgty = gc_message_type-error.
      APPEND gs_messages TO gt_messages.
    ENDIF.
  ENDIF.
ENDMODULE.


*&---------------------------------------------------------------------*
*& Module STATUS_0902 OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0902 OUTPUT.
  IF tc_chlog_tstrip IS INITIAL. "By default show header change log strip in tabstrip
    tc_chlog_tstrip-activetab = gc_chlog-ch_hdr.
    gv_chlog_act_scr          = gc_chlog-hdr_scr.
  ENDIF.

  SET PF-STATUS 'STATUS_902'.
  SET TITLEBAR 'TITLE_902' WITH gs_header_0110-clrno.

*-create text with icons for change log tabstrip buttons dynamically
  PERFORM f_create_strip_texts_with_icon.

ENDMODULE.


*&---------------------------------------------------------------------*
*& Module INITIALIZE_HEADER_LOG_ALV OUTPUT
*&---------------------------------------------------------------------*
MODULE initialize_header_log_alv OUTPUT.
*-initialize container, ALV Objects and display header change log table in ALV
  IF go_ch_hdr_cont IS NOT BOUND.
    PERFORM f_init_chlog_header_tab.
  ENDIF.

ENDMODULE.


*&---------------------------------------------------------------------*
*& Module INITIALIZE_BI_LOG_ALV OUTPUT
*&---------------------------------------------------------------------*
MODULE initialize_bi_log_alv OUTPUT.
*-initialize container, ALV Objects and display Billing items change log table in ALV
  IF go_ch_bi_cont IS NOT BOUND.
    PERFORM f_init_chlog_bi_tab.
  ENDIF.

ENDMODULE.


*&---------------------------------------------------------------------*
*& Module INITIALIZE_PT_LOG_ALV OUTPUT
*&---------------------------------------------------------------------*
MODULE initialize_pt_log_alv OUTPUT.
*-initialize container, ALV Objects and display partners change log table in ALV
  IF go_ch_pt_cont IS NOT BOUND.
    PERFORM f_init_chlog_pt_tab.
  ENDIF.

ENDMODULE.


*&---------------------------------------------------------------------*
*& Module INITIALIZE_IT_LOG_ALV OUTPUT
*&---------------------------------------------------------------------*
MODULE initialize_it_log_alv OUTPUT.
*-initialize container, ALV Objects and display items change log table in ALV
  IF go_ch_it_cont IS NOT BOUND.
    PERFORM f_init_chlog_it_tab.
  ENDIF.

ENDMODULE.


*&---------------------------------------------------------------------*
*& Module INITIALIZE_IC_LOG_ALV OUTPUT
*&---------------------------------------------------------------------*
MODULE initialize_ic_log_alv OUTPUT.
*-initialize container, ALV Objects and display Items Characterstics change log table in ALV
  IF go_ch_ic_cont IS NOT BOUND.
    PERFORM f_init_chlog_ic_tab.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module PREPARE_BIL_PARTNERS OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE prepare_bil_partners OUTPUT.
  PERFORM prepare_partner_data01 USING '3'.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Module SET_BIL_PARTNER_DATA OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE set_bil_partner_data OUTPUT.
  PERFORM set_partner_data.
ENDMODULE.

*&---------------------------------------------------------------------*
*& Include          /CGDC/LCLRQMSEL
*&---------------------------------------------------------------------*


  SELECTION-SCREEN BEGIN OF SCREEN 0010.

    SELECTION-SCREEN BEGIN OF BLOCK a WITH FRAME TITLE TEXT-032.

      SELECT-OPTIONS: so_conno FOR /cgdc/_clrqhd-vgbel MODIF ID cu  MATCHCODE OBJECT vmva  MEMORY ID aun,
                      "so_auart FOR /cgdc/_clrqhd-auart MODIF ID cu.
                      so_auart FOR vbak-auart MODIF ID cu.
      SELECT-OPTIONS: so_vbeln FOR /cgdc/_clrqhd-clrno MODIF ID cu,
                       so_crtyp FOR /cgdc/_clrqhd-clrqt MODIF ID cu.
    SELECTION-SCREEN END OF BLOCK a.
  SELECTION-SCREEN END OF SCREEN 0010.

  AT SELECTION-SCREEN OUTPUT.

    IF sy-tcode = '/CGDC/CRCU'.
      SET TITLEBAR 'T010'.
    ELSEIF sy-tcode = '/CGDC/CR'.
      SET TITLEBAR 'T010A'.
    ENDIF.

**********************************************************
* Cognitus Technologies Confidential
**********************************************************
*
*  [2019] - [2025] Cognitus Technologies LLC
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Cognitus Technologies LLC and its suppliers,
* if any. The intellectual and technical concepts contained
* herein are proprietary to Cognitus Technologies LLC and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or
* copyright law. Dissemination of this information or
* reproduction of this material is strictly forbidden unless
* prior written permission is obtained from Cognitus
* Consulting LLC.
**********************************************************
* VERSION CONTROL (Most recent on top):
*
* RELEASE: SAPK-231COINCGDC (CIS-AD S/4 Hana 2023)
*
* DESCRIPTION: INCLUDE /CGDC/LCLRQMTOP
**********************************************************

FUNCTION-POOL /cgdc/clrqm.                  "MESSAGE-ID ..
INCLUDE: /cgdc/lclrqmcon, /cgdc/lbsel_dd.
TABLES :
  /cgdc/s_clrq_screenfields.
DEFINE add_menu_function.

  CALL METHOD &1->add_function
    EXPORTING
      fcode = &2
      text  = &3.

END-OF-DEFINITION.

DEFINE set_static_context.

  CLEAR &2.
  &2-function = &4.
  &2-ctmenu = &3.
  APPEND &2 TO &1.

END-OF-DEFINITION.

DEFINE insert_toolbar_button.

  CLEAR &2.
  &2-butn_type  = &3.
  &2-function   = &4.
  &2-icon       = &5.
  &2-quickinfo  = &6.
  &2-text       = &7.
  &2-disabled   = &8.
  INSERT &2 INTO &1 INDEX 1.

END-OF-DEFINITION.

DEFINE execute_fcode.

  DATA: lv_subroutine(40).
  CONCATENATE 'FCODE' &1 INTO lv_subroutine SEPARATED BY '_'.
  PERFORM (lv_subroutine) IN PROGRAM &2 IF FOUND.

END-OF-DEFINITION.

DEFINE conv_dt_to_ext.
  CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
   EXPORTING
     date_internal                  = &1
   IMPORTING
     date_external                  = &2
   EXCEPTIONS
     date_internal_is_invalid       = 1
     OTHERS                         = 2
            .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

END-OF-DEFINITION.

TYPES : BEGIN OF lty_clrqhd_reprice,
          vgbel TYPE vbeln_va,
          auart TYPE auart,
          clrno TYPE /cgdc/clrqno,
          clrqt TYPE /cgdc/clrqt,
          rtbpn  TYPE /cgdc/rtbpn,
          erdat  TYPE erdat,
          erzet  TYPE erzet,
          ernam  TYPE ernam,
        END OF lty_clrqhd_reprice.
TYPES : BEGIN OF lty_message,
          message TYPE char200,
          icon    TYPE icon_d,
          icon1   TYPE icon_d,
          msgid   TYPE msgid,
          msgnr   TYPE msgnr,
        END OF lty_message.
TYPES: BEGIN OF lty_matnr_desc,
         matnr TYPE matnr,
         maktx TYPE maktx,
       END OF lty_matnr_desc.
***DCLM 5764
TYPES: BEGIN OF s_total_cost_per_posnr,
         vbeln TYPE vbeln_va,
         posnr TYPE posnr_va,
         netwr TYPE netwr_ap,
       END OF s_total_cost_per_posnr,

       t_total_cost_per_posnr TYPE TABLE OF s_total_cost_per_posnr.

TYPES: BEGIN OF s_total_cost_per_vbeln,
         vbeln TYPE vbeln_va,
         netwr TYPE netwr_ap,
       END OF s_total_cost_per_vbeln,

       t_total_cost_per_vbeln TYPE TABLE OF s_total_cost_per_vbeln.
***
TYPES: BEGIN OF s_pbp_eligible_rqit,
         clrno      TYPE /cgdc/clrqno,
         clrit      TYPE /cgdc/clrq_itmno,
         clrsit     TYPE /cgdc/clrq_sitmno,
         clrdit     TYPE /cgdc/clrq_delta_item,
         billitem   TYPE /cgdc/billitem,
         /cgdc/orgh TYPE vbeln_va,
         /cgdc/orgi TYPE posnr_va,
         netwr      TYPE netwr_ap,
         faksp      TYPE faksp_ap,
         istat      TYPE /cgdc/clrqi_istat,
         rtbbinr    TYPE /cgdc/billitem_guid,
         bityp      TYPE /cgdc/bitype,
         prsdt      TYPE prsdt,
       END OF s_pbp_eligible_rqit.

DATA: BEGIN OF gs_parallel_porcess,
        total_session_count  TYPE num4,
        active_session_count TYPE num4,
      END OF gs_parallel_porcess.

DATA: BEGIN OF gs_wp,
        max_wp  TYPE i,
        free_wp TYPE i,
      END OF gs_wp.

TYPES: BEGIN OF lty_clrqhd,
         clrno   TYPE /cgdc/clrqno,
         netwr   TYPE netwr_ak,
         netwr24 TYPE /cgdc/long_netwr,
         waerk   TYPE waerk,
         kunnr   TYPE kunag,
       END OF lty_clrqhd.

TABLES: /cgdc/_clrqhd,
        vbak,
        /cgdc/s_clrqit,
        /cgdc/s_clrqbi_scrnfld,
        sscrfields,
        /cgdc/_clrqcost,
        /cgdc/s_clrqcost,
        /cgdc/t_rtbmit,
        /cgdc/s_clrq_man_itm,
        /cgdc/s_clrqgrr,
        /cgdc/t_rtbrpart.

CLASS: lcl_event_handler DEFINITION DEFERRED.
CLASS: lcl_bsel_event_handler DEFINITION DEFERRED.



CONTROLS: ts_hdr_details TYPE TABSTRIP,
          ts_itm_details TYPE TABSTRIP,
          ts_subitem_dtl TYPE TABSTRIP.

TYPES: t_sy_ucomm TYPE TABLE OF sy-ucomm.

TYPES: BEGIN OF s_vbeln,
         vbeln TYPE vbeln,
       END OF s_vbeln.
TYPES: t_vbeln TYPE TABLE OF s_vbeln.

TYPES: BEGIN OF t_cafd_mult.
         INCLUDE TYPE /cgdc/s_cafd_clrqit_mult.
TYPES:
         ratio TYPE wertv8,
       END OF t_cafd_mult.

TYPES: t_clrq_err TYPE STANDARD TABLE OF /cgdc/t_clrq_err.

***Consider Add Cost Collectors
TYPES: BEGIN OF s_add_cost_coll_pspnr,
         cost_coll_pspnr TYPE ps_posnr,
         con_itm_pspnr   TYPE ps_posnr,
       END OF s_add_cost_coll_pspnr,

       t_add_cost_coll_pspnr TYPE TABLE OF s_add_cost_coll_pspnr.
***
TYPES: BEGIN OF s_bill_his,
         sbqty TYPE /cgdc/clrq_sbqty,
         sbqdc TYPE /cgdc/clrq_sbqdc,
       END OF s_bill_his.
TYPES: t_bill_his TYPE TABLE OF s_bill_his.

TYPES : BEGIN OF t_clrit_org,
          clrno      TYPE /cgdc/clrqno,
          clrit      TYPE /cgdc/clrq_itmno,
          clrsit     TYPE /cgdc/clrq_sitmno,
          item_delta TYPE /cgdc/clrq_delta_item,
          istat      TYPE /cgdc/clrqi_istat,
        END OF t_clrit_org.
TYPES: BEGIN OF s_srcdata,
         source TYPE c LENGTH 2,
         data   TYPE REF TO data,
       END OF s_srcdata,
*       BEGIN OF s_objnr,
*         objnr TYPE j_objnr,
*       END OF s_objnr,

       t_srcdata TYPE TABLE OF s_srcdata,
*       t_objnr   TYPE TABLE OF s_objnr.

       t_bdcdata TYPE TABLE OF bdcdata.
TYPES: BEGIN OF s_item_val,
         clrit        TYPE /cgdc/clrq_itmno,
         open_amt     TYPE netwr_ap,
         tot_amt      TYPE netwr_ap,
         rej_amt      TYPE netwr_ap,
         post_amt     TYPE netwr_ap,
         post_amt_ut  TYPE netwr_ap,
         bill_amt     TYPE netwr_ap,
         open_quan    TYPE dzmeng,
         tot_quan     TYPE dzmeng,
         rej_quan     TYPE dzmeng,
         post_quan    TYPE dzmeng,
         post_quan_ut TYPE dzmeng,
         bill_quan    TYPE dzmeng,
         cost_ratio   TYPE vfprc_element_amount,
*         cost_ratio   TYPE netwr_ap,
         temp_clrsit  TYPE n LENGTH 3,
         lclrsit      TYPE /cgdc/clrq_sitmno,
       END OF s_item_val.
TYPES : BEGIN OF s_prps,
          pspnr TYPE ps_pspnr,
          posid TYPE ps_posid,
          objnr TYPE j_objnr,
          post1 TYPE ps_post1,
          fakkz TYPE ps_fakkz,
        END OF s_prps,
        t_prps     TYPE TABLE OF s_prps,

        tt_bilitty TYPE TABLE OF /cgdc/t_bilitty.

TYPES: BEGIN OF s_rcode,
         rsncd TYPE /cgdc/rtb_rsncd,
         descr TYPE /cgdc/rtb_rsncd_desc,
       END OF s_rcode.

*       t_src_tab TYPE TABLE OF /cgdc/d_clrqsrc.

TYPES: BEGIN OF gy_rtbds,
         rtbpn         TYPE  /cgdc/rtbpn,
         source        TYPE  /cgdc/rtbsource,
         srcseq        TYPE  /cgdc/rtbsrcseq,
         bill_usage    TYPE  /cgdc/rtbabrvw,
         sourceview    TYPE  /cgdc/viewname,
         discontinue   TYPE  /cgdc/srcactive,
         rsnpf         TYPE /cgdc/rtb_rsnprf,
         link_reversal TYPE  /cgdc/rtblnkrvrs,
       END OF gy_rtbds.

DATA: ok_code TYPE sy-ucomm,
      fcode   TYPE sy-ucomm.

DATA: BEGIN OF gs_posnr_mapping,
        posnr       TYPE /cgdc/clrq_itmno,
        dummy_posnr TYPE posnr_va,
      END OF gs_posnr_mapping.

DATA: BEGIN OF gs_variables,
        objnr_index                 TYPE sytabix,
        worklist_is_visible,
        exit_after_save,
        subscr_overview             TYPE sy-dynnr,
        subscr_quick_info           TYPE sy-dynnr,
        subscr_hdr_details          TYPE sy-dynnr,
        subscr_itm_details          TYPE sy-dynnr,
        subscr_postpone_alv         TYPE sy-dynnr,
        sub_itm_details             TYPE sy-dynnr,
        overview_mode,
        document_mode,
        bill_blk_reval,
        data_changed,
        refresh_worklist,
        selected_vbeln              TYPE /cgdc/clrqno,
        dmr_vbeln                   TYPE vbeln,
        refresh_calc_req_items_grid,
        calc_grp_knumh              TYPE knumh,
        item_infocus                TYPE /cgdc/clrq_itmno,
        clcgrp_indx_infocus         TYPE numc4,
        subitem_infocus             TYPE /cgdc/clrq_sitmno,
        delta_infocus               TYPE /cgdc/clrq_delta_item,
        last_posnr                  TYPE /cgdc/clrq_itmno,
        temp_last_posnr             TYPE posnr_va,
        temp_last_vbeln             TYPE vbeln_va,
        page_number(5)              TYPE n,
        page_number_bitm(5)         TYPE n,
        page_number_calc_grp(5)     TYPE n,
        item_to_tabix(10)           TYPE n,
        item_from_tabix(10)         TYPE n,
        last_dmr_posnr              TYPE posnr,
        external_fcode              TYPE sy-ucomm,
        external_call,
        key_only,
        exit_loop,
        cmfrq                       TYPE numc10,
        wl_imp_all                  TYPE flag,
        wl_srch_more                TYPE flag,
        colps_quick_info            TYPE flag,
        colps_hdr_info              TYPE flag,
        colps_itm_info              TYPE flag,
        wl_prev_sel_row             TYPE lvc_index,
        wl_curr_sel_row             TYPE lvc_index,
*        blng_cds_view_name          TYPE tabname,
        bp_prev_sel_row             TYPE lvc_index,
        bp_curr_sel_row             TYPE lvc_index,
        bh_prev_sel_row             TYPE lvc_index,
        cg_prev_sel_row             TYPE lvc_index,
        refersh_bill_bp_grid        TYPE flag,
*        refresh_bill_pre_grid       TYPE flag,
        refersh_bill_hist_grid      TYPE flag,
        refersh_document            TYPE flag,
        show_imp_all_btn            TYPE flag,
        page_count(4)               TYPE n,
        process_type                TYPE c,
        subitem_scrn_expnd          TYPE flag,
        subscr_subitem_dtl          TYPE sy-dynnr,
        subscr_calc_grp_cond        TYPE sy-dynnr,
        subscr_subitem_dtl_sc       TYPE sy-dynnr,
        subitem_sel_prev            TYPE lvc_index,
        itm_rej_quan,
        itm_rej_amt,
        itm_post_quan,
        itm_amt_quan,
        itm_post_amt,
        gv_rejpost_billing_pre      TYPE flag,
        page_size                   TYPE i,
        collect_message,
        itm_post_amt_un,
        itm_post_quan_un,
        calc_changed,
        calc_changed_cancel,
        man_itm_prog                TYPE sycprog VALUE '/CGDC/SAPLCLRQM',
        man_itm_scrn                TYPE sydynnr VALUE '0999',
        calc_grp_cond_disp_prog     TYPE sycprog,
        dis_man_itm_dd              TYPE flag,
        man_itm_scr_avl             TYPE flag,
        max_on_dmd_excd             TYPE c,
        mis_itm_count               TYPE i,
        total_count                 TYPE numc12,
        loop_count                  TYPE numc10,
        rel_item_exist              TYPE /cgdc/clrq_itmno,
        itm_fltr_act                TYPE flag,
        no_pricing                  TYPE flag,
        trfc_lght                   TYPE flag,
        pricing_cgrp_runtime_itms,
        cgrr_itm_crt                TYPE flag,
        lc_flag,
        refresh_selection           TYPE c,  "*** XIDK900913 /CGDC/LCLRQMO01
        bit_num_gen                 TYPE flag,
        rtbfilter                   TYPE flag,
        header_light                TYPE char4,
        filter_html                 TYPE flag,
        manual_changes_bill_pre     TYPE flag,
        manual_changes_rej_itm      TYPE flag,
*        realtime_caf                TYPE flag,
        billed_item                 TYPE flag,
        header_messages             TYPE /cgdc/err_msg,
        call_from_ui                TYPE flag,
        pbd_number                  TYPE vbeln,
        scheduler                   TYPE flag,
        partial_repr                TYPE flag,
        create_req_itm_for_grp      TYPE flag,
        dyn_selscr_ucomm            TYPE sy-ucomm,
        bstat_filter                TYPE sy-ucomm,
        pre_bill_to_tabix(10)       TYPE n,
        pre_bill_from_tabix(10)     TYPE n,
        calc_grp_to_tabix(10)       TYPE n,
        calc_grp_from_tabix(10)     TYPE n,
        refresh_calc_grp_grid       TYPE flag,
        no_new_bill_item            TYPE flag,
        show_rsncd_items            TYPE flag,
        cscon_prg_name              TYPE sy-repid,
        cscon_screen                TYPE sy-dynnr,
        cscon_msg1                  TYPE c LENGTH 75,
        cscon_msg2                  TYPE c LENGTH 75,
        bsel_tabname                TYPE tabname,
        bsel_fieldnm                TYPE fieldname,
        sel_rtbbinr                 TYPE /cgdc/billitem_guid,
        sel_vgpos                   TYPE /cgdc/vgpos,
        bg_prl_run,
        reverse_prcing              TYPE flag,
        rprc_bp                     TYPE flag,
        rtbc_process                TYPE c,
        cont_constr_dt              TYPE flag,
        rel_constr_dt               TYPE datum,
      END OF gs_variables.

DATA: BEGIN OF gt_bgwp_list OCCURS 0,
        task_name   TYPE btcjob,
        task_number TYPE btcjobcnt,
        status      TYPE btcstatus,
        mem_id      TYPE char22,
      END OF gt_bgwp_list.

TYPES: BEGIN OF gty_rounding ,
         kschl1 TYPE kscha,
         kbetr1 TYPE kbetr,
         kwaer1 TYPE waers,
         zmeng  TYPE dzmeng,
         zmengn TYPE dzmeng,
       END OF gty_rounding.

DATA: gt_rounding TYPE STANDARD TABLE OF gty_rounding,
      gs_rounding TYPE gty_rounding.

DATA: gs_clrqdoc_infocus TYPE /cgdc/s_clrq_doc,
      gt_clrqdoc_infocus TYPE /cgdc/tt_clrq_doc.
DATA: gv_cont506_flag TYPE char1.

DATA: go_event_handler              TYPE REF TO lcl_event_handler,
      go_bsel_event_handler         TYPE REF TO lcl_bsel_event_handler,
      go_docking_container          TYPE REF TO cl_gui_docking_container,
      go_calc_request_worklist      TYPE REF TO cl_gui_alv_grid,
      go_grid_calc_req_items        TYPE REF TO cl_gui_alv_grid,
      go_grid_calc_req_bill_pre     TYPE REF TO cl_gui_alv_grid,
      go_grid_calc_subitems         TYPE REF TO cl_gui_alv_grid,
      go_grid_subitm_cond           TYPE REF TO cl_gui_alv_grid,
      go_grid_subitm_part           TYPE REF TO cl_gui_alv_grid,
      go_items_grid_container       TYPE REF TO cl_gui_custom_container,
      go_bill_pre_container         TYPE REF TO cl_gui_custom_container,
      go_reassign_bi_container      TYPE REF TO cl_gui_custom_container,
      go_subitm_alv_container       TYPE REF TO cl_gui_custom_container,
      go_grid_disp_cafs             TYPE REF TO cl_gui_alv_grid,
      go_grid_reassign_bi           TYPE REF TO cl_gui_alv_grid,
      go_display_alv_cafs           TYPE REF TO cl_gui_custom_container,
      go_calc_req_upd_prc_container TYPE REF TO cl_gui_custom_container,
      go_subitm_cond_container      TYPE REF TO cl_gui_custom_container,
      go_subitm_part_container      TYPE REF TO cl_gui_custom_container,
      go_man_itm_container          TYPE REF TO cl_gui_custom_container,

      go_grid_bill_hist             TYPE REF TO cl_gui_alv_grid,
      go_bill_hist_container        TYPE REF TO cl_gui_custom_container,
      go_calc_req_upd_prc_grd       TYPE REF TO cl_gui_alv_grid,
      go_message_container          TYPE REF TO cl_gui_custom_container,
      go_message_grid               TYPE REF TO cl_gui_alv_grid,
      go_postpone_grid              TYPE REF TO cl_gui_alv_grid,
      go_man_item_grid              TYPE REF TO cl_gui_alv_grid,
      go_postpone_container         TYPE REF TO cl_gui_custom_container,
      go_rej_itm_container          TYPE REF TO cl_gui_custom_container,
      go_rej_itm_grid               TYPE REF TO cl_gui_alv_grid,

      ref_dyn_selections_container  TYPE REF TO cl_gui_custom_container,
      ref_dyn_sel_container_popup   TYPE REF TO cl_gui_custom_container,
      ref_selections                TYPE REF TO /cgdc/cl_bsel_services,
      ref_selections_popup          TYPE REF TO /cgdc/cl_bsel_services,
      ref_event_handler             TYPE REF TO lcl_event_handler,
      go_selections                 TYPE REF TO /cgdc/cl_bsel_services,
      gref_selections               TYPE REF TO data.


DATA: gt_search_calc_req      TYPE TABLE OF /cgdc/s_clrq_wl,
      gt_wl_calc_req          TYPE TABLE OF /cgdc/s_clrq_wl,
      gt_cgrcon_final         TYPE komv_t,
***Consider Add Cost Collectors
      gt_add_cost_collector   TYPE TABLE OF /cgdc/_cafdaddcc,
      gt_add_cost_coll_pspnr  TYPE t_add_cost_coll_pspnr,
***
***DCLM 5764
      gt_pbp_eligible_bprqit  TYPE TABLE OF /cgdc/_clrqit,
      gt_pbp_eligible_rqit    TYPE TABLE OF s_pbp_eligible_rqit,
      gt_pbp_eligible_bpit    TYPE TABLE OF /cgdc/t_blnpln,
      gt_pbp_bpit_per_posnr   TYPE TABLE OF /cgdc/t_blnpln,
      gt_pbp_bpit_per_vbeln   TYPE TABLE OF /cgdc/t_blnpln,
      gt_total_cost_per_posnr TYPE SORTED TABLE OF s_total_cost_per_posnr WITH UNIQUE KEY vbeln posnr,
      gt_total_cost_per_vbeln TYPE SORTED TABLE OF s_total_cost_per_vbeln WITH UNIQUE KEY vbeln,
***
      gt_x_vbpa               TYPE TABLE OF vbpav,
      gt_y_vbpa               TYPE TABLE OF vbpav,
      gt_x_komk               LIKE komk OCCURS 0 WITH HEADER LINE,
      gt_x_komp               LIKE komp OCCURS 0 WITH HEADER LINE,
      gt_filter               TYPE TABLE OF tpafilter,
      gt_pages_key            TYPE /cgdc/tt_clrqit_key,
      gt_calc_req_items_fcat  TYPE TABLE OF /cgdc/s_clrqit_fcat,
      gs_blp_doc              TYPE /cgdc/s_blp_doc,
      gt_blp_itm_typ          TYPE TABLE OF /cgdc/t_bplnty,
      gt_header_fields        TYPE dfies_table,
      gt_item_fields          TYPE dfies_table,
      gt_itemc_fields         TYPE dfies_table,
      gt_br_cond_copy_control TYPE TABLE OF /cgdc/t_clrtbrcc,
      gt_objnr                TYPE /cgdc/t_objnr,
      gt_item_catg            TYPE TABLE OF /cgdc/t_rtbic,
      gt_contract_funding     TYPE /cgdc/tt_cafdfund,
      gt_konp_amt             TYPE TABLE OF /cgdc/t_konp_amt,
      gt_subtotal_field       TYPE TABLE OF /cgdc/t_rtbcgstt,
      gt_bilitty              TYPE STANDARD TABLE OF /cgdc/t_bilitty,
      gt_reassign_bi_data     TYPE STANDARD TABLE OF /cgdc/s_clrqbi,
      gt_rejitms              TYPE TABLE OF /cgdc/s_rejitm_fcat.

DATA: gs_vbak                     TYPE vbak,
      gt_vbpa                     TYPE tab1_vbpa,
      gt_komk                     TYPE va_komk_t,
      gt_komp                     TYPE va_komp_t,
      gs_knmt                     TYPE knmt,
      gt_tpar                     TYPE TABLE OF tpar,
      gs_kuagv                    TYPE kuagv,
      gs_kurgv                    TYPE kurgv,
      gs_kuwev                    TYPE kuwev,
      gs_tvko                     TYPE tvko,
      gs_t001                     TYPE t001,
      gs_maapv                    TYPE maapv,
      gs_ctc                      TYPE /cgdc/ctc,
      gs_calc_req_type            TYPE /cgdc/t_clrtype,
      gt_calc_req_type_text       TYPE TABLE OF /cgdc/t_clrtypet,
      gt_costingsheet_copy_contrl TYPE TABLE OF /cgdc/t_clrtcscc,
      gt_procedure_data           TYPE TABLE OF t683s,
      gt_coep                     TYPE TABLE OF coep,
      gt_cobk                     TYPE TABLE OF cobk,
      gt_clrq_blpl_exst           TYPE /cgdc/tt_clrqblpl,
      gt_messages_header          TYPE /cgdc/t_message,
      gt_clrqblpl                 TYPE /cgdc/tt_clrqblpl,
      gt_clrqit_blp               TYPE /cgdc/tt_clrqit,
      gt_cafs                     TYPE /cgdc/tt_clrqcaf,
      gt_clrqbi_blp               TYPE TABLE OF /cgdc/_clrqbi,
      gs_header_0110              TYPE lty_clrqhd.

DATA: gs_contract_hdr           TYPE vbak,
      gt_contract_itm           TYPE TABLE OF vbap,
      gt_contract_subitm        TYPE TABLE OF vbap,
      gt_srcdata                TYPE TABLE OF s_srcdata,
      gt_contract_business_data TYPE TABLE OF vbkd,
      gs_clrhd                  TYPE /cgdc/s_clrqhd,
      gs_clrit                  TYPE /cgdc/s_clrqit,
      gs_crgrr                  TYPE /cgdc/s_clrqgrr,
      gs_cafdac                 TYPE /cgdc/_cafdac,
      gt_crgrrf                 TYPE /cgdc/tt_clrqgrrf,
      gt_rtbads                 TYPE TABLE OF gy_rtbds, " 5144 - 4319
      gt_rtbas_sl               TYPE TABLE OF /cgdc/t_rtbas_sl, " 5144 - 4319
      gs_rtbads                 TYPE gy_rtbds, " 5144 - 4319
      gs_rtbas_sl               TYPE /cgdc/t_rtbas_sl. " 5144 - 4319

DATA: gs_sales_order_header TYPE bapisdhd1, "bapisdhead1,
      gt_sales_order_items  TYPE TABLE OF bapisditm, "bapisditem_tt,
      gt_sales_order_ptrs   TYPE TABLE OF bapiparnr, "bapipartnr,
      gt_sales_order_cnds   TYPE TABLE OF bapicond. " bapicondition.

DATA: gt_billitem   TYPE TABLE OF /cgdc/_billelem.

DATA : gt_selcted_rows_bi_reassign TYPE STANDARD TABLE OF /cgdc/s_clrqbi.

DATA: gs_rtbp  TYPE /cgdc/t_rtbp,
      gt_rtbpt TYPE TABLE OF /cgdc/t_rtbpt.

TYPES: BEGIN OF s_cns_data,
         cns_char_data   TYPE REF TO data,
         cns_data        TYPE REF TO data,
         item_data_tmplt TYPE /cgdc/s_clrqit,
         dmr_con         TYPE REF TO data,
         dmr_posnr       TYPE posnr,
       END OF s_cns_data.

DATA: gt_cns_fcat TYPE lvc_t_fcat,
      gs_cns_data TYPE s_cns_data,
      gt_cns_data TYPE TABLE OF s_cns_data.

FIELD-SYMBOLS: <gwa_cns_char_data> TYPE data,
               <gt_cns_data>       TYPE table,
               <gt_cns_con_data>   TYPE table.

TYPES: gty_t_pstyv_range TYPE RANGE OF pstyv,
       BEGIN OF gty_s_poolid_cost_element,
         lplid TYPE          /cgdc/lplid,
         kstar TYPE RANGE OF kstar,
       END OF gty_s_poolid_cost_element,
       gty_t_poolid_cost_element TYPE STANDARD TABLE OF gty_s_poolid_cost_element.

DATA: gt_tm_item_catg        TYPE gty_t_pstyv_range,
      gv_tm_material         TYPE matnr,
      gv_tm_mat_prefix       TYPE char34,
      gt_cost_type_item_catg TYPE gty_t_pstyv_range,
      gt_rtbp_costelem_grp   TYPE TABLE OF /cgdc/t_rtbaceg,
      gt_prps                TYPE TABLE OF prps,
      gt_rtbwbsmcs           TYPE TABLE OF /cgdc/_wbsmcst,
      gt_rtbclnmcs           TYPE TABLE OF /cgdc/_rtbclmcs,
      gt_rtbmpaycs           TYPE TABLE OF /cgdc/t_mlpay_cs,
      gv_vkorg               TYPE vkorg,
      gv_werks               TYPE werks_d,
      gt_poolid_cost_ele     TYPE gty_t_poolid_cost_element,
      gv_labor_mat_prefix    TYPE char36,
      gv_kokrs               TYPE ps_pkokr,
      gv_blk_chk             TYPE xfeld,
      gv_grpid               TYPE /cgdc/grpid,
      gv_spltid              TYPE /cgdc/splt_id.

DATA : gt_acdoca_cost TYPE TABLE OF acdoca.

DATA: gt_komv  TYPE komv OCCURS 0 WITH HEADER LINE,
      gs_komk  TYPE komk,
      gwa_komp TYPE komp.

DATA : gt_bill_pre_fcat          TYPE lvc_t_fcat,
       gt_bill_hist_fcat         TYPE /cgdc/tt_clrq_bill_hist_fcat,
       gt_calc_req_cond          TYPE bapiebdrrequestcond_t,
       gt_pbd_conds              TYPE bapiebdrrequestcond_t,
       gt_bill_pre_selected_rows TYPE lvc_t_row,
       gt_bill_preview_cond      TYPE komv_t.

DATA : gt_bill_pre_data      TYPE TABLE OF /cgdc/s_clrqbi_fcat,
       gt_bill_pre_data_page TYPE TABLE OF /cgdc/s_clrqbi_fcat,
       gt_bill_pre_data_all  TYPE TABLE OF /cgdc/s_clrqbi_fcat,
       gt_blk_auth_pre_data  TYPE TABLE OF /cgdc/s_clrqbi_fcat,
       gt_blk_logs           TYPE STANDARD TABLE OF /cgdc/s_blklog,
       gt_blk_crit_logs      TYPE STANDARD TABLE OF /cgdc/s_blk_crit_logs,
       gt_grpid              TYPE /cgdc/tt_clrqgrp.

TYPES: BEGIN OF s_bill_preview_char, "Bill Preview characteristics
         fieldname TYPE fieldname,
       END OF s_bill_preview_char.
DATA : gt_bill_prev_char TYPE TABLE OF s_bill_preview_char.
DATA: gt_clrq_key TYPE /cgdc/tt_clrqit_key.
DATA: gt_return TYPE /cgdc/t_message.

DATA : gt_subitm_condn     TYPE /cgdc/tt_clrqcn,
       gt_clgrp_itm_buffer TYPE /cgdc/tt_clrqit,
       gt_clgrp_cnd_buffer TYPE /cgdc/tt_clrqcn,
       gt_clgrp_cnds       TYPE /cgdc/tt_clrqcn,
       gt_subitm_part      TYPE /cgdc/tt_clrqpt,
       gt_item_subitem     TYPE TABLE OF /cgdc/s_clrqit_fcat.

TYPES: BEGIN OF ty_data,
         tabname   TYPE tabname,
         field     TYPE fieldname,
         leng      TYPE ddleng,
         scrtext_m TYPE scrtext_m,
         scrtext_l TYPE scrtext_l,
         mandt     TYPE /cgdc/mandatory,
         disp      TYPE /cgdc/displayonly,
         scrhelp   TYPE shlpname,
         valuehlp  TYPE entitytab,
         datatype  TYPE datatype_d,
         error     TYPE char1,
       END OF ty_data.

DATA:lt_data_itm       TYPE TABLE OF ty_data,
     ls_data_itm       TYPE ty_data,

     gt_selection_fcat TYPE /cgdc/t_bsel_fcat,
     gt_selection      TYPE /cgdc/t_bsel_values,
     gt_itm_src_fcat   TYPE lvc_t_fcat,
     gt_itm_src_ifcat  TYPE lvc_t_fcat.

DATA: gt_calc_hd_reprice TYPE TABLE OF /cgdc/_clrqhd.
DATA: gt_clrcn_old TYPE /cgdc/tt_clrqcn.

TYPES: BEGIN OF ts_coep_buffer,               "sFIN3.0
         vrgng      TYPE co_vorgang,
         orgvg      TYPE co_vorgang,
         perab      TYPE co_perab,                          "2870106
         kokrs      TYPE kokrs,                             "3068128
         belnr      TYPE co_belnr,                          "3068128
         t_coep     TYPE tt_coep,
         t_coep_add TYPE tt_coep_add.
TYPES: END OF ts_coep_buffer.
TYPES: tts_coep_buffer TYPE SORTED TABLE OF ts_coep_buffer WITH UNIQUE KEY orgvg vrgng perab "2870106
                                                                           kokrs belnr. "3068128

TYPES: BEGIN OF ts_coiob_buffer,              "sFIN3.0
         vrgng   TYPE co_vorgang,
         orgvg   TYPE co_orgvg,
         perab   TYPE co_perab,                             "2870106
         kokrs   TYPE kokrs,                                "3068128
         belnr   TYPE co_belnr,                             "3068128
         t_coiob TYPE tt_coiob.
TYPES: END OF ts_coiob_buffer.
TYPES: tts_coiob_buffer TYPE SORTED TABLE OF ts_coiob_buffer WITH UNIQUE KEY orgvg vrgng perab "2870106
                                                                             kokrs belnr.

DATA:
  g_max_error_severity TYPE sysubrc,
  gt_coep_buffer       TYPE tts_coep_buffer,
  gt_coiob_buffer      TYPE tts_coiob_buffer,
  g_objnr_for_messages TYPE j_objnr,
  g_msg_context_needed TYPE boole_d,
  g_wert_dat_used      TYPE co_valdt.
TYPES : t_tkasc_rt TYPE STANDARD TABLE OF tkasc_rt,
        t_cossa    TYPE STANDARD TABLE OF cossa,
        t_cospa    TYPE STANDARD TABLE OF cospa,
        t_periods  TYPE STANDARD TABLE OF periods,
        t_coiob    TYPE STANDARD TABLE OF coiob.

DATA: gt_messages      TYPE /cgdc/t_message,
      gs_messages      TYPE /cgdc/s_message,
      gt_messages_fcat TYPE TABLE OF lty_message.

DATA: gt_rtbppc TYPE TABLE OF /cgdc/t_rtbppc.

DATA: gt_post_rej_item_buf TYPE TABLE OF /cgdc/s_clrqit.
DATA: gs_clrit_org TYPE t_clrit_org.

DATA: gt_item_values TYPE TABLE OF s_item_val.
DATA: gt_item_postponed TYPE TABLE OF /cgdc/s_clrq_postpone.
DATA: gt_item_postponed_fcat TYPE TABLE OF /cgdc/s_clrq_postpone.
DATA: gt_clrqsrc    TYPE /cgdc/tt_clrq_cost_keys,
      gt_msg_return TYPE /cgdc/t_message.

DATA: gs_man_itm    TYPE /cgdc/s_clrqit_fcat,
      gv_rsncd_desc TYPE /cgdc/rtb_rsncd_desc.
DATA: gt_matnr_desc TYPE TABLE OF lty_matnr_desc.
DATA: gv_posid TYPE ps_posid.

DATA: gt_calc_group         TYPE /cgdc/tt_rtbpcg,
      gt_calc_group_fun     TYPE /cgdc/tt_rtbpcgf,
      gt_calc_group_fun_src TYPE /cgdc/tt_rtbpcgfc.

DATA: gt_release_item_fcat TYPE TABLE OF /cgdc/s_rtb_rlease_mit_fcat,
      go_release_itm_grid  TYPE REF TO cl_gui_alv_grid,
      go_release_itm_cont  TYPE REF TO cl_gui_custom_container.

FIELD-SYMBOLS : <gt_rel_itm_flds> TYPE table,
                <gt_rel_itm_data> TYPE table.

DATA: go_calc_grp_grid TYPE REF TO cl_gui_alv_grid,
      go_calc_grp_cont TYPE REF TO cl_gui_custom_container.
DATA : go_calc_grp_data      TYPE REF TO data,
       go_calc_grp_data_page TYPE REF TO data,
       gt_calc_grp_data      TYPE STANDARD TABLE OF /cgdc/s_calcgrp_fcat.
FIELD-SYMBOLS: <gt_calc_grp_data>      TYPE STANDARD TABLE,
               <gt_calc_grp_data_page> TYPE STANDARD TABLE.

TYPES : BEGIN OF lty_scrtext,
          check     TYPE char1,
          scrtext_m TYPE dfies-scrtext_m,
        END OF lty_scrtext.

DATA : gt_dfies                 TYPE TABLE OF dfies,
       gv_ent_flag              TYPE char1,
       gv_light                 TYPE icon_l2,
       gv_where                 TYPE string,
       gv_bi_where              TYPE string,
       gt_table                 TYPE TABLE OF lty_scrtext,
       gt_table1                TYPE TABLE OF lty_scrtext,
       gt_bill_pre_mod_rows     TYPE lvc_t_modi,
       gt_blk_bill_pre_mod_rows TYPE lvc_t_modi,
       gt_rej_itm_mod_rows      TYPE lvc_t_modi,
       gv_clrno                 TYPE /cgdc/clrqno,
       gv_clrit                 TYPE /cgdc/clrq_itmno.

TYPES: ty_kstar_range TYPE RANGE OF kstar.
TYPES: tt_kstar_range TYPE TABLE OF ty_kstar_range.

DATA: gt_reason_codes TYPE STANDARD TABLE OF /cgdc/t_rtbrpar,
      gt_clrqpit      TYPE /cgdc/tt_clrqpit.
*-scheduler
TYPES: BEGIN OF gs_final_items,
         vbeln TYPE vbeln_va,
         sgrpn TYPE /cgdc/rtbs_group,
         cline TYPE /cgdc/cline,
         posnr TYPE /cgdc/tt_posnr,
       END OF gs_final_items,
       BEGIN OF gs_mogrp_based_final_itms,
         vbeln TYPE vbeln_va,
         cogrp TYPE /cgdc/rrbs_cogrp,
         cline TYPE /cgdc/cline,
         posnr TYPE /cgdc/tt_posnr,
       END OF gs_mogrp_based_final_itms.
TYPES: BEGIN OF gs_next_date_per_group,
         group(8),
         next_date TYPE sy-datum,
       END OF gs_next_date_per_group.
DATA: gt_char_and_freq          TYPE TABLE OF /cgdc/t_rtbsc,
      gt_ogroup_char_and_freq   TYPE TABLE OF /cgdc/_rtbsogc,
      gt_doc_type_grp_mapping   TYPE TABLE OF /cgdc/t_rsdtmdtg,
      gt_cp_type_grp_mapping    TYPE TABLE OF /cgdc/t_rsctmctg,
      gt_chars_priority         TYPE TABLE OF /cgdc/t_rtbscp,
      gt_contract_itm_cf_data   TYPE TABLE OF /cgdc/cf_sd_it,
      gt_final_items            TYPE TABLE OF gs_final_items,
      gt_mogrp_based_final_itms TYPE TABLE OF gs_mogrp_based_final_itms,
      gt_group_clin_log         TYPE TABLE OF /cgdc/_rtbsgcl,
      gt_group_clin_log_old     TYPE TABLE OF /cgdc/_rtbsgcl,
      gt_group_log              TYPE TABLE OF /cgdc/_rtbsgl,
      gt_next_date_per_group    TYPE TABLE OF gs_next_date_per_group.

CONSTANTS: BEGIN OF gc_freq_type,
             daily    TYPE /cgdc/freq_type VALUE 'A',
             weekly   TYPE /cgdc/freq_type VALUE 'B',
             monthly  TYPE /cgdc/freq_type VALUE 'C',
             calendar TYPE /cgdc/freq_type VALUE '4',
           END OF gc_freq_type.

TYPES: BEGIN OF ty_src_data,
         /cgdc/rtbpn TYPE /cgdc/rtbpn,
         source      TYPE /cgdc/rtbsource,
         data        TYPE REF TO data,
       END OF ty_src_data,

       tt_src_data TYPE STANDARD TABLE OF ty_src_data.
DATA: gt_src_dyn TYPE TABLE OF ty_src_data.

DATA: gs_be_crhdr_buffer TYPE /cgdc/s_clrqhd, "" ++rpillai for BE
      gt_critm_bestat    TYPE /cgdc/tt_critmbestat, "" ++rpillai for BE
      gt_crbi_bestat     TYPE /cgdc/tt_crbibestat. ""++asadaphale for BE


DATA : gt_clrit_ref_fcat TYPE TABLE OF /cgdc/s_clrqit_ref_data_fcat.

DATA: go_calc_reqitm_ref_cont TYPE REF TO cl_gui_custom_container,
      go_calc_reqitm_ref_grid TYPE REF TO cl_gui_alv_grid.

DATA gt_bg_crt_keys TYPE TABLE OF /cgdc/s_clrqit_key.


TYPE-POOLS col.

TYPES : BEGIN OF gty_chdoc_h,           "Changelog structure for CLRQ header table
          fname     TYPE cdpos-fname,
          fieldtext TYPE char70,
          chngind   TYPE cdpos-chngind,
          tabname   TYPE cdpos-tabname,
          value_new TYPE cdpos-value_new,
          value_old TYPE cdpos-value_old,
          username  TYPE cdhdr-username,
          udate     TYPE cdhdr-udate,
          utime     TYPE cdhdr-utime,
          tcode     TYPE cdhdr-tcode,
          icon      TYPE icon_d,
          color     TYPE lvc_t_scol,
        END OF gty_chdoc_h,

        BEGIN OF gty_chdoc_bi,          "Changelog structure for CLRQ Billing Items table
          bill_item TYPE /cgdc/_clrqbi-bill_item,
          bitype    TYPE /cgdc/_clrqbi-bitype,
          fname     TYPE cdpos-fname,
          fieldtext TYPE char70,
          chngind   TYPE cdpos-chngind,
          tabname   TYPE cdpos-tabname,
          value_new TYPE cdpos-value_new,
          value_old TYPE cdpos-value_old,
          username  TYPE cdhdr-username,
          udate     TYPE cdhdr-udate,
          utime     TYPE cdhdr-utime,
          tcode     TYPE cdhdr-tcode,
          icon      TYPE icon_d,
          color     TYPE lvc_t_scol,
        END OF gty_chdoc_bi,

        BEGIN OF gty_chdoc_pt,        "Changelog structure for CLRQ Partners table
          clrit     TYPE /cgdc/_clrqpt-clrit,
          clrsit    TYPE /cgdc/_clrqpt-clrit,
          parvw     TYPE /cgdc/_clrqpt-parvw,
          fname     TYPE cdpos-fname,
          fieldtext TYPE char70,
          chngind   TYPE cdpos-chngind,
          tabname   TYPE cdpos-tabname,
          value_new TYPE cdpos-value_new,
          value_old TYPE cdpos-value_old,
          username  TYPE cdhdr-username,
          udate     TYPE cdhdr-udate,
          utime     TYPE cdhdr-utime,
          tcode     TYPE cdhdr-tcode,
          icon      TYPE icon_d,
          color     TYPE lvc_t_scol,
        END OF gty_chdoc_pt,

        BEGIN OF gty_chdoc_it,        "Changelog structure for CLRQ Items table
          clrit     TYPE /cgdc/_clrqit-clrit,
          clrsit    TYPE /cgdc/_clrqit-clrsit,
          clrdit    TYPE /cgdc/_clrqit-clrdit,
          fname     TYPE cdpos-fname,
          fieldtext TYPE char70,
          chngind   TYPE cdpos-chngind,
          tabname   TYPE cdpos-tabname,
          value_new TYPE cdpos-value_new,
          value_old TYPE cdpos-value_old,
          username  TYPE cdhdr-username,
          udate     TYPE cdhdr-udate,
          utime     TYPE cdhdr-utime,
          tcode     TYPE cdhdr-tcode,
          icon      TYPE icon_d,
          color     TYPE lvc_t_scol,
        END OF gty_chdoc_it,

        gty_tt_dfies TYPE TABLE OF dfies.


CONTROLS tc_chlog_tstrip TYPE TABSTRIP.

DATA:BEGIN OF gs_title_strip, "structure for change log tabs names with dynamic icons red/green
       header    TYPE c LENGTH 40,
       bill_item TYPE c LENGTH 40,
       pt        TYPE c LENGTH 40,
       it        TYPE c LENGTH 40,
       ic        TYPE c LENGTH 40,
     END OF gs_title_strip.

DATA : gv_okcode        TYPE syucomm,
       gv_chlog_act_scr TYPE sydynnr,
       gt_hdr_log       TYPE TABLE OF gty_chdoc_h,
       gt_bi_log        TYPE TABLE OF gty_chdoc_bi,
       gt_pt_log        TYPE TABLE OF gty_chdoc_pt,
       gt_it_log        TYPE TABLE OF gty_chdoc_it,
       gt_ic_log        TYPE TABLE OF gty_chdoc_it,
       gt_fcat_hdr_log  TYPE lvc_t_fcat,
       gt_fcat_bi_log   TYPE lvc_t_fcat,
       gt_fcat_pt_log   TYPE lvc_t_fcat,
       gt_fcat_it_log   TYPE lvc_t_fcat,
       gt_fcat_ic_log   TYPE lvc_t_fcat,
       go_ch_hdr_cont   TYPE REF TO cl_gui_custom_container,
       go_ch_hdr_alv    TYPE REF TO cl_gui_alv_grid,
       go_ch_bi_cont    TYPE REF TO cl_gui_custom_container,
       go_ch_bi_alv     TYPE REF TO cl_gui_alv_grid,
       go_ch_pt_cont    TYPE REF TO cl_gui_custom_container,
       go_ch_pt_alv     TYPE REF TO cl_gui_alv_grid,
       go_ch_it_cont    TYPE REF TO cl_gui_custom_container,
       go_ch_it_alv     TYPE REF TO cl_gui_alv_grid,
       go_ch_ic_cont    TYPE REF TO cl_gui_custom_container,
       go_ch_ic_alv     TYPE REF TO cl_gui_alv_grid,
       gv_ucomm         TYPE syucomm,
       gv_index         TYPE sy-index.

DATA: gt_crgr_komv TYPE komv_tab.

CONSTANTS : gc_x TYPE char1 VALUE 'X',

            BEGIN OF gc_chlog,
              ch_hdr  TYPE syucomm VALUE 'CH_HDR',
              ch_bi   TYPE syucomm VALUE 'CH_BI',
              ch_pt   TYPE syucomm VALUE 'CH_PT',
              ch_it   TYPE syucomm VALUE 'CH_IT',
              ch_ic   TYPE syucomm VALUE 'CH_IC',
              ch_yes  TYPE syucomm VALUE '/CGDC/OKAY',
              ch_no   TYPE syucomm VALUE '/CGDC/CANC',
              log_scr TYPE sydynnr VALUE '0902',
              hdr_scr TYPE sydynnr VALUE '0903',
              bi_scr  TYPE sydynnr VALUE '0904',
              pt_scr  TYPE sydynnr VALUE '0905',
              it_scr  TYPE sydynnr VALUE '0906',
              ic_scr  TYPE sydynnr VALUE '0907',
              t1      TYPE char2   VALUE 'T1',
              t2      TYPE char2   VALUE 'T2',
              t3      TYPE char2   VALUE 'T3',
              t4      TYPE char2   VALUE 'T4',
              t5      TYPE char2   VALUE 'T5',
            END OF gc_chlog.

DATA : gt_cnt_iflow TYPE TABLE OF /cgdc/cf_sd_it.

